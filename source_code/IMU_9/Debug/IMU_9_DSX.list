
IMU_9_DSX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141d8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  080143b8  080143b8  000153b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b10  08014b10  00016404  2**0
                  CONTENTS
  4 .ARM          00000008  08014b10  08014b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b18  08014b18  00016404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b18  08014b18  00015b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b1c  08014b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  08014b20  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa8  20000408  08014f24  00016408  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  200023b0  08014f24  000173b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016404  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027232  00000000  00000000  00016434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063a0  00000000  00000000  0003d666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f48  00000000  00000000  00043a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f3  00000000  00000000  00045950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c21  00000000  00000000  00047143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d505  00000000  00000000  0006cd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2652  00000000  00000000  0009a269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c8bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009704  00000000  00000000  0016c900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00176004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000408 	.word	0x20000408
 80001fc:	00000000 	.word	0x00000000
 8000200:	080143a0 	.word	0x080143a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000040c 	.word	0x2000040c
 800021c:	080143a0 	.word	0x080143a0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	4b2e      	ldr	r3, [pc, #184]	@ (8001124 <MX_GPIO_Init+0xd0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a2d      	ldr	r2, [pc, #180]	@ (8001124 <MX_GPIO_Init+0xd0>)
 8001070:	f043 0320 	orr.w	r3, r3, #32
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <MX_GPIO_Init+0xd0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f003 0320 	and.w	r3, r3, #32
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <MX_GPIO_Init+0xd0>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	4a27      	ldr	r2, [pc, #156]	@ (8001124 <MX_GPIO_Init+0xd0>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108e:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <MX_GPIO_Init+0xd0>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_GPIO_Init+0xd0>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <MX_GPIO_Init+0xd0>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_GPIO_Init+0xd0>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_GPIO_Init+0xd0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001124 <MX_GPIO_Init+0xd0>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_GPIO_Init+0xd0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_R_Pin|RGB_G_Pin|RGB_B_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2107      	movs	r1, #7
 80010ce:	4816      	ldr	r0, [pc, #88]	@ (8001128 <MX_GPIO_Init+0xd4>)
 80010d0:	f001 fad6 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2180      	movs	r1, #128	@ 0x80
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f001 fad0 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin;
 80010e0:	2307      	movs	r3, #7
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	480c      	ldr	r0, [pc, #48]	@ (8001128 <MX_GPIO_Init+0xd4>)
 80010f8:	f001 f940 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001116:	f001 f931 	bl	800237c <HAL_GPIO_Init>

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	@ 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	48000800 	.word	0x48000800

0800112c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_I2C1_Init+0x80>)
 8001132:	4a1f      	ldr	r2, [pc, #124]	@ (80011b0 <MX_I2C1_Init+0x84>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802172;
 8001136:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <MX_I2C1_Init+0x80>)
 8001138:	4a1e      	ldr	r2, [pc, #120]	@ (80011b4 <MX_I2C1_Init+0x88>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_I2C1_Init+0x80>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_I2C1_Init+0x80>)
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_I2C1_Init+0x80>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_I2C1_Init+0x80>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_I2C1_Init+0x80>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_I2C1_Init+0x80>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_I2C1_Init+0x80>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001166:	4811      	ldr	r0, [pc, #68]	@ (80011ac <MX_I2C1_Init+0x80>)
 8001168:	f001 fabc 	bl	80026e4 <HAL_I2C_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001172:	f000 f9a9 	bl	80014c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <MX_I2C1_Init+0x80>)
 800117a:	f002 f83f 	bl	80031fc <HAL_I2CEx_ConfigAnalogFilter>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001184:	f000 f9a0 	bl	80014c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	4808      	ldr	r0, [pc, #32]	@ (80011ac <MX_I2C1_Init+0x80>)
 800118c:	f002 f881 	bl	8003292 <HAL_I2CEx_ConfigDigitalFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 f997 	bl	80014c8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <MX_I2C1_Init+0x8c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4a06      	ldr	r2, [pc, #24]	@ (80011b8 <MX_I2C1_Init+0x8c>)
 80011a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011a4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000424 	.word	0x20000424
 80011b0:	40005400 	.word	0x40005400
 80011b4:	00802172 	.word	0x00802172
 80011b8:	40010000 	.word	0x40010000

080011bc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_I2C3_Init+0x80>)
 80011c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001240 <MX_I2C3_Init+0x84>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00802C78;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <MX_I2C3_Init+0x80>)
 80011c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <MX_I2C3_Init+0x88>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_I2C3_Init+0x80>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_I2C3_Init+0x80>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_I2C3_Init+0x80>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_I2C3_Init+0x80>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <MX_I2C3_Init+0x80>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_I2C3_Init+0x80>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_I2C3_Init+0x80>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011f6:	4811      	ldr	r0, [pc, #68]	@ (800123c <MX_I2C3_Init+0x80>)
 80011f8:	f001 fa74 	bl	80026e4 <HAL_I2C_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 f961 	bl	80014c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001206:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800120a:	480c      	ldr	r0, [pc, #48]	@ (800123c <MX_I2C3_Init+0x80>)
 800120c:	f001 fff6 	bl	80031fc <HAL_I2CEx_ConfigAnalogFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001216:	f000 f957 	bl	80014c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	4807      	ldr	r0, [pc, #28]	@ (800123c <MX_I2C3_Init+0x80>)
 800121e:	f002 f838 	bl	8003292 <HAL_I2CEx_ConfigDigitalFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001228:	f000 f94e 	bl	80014c8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C3);
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_I2C3_Init+0x8c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <MX_I2C3_Init+0x8c>)
 8001232:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001236:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000478 	.word	0x20000478
 8001240:	40007800 	.word	0x40007800
 8001244:	00802c78 	.word	0x00802c78
 8001248:	40010000 	.word	0x40010000

0800124c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b09e      	sub	sp, #120	@ 0x78
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	2244      	movs	r2, #68	@ 0x44
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f00f fa57 	bl	8010720 <memset>
  if(i2cHandle->Instance==I2C1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5b      	ldr	r2, [pc, #364]	@ (80013e4 <HAL_I2C_MspInit+0x198>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d154      	bne.n	8001326 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800127c:	2340      	movs	r3, #64	@ 0x40
 800127e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001280:	2300      	movs	r3, #0
 8001282:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	4618      	mov	r0, r3
 800128a:	f004 fb63 	bl	8005954 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001294:	f000 f918 	bl	80014c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	4a52      	ldr	r2, [pc, #328]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a4:	4b50      	ldr	r3, [pc, #320]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b4d      	ldr	r3, [pc, #308]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	4a4c      	ldr	r2, [pc, #304]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012bc:	4b4a      	ldr	r3, [pc, #296]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 80012c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ce:	2312      	movs	r3, #18
 80012d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012da:	2304      	movs	r3, #4
 80012dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e8:	f001 f848 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f0:	2312      	movs	r3, #18
 80012f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012fc:	2304      	movs	r3, #4
 80012fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001304:	4619      	mov	r1, r3
 8001306:	4839      	ldr	r0, [pc, #228]	@ (80013ec <HAL_I2C_MspInit+0x1a0>)
 8001308:	f001 f838 	bl	800237c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130c:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	4a35      	ldr	r2, [pc, #212]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 8001312:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001316:	6593      	str	r3, [r2, #88]	@ 0x58
 8001318:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001324:	e05a      	b.n	80013dc <HAL_I2C_MspInit+0x190>
  else if(i2cHandle->Instance==I2C3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a31      	ldr	r2, [pc, #196]	@ (80013f0 <HAL_I2C_MspInit+0x1a4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d155      	bne.n	80013dc <HAL_I2C_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001330:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001334:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001336:	2300      	movs	r3, #0
 8001338:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	4618      	mov	r0, r3
 8001340:	f004 fb08 	bl	8005954 <HAL_RCCEx_PeriphCLKConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_I2C_MspInit+0x102>
      Error_Handler();
 800134a:	f000 f8bd 	bl	80014c8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a25      	ldr	r2, [pc, #148]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AG_SDA_Pin;
 800137e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001382:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001384:	2312      	movs	r3, #18
 8001386:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001390:	2308      	movs	r3, #8
 8001392:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(AG_SDA_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001398:	4619      	mov	r1, r3
 800139a:	4816      	ldr	r0, [pc, #88]	@ (80013f4 <HAL_I2C_MspInit+0x1a8>)
 800139c:	f000 ffee 	bl	800237c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AG_SCL_Pin;
 80013a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a6:	2312      	movs	r3, #18
 80013a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80013b2:	2302      	movs	r3, #2
 80013b4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(AG_SCL_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c0:	f000 ffdc 	bl	800237c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c8:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 80013ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <HAL_I2C_MspInit+0x19c>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
}
 80013dc:	bf00      	nop
 80013de:	3778      	adds	r7, #120	@ 0x78
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40005400 	.word	0x40005400
 80013e8:	40021000 	.word	0x40021000
 80013ec:	48000400 	.word	0x48000400
 80013f0:	40007800 	.word	0x40007800
 80013f4:	48000800 	.word	0x48000800

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fc:	f000 fae1 	bl	80019c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001400:	f000 f817 	bl	8001432 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001404:	f7ff fe26 	bl	8001054 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001408:	f7ff fe90 	bl	800112c <MX_I2C1_Init>
  MX_I2C3_Init();
 800140c:	f7ff fed6 	bl	80011bc <MX_I2C3_Init>
  MX_TIM2_Init();
 8001410:	f000 f98e 	bl	8001730 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001414:	f000 f9fe 	bl	8001814 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001418:	f00a fbee 	bl	800bbf8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 800141c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001420:	f000 fb40 	bl	8001aa4 <HAL_Delay>
  user_shell_init();
 8001424:	f00d fbfe 	bl	800ec24 <user_shell_init>
  imu_init();
 8001428:	f00d fd6c 	bl	800ef04 <imu_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  imu_9_shell_cmd_to_do();
 800142c:	f00d fefe 	bl	800f22c <imu_9_shell_cmd_to_do>
 8001430:	e7fc      	b.n	800142c <main+0x34>

08001432 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b094      	sub	sp, #80	@ 0x50
 8001436:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	2238      	movs	r2, #56	@ 0x38
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f00f f96d 	bl	8010720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001454:	2000      	movs	r0, #0
 8001456:	f003 fc9b 	bl	8004d90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800145a:	2321      	movs	r3, #33	@ 0x21
 800145c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800145e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001468:	2302      	movs	r3, #2
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146c:	2303      	movs	r3, #3
 800146e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001470:	2306      	movs	r3, #6
 8001472:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001474:	2355      	movs	r3, #85	@ 0x55
 8001476:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001478:	2302      	movs	r3, #2
 800147a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001480:	2302      	movs	r3, #2
 8001482:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fd35 	bl	8004ef8 <HAL_RCC_OscConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001494:	f000 f818 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	230f      	movs	r3, #15
 800149a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149c:	2303      	movs	r3, #3
 800149e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2104      	movs	r1, #4
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 f833 	bl	800551c <HAL_RCC_ClockConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014bc:	f000 f804 	bl	80014c8 <Error_Handler>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3750      	adds	r7, #80	@ 0x50
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <Error_Handler+0x8>

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <HAL_MspInit+0x44>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	4a0e      	ldr	r2, [pc, #56]	@ (8001518 <HAL_MspInit+0x44>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <HAL_MspInit+0x44>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_MspInit+0x44>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_MspInit+0x44>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_MspInit+0x44>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800150a:	f003 fce5 	bl	8004ed8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <NMI_Handler+0x4>

08001524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <MemManage_Handler+0x4>

08001534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <UsageFault_Handler+0x4>

08001544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001572:	f000 fa79 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <USB_LP_IRQHandler+0x10>)
 8001582:	f001 ffc2 	bl	800350a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000128c 	.word	0x2000128c

08001590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <TIM2_IRQHandler+0x10>)
 8001596:	f004 fc8f 	bl	8005eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200004d0 	.word	0x200004d0

080015a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <USART1_IRQHandler+0x10>)
 80015aa:	f005 f9d5 	bl	8006958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000051c 	.word	0x2000051c

080015b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return 1;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_kill>:

int _kill(int pid, int sig)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015d2:	f00f f969 	bl	80108a8 <__errno>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2216      	movs	r2, #22
 80015da:	601a      	str	r2, [r3, #0]
  return -1;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_exit>:

void _exit (int status)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffe7 	bl	80015c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015fa:	bf00      	nop
 80015fc:	e7fd      	b.n	80015fa <_exit+0x12>

080015fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e00a      	b.n	8001626 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001610:	f3af 8000 	nop.w
 8001614:	4601      	mov	r1, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	60ba      	str	r2, [r7, #8]
 800161c:	b2ca      	uxtb	r2, r1
 800161e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	dbf0      	blt.n	8001610 <_read+0x12>
  }

  return len;
 800162e:	687b      	ldr	r3, [r7, #4]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001660:	605a      	str	r2, [r3, #4]
  return 0;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_isatty>:

int _isatty(int file)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a8:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <_sbrk+0x5c>)
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <_sbrk+0x60>)
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <_sbrk+0x64>)
 80016be:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <_sbrk+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d207      	bcs.n	80016e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d0:	f00f f8ea 	bl	80108a8 <__errno>
 80016d4:	4603      	mov	r3, r0
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	e009      	b.n	80016f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e6:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <_sbrk+0x64>)
 80016f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20008000 	.word	0x20008000
 8001700:	00000800 	.word	0x00000800
 8001704:	200004cc 	.word	0x200004cc
 8001708:	200023b0 	.word	0x200023b0

0800170c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <SystemInit+0x20>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001716:	4a05      	ldr	r2, [pc, #20]	@ (800172c <SystemInit+0x20>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <MX_TIM2_Init+0x98>)
 8001750:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001754:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <MX_TIM2_Init+0x98>)
 8001758:	22a9      	movs	r2, #169	@ 0xa9
 800175a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_TIM2_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <MX_TIM2_Init+0x98>)
 8001764:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001768:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <MX_TIM2_Init+0x98>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <MX_TIM2_Init+0x98>)
 8001772:	2280      	movs	r2, #128	@ 0x80
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001776:	4814      	ldr	r0, [pc, #80]	@ (80017c8 <MX_TIM2_Init+0x98>)
 8001778:	f004 fadc 	bl	8005d34 <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001782:	f7ff fea1 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	480d      	ldr	r0, [pc, #52]	@ (80017c8 <MX_TIM2_Init+0x98>)
 8001794:	f004 fce0 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800179e:	f7ff fe93 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	4806      	ldr	r0, [pc, #24]	@ (80017c8 <MX_TIM2_Init+0x98>)
 80017b0:	f004 ff2c 	bl	800660c <HAL_TIMEx_MasterConfigSynchronization>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017ba:	f7ff fe85 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200004d0 	.word	0x200004d0

080017cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017dc:	d113      	bne.n	8001806 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <HAL_TIM_Base_MspInit+0x44>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001810 <HAL_TIM_Base_MspInit+0x44>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ea:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <HAL_TIM_Base_MspInit+0x44>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	201c      	movs	r0, #28
 80017fc:	f000 fa4f 	bl	8001c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001800:	201c      	movs	r0, #28
 8001802:	f000 fa66 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001818:	4b22      	ldr	r3, [pc, #136]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800181a:	4a23      	ldr	r2, [pc, #140]	@ (80018a8 <MX_USART1_UART_Init+0x94>)
 800181c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001820:	4a22      	ldr	r2, [pc, #136]	@ (80018ac <MX_USART1_UART_Init+0x98>)
 8001822:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001824:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800182a:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001830:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001836:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001838:	220c      	movs	r2, #12
 800183a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183c:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001848:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800185a:	4812      	ldr	r0, [pc, #72]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800185c:	f004 ff9e 	bl	800679c <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001866:	f7ff fe2f 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186a:	2100      	movs	r1, #0
 800186c:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800186e:	f006 f93a 	bl	8007ae6 <HAL_UARTEx_SetTxFifoThreshold>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001878:	f7ff fe26 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800187c:	2100      	movs	r1, #0
 800187e:	4809      	ldr	r0, [pc, #36]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001880:	f006 f96f 	bl	8007b62 <HAL_UARTEx_SetRxFifoThreshold>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800188a:	f7ff fe1d 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001890:	f006 f8f0 	bl	8007a74 <HAL_UARTEx_DisableFifoMode>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800189a:	f7ff fe15 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000051c 	.word	0x2000051c
 80018a8:	40013800 	.word	0x40013800
 80018ac:	001e8480 	.word	0x001e8480

080018b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b09a      	sub	sp, #104	@ 0x68
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	2244      	movs	r2, #68	@ 0x44
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00e ff25 	bl	8010720 <memset>
  if(uartHandle->Instance==USART1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a23      	ldr	r2, [pc, #140]	@ (8001968 <HAL_UART_MspInit+0xb8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d13f      	bne.n	8001960 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 f831 	bl	8005954 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018f8:	f7ff fde6 	bl	80014c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_UART_MspInit+0xbc>)
 80018fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001900:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <HAL_UART_MspInit+0xbc>)
 8001902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001906:	6613      	str	r3, [r2, #96]	@ 0x60
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_UART_MspInit+0xbc>)
 800190a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_UART_MspInit+0xbc>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001918:	4a14      	ldr	r2, [pc, #80]	@ (800196c <HAL_UART_MspInit+0xbc>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_UART_MspInit+0xbc>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800192c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001930:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800193e:	2307      	movs	r3, #7
 8001940:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001946:	4619      	mov	r1, r3
 8001948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800194c:	f000 fd16 	bl	800237c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2101      	movs	r1, #1
 8001954:	2025      	movs	r0, #37	@ 0x25
 8001956:	f000 f9a2 	bl	8001c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800195a:	2025      	movs	r0, #37	@ 0x25
 800195c:	f000 f9b9 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001960:	bf00      	nop
 8001962:	3768      	adds	r7, #104	@ 0x68
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40013800 	.word	0x40013800
 800196c:	40021000 	.word	0x40021000

08001970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001970:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001972:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff feca 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <LoopForever+0x6>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	@ (80019b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <LoopForever+0xe>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	@ (80019bc <LoopForever+0x16>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f00e ff89 	bl	80108b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019a2:	f7ff fd29 	bl	80013f8 <main>

080019a6 <LoopForever>:

LoopForever:
    b LoopForever
 80019a6:	e7fe      	b.n	80019a6 <LoopForever>
  ldr   r0, =_estack
 80019a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 80019b4:	08014b20 	.word	0x08014b20
  ldr r2, =_sbss
 80019b8:	20000408 	.word	0x20000408
  ldr r4, =_ebss
 80019bc:	200023b0 	.word	0x200023b0

080019c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_2_IRQHandler>

080019c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019cc:	2003      	movs	r0, #3
 80019ce:	f000 f95b 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d2:	200f      	movs	r0, #15
 80019d4:	f000 f80e 	bl	80019f4 <HAL_InitTick>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	e001      	b.n	80019e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e4:	f7ff fd76 	bl	80014d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e8:	79fb      	ldrb	r3, [r7, #7]

}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <HAL_InitTick+0x68>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d022      	beq.n	8001a4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a08:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_InitTick+0x6c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <HAL_InitTick+0x68>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f966 	bl	8001cee <HAL_SYSTICK_Config>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10f      	bne.n	8001a48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	d809      	bhi.n	8001a42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	f04f 30ff 	mov.w	r0, #4294967295
 8001a36:	f000 f932 	bl	8001c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <HAL_InitTick+0x70>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e007      	b.n	8001a52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e004      	b.n	8001a52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	e001      	b.n	8001a52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_IncTick+0x1c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_IncTick+0x20>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a03      	ldr	r2, [pc, #12]	@ (8001a84 <HAL_IncTick+0x1c>)
 8001a78:	6013      	str	r3, [r2, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	200005b0 	.word	0x200005b0
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_GetTick+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	200005b0 	.word	0x200005b0

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff ffee 	bl	8001a8c <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d004      	beq.n	8001ac8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_Delay+0x40>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac8:	bf00      	nop
 8001aca:	f7ff ffdf 	bl	8001a8c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d8f7      	bhi.n	8001aca <HAL_Delay+0x26>
  {
  }
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	@ (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	@ (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	@ 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff29 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff40 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff90 	bl	8001bdc <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5f 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff33 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa4 	bl	8001c44 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d005      	beq.n	8001d2a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2204      	movs	r2, #4
 8001d22:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e037      	b.n	8001d9a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 020e 	bic.w	r2, r2, #14
 8001d38:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d48:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f003 021f 	and.w	r2, r3, #31
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d76:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00c      	beq.n	8001d9a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d8e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d98:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d00d      	beq.n	8001dec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e047      	b.n	8001e7c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 020e 	bic.w	r2, r2, #14
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	2101      	movs	r1, #1
 8001e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00c      	beq.n	8001e5c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
    }
  }
  return status;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <HAL_FLASH_Program+0xd0>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_FLASH_Program+0x1e>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e053      	b.n	8001f4e <HAL_FLASH_Program+0xc6>
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <HAL_FLASH_Program+0xd0>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001eac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eb0:	f000 f892 	bl	8001fd8 <FLASH_WaitForLastOperation>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d143      	bne.n	8001f46 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ebe:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <HAL_FLASH_Program+0xd0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001ec4:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <HAL_FLASH_Program+0xd4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ed0:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <HAL_FLASH_Program+0xd4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <HAL_FLASH_Program+0xd4>)
 8001ed6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001eda:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <HAL_FLASH_Program+0xd0>)
 8001ede:	2202      	movs	r2, #2
 8001ee0:	771a      	strb	r2, [r3, #28]
 8001ee2:	e002      	b.n	8001eea <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_FLASH_Program+0xd0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ef4:	68b8      	ldr	r0, [r7, #8]
 8001ef6:	f000 f8c1 	bl	800207c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001efa:	2301      	movs	r3, #1
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	e010      	b.n	8001f22 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d002      	beq.n	8001f0c <HAL_FLASH_Program+0x84>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d10a      	bne.n	8001f22 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	68b8      	ldr	r0, [r7, #8]
 8001f12:	f000 f8d9 	bl	80020c8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d102      	bne.n	8001f22 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001f1c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f20:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f26:	f000 f857 	bl	8001fd8 <FLASH_WaitForLastOperation>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_FLASH_Program+0xd4>)
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4907      	ldr	r1, [pc, #28]	@ (8001f5c <HAL_FLASH_Program+0xd4>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001f42:	f000 f9d1 	bl	80022e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f46:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <HAL_FLASH_Program+0xd0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000000c 	.word	0x2000000c
 8001f5c:	40022000 	.word	0x40022000

08001f60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <HAL_FLASH_Unlock+0x38>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da0b      	bge.n	8001f8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_FLASH_Unlock+0x38>)
 8001f74:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <HAL_FLASH_Unlock+0x3c>)
 8001f76:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <HAL_FLASH_Unlock+0x38>)
 8001f7a:	4a09      	ldr	r2, [pc, #36]	@ (8001fa0 <HAL_FLASH_Unlock+0x40>)
 8001f7c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_FLASH_Unlock+0x38>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da01      	bge.n	8001f8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	45670123 	.word	0x45670123
 8001fa0:	cdef89ab 	.word	0xcdef89ab

08001fa4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_FLASH_Lock+0x30>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4a08      	ldr	r2, [pc, #32]	@ (8001fd4 <HAL_FLASH_Lock+0x30>)
 8001fb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fb8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_FLASH_Lock+0x30>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	da01      	bge.n	8001fc6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40022000 	.word	0x40022000

08001fd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff fd54 	bl	8001a8c <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001fe6:	e009      	b.n	8001ffc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8001fe8:	f7ff fd50 	bl	8001a8c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d201      	bcs.n	8001ffc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e037      	b.n	800206c <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <FLASH_WaitForLastOperation+0x9c>)
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002008:	d0ee      	beq.n	8001fe8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800200a:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <FLASH_WaitForLastOperation+0x9c>)
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8002012:	4013      	ands	r3, r2
 8002014:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01d      	beq.n	8002058 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800201c:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <FLASH_WaitForLastOperation+0xa0>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
 8002024:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <FLASH_WaitForLastOperation+0xa0>)
 8002026:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202e:	d307      	bcc.n	8002040 <FLASH_WaitForLastOperation+0x68>
 8002030:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <FLASH_WaitForLastOperation+0x9c>)
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800203a:	490e      	ldr	r1, [pc, #56]	@ (8002074 <FLASH_WaitForLastOperation+0x9c>)
 800203c:	4313      	orrs	r3, r2
 800203e:	618b      	str	r3, [r1, #24]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d004      	beq.n	8002054 <FLASH_WaitForLastOperation+0x7c>
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <FLASH_WaitForLastOperation+0x9c>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002052:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e009      	b.n	800206c <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <FLASH_WaitForLastOperation+0x9c>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <FLASH_WaitForLastOperation+0x9c>)
 8002066:	2201      	movs	r2, #1
 8002068:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40022000 	.word	0x40022000
 8002078:	2000000c 	.word	0x2000000c

0800207c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <FLASH_Program_DoubleWord+0x48>)
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <FLASH_Program_DoubleWord+0x48>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800209a:	f3bf 8f6f 	isb	sy
}
 800209e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80020a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	000a      	movs	r2, r1
 80020ae:	2300      	movs	r3, #0
 80020b0:	68f9      	ldr	r1, [r7, #12]
 80020b2:	3104      	adds	r1, #4
 80020b4:	4613      	mov	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40022000 	.word	0x40022000

080020c8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80020d2:	2340      	movs	r3, #64	@ 0x40
 80020d4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80020de:	4b14      	ldr	r3, [pc, #80]	@ (8002130 <FLASH_Program_Fast+0x68>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4a13      	ldr	r2, [pc, #76]	@ (8002130 <FLASH_Program_Fast+0x68>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ea:	f3ef 8310 	mrs	r3, PRIMASK
 80020ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80020f0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80020f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80020f4:	b672      	cpsid	i
}
 80020f6:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	3304      	adds	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3304      	adds	r3, #4
 800210a:	617b      	str	r3, [r7, #20]
    row_index--;
 800210c:	7ffb      	ldrb	r3, [r7, #31]
 800210e:	3b01      	subs	r3, #1
 8002110:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8002112:	7ffb      	ldrb	r3, [r7, #31]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ef      	bne.n	80020f8 <FLASH_Program_Fast+0x30>
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f383 8810 	msr	PRIMASK, r3
}
 8002122:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002124:	bf00      	nop
 8002126:	3724      	adds	r7, #36	@ 0x24
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40022000 	.word	0x40022000

08002134 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800213e:	4b47      	ldr	r3, [pc, #284]	@ (800225c <HAL_FLASHEx_Erase+0x128>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_FLASHEx_Erase+0x16>
 8002146:	2302      	movs	r3, #2
 8002148:	e083      	b.n	8002252 <HAL_FLASHEx_Erase+0x11e>
 800214a:	4b44      	ldr	r3, [pc, #272]	@ (800225c <HAL_FLASHEx_Erase+0x128>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002150:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002154:	f7ff ff40 	bl	8001fd8 <FLASH_WaitForLastOperation>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d173      	bne.n	800224a <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002162:	4b3e      	ldr	r3, [pc, #248]	@ (800225c <HAL_FLASHEx_Erase+0x128>)
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002168:	4b3d      	ldr	r3, [pc, #244]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002174:	4b3a      	ldr	r3, [pc, #232]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002180:	4b37      	ldr	r3, [pc, #220]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a36      	ldr	r2, [pc, #216]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 8002186:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800218a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800218c:	4b33      	ldr	r3, [pc, #204]	@ (800225c <HAL_FLASHEx_Erase+0x128>)
 800218e:	2203      	movs	r2, #3
 8002190:	771a      	strb	r2, [r3, #28]
 8002192:	e016      	b.n	80021c2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002194:	4b31      	ldr	r3, [pc, #196]	@ (800225c <HAL_FLASHEx_Erase+0x128>)
 8002196:	2201      	movs	r2, #1
 8002198:	771a      	strb	r2, [r3, #28]
 800219a:	e012      	b.n	80021c2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800219c:	4b30      	ldr	r3, [pc, #192]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80021a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 80021ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021b2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <HAL_FLASHEx_Erase+0x128>)
 80021b6:	2202      	movs	r2, #2
 80021b8:	771a      	strb	r2, [r3, #28]
 80021ba:	e002      	b.n	80021c2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80021bc:	4b27      	ldr	r3, [pc, #156]	@ (800225c <HAL_FLASHEx_Erase+0x128>)
 80021be:	2200      	movs	r2, #0
 80021c0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d111      	bne.n	80021ee <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f848 	bl	8002264 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021d8:	f7ff fefe 	bl	8001fd8 <FLASH_WaitForLastOperation>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80021e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 80021e6:	f023 0304 	bic.w	r3, r3, #4
 80021ea:	6153      	str	r3, [r2, #20]
 80021ec:	e02b      	b.n	8002246 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	e01b      	b.n	8002236 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4619      	mov	r1, r3
 8002204:	68b8      	ldr	r0, [r7, #8]
 8002206:	f000 f84b 	bl	80022a0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800220a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800220e:	f7ff fee3 	bl	8001fd8 <FLASH_WaitForLastOperation>
 8002212:	4603      	mov	r3, r0
 8002214:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002216:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a11      	ldr	r2, [pc, #68]	@ (8002260 <HAL_FLASHEx_Erase+0x12c>)
 800221c:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8002220:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	601a      	str	r2, [r3, #0]
          break;
 800222e:	e00a      	b.n	8002246 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3301      	adds	r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4413      	add	r3, r2
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3db      	bcc.n	80021fe <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002246:	f000 f84f 	bl	80022e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800224a:	4b04      	ldr	r3, [pc, #16]	@ (800225c <HAL_FLASHEx_Erase+0x128>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]

  return status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000000c 	.word	0x2000000c
 8002260:	40022000 	.word	0x40022000

08002264 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <FLASH_MassErase+0x38>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4a08      	ldr	r2, [pc, #32]	@ (800229c <FLASH_MassErase+0x38>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <FLASH_MassErase+0x38>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4a05      	ldr	r2, [pc, #20]	@ (800229c <FLASH_MassErase+0x38>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228c:	6153      	str	r3, [r2, #20]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40022000 	.word	0x40022000

080022a0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <FLASH_PageErase+0x44>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f423 72fc 	bic.w	r2, r3, #504	@ 0x1f8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80022ba:	490a      	ldr	r1, [pc, #40]	@ (80022e4 <FLASH_PageErase+0x44>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <FLASH_PageErase+0x44>)
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <FLASH_PageErase+0x44>)
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <FLASH_PageErase+0x44>)
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <FLASH_PageErase+0x44>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d6:	6153      	str	r3, [r2, #20]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40022000 	.word	0x40022000

080022e8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80022ee:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <FLASH_FlushCaches+0x8c>)
 80022f0:	7f1b      	ldrb	r3, [r3, #28]
 80022f2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d002      	beq.n	8002300 <FLASH_FlushCaches+0x18>
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d117      	bne.n	8002330 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002300:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002306:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800230a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800230c:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a19      	ldr	r2, [pc, #100]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002312:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800231e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002322:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002324:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a13      	ldr	r2, [pc, #76]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800232e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d002      	beq.n	800233c <FLASH_FlushCaches+0x54>
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d111      	bne.n	8002360 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002342:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800234e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002352:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800235a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <FLASH_FlushCaches+0x8c>)
 8002362:	2200      	movs	r2, #0
 8002364:	771a      	strb	r2, [r3, #28]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	2000000c 	.word	0x2000000c
 8002378:	40022000 	.word	0x40022000

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800238a:	e15a      	b.n	8002642 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 814c 	beq.w	800263c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d005      	beq.n	80023bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d130      	bne.n	800241e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023f2:	2201      	movs	r2, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 0201 	and.w	r2, r3, #1
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b03      	cmp	r3, #3
 8002428:	d017      	beq.n	800245a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d123      	bne.n	80024ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	220f      	movs	r2, #15
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0203 	and.w	r2, r3, #3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80a6 	beq.w	800263c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <HAL_GPIO_Init+0x2e4>)
 80024f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002660 <HAL_GPIO_Init+0x2e4>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80024fc:	4b58      	ldr	r3, [pc, #352]	@ (8002660 <HAL_GPIO_Init+0x2e4>)
 80024fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002508:	4a56      	ldr	r2, [pc, #344]	@ (8002664 <HAL_GPIO_Init+0x2e8>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002532:	d01f      	beq.n	8002574 <HAL_GPIO_Init+0x1f8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a4c      	ldr	r2, [pc, #304]	@ (8002668 <HAL_GPIO_Init+0x2ec>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d019      	beq.n	8002570 <HAL_GPIO_Init+0x1f4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a4b      	ldr	r2, [pc, #300]	@ (800266c <HAL_GPIO_Init+0x2f0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_GPIO_Init+0x1f0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a4a      	ldr	r2, [pc, #296]	@ (8002670 <HAL_GPIO_Init+0x2f4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00d      	beq.n	8002568 <HAL_GPIO_Init+0x1ec>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a49      	ldr	r2, [pc, #292]	@ (8002674 <HAL_GPIO_Init+0x2f8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <HAL_GPIO_Init+0x1e8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a48      	ldr	r2, [pc, #288]	@ (8002678 <HAL_GPIO_Init+0x2fc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_GPIO_Init+0x1e4>
 800255c:	2305      	movs	r3, #5
 800255e:	e00a      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002560:	2306      	movs	r3, #6
 8002562:	e008      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002564:	2304      	movs	r3, #4
 8002566:	e006      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002568:	2303      	movs	r3, #3
 800256a:	e004      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 800256c:	2302      	movs	r3, #2
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002574:	2300      	movs	r3, #0
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	f002 0203 	and.w	r2, r2, #3
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	4093      	lsls	r3, r2
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002586:	4937      	ldr	r1, [pc, #220]	@ (8002664 <HAL_GPIO_Init+0x2e8>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002594:	4b39      	ldr	r3, [pc, #228]	@ (800267c <HAL_GPIO_Init+0x300>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b8:	4a30      	ldr	r2, [pc, #192]	@ (800267c <HAL_GPIO_Init+0x300>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025be:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <HAL_GPIO_Init+0x300>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025e2:	4a26      	ldr	r2, [pc, #152]	@ (800267c <HAL_GPIO_Init+0x300>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80025e8:	4b24      	ldr	r3, [pc, #144]	@ (800267c <HAL_GPIO_Init+0x300>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800260c:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <HAL_GPIO_Init+0x300>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002612:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <HAL_GPIO_Init+0x300>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002636:	4a11      	ldr	r2, [pc, #68]	@ (800267c <HAL_GPIO_Init+0x300>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f ae9d 	bne.w	800238c <HAL_GPIO_Init+0x10>
  }
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	48000400 	.word	0x48000400
 800266c:	48000800 	.word	0x48000800
 8002670:	48000c00 	.word	0x48000c00
 8002674:	48001000 	.word	0x48001000
 8002678:	48001400 	.word	0x48001400
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4013      	ands	r3, r2
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43d9      	mvns	r1, r3
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	400b      	ands	r3, r1
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e08d      	b.n	8002812 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fd9e 	bl	800124c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2224      	movs	r2, #36	@ 0x24
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002734:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002744:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	e006      	b.n	800276c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800276a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d108      	bne.n	8002786 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	e007      	b.n	8002796 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002794:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69d9      	ldr	r1, [r3, #28]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1a      	ldr	r2, [r3, #32]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	817b      	strh	r3, [r7, #10]
 800282e:	460b      	mov	r3, r1
 8002830:	813b      	strh	r3, [r7, #8]
 8002832:	4613      	mov	r3, r2
 8002834:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b20      	cmp	r3, #32
 8002840:	f040 80f9 	bne.w	8002a36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_I2C_Mem_Write+0x34>
 800284a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002856:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0ed      	b.n	8002a38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2C_Mem_Write+0x4e>
 8002866:	2302      	movs	r3, #2
 8002868:	e0e6      	b.n	8002a38 <HAL_I2C_Mem_Write+0x21c>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002872:	f7ff f90b 	bl	8001a8c <HAL_GetTick>
 8002876:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2319      	movs	r3, #25
 800287e:	2201      	movs	r2, #1
 8002880:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fac3 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0d1      	b.n	8002a38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2221      	movs	r2, #33	@ 0x21
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2240      	movs	r2, #64	@ 0x40
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a3a      	ldr	r2, [r7, #32]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028bc:	88f8      	ldrh	r0, [r7, #6]
 80028be:	893a      	ldrh	r2, [r7, #8]
 80028c0:	8979      	ldrh	r1, [r7, #10]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	4603      	mov	r3, r0
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f9d3 	bl	8002c78 <I2C_RequestMemoryWrite>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0a9      	b.n	8002a38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2bff      	cmp	r3, #255	@ 0xff
 80028ec:	d90e      	bls.n	800290c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	22ff      	movs	r2, #255	@ 0xff
 80028f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	8979      	ldrh	r1, [r7, #10]
 80028fc:	2300      	movs	r3, #0
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fc47 	bl	8003198 <I2C_TransferConfig>
 800290a:	e00f      	b.n	800292c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291a:	b2da      	uxtb	r2, r3
 800291c:	8979      	ldrh	r1, [r7, #10]
 800291e:	2300      	movs	r3, #0
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fc36 	bl	8003198 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fac6 	bl	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e07b      	b.n	8002a38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d034      	beq.n	80029e4 <HAL_I2C_Mem_Write+0x1c8>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d130      	bne.n	80029e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002988:	2200      	movs	r2, #0
 800298a:	2180      	movs	r1, #128	@ 0x80
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fa3f 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e04d      	b.n	8002a38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2bff      	cmp	r3, #255	@ 0xff
 80029a4:	d90e      	bls.n	80029c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22ff      	movs	r2, #255	@ 0xff
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	8979      	ldrh	r1, [r7, #10]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fbeb 	bl	8003198 <I2C_TransferConfig>
 80029c2:	e00f      	b.n	80029e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	8979      	ldrh	r1, [r7, #10]
 80029d6:	2300      	movs	r3, #0
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fbda 	bl	8003198 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d19e      	bne.n	800292c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 faac 	bl	8002f50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e01a      	b.n	8002a38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2220      	movs	r2, #32
 8002a08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <HAL_I2C_Mem_Write+0x224>)
 8002a16:	400b      	ands	r3, r1
 8002a18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	fe00e800 	.word	0xfe00e800

08002a44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	460b      	mov	r3, r1
 8002a58:	813b      	strh	r3, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	f040 80fd 	bne.w	8002c66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_I2C_Mem_Read+0x34>
 8002a72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0f1      	b.n	8002c68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Mem_Read+0x4e>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0ea      	b.n	8002c68 <HAL_I2C_Mem_Read+0x224>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fff7 	bl	8001a8c <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2319      	movs	r3, #25
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f9af 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0d5      	b.n	8002c68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2222      	movs	r2, #34	@ 0x22
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2240      	movs	r2, #64	@ 0x40
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a3a      	ldr	r2, [r7, #32]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ae4:	88f8      	ldrh	r0, [r7, #6]
 8002ae6:	893a      	ldrh	r2, [r7, #8]
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	4603      	mov	r3, r0
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f913 	bl	8002d20 <I2C_RequestMemoryRead>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0ad      	b.n	8002c68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2bff      	cmp	r3, #255	@ 0xff
 8002b14:	d90e      	bls.n	8002b34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	22ff      	movs	r2, #255	@ 0xff
 8002b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	4b52      	ldr	r3, [pc, #328]	@ (8002c70 <HAL_I2C_Mem_Read+0x22c>)
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fb33 	bl	8003198 <I2C_TransferConfig>
 8002b32:	e00f      	b.n	8002b54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	8979      	ldrh	r1, [r7, #10]
 8002b46:	4b4a      	ldr	r3, [pc, #296]	@ (8002c70 <HAL_I2C_Mem_Read+0x22c>)
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fb22 	bl	8003198 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f956 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e07c      	b.n	8002c68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d034      	beq.n	8002c14 <HAL_I2C_Mem_Read+0x1d0>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d130      	bne.n	8002c14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	@ 0x80
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f927 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e04d      	b.n	8002c68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2bff      	cmp	r3, #255	@ 0xff
 8002bd4:	d90e      	bls.n	8002bf4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	22ff      	movs	r2, #255	@ 0xff
 8002bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	8979      	ldrh	r1, [r7, #10]
 8002be4:	2300      	movs	r3, #0
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fad3 	bl	8003198 <I2C_TransferConfig>
 8002bf2:	e00f      	b.n	8002c14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	8979      	ldrh	r1, [r7, #10]
 8002c06:	2300      	movs	r3, #0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fac2 	bl	8003198 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d19a      	bne.n	8002b54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f994 	bl	8002f50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e01a      	b.n	8002c68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2220      	movs	r2, #32
 8002c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_I2C_Mem_Read+0x230>)
 8002c46:	400b      	ands	r3, r1
 8002c48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
  }
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	80002400 	.word	0x80002400
 8002c74:	fe00e800 	.word	0xfe00e800

08002c78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	817b      	strh	r3, [r7, #10]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	813b      	strh	r3, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	8979      	ldrh	r1, [r7, #10]
 8002c98:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <I2C_RequestMemoryWrite+0xa4>)
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fa79 	bl	8003198 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	69b9      	ldr	r1, [r7, #24]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f909 	bl	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e02c      	b.n	8002d14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc0:	893b      	ldrh	r3, [r7, #8]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cca:	e015      	b.n	8002cf8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f8ef 	bl	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e012      	b.n	8002d14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cee:	893b      	ldrh	r3, [r7, #8]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2180      	movs	r1, #128	@ 0x80
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f884 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	80002000 	.word	0x80002000

08002d20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	817b      	strh	r3, [r7, #10]
 8002d32:	460b      	mov	r3, r1
 8002d34:	813b      	strh	r3, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <I2C_RequestMemoryRead+0xa4>)
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2300      	movs	r3, #0
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fa26 	bl	8003198 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f8b6 	bl	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e02c      	b.n	8002dba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d66:	893b      	ldrh	r3, [r7, #8]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d70:	e015      	b.n	8002d9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d72:	893b      	ldrh	r3, [r7, #8]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f89c 	bl	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e012      	b.n	8002dba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2140      	movs	r1, #64	@ 0x40
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f831 	bl	8002e10 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	80002000 	.word	0x80002000

08002dc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d103      	bne.n	8002de6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d007      	beq.n	8002e04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	619a      	str	r2, [r3, #24]
  }
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e20:	e03b      	b.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	6839      	ldr	r1, [r7, #0]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f8d6 	bl	8002fd8 <I2C_IsErrorOccurred>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e041      	b.n	8002eba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d02d      	beq.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3e:	f7fe fe25 	bl	8001a8c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d122      	bne.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d113      	bne.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00f      	b.n	8002eba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	bf0c      	ite	eq
 8002eaa:	2301      	moveq	r3, #1
 8002eac:	2300      	movne	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d0b4      	beq.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ece:	e033      	b.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f87f 	bl	8002fd8 <I2C_IsErrorOccurred>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e031      	b.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d025      	beq.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eec:	f7fe fdce 	bl	8001a8c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d302      	bcc.n	8002f02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d11a      	bne.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d013      	beq.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e007      	b.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d1c4      	bne.n	8002ed0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f5c:	e02f      	b.n	8002fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f838 	bl	8002fd8 <I2C_IsErrorOccurred>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e02d      	b.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fe fd8b 	bl	8001a8c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d11a      	bne.n	8002fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	d013      	beq.n	8002fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e007      	b.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d1c8      	bne.n	8002f5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	d068      	beq.n	80030d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2210      	movs	r2, #16
 800300a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800300c:	e049      	b.n	80030a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d045      	beq.n	80030a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003016:	f7fe fd39 	bl	8001a8c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <I2C_IsErrorOccurred+0x54>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d13a      	bne.n	80030a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003036:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800303e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800304a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800304e:	d121      	bne.n	8003094 <I2C_IsErrorOccurred+0xbc>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003056:	d01d      	beq.n	8003094 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	2b20      	cmp	r3, #32
 800305c:	d01a      	beq.n	8003094 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800306c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800306e:	f7fe fd0d 	bl	8001a8c <HAL_GetTick>
 8003072:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003074:	e00e      	b.n	8003094 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003076:	f7fe fd09 	bl	8001a8c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b19      	cmp	r3, #25
 8003082:	d907      	bls.n	8003094 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	f043 0320 	orr.w	r3, r3, #32
 800308a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003092:	e006      	b.n	80030a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d1e9      	bne.n	8003076 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d003      	beq.n	80030b8 <I2C_IsErrorOccurred+0xe0>
 80030b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0aa      	beq.n	800300e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2220      	movs	r2, #32
 80030c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f043 0308 	orr.w	r3, r3, #8
 8003110:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800311a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00b      	beq.n	8003144 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800313c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01c      	beq.n	8003186 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7ff fe3b 	bl	8002dc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <I2C_IsErrorOccurred+0x1bc>)
 800315e:	400b      	ands	r3, r1
 8003160:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	431a      	orrs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003186:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800318a:	4618      	mov	r0, r3
 800318c:	3728      	adds	r7, #40	@ 0x28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	fe00e800 	.word	0xfe00e800

08003198 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	817b      	strh	r3, [r7, #10]
 80031a6:	4613      	mov	r3, r2
 80031a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031b0:	7a7b      	ldrb	r3, [r7, #9]
 80031b2:	041b      	lsls	r3, r3, #16
 80031b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	0d5b      	lsrs	r3, r3, #21
 80031d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80031d6:	4b08      	ldr	r3, [pc, #32]	@ (80031f8 <I2C_TransferConfig+0x60>)
 80031d8:	430b      	orrs	r3, r1
 80031da:	43db      	mvns	r3, r3
 80031dc:	ea02 0103 	and.w	r1, r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	03ff63ff 	.word	0x03ff63ff

080031fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b20      	cmp	r3, #32
 8003210:	d138      	bne.n	8003284 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800321c:	2302      	movs	r3, #2
 800321e:	e032      	b.n	8003286 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2224      	movs	r2, #36	@ 0x24
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800324e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d139      	bne.n	800331c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e033      	b.n	800331e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2224      	movs	r2, #36	@ 0x24
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	e000      	b.n	800331e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0c0      	b.n	80034be <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f008 fe65 	bl	800c020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2203      	movs	r2, #3
 800335a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f004 fca1 	bl	8007caa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e03e      	b.n	80033ec <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	3311      	adds	r3, #17
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	440b      	add	r3, r1
 8003390:	3310      	adds	r3, #16
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	3313      	adds	r3, #19
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	3320      	adds	r3, #32
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	3324      	adds	r3, #36	@ 0x24
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	3301      	adds	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	791b      	ldrb	r3, [r3, #4]
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d3bb      	bcc.n	800336e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
 80033fa:	e044      	b.n	8003486 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	440b      	add	r3, r1
 800340a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	440b      	add	r3, r1
 8003420:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	440b      	add	r3, r1
 800344c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	3301      	adds	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	791b      	ldrb	r3, [r3, #4]
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	429a      	cmp	r2, r3
 800348e:	d3b5      	bcc.n	80033fc <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	e893 0006 	ldmia.w	r3, {r1, r2}
 800349c:	f004 fc20 	bl	8007ce0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7a9b      	ldrb	r3, [r3, #10]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d102      	bne.n	80034bc <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 fc40 	bl	8004d3c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_PCD_Start+0x16>
 80034d8:	2302      	movs	r3, #2
 80034da:	e012      	b.n	8003502 <HAL_PCD_Start+0x3c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 fbc7 	bl	8007c7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f006 fe87 	bl	800a206 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f006 fe8c 	bl	800a234 <USB_ReadInterrupts>
 800351c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fb04 	bl	8003b36 <PCD_EP_ISR_Handler>

    return;
 800352e:	e110      	b.n	8003752 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003536:	2b00      	cmp	r3, #0
 8003538:	d013      	beq.n	8003562 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003542:	b29a      	uxth	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354c:	b292      	uxth	r2, r2
 800354e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f008 fdf5 	bl	800c142 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003558:	2100      	movs	r1, #0
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8fc 	bl	8003758 <HAL_PCD_SetAddress>

    return;
 8003560:	e0f7      	b.n	8003752 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00c      	beq.n	8003586 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003574:	b29a      	uxth	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800357e:	b292      	uxth	r2, r2
 8003580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003584:	e0e5      	b.n	8003752 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00c      	beq.n	80035aa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035a2:	b292      	uxth	r2, r2
 80035a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80035a8:	e0d3      	b.n	8003752 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d034      	beq.n	800361e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0204 	bic.w	r2, r2, #4
 80035c6:	b292      	uxth	r2, r2
 80035c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0208 	bic.w	r2, r2, #8
 80035de:	b292      	uxth	r2, r2
 80035e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035f6:	2100      	movs	r1, #0
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f008 ff95 	bl	800c528 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f008 fdd8 	bl	800c1b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800360c:	b29a      	uxth	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003616:	b292      	uxth	r2, r2
 8003618:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800361c:	e099      	b.n	8003752 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003624:	2b00      	cmp	r3, #0
 8003626:	d027      	beq.n	8003678 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0208 	orr.w	r2, r2, #8
 800363a:	b292      	uxth	r2, r2
 800363c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003652:	b292      	uxth	r2, r2
 8003654:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003660:	b29a      	uxth	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0204 	orr.w	r2, r2, #4
 800366a:	b292      	uxth	r2, r2
 800366c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f008 fd85 	bl	800c180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003676:	e06c      	b.n	8003752 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d040      	beq.n	8003704 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800368a:	b29a      	uxth	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003694:	b292      	uxth	r2, r2
 8003696:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d12b      	bne.n	80036fc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0204 	orr.w	r2, r2, #4
 80036b6:	b292      	uxth	r2, r2
 80036b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0208 	orr.w	r2, r2, #8
 80036ce:	b292      	uxth	r2, r2
 80036d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80036f2:	2101      	movs	r1, #1
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f008 ff17 	bl	800c528 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80036fa:	e02a      	b.n	8003752 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f008 fd3f 	bl	800c180 <HAL_PCD_SuspendCallback>
    return;
 8003702:	e026      	b.n	8003752 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00f      	beq.n	800372e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003720:	b292      	uxth	r2, r2
 8003722:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f008 fcfd 	bl	800c126 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800372c:	e011      	b.n	8003752 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003740:	b29a      	uxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800374a:	b292      	uxth	r2, r2
 800374c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003750:	bf00      	nop
  }
}
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_PCD_SetAddress+0x1a>
 800376e:	2302      	movs	r3, #2
 8003770:	e012      	b.n	8003798 <HAL_PCD_SetAddress+0x40>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f006 fd28 	bl	800a1de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	70fb      	strb	r3, [r7, #3]
 80037b2:	460b      	mov	r3, r1
 80037b4:	803b      	strh	r3, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da0e      	bge.n	80037e4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	f003 0207 	and.w	r2, r3, #7
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	3310      	adds	r3, #16
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	705a      	strb	r2, [r3, #1]
 80037e2:	e00e      	b.n	8003802 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 0207 	and.w	r2, r3, #7
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800380e:	883a      	ldrh	r2, [r7, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	78ba      	ldrb	r2, [r7, #2]
 8003818:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800381a:	78bb      	ldrb	r3, [r7, #2]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d102      	bne.n	8003826 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_PCD_EP_Open+0x94>
 8003830:	2302      	movs	r3, #2
 8003832:	e00e      	b.n	8003852 <HAL_PCD_EP_Open+0xb2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	4618      	mov	r0, r3
 8003844:	f004 fa6a 	bl	8007d1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003850:	7afb      	ldrb	r3, [r7, #11]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386a:	2b00      	cmp	r3, #0
 800386c:	da0e      	bge.n	800388c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 0207 	and.w	r2, r3, #7
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	3310      	adds	r3, #16
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	705a      	strb	r2, [r3, #1]
 800388a:	e00e      	b.n	80038aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	f003 0207 	and.w	r2, r3, #7
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_PCD_EP_Close+0x6a>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e00e      	b.n	80038e2 <HAL_PCD_EP_Close+0x88>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 fde6 	bl	80084a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	460b      	mov	r3, r1
 80038f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038fa:	7afb      	ldrb	r3, [r7, #11]
 80038fc:	f003 0207 	and.w	r2, r3, #7
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2200      	movs	r2, #0
 8003922:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800392a:	7afb      	ldrb	r3, [r7, #11]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	b2da      	uxtb	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	4618      	mov	r0, r3
 800393e:	f004 ff9e 	bl	800887e <USB_EPStartXfer>

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	f003 0207 	and.w	r2, r3, #7
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	440b      	add	r3, r1
 800396a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	460b      	mov	r3, r1
 800398a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398c:	7afb      	ldrb	r3, [r7, #11]
 800398e:	f003 0207 	and.w	r2, r3, #7
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	3310      	adds	r3, #16
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2201      	movs	r2, #1
 80039c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c8:	7afb      	ldrb	r3, [r7, #11]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6979      	ldr	r1, [r7, #20]
 80039da:	4618      	mov	r0, r3
 80039dc:	f004 ff4f 	bl	800887e <USB_EPStartXfer>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	7912      	ldrb	r2, [r2, #4]
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e03e      	b.n	8003a86 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0e      	bge.n	8003a2e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 0207 	and.w	r2, r3, #7
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	3310      	adds	r3, #16
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	705a      	strb	r2, [r3, #1]
 8003a2c:	e00c      	b.n	8003a48 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_PCD_EP_SetStall+0x7e>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e00e      	b.n	8003a86 <HAL_PCD_EP_SetStall+0x9c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f006 fab2 	bl	8009fe0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	7912      	ldrb	r2, [r2, #4]
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e040      	b.n	8003b2e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	da0e      	bge.n	8003ad2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 0207 	and.w	r2, r3, #7
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	3310      	adds	r3, #16
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	705a      	strb	r2, [r3, #1]
 8003ad0:	e00e      	b.n	8003af0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 0207 	and.w	r2, r3, #7
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_PCD_EP_ClrStall+0x82>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e00e      	b.n	8003b2e <HAL_PCD_EP_ClrStall+0xa0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68f9      	ldr	r1, [r7, #12]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f006 faaf 	bl	800a082 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b096      	sub	sp, #88	@ 0x58
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b3e:	e3ad      	b.n	800429c <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b48:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003b5a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f040 816f 	bne.w	8003e42 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d14c      	bne.n	8003c0a <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b80:	81fb      	strh	r3, [r7, #14]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	89fb      	ldrh	r3, [r7, #14]
 8003b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3310      	adds	r3, #16
 8003b98:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	441a      	add	r2, r3
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f008 fa8d 	bl	800c0f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7b1b      	ldrb	r3, [r3, #12]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 835c 	beq.w	800429c <PCD_EP_ISR_Handler+0x766>
 8003be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f040 8357 	bne.w	800429c <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7b1b      	ldrb	r3, [r3, #12]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	731a      	strb	r2, [r3, #12]
 8003c08:	e348      	b.n	800429c <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c10:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d032      	beq.n	8003c8e <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	4413      	add	r3, r2
 8003c42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c60:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f006 fb38 	bl	800a2d8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c74:	4013      	ands	r3, r2
 8003c76:	823b      	strh	r3, [r7, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	8a3a      	ldrh	r2, [r7, #16]
 8003c7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c82:	b292      	uxth	r2, r2
 8003c84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f008 fa06 	bl	800c098 <HAL_PCD_SetupStageCallback>
 8003c8c:	e306      	b.n	800429c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c8e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f280 8302 	bge.w	800429c <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	83fb      	strh	r3, [r7, #30]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	8bfa      	ldrh	r2, [r7, #30]
 8003cae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cb2:	b292      	uxth	r2, r2
 8003cb4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cdc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d019      	beq.n	8003d1a <PCD_EP_ISR_Handler+0x1e4>
 8003ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d015      	beq.n	8003d1a <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf4:	6959      	ldr	r1, [r3, #20]
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cfc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f006 faea 	bl	800a2d8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	441a      	add	r2, r3
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d12:	2100      	movs	r1, #0
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f008 f9d1 	bl	800c0bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 82b5 	bne.w	800429c <PCD_EP_ISR_Handler+0x766>
 8003d32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d36:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d3e:	f000 82ad 	beq.w	800429c <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	4413      	add	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	801a      	strh	r2, [r3, #0]
 8003d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d78:	d91d      	bls.n	8003db6 <PCD_EP_ISR_Handler+0x280>
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <PCD_EP_ISR_Handler+0x25e>
 8003d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d90:	3b01      	subs	r3, #1
 8003d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	029b      	lsls	r3, r3, #10
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	4313      	orrs	r3, r2
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e026      	b.n	8003e04 <PCD_EP_ISR_Handler+0x2ce>
 8003db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <PCD_EP_ISR_Handler+0x29e>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	e017      	b.n	8003e04 <PCD_EP_ISR_Handler+0x2ce>
 8003dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <PCD_EP_ISR_Handler+0x2b8>
 8003de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dea:	3301      	adds	r3, #1
 8003dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e14:	827b      	strh	r3, [r7, #18]
 8003e16:	8a7b      	ldrh	r3, [r7, #18]
 8003e18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003e1c:	827b      	strh	r3, [r7, #18]
 8003e1e:	8a7b      	ldrh	r3, [r7, #18]
 8003e20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e24:	827b      	strh	r3, [r7, #18]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	8a7b      	ldrh	r3, [r7, #18]
 8003e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	8013      	strh	r3, [r2, #0]
 8003e40:	e22c      	b.n	800429c <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e56:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f280 80f6 	bge.w	800404c <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e76:	4013      	ands	r3, r2
 8003e78:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003e8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e92:	b292      	uxth	r2, r2
 8003e94:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e96:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eae:	7b1b      	ldrb	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d123      	bne.n	8003efc <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003edc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 808e 	beq.w	8004002 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eec:	6959      	ldr	r1, [r3, #20]
 8003eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef0:	88da      	ldrh	r2, [r3, #6]
 8003ef2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ef6:	f006 f9ef 	bl	800a2d8 <USB_ReadPMA>
 8003efa:	e082      	b.n	8004002 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efe:	78db      	ldrb	r3, [r3, #3]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d10a      	bne.n	8003f1a <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f9d3 	bl	80042b8 <HAL_PCD_EP_DB_Receive>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003f18:	e073      	b.n	8004002 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f34:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	441a      	add	r2, r3
 8003f46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d022      	beq.n	8003fbe <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	4413      	add	r3, r2
 8003f92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f9c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003fa0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02c      	beq.n	8004002 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fae:	6959      	ldr	r1, [r3, #20]
 8003fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb2:	891a      	ldrh	r2, [r3, #8]
 8003fb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fb8:	f006 f98e 	bl	800a2d8 <USB_ReadPMA>
 8003fbc:	e021      	b.n	8004002 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003fe6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff4:	6959      	ldr	r1, [r3, #20]
 8003ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff8:	895a      	ldrh	r2, [r3, #10]
 8003ffa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ffe:	f006 f96b 	bl	800a2d8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800400a:	441a      	add	r2, r3
 800400c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004018:	441a      	add	r2, r3
 800401a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800401e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <PCD_EP_ISR_Handler+0x4fc>
 8004026:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800402a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	429a      	cmp	r2, r3
 8004030:	d206      	bcs.n	8004040 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f008 f83f 	bl	800c0bc <HAL_PCD_DataOutStageCallback>
 800403e:	e005      	b.n	800404c <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004046:	4618      	mov	r0, r3
 8004048:	f004 fc19 	bl	800887e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800404c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8121 	beq.w	800429c <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800405a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	3310      	adds	r3, #16
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004088:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800409e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80040aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ac:	78db      	ldrb	r3, [r3, #3]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	f040 80a2 	bne.w	80041f8 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80040b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b6:	2200      	movs	r2, #0
 80040b8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80040ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040bc:	7b1b      	ldrb	r3, [r3, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8093 	beq.w	80041ea <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d046      	beq.n	800415e <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d126      	bne.n	8004126 <PCD_EP_ISR_Handler+0x5f0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	4413      	add	r3, r2
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	00da      	lsls	r2, r3, #3
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	4413      	add	r3, r2
 80040fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040fe:	623b      	str	r3, [r7, #32]
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800410a:	b29a      	uxth	r2, r3
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411e:	b29a      	uxth	r2, r3
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	e061      	b.n	80041ea <PCD_EP_ISR_Handler+0x6b4>
 8004126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d15d      	bne.n	80041ea <PCD_EP_ISR_Handler+0x6b4>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800413c:	b29b      	uxth	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004142:	4413      	add	r3, r2
 8004144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	00da      	lsls	r2, r3, #3
 800414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414e:	4413      	add	r3, r2
 8004150:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004158:	2200      	movs	r2, #0
 800415a:	801a      	strh	r2, [r3, #0]
 800415c:	e045      	b.n	80041ea <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004166:	785b      	ldrb	r3, [r3, #1]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d126      	bne.n	80041ba <PCD_EP_ISR_Handler+0x684>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800417a:	b29b      	uxth	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004180:	4413      	add	r3, r2
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
 8004184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	00da      	lsls	r2, r3, #3
 800418a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418c:	4413      	add	r3, r2
 800418e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004192:	633b      	str	r3, [r7, #48]	@ 0x30
 8004194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800419e:	b29a      	uxth	r2, r3
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	801a      	strh	r2, [r3, #0]
 80041a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	801a      	strh	r2, [r3, #0]
 80041b8:	e017      	b.n	80041ea <PCD_EP_ISR_Handler+0x6b4>
 80041ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d113      	bne.n	80041ea <PCD_EP_ISR_Handler+0x6b4>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d0:	4413      	add	r3, r2
 80041d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	00da      	lsls	r2, r3, #3
 80041da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041dc:	4413      	add	r3, r2
 80041de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e6:	2200      	movs	r2, #0
 80041e8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f007 ff7e 	bl	800c0f2 <HAL_PCD_DataInStageCallback>
 80041f6:	e051      	b.n	800429c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80041f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d144      	bne.n	800428e <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800420c:	b29b      	uxth	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	4413      	add	r3, r2
 800421e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004228:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800422c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004234:	429a      	cmp	r2, r3
 8004236:	d907      	bls.n	8004248 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423a:	699a      	ldr	r2, [r3, #24]
 800423c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004240:	1ad2      	subs	r2, r2, r3
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	619a      	str	r2, [r3, #24]
 8004246:	e002      	b.n	800424e <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424a:	2200      	movs	r2, #0
 800424c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800424e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f007 ff48 	bl	800c0f2 <HAL_PCD_DataInStageCallback>
 8004262:	e01b      	b.n	800429c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800426c:	441a      	add	r2, r3
 800426e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004270:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800427a:	441a      	add	r2, r3
 800427c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004286:	4618      	mov	r0, r3
 8004288:	f004 faf9 	bl	800887e <USB_EPStartXfer>
 800428c:	e006      	b.n	800429c <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800428e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004292:	461a      	mov	r2, r3
 8004294:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f917 	bl	80044ca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	b21b      	sxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f6ff ac49 	blt.w	8003b40 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3758      	adds	r7, #88	@ 0x58
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d07c      	beq.n	80043ca <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d8:	b29b      	uxth	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	4413      	add	r3, r2
 80042ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	8b7b      	ldrh	r3, [r7, #26]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d306      	bcc.n	800430e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	8b7b      	ldrh	r3, [r7, #26]
 8004306:	1ad2      	subs	r2, r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	619a      	str	r2, [r3, #24]
 800430c:	e002      	b.n	8004314 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d123      	bne.n	8004364 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004336:	833b      	strh	r3, [r7, #24]
 8004338:	8b3b      	ldrh	r3, [r7, #24]
 800433a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800433e:	833b      	strh	r3, [r7, #24]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	8b3b      	ldrh	r3, [r7, #24]
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800435c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01f      	beq.n	80043ae <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004388:	82fb      	strh	r3, [r7, #22]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	8afb      	ldrh	r3, [r7, #22]
 800439a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800439e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043ae:	8b7b      	ldrh	r3, [r7, #26]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8085 	beq.w	80044c0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6959      	ldr	r1, [r3, #20]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	891a      	ldrh	r2, [r3, #8]
 80043c2:	8b7b      	ldrh	r3, [r7, #26]
 80043c4:	f005 ff88 	bl	800a2d8 <USB_ReadPMA>
 80043c8:	e07a      	b.n	80044c0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	4413      	add	r3, r2
 80043e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	8b7b      	ldrh	r3, [r7, #26]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d306      	bcc.n	8004408 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	8b7b      	ldrh	r3, [r7, #26]
 8004400:	1ad2      	subs	r2, r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	619a      	str	r2, [r3, #24]
 8004406:	e002      	b.n	800440e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d123      	bne.n	800445e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800442c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004430:	83fb      	strh	r3, [r7, #30]
 8004432:	8bfb      	ldrh	r3, [r7, #30]
 8004434:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004438:	83fb      	strh	r3, [r7, #30]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	441a      	add	r2, r3
 8004448:	8bfb      	ldrh	r3, [r7, #30]
 800444a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800444e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800445a:	b29b      	uxth	r3, r3
 800445c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d11f      	bne.n	80044a8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800447e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004482:	83bb      	strh	r3, [r7, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	8bbb      	ldrh	r3, [r7, #28]
 8004494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800449c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044a8:	8b7b      	ldrh	r3, [r7, #26]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	6959      	ldr	r1, [r3, #20]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	895a      	ldrh	r2, [r3, #10]
 80044ba:	8b7b      	ldrh	r3, [r7, #26]
 80044bc:	f005 ff0c 	bl	800a2d8 <USB_ReadPMA>
    }
  }

  return count;
 80044c0:	8b7b      	ldrh	r3, [r7, #26]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b0a4      	sub	sp, #144	@ 0x90
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	4613      	mov	r3, r2
 80044d6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 81db 	beq.w	800489a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004508:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004514:	429a      	cmp	r2, r3
 8004516:	d907      	bls.n	8004528 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004520:	1ad2      	subs	r2, r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	619a      	str	r2, [r3, #24]
 8004526:	e002      	b.n	800452e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 80b9 	bne.w	80046aa <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d126      	bne.n	800458e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004554:	4413      	add	r3, r2
 8004556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	00da      	lsls	r2, r3, #3
 800455e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004560:	4413      	add	r3, r2
 8004562:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004572:	b29a      	uxth	r2, r3
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	801a      	strh	r2, [r3, #0]
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004586:	b29a      	uxth	r2, r3
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	e01a      	b.n	80045c4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d116      	bne.n	80045c4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045aa:	4413      	add	r3, r2
 80045ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	00da      	lsls	r2, r3, #3
 80045b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b6:	4413      	add	r3, r2
 80045b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	2200      	movs	r2, #0
 80045c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d126      	bne.n	8004620 <HAL_PCD_EP_DB_Transmit+0x156>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	4413      	add	r3, r2
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	00da      	lsls	r2, r3, #3
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004604:	b29a      	uxth	r2, r3
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004618:	b29a      	uxth	r2, r3
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	e017      	b.n	8004650 <HAL_PCD_EP_DB_Transmit+0x186>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	785b      	ldrb	r3, [r3, #1]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d113      	bne.n	8004650 <HAL_PCD_EP_DB_Transmit+0x186>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004630:	b29b      	uxth	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	4413      	add	r3, r2
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	00da      	lsls	r2, r3, #3
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	4413      	add	r3, r2
 8004644:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	2200      	movs	r2, #0
 800464e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	4619      	mov	r1, r3
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f007 fd4b 	bl	800c0f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 82fa 	beq.w	8004c5c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004682:	82fb      	strh	r3, [r7, #22]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	8afb      	ldrh	r3, [r7, #22]
 8004694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800469c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	8013      	strh	r3, [r2, #0]
 80046a8:	e2d8      	b.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d021      	beq.n	80046f8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ce:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80046e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046fe:	2b01      	cmp	r3, #1
 8004700:	f040 82ac 	bne.w	8004c5c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800470c:	441a      	add	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800471a:	441a      	add	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	429a      	cmp	r2, r3
 800472a:	d30b      	bcc.n	8004744 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800473c:	1ad2      	subs	r2, r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	621a      	str	r2, [r3, #32]
 8004742:	e017      	b.n	8004774 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d108      	bne.n	800475e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800474c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800475c:	e00a      	b.n	8004774 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2200      	movs	r2, #0
 8004772:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d165      	bne.n	8004848 <HAL_PCD_EP_DB_Transmit+0x37e>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004790:	4413      	add	r3, r2
 8004792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	00da      	lsls	r2, r3, #3
 800479a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479c:	4413      	add	r3, r2
 800479e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80047ba:	d91d      	bls.n	80047f8 <HAL_PCD_EP_DB_Transmit+0x32e>
 80047bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <HAL_PCD_EP_DB_Transmit+0x30c>
 80047d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d2:	3b01      	subs	r3, #1
 80047d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047de:	b29b      	uxth	r3, r3
 80047e0:	029b      	lsls	r3, r3, #10
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4313      	orrs	r3, r2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e044      	b.n	8004882 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80047f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480e:	b29a      	uxth	r2, r3
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	e035      	b.n	8004882 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_PCD_EP_DB_Transmit+0x366>
 800482a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800482c:	3301      	adds	r3, #1
 800482e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29a      	uxth	r2, r3
 8004836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004838:	b29b      	uxth	r3, r3
 800483a:	029b      	lsls	r3, r3, #10
 800483c:	b29b      	uxth	r3, r3
 800483e:	4313      	orrs	r3, r2
 8004840:	b29a      	uxth	r2, r3
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	e01c      	b.n	8004882 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d118      	bne.n	8004882 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	647b      	str	r3, [r7, #68]	@ 0x44
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800485e:	b29b      	uxth	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004864:	4413      	add	r3, r2
 8004866:	647b      	str	r3, [r7, #68]	@ 0x44
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	00da      	lsls	r2, r3, #3
 800486e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004870:	4413      	add	r3, r2
 8004872:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004876:	643b      	str	r3, [r7, #64]	@ 0x40
 8004878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487c:	b29a      	uxth	r2, r3
 800487e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004880:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6959      	ldr	r1, [r3, #20]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	891a      	ldrh	r2, [r3, #8]
 800488e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004892:	b29b      	uxth	r3, r3
 8004894:	f005 fcde 	bl	800a254 <USB_WritePMA>
 8004898:	e1e0      	b.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048be:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d307      	bcc.n	80048de <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048d6:	1ad2      	subs	r2, r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	619a      	str	r2, [r3, #24]
 80048dc:	e002      	b.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2200      	movs	r2, #0
 80048e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f040 80c0 	bne.w	8004a6e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d126      	bne.n	8004944 <HAL_PCD_EP_DB_Transmit+0x47a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004904:	b29b      	uxth	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800490a:	4413      	add	r3, r2
 800490c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	00da      	lsls	r2, r3, #3
 8004914:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004916:	4413      	add	r3, r2
 8004918:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800491c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800491e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004928:	b29a      	uxth	r2, r3
 800492a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493c:	b29a      	uxth	r2, r3
 800493e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004940:	801a      	strh	r2, [r3, #0]
 8004942:	e01a      	b.n	800497a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d116      	bne.n	800497a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	667b      	str	r3, [r7, #100]	@ 0x64
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004960:	4413      	add	r3, r2
 8004962:	667b      	str	r3, [r7, #100]	@ 0x64
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	00da      	lsls	r2, r3, #3
 800496a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800496c:	4413      	add	r3, r2
 800496e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004972:	663b      	str	r3, [r7, #96]	@ 0x60
 8004974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004976:	2200      	movs	r2, #0
 8004978:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d12b      	bne.n	80049e0 <HAL_PCD_EP_DB_Transmit+0x516>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004996:	b29b      	uxth	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800499c:	4413      	add	r3, r2
 800499e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	00da      	lsls	r2, r3, #3
 80049a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049a8:	4413      	add	r3, r2
 80049aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049be:	b29a      	uxth	r2, r3
 80049c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049c4:	801a      	strh	r2, [r3, #0]
 80049c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	e017      	b.n	8004a10 <HAL_PCD_EP_DB_Transmit+0x546>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d113      	bne.n	8004a10 <HAL_PCD_EP_DB_Transmit+0x546>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049f6:	4413      	add	r3, r2
 80049f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	00da      	lsls	r2, r3, #3
 8004a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a02:	4413      	add	r3, r2
 8004a04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a08:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	4619      	mov	r1, r3
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f007 fb6b 	bl	800c0f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 811a 	bne.w	8004c5c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a42:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	441a      	add	r2, r3
 8004a54:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	8013      	strh	r3, [r2, #0]
 8004a6c:	e0f6      	b.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d121      	bne.n	8004abc <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a92:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004aa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	f040 80ca 	bne.w	8004c5c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ad0:	441a      	add	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ade:	441a      	add	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6a1a      	ldr	r2, [r3, #32]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d30b      	bcc.n	8004b08 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b00:	1ad2      	subs	r2, r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	621a      	str	r2, [r3, #32]
 8004b06:	e017      	b.n	8004b38 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d108      	bne.n	8004b22 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004b10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004b20:	e00a      	b.n	8004b38 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	785b      	ldrb	r3, [r3, #1]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d165      	bne.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x748>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b5a:	4413      	add	r3, r2
 8004b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	00da      	lsls	r2, r3, #3
 8004b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b66:	4413      	add	r3, r2
 8004b68:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b82:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b84:	d91d      	bls.n	8004bc2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b92:	f003 031f 	and.w	r3, r3, #31
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004b9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	029b      	lsls	r3, r3, #10
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	e041      	b.n	8004c46 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <HAL_PCD_EP_DB_Transmit+0x716>
 8004bca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	e032      	b.n	8004c46 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_PCD_EP_DB_Transmit+0x730>
 8004bf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	029b      	lsls	r3, r3, #10
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	e019      	b.n	8004c46 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d115      	bne.n	8004c46 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c28:	4413      	add	r3, r2
 8004c2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	00da      	lsls	r2, r3, #3
 8004c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c34:	4413      	add	r3, r2
 8004c36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c44:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6959      	ldr	r1, [r3, #20]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	895a      	ldrh	r2, [r3, #10]
 8004c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f005 fafc 	bl	800a254 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c76:	82bb      	strh	r3, [r7, #20]
 8004c78:	8abb      	ldrh	r3, [r7, #20]
 8004c7a:	f083 0310 	eor.w	r3, r3, #16
 8004c7e:	82bb      	strh	r3, [r7, #20]
 8004c80:	8abb      	ldrh	r3, [r7, #20]
 8004c82:	f083 0320 	eor.w	r3, r3, #32
 8004c86:	82bb      	strh	r3, [r7, #20]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	8abb      	ldrh	r3, [r7, #20]
 8004c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3790      	adds	r7, #144	@ 0x90
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b087      	sub	sp, #28
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	817b      	strh	r3, [r7, #10]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004cc8:	897b      	ldrh	r3, [r7, #10]
 8004cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00b      	beq.n	8004cec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cd4:	897b      	ldrh	r3, [r7, #10]
 8004cd6:	f003 0207 	and.w	r2, r3, #7
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	3310      	adds	r3, #16
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e009      	b.n	8004d00 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cec:	897a      	ldrh	r2, [r7, #10]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d00:	893b      	ldrh	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d107      	bne.n	8004d16 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	80da      	strh	r2, [r3, #6]
 8004d14:	e00b      	b.n	8004d2e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	0c1b      	lsrs	r3, r3, #16
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f043 0302 	orr.w	r3, r3, #2
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d141      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004daa:	d131      	bne.n	8004e10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dac:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004db2:	4a46      	ldr	r2, [pc, #280]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dbc:	4b43      	ldr	r3, [pc, #268]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dc4:	4a41      	ldr	r2, [pc, #260]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dcc:	4b40      	ldr	r3, [pc, #256]	@ (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2232      	movs	r2, #50	@ 0x32
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	0c9b      	lsrs	r3, r3, #18
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de2:	e002      	b.n	8004dea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dea:	4b38      	ldr	r3, [pc, #224]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df6:	d102      	bne.n	8004dfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f2      	bne.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dfe:	4b33      	ldr	r3, [pc, #204]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0a:	d158      	bne.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e057      	b.n	8004ec0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e10:	4b2e      	ldr	r3, [pc, #184]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e16:	4a2d      	ldr	r2, [pc, #180]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e20:	e04d      	b.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e28:	d141      	bne.n	8004eae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e2a:	4b28      	ldr	r3, [pc, #160]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e36:	d131      	bne.n	8004e9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e38:	4b24      	ldr	r3, [pc, #144]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e3e:	4a23      	ldr	r2, [pc, #140]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e48:	4b20      	ldr	r3, [pc, #128]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e50:	4a1e      	ldr	r2, [pc, #120]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2232      	movs	r2, #50	@ 0x32
 8004e5e:	fb02 f303 	mul.w	r3, r2, r3
 8004e62:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	0c9b      	lsrs	r3, r3, #18
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e6e:	e002      	b.n	8004e76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e76:	4b15      	ldr	r3, [pc, #84]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e82:	d102      	bne.n	8004e8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f2      	bne.n	8004e70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e8a:	4b10      	ldr	r3, [pc, #64]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e96:	d112      	bne.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e011      	b.n	8004ec0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004eac:	e007      	b.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eae:	4b07      	ldr	r3, [pc, #28]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004eb6:	4a05      	ldr	r2, [pc, #20]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ebc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	20000000 	.word	0x20000000
 8004ed4:	431bde83 	.word	0x431bde83

08004ed8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4a04      	ldr	r2, [pc, #16]	@ (8004ef4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ee2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ee6:	6093      	str	r3, [r2, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40007000 	.word	0x40007000

08004ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e2fe      	b.n	8005508 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d075      	beq.n	8005002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f16:	4b97      	ldr	r3, [pc, #604]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f20:	4b94      	ldr	r3, [pc, #592]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	d102      	bne.n	8004f36 <HAL_RCC_OscConfig+0x3e>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d002      	beq.n	8004f3c <HAL_RCC_OscConfig+0x44>
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d10b      	bne.n	8004f54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f3c:	4b8d      	ldr	r3, [pc, #564]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d05b      	beq.n	8005000 <HAL_RCC_OscConfig+0x108>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d157      	bne.n	8005000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e2d9      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5c:	d106      	bne.n	8004f6c <HAL_RCC_OscConfig+0x74>
 8004f5e:	4b85      	ldr	r3, [pc, #532]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a84      	ldr	r2, [pc, #528]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	e01d      	b.n	8004fa8 <HAL_RCC_OscConfig+0xb0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCC_OscConfig+0x98>
 8004f76:	4b7f      	ldr	r3, [pc, #508]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	4b7c      	ldr	r3, [pc, #496]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a7b      	ldr	r2, [pc, #492]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e00b      	b.n	8004fa8 <HAL_RCC_OscConfig+0xb0>
 8004f90:	4b78      	ldr	r3, [pc, #480]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a77      	ldr	r2, [pc, #476]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	4b75      	ldr	r3, [pc, #468]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a74      	ldr	r2, [pc, #464]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d013      	beq.n	8004fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fc fd6c 	bl	8001a8c <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb8:	f7fc fd68 	bl	8001a8c <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	@ 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e29e      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fca:	4b6a      	ldr	r3, [pc, #424]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0xc0>
 8004fd6:	e014      	b.n	8005002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fc fd58 	bl	8001a8c <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fc fd54 	bl	8001a8c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	@ 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e28a      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ff2:	4b60      	ldr	r3, [pc, #384]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0xe8>
 8004ffe:	e000      	b.n	8005002 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d075      	beq.n	80050fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500e:	4b59      	ldr	r3, [pc, #356]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005018:	4b56      	ldr	r3, [pc, #344]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b0c      	cmp	r3, #12
 8005026:	d102      	bne.n	800502e <HAL_RCC_OscConfig+0x136>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d002      	beq.n	8005034 <HAL_RCC_OscConfig+0x13c>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b04      	cmp	r3, #4
 8005032:	d11f      	bne.n	8005074 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005034:	4b4f      	ldr	r3, [pc, #316]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_OscConfig+0x154>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e25d      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504c:	4b49      	ldr	r3, [pc, #292]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	061b      	lsls	r3, r3, #24
 800505a:	4946      	ldr	r1, [pc, #280]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005060:	4b45      	ldr	r3, [pc, #276]	@ (8005178 <HAL_RCC_OscConfig+0x280>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f7fc fcc5 	bl	80019f4 <HAL_InitTick>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d043      	beq.n	80050f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e249      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d023      	beq.n	80050c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800507c:	4b3d      	ldr	r3, [pc, #244]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a3c      	ldr	r2, [pc, #240]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8005082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fc fd00 	bl	8001a8c <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005090:	f7fc fcfc 	bl	8001a8c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e232      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a2:	4b34      	ldr	r3, [pc, #208]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ae:	4b31      	ldr	r3, [pc, #196]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	492d      	ldr	r1, [pc, #180]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	604b      	str	r3, [r1, #4]
 80050c2:	e01a      	b.n	80050fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 80050ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fc fcdc 	bl	8001a8c <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d8:	f7fc fcd8 	bl	8001a8c <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e20e      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ea:	4b22      	ldr	r3, [pc, #136]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x1e0>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d041      	beq.n	800518a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d01c      	beq.n	8005148 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800510e:	4b19      	ldr	r3, [pc, #100]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8005110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005114:	4a17      	ldr	r2, [pc, #92]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511e:	f7fc fcb5 	bl	8001a8c <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005126:	f7fc fcb1 	bl	8001a8c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e1e7      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005138:	4b0e      	ldr	r3, [pc, #56]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 800513a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ef      	beq.n	8005126 <HAL_RCC_OscConfig+0x22e>
 8005146:	e020      	b.n	800518a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 800514a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800514e:	4a09      	ldr	r2, [pc, #36]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005158:	f7fc fc98 	bl	8001a8c <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800515e:	e00d      	b.n	800517c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005160:	f7fc fc94 	bl	8001a8c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d906      	bls.n	800517c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1ca      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
 8005172:	bf00      	nop
 8005174:	40021000 	.word	0x40021000
 8005178:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800517c:	4b8c      	ldr	r3, [pc, #560]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 800517e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ea      	bne.n	8005160 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80a6 	beq.w	80052e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005198:	2300      	movs	r3, #0
 800519a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800519c:	4b84      	ldr	r3, [pc, #528]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_RCC_OscConfig+0x2b4>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <HAL_RCC_OscConfig+0x2b6>
 80051ac:	2300      	movs	r3, #0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	4b7f      	ldr	r3, [pc, #508]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b6:	4a7e      	ldr	r2, [pc, #504]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 80051b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80051be:	4b7c      	ldr	r3, [pc, #496]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 80051c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051ca:	2301      	movs	r3, #1
 80051cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ce:	4b79      	ldr	r3, [pc, #484]	@ (80053b4 <HAL_RCC_OscConfig+0x4bc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d118      	bne.n	800520c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051da:	4b76      	ldr	r3, [pc, #472]	@ (80053b4 <HAL_RCC_OscConfig+0x4bc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a75      	ldr	r2, [pc, #468]	@ (80053b4 <HAL_RCC_OscConfig+0x4bc>)
 80051e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e6:	f7fc fc51 	bl	8001a8c <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ee:	f7fc fc4d 	bl	8001a8c <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e183      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005200:	4b6c      	ldr	r3, [pc, #432]	@ (80053b4 <HAL_RCC_OscConfig+0x4bc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d108      	bne.n	8005226 <HAL_RCC_OscConfig+0x32e>
 8005214:	4b66      	ldr	r3, [pc, #408]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800521a:	4a65      	ldr	r2, [pc, #404]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005224:	e024      	b.n	8005270 <HAL_RCC_OscConfig+0x378>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b05      	cmp	r3, #5
 800522c:	d110      	bne.n	8005250 <HAL_RCC_OscConfig+0x358>
 800522e:	4b60      	ldr	r3, [pc, #384]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005234:	4a5e      	ldr	r2, [pc, #376]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005236:	f043 0304 	orr.w	r3, r3, #4
 800523a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800523e:	4b5c      	ldr	r3, [pc, #368]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005244:	4a5a      	ldr	r2, [pc, #360]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800524e:	e00f      	b.n	8005270 <HAL_RCC_OscConfig+0x378>
 8005250:	4b57      	ldr	r3, [pc, #348]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	4a56      	ldr	r2, [pc, #344]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005260:	4b53      	ldr	r3, [pc, #332]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005266:	4a52      	ldr	r2, [pc, #328]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005268:	f023 0304 	bic.w	r3, r3, #4
 800526c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d016      	beq.n	80052a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005278:	f7fc fc08 	bl	8001a8c <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800527e:	e00a      	b.n	8005296 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005280:	f7fc fc04 	bl	8001a8c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e138      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005296:	4b46      	ldr	r3, [pc, #280]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ed      	beq.n	8005280 <HAL_RCC_OscConfig+0x388>
 80052a4:	e015      	b.n	80052d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a6:	f7fc fbf1 	bl	8001a8c <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7fc fbed 	bl	8001a8c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e121      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052c4:	4b3a      	ldr	r3, [pc, #232]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ed      	bne.n	80052ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052d2:	7ffb      	ldrb	r3, [r7, #31]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d105      	bne.n	80052e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d8:	4b35      	ldr	r3, [pc, #212]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 80052da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052dc:	4a34      	ldr	r2, [pc, #208]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 80052de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d03c      	beq.n	800536a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01c      	beq.n	8005332 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052f8:	4b2d      	ldr	r3, [pc, #180]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 80052fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052fe:	4a2c      	ldr	r2, [pc, #176]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005308:	f7fc fbc0 	bl	8001a8c <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005310:	f7fc fbbc 	bl	8001a8c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0f2      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005322:	4b23      	ldr	r3, [pc, #140]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ef      	beq.n	8005310 <HAL_RCC_OscConfig+0x418>
 8005330:	e01b      	b.n	800536a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005332:	4b1f      	ldr	r3, [pc, #124]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005338:	4a1d      	ldr	r2, [pc, #116]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005342:	f7fc fba3 	bl	8001a8c <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800534a:	f7fc fb9f 	bl	8001a8c <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0d5      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800535c:	4b14      	ldr	r3, [pc, #80]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 800535e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1ef      	bne.n	800534a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 80c9 	beq.w	8005506 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005374:	4b0e      	ldr	r3, [pc, #56]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 030c 	and.w	r3, r3, #12
 800537c:	2b0c      	cmp	r3, #12
 800537e:	f000 8083 	beq.w	8005488 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d15e      	bne.n	8005448 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538a:	4b09      	ldr	r3, [pc, #36]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a08      	ldr	r2, [pc, #32]	@ (80053b0 <HAL_RCC_OscConfig+0x4b8>)
 8005390:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005396:	f7fc fb79 	bl	8001a8c <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800539c:	e00c      	b.n	80053b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539e:	f7fc fb75 	bl	8001a8c <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d905      	bls.n	80053b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e0ab      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b8:	4b55      	ldr	r3, [pc, #340]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ec      	bne.n	800539e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c4:	4b52      	ldr	r3, [pc, #328]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	4b52      	ldr	r3, [pc, #328]	@ (8005514 <HAL_RCC_OscConfig+0x61c>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6a11      	ldr	r1, [r2, #32]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053d4:	3a01      	subs	r2, #1
 80053d6:	0112      	lsls	r2, r2, #4
 80053d8:	4311      	orrs	r1, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80053de:	0212      	lsls	r2, r2, #8
 80053e0:	4311      	orrs	r1, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053e6:	0852      	lsrs	r2, r2, #1
 80053e8:	3a01      	subs	r2, #1
 80053ea:	0552      	lsls	r2, r2, #21
 80053ec:	4311      	orrs	r1, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053f2:	0852      	lsrs	r2, r2, #1
 80053f4:	3a01      	subs	r2, #1
 80053f6:	0652      	lsls	r2, r2, #25
 80053f8:	4311      	orrs	r1, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053fe:	06d2      	lsls	r2, r2, #27
 8005400:	430a      	orrs	r2, r1
 8005402:	4943      	ldr	r1, [pc, #268]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 8005404:	4313      	orrs	r3, r2
 8005406:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005408:	4b41      	ldr	r3, [pc, #260]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a40      	ldr	r2, [pc, #256]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 800540e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005412:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005414:	4b3e      	ldr	r3, [pc, #248]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4a3d      	ldr	r2, [pc, #244]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 800541a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800541e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fc fb34 	bl	8001a8c <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005428:	f7fc fb30 	bl	8001a8c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e066      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543a:	4b35      	ldr	r3, [pc, #212]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x530>
 8005446:	e05e      	b.n	8005506 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005448:	4b31      	ldr	r3, [pc, #196]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a30      	ldr	r2, [pc, #192]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fc fb1a 	bl	8001a8c <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fc fb16 	bl	8001a8c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e04c      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800546e:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800547a:	4b25      	ldr	r3, [pc, #148]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	4924      	ldr	r1, [pc, #144]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 8005480:	4b25      	ldr	r3, [pc, #148]	@ (8005518 <HAL_RCC_OscConfig+0x620>)
 8005482:	4013      	ands	r3, r2
 8005484:	60cb      	str	r3, [r1, #12]
 8005486:	e03e      	b.n	8005506 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e039      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005494:	4b1e      	ldr	r3, [pc, #120]	@ (8005510 <HAL_RCC_OscConfig+0x618>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f003 0203 	and.w	r2, r3, #3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d12c      	bne.n	8005502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	3b01      	subs	r3, #1
 80054b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d123      	bne.n	8005502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d11b      	bne.n	8005502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d113      	bne.n	8005502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	3b01      	subs	r3, #1
 80054e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d109      	bne.n	8005502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f8:	085b      	lsrs	r3, r3, #1
 80054fa:	3b01      	subs	r3, #1
 80054fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d001      	beq.n	8005506 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021000 	.word	0x40021000
 8005514:	019f800c 	.word	0x019f800c
 8005518:	feeefffc 	.word	0xfeeefffc

0800551c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e11e      	b.n	8005772 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005534:	4b91      	ldr	r3, [pc, #580]	@ (800577c <HAL_RCC_ClockConfig+0x260>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d910      	bls.n	8005564 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b8e      	ldr	r3, [pc, #568]	@ (800577c <HAL_RCC_ClockConfig+0x260>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 020f 	bic.w	r2, r3, #15
 800554a:	498c      	ldr	r1, [pc, #560]	@ (800577c <HAL_RCC_ClockConfig+0x260>)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	4313      	orrs	r3, r2
 8005550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005552:	4b8a      	ldr	r3, [pc, #552]	@ (800577c <HAL_RCC_ClockConfig+0x260>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e106      	b.n	8005772 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d073      	beq.n	8005658 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b03      	cmp	r3, #3
 8005576:	d129      	bne.n	80055cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005578:	4b81      	ldr	r3, [pc, #516]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0f4      	b.n	8005772 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005588:	f000 f99e 	bl	80058c8 <RCC_GetSysClockFreqFromPLLSource>
 800558c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4a7c      	ldr	r2, [pc, #496]	@ (8005784 <HAL_RCC_ClockConfig+0x268>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d93f      	bls.n	8005616 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005596:	4b7a      	ldr	r3, [pc, #488]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d033      	beq.n	8005616 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d12f      	bne.n	8005616 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055b6:	4b72      	ldr	r3, [pc, #456]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055be:	4a70      	ldr	r2, [pc, #448]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 80055c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055c6:	2380      	movs	r3, #128	@ 0x80
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e024      	b.n	8005616 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d107      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0c6      	b.n	8005772 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e4:	4b66      	ldr	r3, [pc, #408]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0be      	b.n	8005772 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055f4:	f000 f8ce 	bl	8005794 <HAL_RCC_GetSysClockFreq>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4a61      	ldr	r2, [pc, #388]	@ (8005784 <HAL_RCC_ClockConfig+0x268>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d909      	bls.n	8005616 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005602:	4b5f      	ldr	r3, [pc, #380]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800560a:	4a5d      	ldr	r2, [pc, #372]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 800560c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005610:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005612:	2380      	movs	r3, #128	@ 0x80
 8005614:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005616:	4b5a      	ldr	r3, [pc, #360]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 0203 	bic.w	r2, r3, #3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4957      	ldr	r1, [pc, #348]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005624:	4313      	orrs	r3, r2
 8005626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005628:	f7fc fa30 	bl	8001a8c <HAL_GetTick>
 800562c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562e:	e00a      	b.n	8005646 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005630:	f7fc fa2c 	bl	8001a8c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e095      	b.n	8005772 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005646:	4b4e      	ldr	r3, [pc, #312]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 020c 	and.w	r2, r3, #12
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	429a      	cmp	r2, r3
 8005656:	d1eb      	bne.n	8005630 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d023      	beq.n	80056ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005670:	4b43      	ldr	r3, [pc, #268]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4a42      	ldr	r2, [pc, #264]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005676:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800567a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005688:	4b3d      	ldr	r3, [pc, #244]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005690:	4a3b      	ldr	r2, [pc, #236]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005692:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005696:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005698:	4b39      	ldr	r3, [pc, #228]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	4936      	ldr	r1, [pc, #216]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
 80056aa:	e008      	b.n	80056be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b80      	cmp	r3, #128	@ 0x80
 80056b0:	d105      	bne.n	80056be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056b2:	4b33      	ldr	r3, [pc, #204]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	4a32      	ldr	r2, [pc, #200]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 80056b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056be:	4b2f      	ldr	r3, [pc, #188]	@ (800577c <HAL_RCC_ClockConfig+0x260>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d21d      	bcs.n	8005708 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056cc:	4b2b      	ldr	r3, [pc, #172]	@ (800577c <HAL_RCC_ClockConfig+0x260>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f023 020f 	bic.w	r2, r3, #15
 80056d4:	4929      	ldr	r1, [pc, #164]	@ (800577c <HAL_RCC_ClockConfig+0x260>)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	4313      	orrs	r3, r2
 80056da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056dc:	f7fc f9d6 	bl	8001a8c <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e2:	e00a      	b.n	80056fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e4:	f7fc f9d2 	bl	8001a8c <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e03b      	b.n	8005772 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fa:	4b20      	ldr	r3, [pc, #128]	@ (800577c <HAL_RCC_ClockConfig+0x260>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d1ed      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005714:	4b1a      	ldr	r3, [pc, #104]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4917      	ldr	r1, [pc, #92]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005732:	4b13      	ldr	r3, [pc, #76]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	490f      	ldr	r1, [pc, #60]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 8005742:	4313      	orrs	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005746:	f000 f825 	bl	8005794 <HAL_RCC_GetSysClockFreq>
 800574a:	4602      	mov	r2, r0
 800574c:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <HAL_RCC_ClockConfig+0x264>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	490c      	ldr	r1, [pc, #48]	@ (8005788 <HAL_RCC_ClockConfig+0x26c>)
 8005758:	5ccb      	ldrb	r3, [r1, r3]
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	fa22 f303 	lsr.w	r3, r2, r3
 8005762:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <HAL_RCC_ClockConfig+0x270>)
 8005764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005766:	4b0a      	ldr	r3, [pc, #40]	@ (8005790 <HAL_RCC_ClockConfig+0x274>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7fc f942 	bl	80019f4 <HAL_InitTick>
 8005770:	4603      	mov	r3, r0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40022000 	.word	0x40022000
 8005780:	40021000 	.word	0x40021000
 8005784:	04c4b400 	.word	0x04c4b400
 8005788:	080145d0 	.word	0x080145d0
 800578c:	20000000 	.word	0x20000000
 8005790:	20000004 	.word	0x20000004

08005794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800579a:	4b2c      	ldr	r3, [pc, #176]	@ (800584c <HAL_RCC_GetSysClockFreq+0xb8>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d102      	bne.n	80057ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005850 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	e047      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057ac:	4b27      	ldr	r3, [pc, #156]	@ (800584c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 030c 	and.w	r3, r3, #12
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d102      	bne.n	80057be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057b8:	4b26      	ldr	r3, [pc, #152]	@ (8005854 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	e03e      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057be:	4b23      	ldr	r3, [pc, #140]	@ (800584c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d136      	bne.n	8005838 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ca:	4b20      	ldr	r3, [pc, #128]	@ (800584c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057d4:	4b1d      	ldr	r3, [pc, #116]	@ (800584c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	3301      	adds	r3, #1
 80057e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d10c      	bne.n	8005802 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005854 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	4a16      	ldr	r2, [pc, #88]	@ (800584c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057f2:	68d2      	ldr	r2, [r2, #12]
 80057f4:	0a12      	lsrs	r2, r2, #8
 80057f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	617b      	str	r3, [r7, #20]
      break;
 8005800:	e00c      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005802:	4a13      	ldr	r2, [pc, #76]	@ (8005850 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	4a10      	ldr	r2, [pc, #64]	@ (800584c <HAL_RCC_GetSysClockFreq+0xb8>)
 800580c:	68d2      	ldr	r2, [r2, #12]
 800580e:	0a12      	lsrs	r2, r2, #8
 8005810:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
      break;
 800581a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800581c:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <HAL_RCC_GetSysClockFreq+0xb8>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	0e5b      	lsrs	r3, r3, #25
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	3301      	adds	r3, #1
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	fbb2 f3f3 	udiv	r3, r2, r3
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	e001      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800583c:	693b      	ldr	r3, [r7, #16]
}
 800583e:	4618      	mov	r0, r3
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000
 8005850:	00f42400 	.word	0x00f42400
 8005854:	016e3600 	.word	0x016e3600

08005858 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800585c:	4b03      	ldr	r3, [pc, #12]	@ (800586c <HAL_RCC_GetHCLKFreq+0x14>)
 800585e:	681b      	ldr	r3, [r3, #0]
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	20000000 	.word	0x20000000

08005870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005874:	f7ff fff0 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 8005878:	4602      	mov	r2, r0
 800587a:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <HAL_RCC_GetPCLK1Freq+0x24>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	0a1b      	lsrs	r3, r3, #8
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	4904      	ldr	r1, [pc, #16]	@ (8005898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005886:	5ccb      	ldrb	r3, [r1, r3]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005890:	4618      	mov	r0, r3
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40021000 	.word	0x40021000
 8005898:	080145e0 	.word	0x080145e0

0800589c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058a0:	f7ff ffda 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	0adb      	lsrs	r3, r3, #11
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	4904      	ldr	r1, [pc, #16]	@ (80058c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40021000 	.word	0x40021000
 80058c4:	080145e0 	.word	0x080145e0

080058c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d10c      	bne.n	8005906 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ec:	4a17      	ldr	r2, [pc, #92]	@ (800594c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	4a14      	ldr	r2, [pc, #80]	@ (8005948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058f6:	68d2      	ldr	r2, [r2, #12]
 80058f8:	0a12      	lsrs	r2, r2, #8
 80058fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	617b      	str	r3, [r7, #20]
    break;
 8005904:	e00c      	b.n	8005920 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005906:	4a12      	ldr	r2, [pc, #72]	@ (8005950 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	fbb2 f3f3 	udiv	r3, r2, r3
 800590e:	4a0e      	ldr	r2, [pc, #56]	@ (8005948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005910:	68d2      	ldr	r2, [r2, #12]
 8005912:	0a12      	lsrs	r2, r2, #8
 8005914:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005918:	fb02 f303 	mul.w	r3, r2, r3
 800591c:	617b      	str	r3, [r7, #20]
    break;
 800591e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005920:	4b09      	ldr	r3, [pc, #36]	@ (8005948 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	0e5b      	lsrs	r3, r3, #25
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	3301      	adds	r3, #1
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800593a:	687b      	ldr	r3, [r7, #4]
}
 800593c:	4618      	mov	r0, r3
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	40021000 	.word	0x40021000
 800594c:	016e3600 	.word	0x016e3600
 8005950:	00f42400 	.word	0x00f42400

08005954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800595c:	2300      	movs	r3, #0
 800595e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005960:	2300      	movs	r3, #0
 8005962:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8098 	beq.w	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005972:	2300      	movs	r3, #0
 8005974:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005976:	4b43      	ldr	r3, [pc, #268]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10d      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005982:	4b40      	ldr	r3, [pc, #256]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005986:	4a3f      	ldr	r2, [pc, #252]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800598c:	6593      	str	r3, [r2, #88]	@ 0x58
 800598e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005996:	60bb      	str	r3, [r7, #8]
 8005998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800599a:	2301      	movs	r3, #1
 800599c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800599e:	4b3a      	ldr	r3, [pc, #232]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a39      	ldr	r2, [pc, #228]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059aa:	f7fc f86f 	bl	8001a8c <HAL_GetTick>
 80059ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059b0:	e009      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b2:	f7fc f86b 	bl	8001a8c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d902      	bls.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	74fb      	strb	r3, [r7, #19]
        break;
 80059c4:	e005      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059c6:	4b30      	ldr	r3, [pc, #192]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0ef      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d159      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01e      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d019      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059f4:	4b23      	ldr	r3, [pc, #140]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a00:	4b20      	ldr	r3, [pc, #128]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a06:	4a1f      	ldr	r2, [pc, #124]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a10:	4b1c      	ldr	r3, [pc, #112]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a16:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a20:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fc f82b 	bl	8001a8c <HAL_GetTick>
 8005a36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a38:	e00b      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fc f827 	bl	8001a8c <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d902      	bls.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	74fb      	strb	r3, [r7, #19]
            break;
 8005a50:	e006      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a52:	4b0c      	ldr	r3, [pc, #48]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0ec      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a66:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	4903      	ldr	r1, [pc, #12]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a7c:	e008      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	74bb      	strb	r3, [r7, #18]
 8005a82:	e005      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	7cfb      	ldrb	r3, [r7, #19]
 8005a8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a90:	7c7b      	ldrb	r3, [r7, #17]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d105      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a96:	4ba6      	ldr	r3, [pc, #664]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9a:	4aa5      	ldr	r2, [pc, #660]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aa0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aae:	4ba0      	ldr	r3, [pc, #640]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab4:	f023 0203 	bic.w	r2, r3, #3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	499c      	ldr	r1, [pc, #624]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ad0:	4b97      	ldr	r3, [pc, #604]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f023 020c 	bic.w	r2, r3, #12
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	4994      	ldr	r1, [pc, #592]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005af2:	4b8f      	ldr	r3, [pc, #572]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	498b      	ldr	r1, [pc, #556]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b14:	4b86      	ldr	r3, [pc, #536]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	4983      	ldr	r1, [pc, #524]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b36:	4b7e      	ldr	r3, [pc, #504]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	497a      	ldr	r1, [pc, #488]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b58:	4b75      	ldr	r3, [pc, #468]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	4972      	ldr	r1, [pc, #456]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	4969      	ldr	r1, [pc, #420]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b9c:	4b64      	ldr	r3, [pc, #400]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	4961      	ldr	r1, [pc, #388]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	4958      	ldr	r1, [pc, #352]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d015      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005be0:	4b53      	ldr	r3, [pc, #332]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bee:	4950      	ldr	r1, [pc, #320]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bfe:	d105      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c00:	4b4b      	ldr	r3, [pc, #300]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4a4a      	ldr	r2, [pc, #296]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d015      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c18:	4b45      	ldr	r3, [pc, #276]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c26:	4942      	ldr	r1, [pc, #264]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c36:	d105      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c38:	4b3d      	ldr	r3, [pc, #244]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c42:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d015      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c50:	4b37      	ldr	r3, [pc, #220]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5e:	4934      	ldr	r1, [pc, #208]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c6e:	d105      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c70:	4b2f      	ldr	r3, [pc, #188]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4a2e      	ldr	r2, [pc, #184]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d015      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c88:	4b29      	ldr	r3, [pc, #164]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c96:	4926      	ldr	r1, [pc, #152]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca8:	4b21      	ldr	r3, [pc, #132]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a20      	ldr	r2, [pc, #128]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d015      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cce:	4918      	ldr	r1, [pc, #96]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cde:	d105      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce0:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	4a12      	ldr	r2, [pc, #72]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d015      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d06:	490a      	ldr	r1, [pc, #40]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d16:	d105      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d18:	4b05      	ldr	r3, [pc, #20]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4a04      	ldr	r2, [pc, #16]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d24:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40021000 	.word	0x40021000

08005d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e049      	b.n	8005dda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fb fd36 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f000 fb12 	bl	800639c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d001      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e04a      	b.n	8005e92 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a21      	ldr	r2, [pc, #132]	@ (8005ea0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d018      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e26:	d013      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00e      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d009      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1a      	ldr	r2, [pc, #104]	@ (8005eac <HAL_TIM_Base_Start_IT+0xc8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a19      	ldr	r2, [pc, #100]	@ (8005eb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d115      	bne.n	8005e7c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	4b17      	ldr	r3, [pc, #92]	@ (8005eb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b06      	cmp	r3, #6
 8005e60:	d015      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0xaa>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e68:	d011      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	e008      	b.n	8005e8e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e000      	b.n	8005e90 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40013400 	.word	0x40013400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	00010007 	.word	0x00010007

08005eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0202 	mvn.w	r2, #2
 8005eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa2c 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa1e 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa2f 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d020      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0204 	mvn.w	r2, #4
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa06 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f9f8 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa09 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0208 	mvn.w	r2, #8
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2204      	movs	r2, #4
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f9e0 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9d2 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f9e3 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d020      	beq.n	8006000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01b      	beq.n	8006000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0210 	mvn.w	r2, #16
 8005fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9ba 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9ac 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f9bd 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00c      	beq.n	8006024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0201 	mvn.w	r2, #1
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f009 fa4e 	bl	800f4c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00c      	beq.n	8006052 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800604a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fb69 	bl	8006724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00c      	beq.n	8006076 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800606e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fb61 	bl	8006738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00c      	beq.n	800609a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f977 	bl	8006388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00c      	beq.n	80060be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f06f 0220 	mvn.w	r2, #32
 80060b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fb29 	bl	8006710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00c      	beq.n	80060e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80060da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fb35 	bl	800674c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00c      	beq.n	8006106 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80060fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fb2d 	bl	8006760 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00c      	beq.n	800612a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fb25 	bl	8006774 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fb1d 	bl	8006788 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIM_ConfigClockSource+0x1c>
 8006170:	2302      	movs	r3, #2
 8006172:	e0de      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x1da>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006192:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800619e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a63      	ldr	r2, [pc, #396]	@ (800633c <HAL_TIM_ConfigClockSource+0x1e4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	f000 80a9 	beq.w	8006306 <HAL_TIM_ConfigClockSource+0x1ae>
 80061b4:	4a61      	ldr	r2, [pc, #388]	@ (800633c <HAL_TIM_ConfigClockSource+0x1e4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	f200 80ae 	bhi.w	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 80061bc:	4a60      	ldr	r2, [pc, #384]	@ (8006340 <HAL_TIM_ConfigClockSource+0x1e8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	f000 80a1 	beq.w	8006306 <HAL_TIM_ConfigClockSource+0x1ae>
 80061c4:	4a5e      	ldr	r2, [pc, #376]	@ (8006340 <HAL_TIM_ConfigClockSource+0x1e8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	f200 80a6 	bhi.w	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 80061cc:	4a5d      	ldr	r2, [pc, #372]	@ (8006344 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	f000 8099 	beq.w	8006306 <HAL_TIM_ConfigClockSource+0x1ae>
 80061d4:	4a5b      	ldr	r2, [pc, #364]	@ (8006344 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	f200 809e 	bhi.w	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 80061dc:	4a5a      	ldr	r2, [pc, #360]	@ (8006348 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	f000 8091 	beq.w	8006306 <HAL_TIM_ConfigClockSource+0x1ae>
 80061e4:	4a58      	ldr	r2, [pc, #352]	@ (8006348 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	f200 8096 	bhi.w	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 80061ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061f0:	f000 8089 	beq.w	8006306 <HAL_TIM_ConfigClockSource+0x1ae>
 80061f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061f8:	f200 808e 	bhi.w	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 80061fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006200:	d03e      	beq.n	8006280 <HAL_TIM_ConfigClockSource+0x128>
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006206:	f200 8087 	bhi.w	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800620e:	f000 8086 	beq.w	800631e <HAL_TIM_ConfigClockSource+0x1c6>
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006216:	d87f      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 8006218:	2b70      	cmp	r3, #112	@ 0x70
 800621a:	d01a      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0xfa>
 800621c:	2b70      	cmp	r3, #112	@ 0x70
 800621e:	d87b      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 8006220:	2b60      	cmp	r3, #96	@ 0x60
 8006222:	d050      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x16e>
 8006224:	2b60      	cmp	r3, #96	@ 0x60
 8006226:	d877      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 8006228:	2b50      	cmp	r3, #80	@ 0x50
 800622a:	d03c      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x14e>
 800622c:	2b50      	cmp	r3, #80	@ 0x50
 800622e:	d873      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 8006230:	2b40      	cmp	r3, #64	@ 0x40
 8006232:	d058      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x18e>
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	d86f      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 8006238:	2b30      	cmp	r3, #48	@ 0x30
 800623a:	d064      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x1ae>
 800623c:	2b30      	cmp	r3, #48	@ 0x30
 800623e:	d86b      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 8006240:	2b20      	cmp	r3, #32
 8006242:	d060      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x1ae>
 8006244:	2b20      	cmp	r3, #32
 8006246:	d867      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d05c      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x1ae>
 800624c:	2b10      	cmp	r3, #16
 800624e:	d05a      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x1ae>
 8006250:	e062      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006262:	f000 f9b3 	bl	80065cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	609a      	str	r2, [r3, #8]
      break;
 800627e:	e04f      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006290:	f000 f99c 	bl	80065cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062a2:	609a      	str	r2, [r3, #8]
      break;
 80062a4:	e03c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b2:	461a      	mov	r2, r3
 80062b4:	f000 f90e 	bl	80064d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2150      	movs	r1, #80	@ 0x50
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f967 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 80062c4:	e02c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062d2:	461a      	mov	r2, r3
 80062d4:	f000 f92d 	bl	8006532 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2160      	movs	r1, #96	@ 0x60
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f957 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 80062e4:	e01c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f2:	461a      	mov	r2, r3
 80062f4:	f000 f8ee 	bl	80064d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2140      	movs	r1, #64	@ 0x40
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f947 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8006304:	e00c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4619      	mov	r1, r3
 8006310:	4610      	mov	r0, r2
 8006312:	f000 f93e 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8006316:	e003      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
      break;
 800631c:	e000      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800631e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	00100070 	.word	0x00100070
 8006340:	00100040 	.word	0x00100040
 8006344:	00100030 	.word	0x00100030
 8006348:	00100020 	.word	0x00100020

0800634c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a42      	ldr	r2, [pc, #264]	@ (80064b8 <TIM_Base_SetConfig+0x11c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00f      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ba:	d00b      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3f      	ldr	r2, [pc, #252]	@ (80064bc <TIM_Base_SetConfig+0x120>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3e      	ldr	r2, [pc, #248]	@ (80064c0 <TIM_Base_SetConfig+0x124>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3d      	ldr	r2, [pc, #244]	@ (80064c4 <TIM_Base_SetConfig+0x128>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d108      	bne.n	80063e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a33      	ldr	r2, [pc, #204]	@ (80064b8 <TIM_Base_SetConfig+0x11c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01b      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f4:	d017      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a30      	ldr	r2, [pc, #192]	@ (80064bc <TIM_Base_SetConfig+0x120>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2f      	ldr	r2, [pc, #188]	@ (80064c0 <TIM_Base_SetConfig+0x124>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2e      	ldr	r2, [pc, #184]	@ (80064c4 <TIM_Base_SetConfig+0x128>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2d      	ldr	r2, [pc, #180]	@ (80064c8 <TIM_Base_SetConfig+0x12c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2c      	ldr	r2, [pc, #176]	@ (80064cc <TIM_Base_SetConfig+0x130>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2b      	ldr	r2, [pc, #172]	@ (80064d0 <TIM_Base_SetConfig+0x134>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800642c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a16      	ldr	r2, [pc, #88]	@ (80064b8 <TIM_Base_SetConfig+0x11c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00f      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <TIM_Base_SetConfig+0x128>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00b      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a16      	ldr	r2, [pc, #88]	@ (80064c8 <TIM_Base_SetConfig+0x12c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a15      	ldr	r2, [pc, #84]	@ (80064cc <TIM_Base_SetConfig+0x130>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a14      	ldr	r2, [pc, #80]	@ (80064d0 <TIM_Base_SetConfig+0x134>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d103      	bne.n	800648c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d105      	bne.n	80064aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f023 0201 	bic.w	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	611a      	str	r2, [r3, #16]
  }
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800

080064d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f023 030a 	bic.w	r3, r3, #10
 8006510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006532:	b480      	push	{r7}
 8006534:	b087      	sub	sp, #28
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f023 0210 	bic.w	r2, r3, #16
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800655c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	031b      	lsls	r3, r3, #12
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800656e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80065a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f043 0307 	orr.w	r3, r3, #7
 80065b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	609a      	str	r2, [r3, #8]
}
 80065c0:	bf00      	nop
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	021a      	lsls	r2, r3, #8
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	609a      	str	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006620:	2302      	movs	r3, #2
 8006622:	e065      	b.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2c      	ldr	r2, [pc, #176]	@ (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2b      	ldr	r2, [pc, #172]	@ (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d108      	bne.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800665e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1b      	ldr	r2, [pc, #108]	@ (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d018      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800669a:	d013      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a18      	ldr	r2, [pc, #96]	@ (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00e      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a17      	ldr	r2, [pc, #92]	@ (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d009      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a12      	ldr	r2, [pc, #72]	@ (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a13      	ldr	r2, [pc, #76]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d10c      	bne.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800
 800670c:	40014000 	.word	0x40014000

08006710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e042      	b.n	8006834 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7fb f875 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2224      	movs	r2, #36	@ 0x24
 80067ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fec6 	bl	8007578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fbf7 	bl	8006fe0 <UART_SetConfig>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e01b      	b.n	8006834 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800680a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800681a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 ff45 	bl	80076bc <UART_CheckIdleState>
 8006832:	4603      	mov	r3, r0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	@ 0x28
 8006840:	af02      	add	r7, sp, #8
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	4613      	mov	r3, r2
 800684a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006852:	2b20      	cmp	r3, #32
 8006854:	d17b      	bne.n	800694e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_UART_Transmit+0x26>
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e074      	b.n	8006950 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2221      	movs	r2, #33	@ 0x21
 8006872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006876:	f7fb f909 	bl	8001a8c <HAL_GetTick>
 800687a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006894:	d108      	bne.n	80068a8 <HAL_UART_Transmit+0x6c>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e003      	b.n	80068b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068b0:	e030      	b.n	8006914 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2200      	movs	r2, #0
 80068ba:	2180      	movs	r1, #128	@ 0x80
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 ffa7 	bl	8007810 <UART_WaitOnFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e03d      	b.n	8006950 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	3302      	adds	r3, #2
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	e007      	b.n	8006902 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	781a      	ldrb	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	3301      	adds	r3, #1
 8006900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800691a:	b29b      	uxth	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1c8      	bne.n	80068b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2200      	movs	r2, #0
 8006928:	2140      	movs	r1, #64	@ 0x40
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 ff70 	bl	8007810 <UART_WaitOnFlagUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e006      	b.n	8006950 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
  }
}
 8006950:	4618      	mov	r0, r3
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b0ba      	sub	sp, #232	@ 0xe8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800697e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006982:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006986:	4013      	ands	r3, r2
 8006988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800698c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11b      	bne.n	80069cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b00      	cmp	r3, #0
 800699e:	d015      	beq.n	80069cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d105      	bne.n	80069b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 82e3 	beq.w	8006f88 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	4798      	blx	r3
      }
      return;
 80069ca:	e2dd      	b.n	8006f88 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 8123 	beq.w	8006c1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069da:	4b8d      	ldr	r3, [pc, #564]	@ (8006c10 <HAL_UART_IRQHandler+0x2b8>)
 80069dc:	4013      	ands	r3, r2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80069e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006c14 <HAL_UART_IRQHandler+0x2bc>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 8116 	beq.w	8006c1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d011      	beq.n	8006a20 <HAL_UART_IRQHandler+0xc8>
 80069fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a16:	f043 0201 	orr.w	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d011      	beq.n	8006a50 <HAL_UART_IRQHandler+0xf8>
 8006a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a46:	f043 0204 	orr.w	r2, r3, #4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d011      	beq.n	8006a80 <HAL_UART_IRQHandler+0x128>
 8006a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a76:	f043 0202 	orr.w	r2, r3, #2
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d017      	beq.n	8006abc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d105      	bne.n	8006aa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8006c10 <HAL_UART_IRQHandler+0x2b8>)
 8006a9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00b      	beq.n	8006abc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab2:	f043 0208 	orr.w	r2, r3, #8
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d012      	beq.n	8006aee <HAL_UART_IRQHandler+0x196>
 8006ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006acc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00c      	beq.n	8006aee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae4:	f043 0220 	orr.w	r2, r3, #32
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8249 	beq.w	8006f8c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d013      	beq.n	8006b2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d105      	bne.n	8006b1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b42:	2b40      	cmp	r3, #64	@ 0x40
 8006b44:	d005      	beq.n	8006b52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d054      	beq.n	8006bfc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fec9 	bl	80078ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d146      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1d9      	bne.n	8006b66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d017      	beq.n	8006bec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bc2:	4a15      	ldr	r2, [pc, #84]	@ (8006c18 <HAL_UART_IRQHandler+0x2c0>)
 8006bc4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fb f8f3 	bl	8001db8 <HAL_DMA_Abort_IT>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d019      	beq.n	8006c0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006be6:	4610      	mov	r0, r2
 8006be8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bea:	e00f      	b.n	8006c0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9e1 	bl	8006fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf2:	e00b      	b.n	8006c0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f9dd 	bl	8006fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bfa:	e007      	b.n	8006c0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f9d9 	bl	8006fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006c0a:	e1bf      	b.n	8006f8c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	bf00      	nop
    return;
 8006c0e:	e1bd      	b.n	8006f8c <HAL_UART_IRQHandler+0x634>
 8006c10:	10000001 	.word	0x10000001
 8006c14:	04000120 	.word	0x04000120
 8006c18:	080079b7 	.word	0x080079b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	f040 8153 	bne.w	8006ecc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 814c 	beq.w	8006ecc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8145 	beq.w	8006ecc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2210      	movs	r2, #16
 8006c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c54:	2b40      	cmp	r3, #64	@ 0x40
 8006c56:	f040 80bb 	bne.w	8006dd0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 818f 	beq.w	8006f90 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	f080 8187 	bcs.w	8006f90 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f040 8087 	bne.w	8006dae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1da      	bne.n	8006ca0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3308      	adds	r3, #8
 8006cf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006cfc:	f023 0301 	bic.w	r3, r3, #1
 8006d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e1      	bne.n	8006cea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3308      	adds	r3, #8
 8006d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e3      	bne.n	8006d26 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d7c:	f023 0310 	bic.w	r3, r3, #16
 8006d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e4      	bne.n	8006d6c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fa ffac 	bl	8001d06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f8fd 	bl	8006fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dce:	e0df      	b.n	8006f90 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80d1 	beq.w	8006f94 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 80cc 	beq.w	8006f94 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e20:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e4      	bne.n	8006dfc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	623b      	str	r3, [r7, #32]
   return(result);
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3308      	adds	r3, #8
 8006e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e1      	bne.n	8006e32 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0310 	bic.w	r3, r3, #16
 8006e96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ea4:	61fb      	str	r3, [r7, #28]
 8006ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	69b9      	ldr	r1, [r7, #24]
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e4      	bne.n	8006e82 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f87f 	bl	8006fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006eca:	e063      	b.n	8006f94 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x59e>
 8006ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006eec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fda2 	bl	8007a38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ef4:	e051      	b.n	8006f9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d014      	beq.n	8006f2c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d105      	bne.n	8006f1a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d03a      	beq.n	8006f98 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
    }
    return;
 8006f2a:	e035      	b.n	8006f98 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d009      	beq.n	8006f4c <HAL_UART_IRQHandler+0x5f4>
 8006f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fd4c 	bl	80079e2 <UART_EndTransmit_IT>
    return;
 8006f4a:	e026      	b.n	8006f9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <HAL_UART_IRQHandler+0x614>
 8006f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fd7b 	bl	8007a60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f6a:	e016      	b.n	8006f9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d010      	beq.n	8006f9a <HAL_UART_IRQHandler+0x642>
 8006f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	da0c      	bge.n	8006f9a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fd63 	bl	8007a4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f86:	e008      	b.n	8006f9a <HAL_UART_IRQHandler+0x642>
      return;
 8006f88:	bf00      	nop
 8006f8a:	e006      	b.n	8006f9a <HAL_UART_IRQHandler+0x642>
    return;
 8006f8c:	bf00      	nop
 8006f8e:	e004      	b.n	8006f9a <HAL_UART_IRQHandler+0x642>
      return;
 8006f90:	bf00      	nop
 8006f92:	e002      	b.n	8006f9a <HAL_UART_IRQHandler+0x642>
      return;
 8006f94:	bf00      	nop
 8006f96:	e000      	b.n	8006f9a <HAL_UART_IRQHandler+0x642>
    return;
 8006f98:	bf00      	nop
  }
}
 8006f9a:	37e8      	adds	r7, #232	@ 0xe8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe4:	b08c      	sub	sp, #48	@ 0x30
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	4313      	orrs	r3, r2
 8007006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4bab      	ldr	r3, [pc, #684]	@ (80072bc <UART_SetConfig+0x2dc>)
 8007010:	4013      	ands	r3, r2
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	6812      	ldr	r2, [r2, #0]
 8007016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007018:	430b      	orrs	r3, r1
 800701a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4aa0      	ldr	r2, [pc, #640]	@ (80072c0 <UART_SetConfig+0x2e0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d004      	beq.n	800704c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007048:	4313      	orrs	r3, r2
 800704a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007056:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007060:	430b      	orrs	r3, r1
 8007062:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	f023 010f 	bic.w	r1, r3, #15
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a91      	ldr	r2, [pc, #580]	@ (80072c4 <UART_SetConfig+0x2e4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d125      	bne.n	80070d0 <UART_SetConfig+0xf0>
 8007084:	4b90      	ldr	r3, [pc, #576]	@ (80072c8 <UART_SetConfig+0x2e8>)
 8007086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	2b03      	cmp	r3, #3
 8007090:	d81a      	bhi.n	80070c8 <UART_SetConfig+0xe8>
 8007092:	a201      	add	r2, pc, #4	@ (adr r2, 8007098 <UART_SetConfig+0xb8>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070a9 	.word	0x080070a9
 800709c:	080070b9 	.word	0x080070b9
 80070a0:	080070b1 	.word	0x080070b1
 80070a4:	080070c1 	.word	0x080070c1
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ae:	e0d6      	b.n	800725e <UART_SetConfig+0x27e>
 80070b0:	2302      	movs	r3, #2
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b6:	e0d2      	b.n	800725e <UART_SetConfig+0x27e>
 80070b8:	2304      	movs	r3, #4
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070be:	e0ce      	b.n	800725e <UART_SetConfig+0x27e>
 80070c0:	2308      	movs	r3, #8
 80070c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c6:	e0ca      	b.n	800725e <UART_SetConfig+0x27e>
 80070c8:	2310      	movs	r3, #16
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ce:	e0c6      	b.n	800725e <UART_SetConfig+0x27e>
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a7d      	ldr	r2, [pc, #500]	@ (80072cc <UART_SetConfig+0x2ec>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d138      	bne.n	800714c <UART_SetConfig+0x16c>
 80070da:	4b7b      	ldr	r3, [pc, #492]	@ (80072c8 <UART_SetConfig+0x2e8>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e0:	f003 030c 	and.w	r3, r3, #12
 80070e4:	2b0c      	cmp	r3, #12
 80070e6:	d82d      	bhi.n	8007144 <UART_SetConfig+0x164>
 80070e8:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <UART_SetConfig+0x110>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007125 	.word	0x08007125
 80070f4:	08007145 	.word	0x08007145
 80070f8:	08007145 	.word	0x08007145
 80070fc:	08007145 	.word	0x08007145
 8007100:	08007135 	.word	0x08007135
 8007104:	08007145 	.word	0x08007145
 8007108:	08007145 	.word	0x08007145
 800710c:	08007145 	.word	0x08007145
 8007110:	0800712d 	.word	0x0800712d
 8007114:	08007145 	.word	0x08007145
 8007118:	08007145 	.word	0x08007145
 800711c:	08007145 	.word	0x08007145
 8007120:	0800713d 	.word	0x0800713d
 8007124:	2300      	movs	r3, #0
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712a:	e098      	b.n	800725e <UART_SetConfig+0x27e>
 800712c:	2302      	movs	r3, #2
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007132:	e094      	b.n	800725e <UART_SetConfig+0x27e>
 8007134:	2304      	movs	r3, #4
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713a:	e090      	b.n	800725e <UART_SetConfig+0x27e>
 800713c:	2308      	movs	r3, #8
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007142:	e08c      	b.n	800725e <UART_SetConfig+0x27e>
 8007144:	2310      	movs	r3, #16
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714a:	e088      	b.n	800725e <UART_SetConfig+0x27e>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a5f      	ldr	r2, [pc, #380]	@ (80072d0 <UART_SetConfig+0x2f0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d125      	bne.n	80071a2 <UART_SetConfig+0x1c2>
 8007156:	4b5c      	ldr	r3, [pc, #368]	@ (80072c8 <UART_SetConfig+0x2e8>)
 8007158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007160:	2b30      	cmp	r3, #48	@ 0x30
 8007162:	d016      	beq.n	8007192 <UART_SetConfig+0x1b2>
 8007164:	2b30      	cmp	r3, #48	@ 0x30
 8007166:	d818      	bhi.n	800719a <UART_SetConfig+0x1ba>
 8007168:	2b20      	cmp	r3, #32
 800716a:	d00a      	beq.n	8007182 <UART_SetConfig+0x1a2>
 800716c:	2b20      	cmp	r3, #32
 800716e:	d814      	bhi.n	800719a <UART_SetConfig+0x1ba>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <UART_SetConfig+0x19a>
 8007174:	2b10      	cmp	r3, #16
 8007176:	d008      	beq.n	800718a <UART_SetConfig+0x1aa>
 8007178:	e00f      	b.n	800719a <UART_SetConfig+0x1ba>
 800717a:	2300      	movs	r3, #0
 800717c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007180:	e06d      	b.n	800725e <UART_SetConfig+0x27e>
 8007182:	2302      	movs	r3, #2
 8007184:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007188:	e069      	b.n	800725e <UART_SetConfig+0x27e>
 800718a:	2304      	movs	r3, #4
 800718c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007190:	e065      	b.n	800725e <UART_SetConfig+0x27e>
 8007192:	2308      	movs	r3, #8
 8007194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007198:	e061      	b.n	800725e <UART_SetConfig+0x27e>
 800719a:	2310      	movs	r3, #16
 800719c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a0:	e05d      	b.n	800725e <UART_SetConfig+0x27e>
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a4b      	ldr	r2, [pc, #300]	@ (80072d4 <UART_SetConfig+0x2f4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d125      	bne.n	80071f8 <UART_SetConfig+0x218>
 80071ac:	4b46      	ldr	r3, [pc, #280]	@ (80072c8 <UART_SetConfig+0x2e8>)
 80071ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071b8:	d016      	beq.n	80071e8 <UART_SetConfig+0x208>
 80071ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80071bc:	d818      	bhi.n	80071f0 <UART_SetConfig+0x210>
 80071be:	2b80      	cmp	r3, #128	@ 0x80
 80071c0:	d00a      	beq.n	80071d8 <UART_SetConfig+0x1f8>
 80071c2:	2b80      	cmp	r3, #128	@ 0x80
 80071c4:	d814      	bhi.n	80071f0 <UART_SetConfig+0x210>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <UART_SetConfig+0x1f0>
 80071ca:	2b40      	cmp	r3, #64	@ 0x40
 80071cc:	d008      	beq.n	80071e0 <UART_SetConfig+0x200>
 80071ce:	e00f      	b.n	80071f0 <UART_SetConfig+0x210>
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d6:	e042      	b.n	800725e <UART_SetConfig+0x27e>
 80071d8:	2302      	movs	r3, #2
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071de:	e03e      	b.n	800725e <UART_SetConfig+0x27e>
 80071e0:	2304      	movs	r3, #4
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e6:	e03a      	b.n	800725e <UART_SetConfig+0x27e>
 80071e8:	2308      	movs	r3, #8
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ee:	e036      	b.n	800725e <UART_SetConfig+0x27e>
 80071f0:	2310      	movs	r3, #16
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f6:	e032      	b.n	800725e <UART_SetConfig+0x27e>
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a30      	ldr	r2, [pc, #192]	@ (80072c0 <UART_SetConfig+0x2e0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d12a      	bne.n	8007258 <UART_SetConfig+0x278>
 8007202:	4b31      	ldr	r3, [pc, #196]	@ (80072c8 <UART_SetConfig+0x2e8>)
 8007204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007208:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800720c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007210:	d01a      	beq.n	8007248 <UART_SetConfig+0x268>
 8007212:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007216:	d81b      	bhi.n	8007250 <UART_SetConfig+0x270>
 8007218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800721c:	d00c      	beq.n	8007238 <UART_SetConfig+0x258>
 800721e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007222:	d815      	bhi.n	8007250 <UART_SetConfig+0x270>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <UART_SetConfig+0x250>
 8007228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800722c:	d008      	beq.n	8007240 <UART_SetConfig+0x260>
 800722e:	e00f      	b.n	8007250 <UART_SetConfig+0x270>
 8007230:	2300      	movs	r3, #0
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007236:	e012      	b.n	800725e <UART_SetConfig+0x27e>
 8007238:	2302      	movs	r3, #2
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e00e      	b.n	800725e <UART_SetConfig+0x27e>
 8007240:	2304      	movs	r3, #4
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007246:	e00a      	b.n	800725e <UART_SetConfig+0x27e>
 8007248:	2308      	movs	r3, #8
 800724a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724e:	e006      	b.n	800725e <UART_SetConfig+0x27e>
 8007250:	2310      	movs	r3, #16
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007256:	e002      	b.n	800725e <UART_SetConfig+0x27e>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a17      	ldr	r2, [pc, #92]	@ (80072c0 <UART_SetConfig+0x2e0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	f040 80a8 	bne.w	80073ba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800726a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800726e:	2b08      	cmp	r3, #8
 8007270:	d834      	bhi.n	80072dc <UART_SetConfig+0x2fc>
 8007272:	a201      	add	r2, pc, #4	@ (adr r2, 8007278 <UART_SetConfig+0x298>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072dd 	.word	0x080072dd
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072dd 	.word	0x080072dd
 8007288:	080072ab 	.word	0x080072ab
 800728c:	080072dd 	.word	0x080072dd
 8007290:	080072dd 	.word	0x080072dd
 8007294:	080072dd 	.word	0x080072dd
 8007298:	080072b3 	.word	0x080072b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800729c:	f7fe fae8 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 80072a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072a2:	e021      	b.n	80072e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a4:	4b0c      	ldr	r3, [pc, #48]	@ (80072d8 <UART_SetConfig+0x2f8>)
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072a8:	e01e      	b.n	80072e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072aa:	f7fe fa73 	bl	8005794 <HAL_RCC_GetSysClockFreq>
 80072ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b0:	e01a      	b.n	80072e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b8:	e016      	b.n	80072e8 <UART_SetConfig+0x308>
 80072ba:	bf00      	nop
 80072bc:	cfff69f3 	.word	0xcfff69f3
 80072c0:	40008000 	.word	0x40008000
 80072c4:	40013800 	.word	0x40013800
 80072c8:	40021000 	.word	0x40021000
 80072cc:	40004400 	.word	0x40004400
 80072d0:	40004800 	.word	0x40004800
 80072d4:	40004c00 	.word	0x40004c00
 80072d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 812a 	beq.w	8007544 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	4a9e      	ldr	r2, [pc, #632]	@ (8007570 <UART_SetConfig+0x590>)
 80072f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072fa:	461a      	mov	r2, r3
 80072fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007302:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	4613      	mov	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4413      	add	r3, r2
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	429a      	cmp	r2, r3
 8007312:	d305      	bcc.n	8007320 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	429a      	cmp	r2, r3
 800731e:	d903      	bls.n	8007328 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007326:	e10d      	b.n	8007544 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	2200      	movs	r2, #0
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	60fa      	str	r2, [r7, #12]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007334:	4a8e      	ldr	r2, [pc, #568]	@ (8007570 <UART_SetConfig+0x590>)
 8007336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800733a:	b29b      	uxth	r3, r3
 800733c:	2200      	movs	r2, #0
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	607a      	str	r2, [r7, #4]
 8007342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800734a:	f7f9 fcd5 	bl	8000cf8 <__aeabi_uldivmod>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4610      	mov	r0, r2
 8007354:	4619      	mov	r1, r3
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	020b      	lsls	r3, r1, #8
 8007360:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007364:	0202      	lsls	r2, r0, #8
 8007366:	6979      	ldr	r1, [r7, #20]
 8007368:	6849      	ldr	r1, [r1, #4]
 800736a:	0849      	lsrs	r1, r1, #1
 800736c:	2000      	movs	r0, #0
 800736e:	460c      	mov	r4, r1
 8007370:	4605      	mov	r5, r0
 8007372:	eb12 0804 	adds.w	r8, r2, r4
 8007376:	eb43 0905 	adc.w	r9, r3, r5
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	469a      	mov	sl, r3
 8007382:	4693      	mov	fp, r2
 8007384:	4652      	mov	r2, sl
 8007386:	465b      	mov	r3, fp
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	f7f9 fcb4 	bl	8000cf8 <__aeabi_uldivmod>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4613      	mov	r3, r2
 8007396:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800739e:	d308      	bcc.n	80073b2 <UART_SetConfig+0x3d2>
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073a6:	d204      	bcs.n	80073b2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6a3a      	ldr	r2, [r7, #32]
 80073ae:	60da      	str	r2, [r3, #12]
 80073b0:	e0c8      	b.n	8007544 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073b8:	e0c4      	b.n	8007544 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c2:	d167      	bne.n	8007494 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80073c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d828      	bhi.n	800741e <UART_SetConfig+0x43e>
 80073cc:	a201      	add	r2, pc, #4	@ (adr r2, 80073d4 <UART_SetConfig+0x3f4>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	080073f9 	.word	0x080073f9
 80073d8:	08007401 	.word	0x08007401
 80073dc:	08007409 	.word	0x08007409
 80073e0:	0800741f 	.word	0x0800741f
 80073e4:	0800740f 	.word	0x0800740f
 80073e8:	0800741f 	.word	0x0800741f
 80073ec:	0800741f 	.word	0x0800741f
 80073f0:	0800741f 	.word	0x0800741f
 80073f4:	08007417 	.word	0x08007417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f8:	f7fe fa3a 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 80073fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073fe:	e014      	b.n	800742a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007400:	f7fe fa4c 	bl	800589c <HAL_RCC_GetPCLK2Freq>
 8007404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007406:	e010      	b.n	800742a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007408:	4b5a      	ldr	r3, [pc, #360]	@ (8007574 <UART_SetConfig+0x594>)
 800740a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800740c:	e00d      	b.n	800742a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800740e:	f7fe f9c1 	bl	8005794 <HAL_RCC_GetSysClockFreq>
 8007412:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007414:	e009      	b.n	800742a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800741a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800741c:	e005      	b.n	800742a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8089 	beq.w	8007544 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007436:	4a4e      	ldr	r2, [pc, #312]	@ (8007570 <UART_SetConfig+0x590>)
 8007438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800743c:	461a      	mov	r2, r3
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	fbb3 f3f2 	udiv	r3, r3, r2
 8007444:	005a      	lsls	r2, r3, #1
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	441a      	add	r2, r3
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	fbb2 f3f3 	udiv	r3, r2, r3
 8007456:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	2b0f      	cmp	r3, #15
 800745c:	d916      	bls.n	800748c <UART_SetConfig+0x4ac>
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007464:	d212      	bcs.n	800748c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	b29b      	uxth	r3, r3
 800746a:	f023 030f 	bic.w	r3, r3, #15
 800746e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	b29b      	uxth	r3, r3
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	b29a      	uxth	r2, r3
 800747c:	8bfb      	ldrh	r3, [r7, #30]
 800747e:	4313      	orrs	r3, r2
 8007480:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	8bfa      	ldrh	r2, [r7, #30]
 8007488:	60da      	str	r2, [r3, #12]
 800748a:	e05b      	b.n	8007544 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007492:	e057      	b.n	8007544 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007494:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007498:	2b08      	cmp	r3, #8
 800749a:	d828      	bhi.n	80074ee <UART_SetConfig+0x50e>
 800749c:	a201      	add	r2, pc, #4	@ (adr r2, 80074a4 <UART_SetConfig+0x4c4>)
 800749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a2:	bf00      	nop
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	080074ef 	.word	0x080074ef
 80074b4:	080074df 	.word	0x080074df
 80074b8:	080074ef 	.word	0x080074ef
 80074bc:	080074ef 	.word	0x080074ef
 80074c0:	080074ef 	.word	0x080074ef
 80074c4:	080074e7 	.word	0x080074e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c8:	f7fe f9d2 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 80074cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ce:	e014      	b.n	80074fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d0:	f7fe f9e4 	bl	800589c <HAL_RCC_GetPCLK2Freq>
 80074d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074d6:	e010      	b.n	80074fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d8:	4b26      	ldr	r3, [pc, #152]	@ (8007574 <UART_SetConfig+0x594>)
 80074da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074dc:	e00d      	b.n	80074fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074de:	f7fe f959 	bl	8005794 <HAL_RCC_GetSysClockFreq>
 80074e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074e4:	e009      	b.n	80074fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074ec:	e005      	b.n	80074fa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074f8:	bf00      	nop
    }

    if (pclk != 0U)
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d021      	beq.n	8007544 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007504:	4a1a      	ldr	r2, [pc, #104]	@ (8007570 <UART_SetConfig+0x590>)
 8007506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800750a:	461a      	mov	r2, r3
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	085b      	lsrs	r3, r3, #1
 8007518:	441a      	add	r2, r3
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007522:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d909      	bls.n	800753e <UART_SetConfig+0x55e>
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007530:	d205      	bcs.n	800753e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	b29a      	uxth	r2, r3
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60da      	str	r2, [r3, #12]
 800753c:	e002      	b.n	8007544 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2201      	movs	r2, #1
 8007548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2201      	movs	r2, #1
 8007550:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2200      	movs	r2, #0
 8007558:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2200      	movs	r2, #0
 800755e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007560:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007564:	4618      	mov	r0, r3
 8007566:	3730      	adds	r7, #48	@ 0x30
 8007568:	46bd      	mov	sp, r7
 800756a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800756e:	bf00      	nop
 8007570:	080145e8 	.word	0x080145e8
 8007574:	00f42400 	.word	0x00f42400

08007578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01a      	beq.n	800768e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007676:	d10a      	bne.n	800768e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]
  }
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b098      	sub	sp, #96	@ 0x60
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076cc:	f7fa f9de 	bl	8001a8c <HAL_GetTick>
 80076d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d12f      	bne.n	8007740 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e8:	2200      	movs	r2, #0
 80076ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f88e 	bl	8007810 <UART_WaitOnFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d022      	beq.n	8007740 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800770a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800770e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007718:	647b      	str	r3, [r7, #68]	@ 0x44
 800771a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800771e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e063      	b.n	8007808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b04      	cmp	r3, #4
 800774c:	d149      	bne.n	80077e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800774e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007756:	2200      	movs	r2, #0
 8007758:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f857 	bl	8007810 <UART_WaitOnFlagUntilTimeout>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d03c      	beq.n	80077e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	623b      	str	r3, [r7, #32]
   return(result);
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800777c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007786:	633b      	str	r3, [r7, #48]	@ 0x30
 8007788:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800778c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ba:	61fa      	str	r2, [r7, #28]
 80077bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	69b9      	ldr	r1, [r7, #24]
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	617b      	str	r3, [r7, #20]
   return(result);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e5      	bne.n	800779a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e012      	b.n	8007808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3758      	adds	r7, #88	@ 0x58
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007820:	e04f      	b.n	80078c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007828:	d04b      	beq.n	80078c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782a:	f7fa f92f 	bl	8001a8c <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	429a      	cmp	r2, r3
 8007838:	d302      	bcc.n	8007840 <UART_WaitOnFlagUntilTimeout+0x30>
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e04e      	b.n	80078e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d037      	beq.n	80078c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b80      	cmp	r3, #128	@ 0x80
 8007856:	d034      	beq.n	80078c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b40      	cmp	r3, #64	@ 0x40
 800785c:	d031      	beq.n	80078c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b08      	cmp	r3, #8
 800786a:	d110      	bne.n	800788e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2208      	movs	r2, #8
 8007872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 f838 	bl	80078ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2208      	movs	r2, #8
 800787e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e029      	b.n	80078e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800789c:	d111      	bne.n	80078c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f81e 	bl	80078ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e00f      	b.n	80078e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69da      	ldr	r2, [r3, #28]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4013      	ands	r3, r2
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	bf0c      	ite	eq
 80078d2:	2301      	moveq	r3, #1
 80078d4:	2300      	movne	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d0a0      	beq.n	8007822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b095      	sub	sp, #84	@ 0x54
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007910:	643b      	str	r3, [r7, #64]	@ 0x40
 8007912:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007916:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800791e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e6      	bne.n	80078f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3308      	adds	r3, #8
 800792a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	61fb      	str	r3, [r7, #28]
   return(result);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800793a:	f023 0301 	bic.w	r3, r3, #1
 800793e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3308      	adds	r3, #8
 8007946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007948:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800794a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800794e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e3      	bne.n	8007924 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007960:	2b01      	cmp	r3, #1
 8007962:	d118      	bne.n	8007996 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	60bb      	str	r3, [r7, #8]
   return(result);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f023 0310 	bic.w	r3, r3, #16
 8007978:	647b      	str	r3, [r7, #68]	@ 0x44
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007982:	61bb      	str	r3, [r7, #24]
 8007984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	613b      	str	r3, [r7, #16]
   return(result);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079aa:	bf00      	nop
 80079ac:	3754      	adds	r7, #84	@ 0x54
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff faed 	bl	8006fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b088      	sub	sp, #32
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079fe:	61fb      	str	r3, [r7, #28]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6979      	ldr	r1, [r7, #20]
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	613b      	str	r3, [r7, #16]
   return(result);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e6      	bne.n	80079ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fab8 	bl	8006fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a30:	bf00      	nop
 8007a32:	3720      	adds	r7, #32
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d101      	bne.n	8007a8a <HAL_UARTEx_DisableFifoMode+0x16>
 8007a86:	2302      	movs	r3, #2
 8007a88:	e027      	b.n	8007ada <HAL_UARTEx_DisableFifoMode+0x66>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2224      	movs	r2, #36	@ 0x24
 8007a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0201 	bic.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ab8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e02d      	b.n	8007b5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2224      	movs	r2, #36	@ 0x24
 8007b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0201 	bic.w	r2, r2, #1
 8007b24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f850 	bl	8007be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e02d      	b.n	8007bd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2224      	movs	r2, #36	@ 0x24
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0201 	bic.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f812 	bl	8007be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d108      	bne.n	8007c02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c00:	e031      	b.n	8007c66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c02:	2308      	movs	r3, #8
 8007c04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c06:	2308      	movs	r3, #8
 8007c08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	0e5b      	lsrs	r3, r3, #25
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 0307 	and.w	r3, r3, #7
 8007c18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	0f5b      	lsrs	r3, r3, #29
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 0307 	and.w	r3, r3, #7
 8007c28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	7b3a      	ldrb	r2, [r7, #12]
 8007c2e:	4911      	ldr	r1, [pc, #68]	@ (8007c74 <UARTEx_SetNbDataToProcess+0x94>)
 8007c30:	5c8a      	ldrb	r2, [r1, r2]
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c36:	7b3a      	ldrb	r2, [r7, #12]
 8007c38:	490f      	ldr	r1, [pc, #60]	@ (8007c78 <UARTEx_SetNbDataToProcess+0x98>)
 8007c3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	7b7a      	ldrb	r2, [r7, #13]
 8007c4c:	4909      	ldr	r1, [pc, #36]	@ (8007c74 <UARTEx_SetNbDataToProcess+0x94>)
 8007c4e:	5c8a      	ldrb	r2, [r1, r2]
 8007c50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c54:	7b7a      	ldrb	r2, [r7, #13]
 8007c56:	4908      	ldr	r1, [pc, #32]	@ (8007c78 <UARTEx_SetNbDataToProcess+0x98>)
 8007c58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	08014600 	.word	0x08014600
 8007c78:	08014608 	.word	0x08014608

08007c7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c8c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007c90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007cb2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007cb6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	43db      	mvns	r3, r3
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	4013      	ands	r3, r2
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	1d3b      	adds	r3, r7, #4
 8007cea:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b09d      	sub	sp, #116	@ 0x74
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d42:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	78db      	ldrb	r3, [r3, #3]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d81f      	bhi.n	8007d8e <USB_ActivateEndpoint+0x72>
 8007d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d54 <USB_ActivateEndpoint+0x38>)
 8007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d54:	08007d65 	.word	0x08007d65
 8007d58:	08007d81 	.word	0x08007d81
 8007d5c:	08007d97 	.word	0x08007d97
 8007d60:	08007d73 	.word	0x08007d73
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007d68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007d70:	e012      	b.n	8007d98 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d72:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007d76:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007d7a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007d7e:	e00b      	b.n	8007d98 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007d8c:	e004      	b.n	8007d98 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007d94:	e000      	b.n	8007d98 <USB_ActivateEndpoint+0x7c>
      break;
 8007d96:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	441a      	add	r2, r3
 8007da2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	b21b      	sxth	r3, r3
 8007dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd2:	b21a      	sxth	r2, r3
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	b21b      	sxth	r3, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b21b      	sxth	r3, r3
 8007dde:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	441a      	add	r2, r3
 8007dec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	7b1b      	ldrb	r3, [r3, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f040 8178 	bne.w	80080fe <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 8084 	beq.w	8007f20 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	4413      	add	r3, r2
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	00da      	lsls	r2, r3, #3
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	88db      	ldrh	r3, [r3, #6]
 8007e40:	085b      	lsrs	r3, r3, #1
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	827b      	strh	r3, [r7, #18]
 8007e5a:	8a7b      	ldrh	r3, [r7, #18]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01b      	beq.n	8007e9c <USB_ActivateEndpoint+0x180>
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e7a:	823b      	strh	r3, [r7, #16]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	441a      	add	r2, r3
 8007e86:	8a3b      	ldrh	r3, [r7, #16]
 8007e88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	78db      	ldrb	r3, [r3, #3]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d020      	beq.n	8007ee6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eba:	81bb      	strh	r3, [r7, #12]
 8007ebc:	89bb      	ldrh	r3, [r7, #12]
 8007ebe:	f083 0320 	eor.w	r3, r3, #32
 8007ec2:	81bb      	strh	r3, [r7, #12]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	441a      	add	r2, r3
 8007ece:	89bb      	ldrh	r3, [r7, #12]
 8007ed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	8013      	strh	r3, [r2, #0]
 8007ee4:	e2d5      	b.n	8008492 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007efc:	81fb      	strh	r3, [r7, #14]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	441a      	add	r2, r3
 8007f08:	89fb      	ldrh	r3, [r7, #14]
 8007f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	8013      	strh	r3, [r2, #0]
 8007f1e:	e2b8      	b.n	8008492 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	4413      	add	r3, r2
 8007f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	00da      	lsls	r2, r3, #3
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	88db      	ldrh	r3, [r3, #6]
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f52:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	461a      	mov	r2, r3
 8007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f64:	4413      	add	r3, r2
 8007f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	00da      	lsls	r2, r3, #3
 8007f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f70:	4413      	add	r3, r2
 8007f72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	801a      	strh	r2, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f8e:	d91d      	bls.n	8007fcc <USB_ActivateEndpoint+0x2b0>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	095b      	lsrs	r3, r3, #5
 8007f96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <USB_ActivateEndpoint+0x28e>
 8007fa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	029b      	lsls	r3, r3, #10
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	801a      	strh	r2, [r3, #0]
 8007fca:	e026      	b.n	800801a <USB_ActivateEndpoint+0x2fe>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <USB_ActivateEndpoint+0x2ce>
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	801a      	strh	r2, [r3, #0]
 8007fe8:	e017      	b.n	800801a <USB_ActivateEndpoint+0x2fe>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <USB_ActivateEndpoint+0x2e8>
 8007ffe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008000:	3301      	adds	r3, #1
 8008002:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29a      	uxth	r2, r3
 800800a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800800c:	b29b      	uxth	r3, r3
 800800e:	029b      	lsls	r3, r3, #10
 8008010:	b29b      	uxth	r3, r3
 8008012:	4313      	orrs	r3, r2
 8008014:	b29a      	uxth	r2, r3
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008028:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800802a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d01b      	beq.n	800806a <USB_ActivateEndpoint+0x34e>
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008048:	843b      	strh	r3, [r7, #32]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	441a      	add	r2, r3
 8008054:	8c3b      	ldrh	r3, [r7, #32]
 8008056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800805a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800805e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008066:	b29b      	uxth	r3, r3
 8008068:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d124      	bne.n	80080bc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008088:	83bb      	strh	r3, [r7, #28]
 800808a:	8bbb      	ldrh	r3, [r7, #28]
 800808c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008090:	83bb      	strh	r3, [r7, #28]
 8008092:	8bbb      	ldrh	r3, [r7, #28]
 8008094:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008098:	83bb      	strh	r3, [r7, #28]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	441a      	add	r2, r3
 80080a4:	8bbb      	ldrh	r3, [r7, #28]
 80080a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	8013      	strh	r3, [r2, #0]
 80080ba:	e1ea      	b.n	8008492 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d2:	83fb      	strh	r3, [r7, #30]
 80080d4:	8bfb      	ldrh	r3, [r7, #30]
 80080d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80080da:	83fb      	strh	r3, [r7, #30]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	8bfb      	ldrh	r3, [r7, #30]
 80080e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	8013      	strh	r3, [r2, #0]
 80080fc:	e1c9      	b.n	8008492 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	78db      	ldrb	r3, [r3, #3]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d11e      	bne.n	8008144 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800812e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008136:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800813a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]
 8008142:	e01d      	b.n	8008180 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800815a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800816c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008170:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800817c:	b29b      	uxth	r3, r3
 800817e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800818a:	b29b      	uxth	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008190:	4413      	add	r3, r2
 8008192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	00da      	lsls	r2, r3, #3
 800819a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800819c:	4413      	add	r3, r2
 800819e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	891b      	ldrh	r3, [r3, #8]
 80081a8:	085b      	lsrs	r3, r3, #1
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081be:	b29b      	uxth	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081c4:	4413      	add	r3, r2
 80081c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	00da      	lsls	r2, r3, #3
 80081ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081d0:	4413      	add	r3, r2
 80081d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80081d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	895b      	ldrh	r3, [r3, #10]
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	b29b      	uxth	r3, r3
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	785b      	ldrb	r3, [r3, #1]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f040 8093 	bne.w	8008318 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008202:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d01b      	beq.n	8008246 <USB_ActivateEndpoint+0x52a>
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008224:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	441a      	add	r2, r3
 8008230:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800823a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800823e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008242:	b29b      	uxth	r3, r3
 8008244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008254:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01b      	beq.n	8008296 <USB_ActivateEndpoint+0x57a>
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008274:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	441a      	add	r2, r3
 8008280:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800828a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800828e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008292:	b29b      	uxth	r3, r3
 8008294:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ac:	873b      	strh	r3, [r7, #56]	@ 0x38
 80082ae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80082b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80082b4:	873b      	strh	r3, [r7, #56]	@ 0x38
 80082b6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80082b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082bc:	873b      	strh	r3, [r7, #56]	@ 0x38
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	441a      	add	r2, r3
 80082c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80082ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082da:	b29b      	uxth	r3, r3
 80082dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	441a      	add	r2, r3
 8008300:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800830a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800830e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008312:	b29b      	uxth	r3, r3
 8008314:	8013      	strh	r3, [r2, #0]
 8008316:	e0bc      	b.n	8008492 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008328:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800832c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01d      	beq.n	8008370 <USB_ActivateEndpoint+0x654>
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	b29b      	uxth	r3, r3
 8008342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800834a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	441a      	add	r2, r3
 8008358:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800835c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008364:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800836c:	b29b      	uxth	r3, r3
 800836e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008380:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01d      	beq.n	80083c8 <USB_ActivateEndpoint+0x6ac>
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800839e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	441a      	add	r2, r3
 80083b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80083b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	78db      	ldrb	r3, [r3, #3]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d024      	beq.n	800841a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80083ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80083ee:	f083 0320 	eor.w	r3, r3, #32
 80083f2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	441a      	add	r2, r3
 8008400:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800840c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008414:	b29b      	uxth	r3, r3
 8008416:	8013      	strh	r3, [r2, #0]
 8008418:	e01d      	b.n	8008456 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800842c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008430:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	441a      	add	r2, r3
 800843e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800844a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800844e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008452:	b29b      	uxth	r3, r3
 8008454:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	441a      	add	r2, r3
 800847a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800847e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800848a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800848e:	b29b      	uxth	r3, r3
 8008490:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008492:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008496:	4618      	mov	r0, r3
 8008498:	3774      	adds	r7, #116	@ 0x74
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop

080084a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b08d      	sub	sp, #52	@ 0x34
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	7b1b      	ldrb	r3, [r3, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f040 808e 	bne.w	80085d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d044      	beq.n	800854a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	81bb      	strh	r3, [r7, #12]
 80084ce:	89bb      	ldrh	r3, [r7, #12]
 80084d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01b      	beq.n	8008510 <USB_DeactivateEndpoint+0x6c>
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ee:	817b      	strh	r3, [r7, #10]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	441a      	add	r2, r3
 80084fa:	897b      	ldrh	r3, [r7, #10]
 80084fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008500:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008508:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800850c:	b29b      	uxth	r3, r3
 800850e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008526:	813b      	strh	r3, [r7, #8]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	441a      	add	r2, r3
 8008532:	893b      	ldrh	r3, [r7, #8]
 8008534:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008538:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800853c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008544:	b29b      	uxth	r3, r3
 8008546:	8013      	strh	r3, [r2, #0]
 8008548:	e192      	b.n	8008870 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	827b      	strh	r3, [r7, #18]
 8008558:	8a7b      	ldrh	r3, [r7, #18]
 800855a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d01b      	beq.n	800859a <USB_DeactivateEndpoint+0xf6>
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29b      	uxth	r3, r3
 8008570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008578:	823b      	strh	r3, [r7, #16]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	441a      	add	r2, r3
 8008584:	8a3b      	ldrh	r3, [r7, #16]
 8008586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800858a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800858e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008596:	b29b      	uxth	r3, r3
 8008598:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b0:	81fb      	strh	r3, [r7, #14]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]
 80085d2:	e14d      	b.n	8008870 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f040 80a5 	bne.w	8008728 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	843b      	strh	r3, [r7, #32]
 80085ec:	8c3b      	ldrh	r3, [r7, #32]
 80085ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d01b      	beq.n	800862e <USB_DeactivateEndpoint+0x18a>
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	b29b      	uxth	r3, r3
 8008604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800860c:	83fb      	strh	r3, [r7, #30]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	441a      	add	r2, r3
 8008618:	8bfb      	ldrh	r3, [r7, #30]
 800861a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800861e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800862a:	b29b      	uxth	r3, r3
 800862c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	83bb      	strh	r3, [r7, #28]
 800863c:	8bbb      	ldrh	r3, [r7, #28]
 800863e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d01b      	beq.n	800867e <USB_DeactivateEndpoint+0x1da>
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29b      	uxth	r3, r3
 8008654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800865c:	837b      	strh	r3, [r7, #26]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	441a      	add	r2, r3
 8008668:	8b7b      	ldrh	r3, [r7, #26]
 800866a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800866e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008676:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800867a:	b29b      	uxth	r3, r3
 800867c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	b29b      	uxth	r3, r3
 800868c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008694:	833b      	strh	r3, [r7, #24]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	441a      	add	r2, r3
 80086a0:	8b3b      	ldrh	r3, [r7, #24]
 80086a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086cc:	82fb      	strh	r3, [r7, #22]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	441a      	add	r2, r3
 80086d8:	8afb      	ldrh	r3, [r7, #22]
 80086da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008704:	82bb      	strh	r3, [r7, #20]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	441a      	add	r2, r3
 8008710:	8abb      	ldrh	r3, [r7, #20]
 8008712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800871a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800871e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008722:	b29b      	uxth	r3, r3
 8008724:	8013      	strh	r3, [r2, #0]
 8008726:	e0a3      	b.n	8008870 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008736:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01b      	beq.n	8008778 <USB_DeactivateEndpoint+0x2d4>
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	b29b      	uxth	r3, r3
 800874e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008756:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	441a      	add	r2, r3
 8008762:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800876c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008774:	b29b      	uxth	r3, r3
 8008776:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008786:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01b      	beq.n	80087c8 <USB_DeactivateEndpoint+0x324>
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	b29b      	uxth	r3, r3
 800879e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	441a      	add	r2, r3
 80087b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80087b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	441a      	add	r2, r3
 80087ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	b29b      	uxth	r3, r3
 800880e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008816:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	441a      	add	r2, r3
 8008822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800882c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008834:	b29b      	uxth	r3, r3
 8008836:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800884a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800884e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	441a      	add	r2, r3
 800885a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800885c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800886c:	b29b      	uxth	r3, r3
 800886e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3734      	adds	r7, #52	@ 0x34
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b0c2      	sub	sp, #264	@ 0x108
 8008882:	af00      	add	r7, sp, #0
 8008884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800888c:	6018      	str	r0, [r3, #0]
 800888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008896:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	f040 86b7 	bne.w	8009618 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80088aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699a      	ldr	r2, [r3, #24]
 80088b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d908      	bls.n	80088d8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80088c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80088d6:	e007      	b.n	80088e8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80088d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80088e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	7b1b      	ldrb	r3, [r3, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d13a      	bne.n	800896e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80088f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6959      	ldr	r1, [r3, #20]
 8008904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	88da      	ldrh	r2, [r3, #6]
 8008910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008914:	b29b      	uxth	r3, r3
 8008916:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800891a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800891e:	6800      	ldr	r0, [r0, #0]
 8008920:	f001 fc98 	bl	800a254 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008928:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	613b      	str	r3, [r7, #16]
 8008930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800893e:	b29b      	uxth	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	4413      	add	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800894c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	00da      	lsls	r2, r3, #3
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	4413      	add	r3, r2
 800895a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	f000 be1f 	b.w	80095ac <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800896e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	78db      	ldrb	r3, [r3, #3]
 800897a:	2b02      	cmp	r3, #2
 800897c:	f040 8462 	bne.w	8009244 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6a1a      	ldr	r2, [r3, #32]
 800898c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	429a      	cmp	r2, r3
 800899a:	f240 83df 	bls.w	800915c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800899e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80089c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	441a      	add	r2, r3
 80089e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80089e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80089f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80089fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0a:	1ad2      	subs	r2, r2, r3
 8008a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 81c7 	beq.w	8008dce <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d177      	bne.n	8008b4c <USB_EPStartXfer+0x2ce>
 8008a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	4413      	add	r3, r2
 8008a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	00da      	lsls	r2, r3, #3
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	4413      	add	r3, r2
 8008a92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aac:	2b3e      	cmp	r3, #62	@ 0x3e
 8008aae:	d921      	bls.n	8008af4 <USB_EPStartXfer+0x276>
 8008ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <USB_EPStartXfer+0x252>
 8008ac6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008aca:	3b01      	subs	r3, #1
 8008acc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	029b      	lsls	r3, r3, #10
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	e050      	b.n	8008b96 <USB_EPStartXfer+0x318>
 8008af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10a      	bne.n	8008b12 <USB_EPStartXfer+0x294>
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0e:	801a      	strh	r2, [r3, #0]
 8008b10:	e041      	b.n	8008b96 <USB_EPStartXfer+0x318>
 8008b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b16:	085b      	lsrs	r3, r3, #1
 8008b18:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <USB_EPStartXfer+0x2b4>
 8008b28:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	029b      	lsls	r3, r3, #10
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	4313      	orrs	r3, r2
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b48:	801a      	strh	r2, [r3, #0]
 8008b4a:	e024      	b.n	8008b96 <USB_EPStartXfer+0x318>
 8008b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d11c      	bne.n	8008b96 <USB_EPStartXfer+0x318>
 8008b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	4413      	add	r3, r2
 8008b72:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	00da      	lsls	r2, r3, #3
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	4413      	add	r3, r2
 8008b86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	895b      	ldrh	r3, [r3, #10]
 8008ba2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6959      	ldr	r1, [r3, #20]
 8008bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008bbc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008bc0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008bc4:	6800      	ldr	r0, [r0, #0]
 8008bc6:	f001 fb45 	bl	800a254 <USB_WritePMA>
            ep->xfer_buff += len;
 8008bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695a      	ldr	r2, [r3, #20]
 8008bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bda:	441a      	add	r2, r3
 8008bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6a1a      	ldr	r2, [r3, #32]
 8008bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d90f      	bls.n	8008c24 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6a1a      	ldr	r2, [r3, #32]
 8008c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c14:	1ad2      	subs	r2, r2, r3
 8008c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	621a      	str	r2, [r3, #32]
 8008c22:	e00e      	b.n	8008c42 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d177      	bne.n	8008d42 <USB_EPStartXfer+0x4c4>
 8008c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	61bb      	str	r3, [r7, #24]
 8008c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	461a      	mov	r2, r3
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	4413      	add	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
 8008c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	00da      	lsls	r2, r3, #3
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	4413      	add	r3, r2
 8008c88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ca4:	d921      	bls.n	8008cea <USB_EPStartXfer+0x46c>
 8008ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb4:	f003 031f 	and.w	r3, r3, #31
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d104      	bne.n	8008cc6 <USB_EPStartXfer+0x448>
 8008cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	029b      	lsls	r3, r3, #10
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	801a      	strh	r2, [r3, #0]
 8008ce8:	e056      	b.n	8008d98 <USB_EPStartXfer+0x51a>
 8008cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <USB_EPStartXfer+0x48a>
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	e047      	b.n	8008d98 <USB_EPStartXfer+0x51a>
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d0c:	085b      	lsrs	r3, r3, #1
 8008d0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d004      	beq.n	8008d28 <USB_EPStartXfer+0x4aa>
 8008d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d22:	3301      	adds	r3, #1
 8008d24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	029b      	lsls	r3, r3, #10
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	801a      	strh	r2, [r3, #0]
 8008d40:	e02a      	b.n	8008d98 <USB_EPStartXfer+0x51a>
 8008d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	785b      	ldrb	r3, [r3, #1]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d122      	bne.n	8008d98 <USB_EPStartXfer+0x51a>
 8008d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	623b      	str	r3, [r7, #32]
 8008d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	4413      	add	r3, r2
 8008d74:	623b      	str	r3, [r7, #32]
 8008d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	00da      	lsls	r2, r3, #3
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	4413      	add	r3, r2
 8008d88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d8c:	61fb      	str	r3, [r7, #28]
 8008d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	891b      	ldrh	r3, [r3, #8]
 8008da4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6959      	ldr	r1, [r3, #20]
 8008db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008dbe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008dc2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008dc6:	6800      	ldr	r0, [r0, #0]
 8008dc8:	f001 fa44 	bl	800a254 <USB_WritePMA>
 8008dcc:	e3ee      	b.n	80095ac <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d177      	bne.n	8008ece <USB_EPStartXfer+0x650>
 8008dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dfe:	4413      	add	r3, r2
 8008e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	00da      	lsls	r2, r3, #3
 8008e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e12:	4413      	add	r3, r2
 8008e14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e28:	801a      	strh	r2, [r3, #0]
 8008e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e30:	d921      	bls.n	8008e76 <USB_EPStartXfer+0x5f8>
 8008e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e36:	095b      	lsrs	r3, r3, #5
 8008e38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e40:	f003 031f 	and.w	r3, r3, #31
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d104      	bne.n	8008e52 <USB_EPStartXfer+0x5d4>
 8008e48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	029b      	lsls	r3, r3, #10
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4313      	orrs	r3, r2
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e72:	801a      	strh	r2, [r3, #0]
 8008e74:	e056      	b.n	8008f24 <USB_EPStartXfer+0x6a6>
 8008e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10a      	bne.n	8008e94 <USB_EPStartXfer+0x616>
 8008e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	e047      	b.n	8008f24 <USB_EPStartXfer+0x6a6>
 8008e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d004      	beq.n	8008eb4 <USB_EPStartXfer+0x636>
 8008eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008eae:	3301      	adds	r3, #1
 8008eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	029b      	lsls	r3, r3, #10
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eca:	801a      	strh	r2, [r3, #0]
 8008ecc:	e02a      	b.n	8008f24 <USB_EPStartXfer+0x6a6>
 8008ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	785b      	ldrb	r3, [r3, #1]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d122      	bne.n	8008f24 <USB_EPStartXfer+0x6a6>
 8008ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	461a      	mov	r2, r3
 8008efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008efe:	4413      	add	r3, r2
 8008f00:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	00da      	lsls	r2, r3, #3
 8008f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f12:	4413      	add	r3, r2
 8008f14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	891b      	ldrh	r3, [r3, #8]
 8008f30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6959      	ldr	r1, [r3, #20]
 8008f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f4a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f4e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f52:	6800      	ldr	r0, [r0, #0]
 8008f54:	f001 f97e 	bl	800a254 <USB_WritePMA>
            ep->xfer_buff += len;
 8008f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	695a      	ldr	r2, [r3, #20]
 8008f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f68:	441a      	add	r2, r3
 8008f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6a1a      	ldr	r2, [r3, #32]
 8008f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d90f      	bls.n	8008fb2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6a1a      	ldr	r2, [r3, #32]
 8008f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa2:	1ad2      	subs	r2, r2, r3
 8008fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	621a      	str	r2, [r3, #32]
 8008fb0:	e00e      	b.n	8008fd0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d177      	bne.n	80090dc <USB_EPStartXfer+0x85e>
 8008fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ffc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009006:	b29b      	uxth	r3, r3
 8009008:	461a      	mov	r2, r3
 800900a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900c:	4413      	add	r3, r2
 800900e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	00da      	lsls	r2, r3, #3
 800901e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009020:	4413      	add	r3, r2
 8009022:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009026:	637b      	str	r3, [r7, #52]	@ 0x34
 8009028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	b29b      	uxth	r3, r3
 800902e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009032:	b29a      	uxth	r2, r3
 8009034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800903c:	2b3e      	cmp	r3, #62	@ 0x3e
 800903e:	d921      	bls.n	8009084 <USB_EPStartXfer+0x806>
 8009040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800904a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800904e:	f003 031f 	and.w	r3, r3, #31
 8009052:	2b00      	cmp	r3, #0
 8009054:	d104      	bne.n	8009060 <USB_EPStartXfer+0x7e2>
 8009056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905a:	3b01      	subs	r3, #1
 800905c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	b29a      	uxth	r2, r3
 8009066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906a:	b29b      	uxth	r3, r3
 800906c:	029b      	lsls	r3, r3, #10
 800906e:	b29b      	uxth	r3, r3
 8009070:	4313      	orrs	r3, r2
 8009072:	b29b      	uxth	r3, r3
 8009074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800907c:	b29a      	uxth	r2, r3
 800907e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009080:	801a      	strh	r2, [r3, #0]
 8009082:	e050      	b.n	8009126 <USB_EPStartXfer+0x8a8>
 8009084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <USB_EPStartXfer+0x824>
 800908c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29b      	uxth	r3, r3
 8009092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909a:	b29a      	uxth	r2, r3
 800909c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909e:	801a      	strh	r2, [r3, #0]
 80090a0:	e041      	b.n	8009126 <USB_EPStartXfer+0x8a8>
 80090a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a6:	085b      	lsrs	r3, r3, #1
 80090a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80090ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <USB_EPStartXfer+0x844>
 80090b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090bc:	3301      	adds	r3, #1
 80090be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80090c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	029b      	lsls	r3, r3, #10
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	4313      	orrs	r3, r2
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d8:	801a      	strh	r2, [r3, #0]
 80090da:	e024      	b.n	8009126 <USB_EPStartXfer+0x8a8>
 80090dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d11c      	bne.n	8009126 <USB_EPStartXfer+0x8a8>
 80090ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009100:	4413      	add	r3, r2
 8009102:	643b      	str	r3, [r7, #64]	@ 0x40
 8009104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	00da      	lsls	r2, r3, #3
 8009112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009114:	4413      	add	r3, r2
 8009116:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800911c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009120:	b29a      	uxth	r2, r3
 8009122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009124:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800912a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	895b      	ldrh	r3, [r3, #10]
 8009132:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6959      	ldr	r1, [r3, #20]
 8009142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009146:	b29b      	uxth	r3, r3
 8009148:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800914c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009150:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009154:	6800      	ldr	r0, [r0, #0]
 8009156:	f001 f87d 	bl	800a254 <USB_WritePMA>
 800915a:	e227      	b.n	80095ac <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800915c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800916c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009170:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	b29b      	uxth	r3, r3
 800918a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800918e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009192:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	441a      	add	r2, r3
 80091b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80091b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091e8:	4413      	add	r3, r2
 80091ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	00da      	lsls	r2, r3, #3
 80091fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091fc:	4413      	add	r3, r2
 80091fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009202:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009208:	b29a      	uxth	r2, r3
 800920a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800920c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800920e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	891b      	ldrh	r3, [r3, #8]
 800921a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800921e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6959      	ldr	r1, [r3, #20]
 800922a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800922e:	b29b      	uxth	r3, r3
 8009230:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009234:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009238:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800923c:	6800      	ldr	r0, [r0, #0]
 800923e:	f001 f809 	bl	800a254 <USB_WritePMA>
 8009242:	e1b3      	b.n	80095ac <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6a1a      	ldr	r2, [r3, #32]
 8009250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009254:	1ad2      	subs	r2, r2, r3
 8009256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800925a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	b29b      	uxth	r3, r3
 8009280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80c6 	beq.w	8009416 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800928a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	673b      	str	r3, [r7, #112]	@ 0x70
 8009296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800929a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d177      	bne.n	8009396 <USB_EPStartXfer+0xb18>
 80092a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	461a      	mov	r2, r3
 80092c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092c6:	4413      	add	r3, r2
 80092c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	00da      	lsls	r2, r3, #3
 80092d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092da:	4413      	add	r3, r2
 80092dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80092e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80092e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80092f8:	d921      	bls.n	800933e <USB_EPStartXfer+0xac0>
 80092fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092fe:	095b      	lsrs	r3, r3, #5
 8009300:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009308:	f003 031f 	and.w	r3, r3, #31
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <USB_EPStartXfer+0xa9c>
 8009310:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009314:	3b01      	subs	r3, #1
 8009316:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800931a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	b29a      	uxth	r2, r3
 8009320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009324:	b29b      	uxth	r3, r3
 8009326:	029b      	lsls	r3, r3, #10
 8009328:	b29b      	uxth	r3, r3
 800932a:	4313      	orrs	r3, r2
 800932c:	b29b      	uxth	r3, r3
 800932e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009336:	b29a      	uxth	r2, r3
 8009338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800933a:	801a      	strh	r2, [r3, #0]
 800933c:	e050      	b.n	80093e0 <USB_EPStartXfer+0xb62>
 800933e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10a      	bne.n	800935c <USB_EPStartXfer+0xade>
 8009346:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	b29b      	uxth	r3, r3
 800934c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009354:	b29a      	uxth	r2, r3
 8009356:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	e041      	b.n	80093e0 <USB_EPStartXfer+0xb62>
 800935c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009360:	085b      	lsrs	r3, r3, #1
 8009362:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d004      	beq.n	800937c <USB_EPStartXfer+0xafe>
 8009372:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009376:	3301      	adds	r3, #1
 8009378:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800937c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	b29a      	uxth	r2, r3
 8009382:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009386:	b29b      	uxth	r3, r3
 8009388:	029b      	lsls	r3, r3, #10
 800938a:	b29b      	uxth	r3, r3
 800938c:	4313      	orrs	r3, r2
 800938e:	b29a      	uxth	r2, r3
 8009390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009392:	801a      	strh	r2, [r3, #0]
 8009394:	e024      	b.n	80093e0 <USB_EPStartXfer+0xb62>
 8009396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	785b      	ldrb	r3, [r3, #1]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d11c      	bne.n	80093e0 <USB_EPStartXfer+0xb62>
 80093a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	461a      	mov	r2, r3
 80093b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093ba:	4413      	add	r3, r2
 80093bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80093be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	00da      	lsls	r2, r3, #3
 80093cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093ce:	4413      	add	r3, r2
 80093d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093da:	b29a      	uxth	r2, r3
 80093dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80093e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	895b      	ldrh	r3, [r3, #10]
 80093ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6959      	ldr	r1, [r3, #20]
 80093fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009400:	b29b      	uxth	r3, r3
 8009402:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009406:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800940a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800940e:	6800      	ldr	r0, [r0, #0]
 8009410:	f000 ff20 	bl	800a254 <USB_WritePMA>
 8009414:	e0ca      	b.n	80095ac <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	785b      	ldrb	r3, [r3, #1]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d177      	bne.n	8009516 <USB_EPStartXfer+0xc98>
 8009426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800942a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009440:	b29b      	uxth	r3, r3
 8009442:	461a      	mov	r2, r3
 8009444:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009446:	4413      	add	r3, r2
 8009448:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800944a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	00da      	lsls	r2, r3, #3
 8009458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800945a:	4413      	add	r3, r2
 800945c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009460:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009462:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b29b      	uxth	r3, r3
 8009468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800946c:	b29a      	uxth	r2, r3
 800946e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009470:	801a      	strh	r2, [r3, #0]
 8009472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009476:	2b3e      	cmp	r3, #62	@ 0x3e
 8009478:	d921      	bls.n	80094be <USB_EPStartXfer+0xc40>
 800947a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947e:	095b      	lsrs	r3, r3, #5
 8009480:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009488:	f003 031f 	and.w	r3, r3, #31
 800948c:	2b00      	cmp	r3, #0
 800948e:	d104      	bne.n	800949a <USB_EPStartXfer+0xc1c>
 8009490:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009494:	3b01      	subs	r3, #1
 8009496:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800949a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	b29a      	uxth	r2, r3
 80094a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	029b      	lsls	r3, r3, #10
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	4313      	orrs	r3, r2
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094ba:	801a      	strh	r2, [r3, #0]
 80094bc:	e05c      	b.n	8009578 <USB_EPStartXfer+0xcfa>
 80094be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10a      	bne.n	80094dc <USB_EPStartXfer+0xc5e>
 80094c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	e04d      	b.n	8009578 <USB_EPStartXfer+0xcfa>
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e0:	085b      	lsrs	r3, r3, #1
 80094e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80094e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d004      	beq.n	80094fc <USB_EPStartXfer+0xc7e>
 80094f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80094f6:	3301      	adds	r3, #1
 80094f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80094fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29a      	uxth	r2, r3
 8009502:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009506:	b29b      	uxth	r3, r3
 8009508:	029b      	lsls	r3, r3, #10
 800950a:	b29b      	uxth	r3, r3
 800950c:	4313      	orrs	r3, r2
 800950e:	b29a      	uxth	r2, r3
 8009510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009512:	801a      	strh	r2, [r3, #0]
 8009514:	e030      	b.n	8009578 <USB_EPStartXfer+0xcfa>
 8009516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d128      	bne.n	8009578 <USB_EPStartXfer+0xcfa>
 8009526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009542:	b29b      	uxth	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800954a:	4413      	add	r3, r2
 800954c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	00da      	lsls	r2, r3, #3
 800955e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009562:	4413      	add	r3, r2
 8009564:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800956c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009570:	b29a      	uxth	r2, r3
 8009572:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009576:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800957c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	891b      	ldrh	r3, [r3, #8]
 8009584:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800958c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6959      	ldr	r1, [r3, #20]
 8009594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009598:	b29b      	uxth	r3, r3
 800959a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800959e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80095a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80095a6:	6800      	ldr	r0, [r0, #0]
 80095a8:	f000 fe54 	bl	800a254 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80095ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095d2:	817b      	strh	r3, [r7, #10]
 80095d4:	897b      	ldrh	r3, [r7, #10]
 80095d6:	f083 0310 	eor.w	r3, r3, #16
 80095da:	817b      	strh	r3, [r7, #10]
 80095dc:	897b      	ldrh	r3, [r7, #10]
 80095de:	f083 0320 	eor.w	r3, r3, #32
 80095e2:	817b      	strh	r3, [r7, #10]
 80095e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	441a      	add	r2, r3
 80095fe:	897b      	ldrh	r3, [r7, #10]
 8009600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800960c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009610:	b29b      	uxth	r3, r3
 8009612:	8013      	strh	r3, [r2, #0]
 8009614:	f000 bcde 	b.w	8009fd4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	7b1b      	ldrb	r3, [r3, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f040 80bb 	bne.w	80097a0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800962a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800962e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800963a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	429a      	cmp	r2, r3
 8009644:	d917      	bls.n	8009676 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699a      	ldr	r2, [r3, #24]
 8009662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009666:	1ad2      	subs	r2, r2, r3
 8009668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	619a      	str	r2, [r3, #24]
 8009674:	e00e      	b.n	8009694 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800968a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2200      	movs	r2, #0
 8009692:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009698:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	461a      	mov	r2, r3
 80096b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80096b8:	4413      	add	r3, r2
 80096ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	00da      	lsls	r2, r3, #3
 80096cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80096d0:	4413      	add	r3, r2
 80096d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80096f4:	d924      	bls.n	8009740 <USB_EPStartXfer+0xec2>
 80096f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096fa:	095b      	lsrs	r3, r3, #5
 80096fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009704:	f003 031f 	and.w	r3, r3, #31
 8009708:	2b00      	cmp	r3, #0
 800970a:	d104      	bne.n	8009716 <USB_EPStartXfer+0xe98>
 800970c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009710:	3b01      	subs	r3, #1
 8009712:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29a      	uxth	r2, r3
 800971e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009722:	b29b      	uxth	r3, r3
 8009724:	029b      	lsls	r3, r3, #10
 8009726:	b29b      	uxth	r3, r3
 8009728:	4313      	orrs	r3, r2
 800972a:	b29b      	uxth	r3, r3
 800972c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009734:	b29a      	uxth	r2, r3
 8009736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800973a:	801a      	strh	r2, [r3, #0]
 800973c:	f000 bc10 	b.w	8009f60 <USB_EPStartXfer+0x16e2>
 8009740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10c      	bne.n	8009762 <USB_EPStartXfer+0xee4>
 8009748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009758:	b29a      	uxth	r2, r3
 800975a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800975e:	801a      	strh	r2, [r3, #0]
 8009760:	e3fe      	b.n	8009f60 <USB_EPStartXfer+0x16e2>
 8009762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009766:	085b      	lsrs	r3, r3, #1
 8009768:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800976c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <USB_EPStartXfer+0xf04>
 8009778:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800977c:	3301      	adds	r3, #1
 800977e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009782:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	b29a      	uxth	r2, r3
 800978a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800978e:	b29b      	uxth	r3, r3
 8009790:	029b      	lsls	r3, r3, #10
 8009792:	b29b      	uxth	r3, r3
 8009794:	4313      	orrs	r3, r2
 8009796:	b29a      	uxth	r2, r3
 8009798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	e3df      	b.n	8009f60 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80097a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	78db      	ldrb	r3, [r3, #3]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	f040 8218 	bne.w	8009be2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80097b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	785b      	ldrb	r3, [r3, #1]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f040 809d 	bne.w	80098fe <USB_EPStartXfer+0x1080>
 80097c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	461a      	mov	r2, r3
 80097e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097e8:	4413      	add	r3, r2
 80097ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	00da      	lsls	r2, r3, #3
 80097fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009800:	4413      	add	r3, r2
 8009802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009806:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800980a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	b29b      	uxth	r3, r3
 8009812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009816:	b29a      	uxth	r2, r3
 8009818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800981c:	801a      	strh	r2, [r3, #0]
 800981e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2b3e      	cmp	r3, #62	@ 0x3e
 800982c:	d92b      	bls.n	8009886 <USB_EPStartXfer+0x1008>
 800982e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	095b      	lsrs	r3, r3, #5
 800983c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	f003 031f 	and.w	r3, r3, #31
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <USB_EPStartXfer+0xfe0>
 8009854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009858:	3b01      	subs	r3, #1
 800985a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800985e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29a      	uxth	r2, r3
 8009866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800986a:	b29b      	uxth	r3, r3
 800986c:	029b      	lsls	r3, r3, #10
 800986e:	b29b      	uxth	r3, r3
 8009870:	4313      	orrs	r3, r2
 8009872:	b29b      	uxth	r3, r3
 8009874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800987c:	b29a      	uxth	r2, r3
 800987e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009882:	801a      	strh	r2, [r3, #0]
 8009884:	e070      	b.n	8009968 <USB_EPStartXfer+0x10ea>
 8009886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800988a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10c      	bne.n	80098b0 <USB_EPStartXfer+0x1032>
 8009896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	b29b      	uxth	r3, r3
 800989e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098ac:	801a      	strh	r2, [r3, #0]
 80098ae:	e05b      	b.n	8009968 <USB_EPStartXfer+0x10ea>
 80098b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	085b      	lsrs	r3, r3, #1
 80098be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d004      	beq.n	80098e0 <USB_EPStartXfer+0x1062>
 80098d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098da:	3301      	adds	r3, #1
 80098dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	029b      	lsls	r3, r3, #10
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	4313      	orrs	r3, r2
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098fa:	801a      	strh	r2, [r3, #0]
 80098fc:	e034      	b.n	8009968 <USB_EPStartXfer+0x10ea>
 80098fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	785b      	ldrb	r3, [r3, #1]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d12c      	bne.n	8009968 <USB_EPStartXfer+0x10ea>
 800990e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800991c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800992a:	b29b      	uxth	r3, r3
 800992c:	461a      	mov	r2, r3
 800992e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009932:	4413      	add	r3, r2
 8009934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800993c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	00da      	lsls	r2, r3, #3
 8009946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800994a:	4413      	add	r3, r2
 800994c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	b29a      	uxth	r2, r3
 8009962:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	785b      	ldrb	r3, [r3, #1]
 8009982:	2b00      	cmp	r3, #0
 8009984:	f040 809d 	bne.w	8009ac2 <USB_EPStartXfer+0x1244>
 8009988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800999a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	461a      	mov	r2, r3
 80099a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099ac:	4413      	add	r3, r2
 80099ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80099b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	00da      	lsls	r2, r3, #3
 80099c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099c4:	4413      	add	r3, r2
 80099c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099da:	b29a      	uxth	r2, r3
 80099dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099e0:	801a      	strh	r2, [r3, #0]
 80099e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80099f0:	d92b      	bls.n	8009a4a <USB_EPStartXfer+0x11cc>
 80099f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	095b      	lsrs	r3, r3, #5
 8009a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	f003 031f 	and.w	r3, r3, #31
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d104      	bne.n	8009a22 <USB_EPStartXfer+0x11a4>
 8009a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	029b      	lsls	r3, r3, #10
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	4313      	orrs	r3, r2
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a46:	801a      	strh	r2, [r3, #0]
 8009a48:	e069      	b.n	8009b1e <USB_EPStartXfer+0x12a0>
 8009a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10c      	bne.n	8009a74 <USB_EPStartXfer+0x11f6>
 8009a5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a70:	801a      	strh	r2, [r3, #0]
 8009a72:	e054      	b.n	8009b1e <USB_EPStartXfer+0x12a0>
 8009a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	085b      	lsrs	r3, r3, #1
 8009a82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d004      	beq.n	8009aa4 <USB_EPStartXfer+0x1226>
 8009a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	029b      	lsls	r3, r3, #10
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009abe:	801a      	strh	r2, [r3, #0]
 8009ac0:	e02d      	b.n	8009b1e <USB_EPStartXfer+0x12a0>
 8009ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d125      	bne.n	8009b1e <USB_EPStartXfer+0x12a0>
 8009ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ae8:	4413      	add	r3, r2
 8009aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	00da      	lsls	r2, r3, #3
 8009afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009b00:	4413      	add	r3, r2
 8009b02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b1c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 8218 	beq.w	8009f60 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b50:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <USB_EPStartXfer+0x12ea>
 8009b5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10d      	bne.n	8009b84 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f040 81f5 	bne.w	8009f60 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f040 81ee 	bne.w	8009f60 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009baa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	441a      	add	r2, r3
 8009bc8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	8013      	strh	r3, [r2, #0]
 8009be0:	e1be      	b.n	8009f60 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	78db      	ldrb	r3, [r3, #3]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	f040 81b4 	bne.w	8009f5c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	699a      	ldr	r2, [r3, #24]
 8009c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d917      	bls.n	8009c40 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	699a      	ldr	r2, [r3, #24]
 8009c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c30:	1ad2      	subs	r2, r2, r3
 8009c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	619a      	str	r2, [r3, #24]
 8009c3e:	e00e      	b.n	8009c5e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	785b      	ldrb	r3, [r3, #1]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f040 8085 	bne.w	8009d7a <USB_EPStartXfer+0x14fc>
 8009c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009c94:	4413      	add	r3, r2
 8009c96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	00da      	lsls	r2, r3, #3
 8009ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009cac:	4413      	add	r3, r2
 8009cae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cc8:	801a      	strh	r2, [r3, #0]
 8009cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cce:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cd0:	d923      	bls.n	8009d1a <USB_EPStartXfer+0x149c>
 8009cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce0:	f003 031f 	and.w	r3, r3, #31
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <USB_EPStartXfer+0x1474>
 8009ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cec:	3b01      	subs	r3, #1
 8009cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	029b      	lsls	r3, r3, #10
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	4313      	orrs	r3, r2
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d16:	801a      	strh	r2, [r3, #0]
 8009d18:	e060      	b.n	8009ddc <USB_EPStartXfer+0x155e>
 8009d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10c      	bne.n	8009d3c <USB_EPStartXfer+0x14be>
 8009d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d38:	801a      	strh	r2, [r3, #0]
 8009d3a:	e04f      	b.n	8009ddc <USB_EPStartXfer+0x155e>
 8009d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d40:	085b      	lsrs	r3, r3, #1
 8009d42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d004      	beq.n	8009d5c <USB_EPStartXfer+0x14de>
 8009d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d56:	3301      	adds	r3, #1
 8009d58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009d5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	029b      	lsls	r3, r3, #10
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d76:	801a      	strh	r2, [r3, #0]
 8009d78:	e030      	b.n	8009ddc <USB_EPStartXfer+0x155e>
 8009d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	785b      	ldrb	r3, [r3, #1]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d128      	bne.n	8009ddc <USB_EPStartXfer+0x155e>
 8009d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	461a      	mov	r2, r3
 8009daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009dae:	4413      	add	r3, r2
 8009db0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	00da      	lsls	r2, r3, #3
 8009dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	785b      	ldrb	r3, [r3, #1]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f040 8085 	bne.w	8009f06 <USB_EPStartXfer+0x1688>
 8009dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009e20:	4413      	add	r3, r2
 8009e22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	00da      	lsls	r2, r3, #3
 8009e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009e38:	4413      	add	r3, r2
 8009e3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e54:	801a      	strh	r2, [r3, #0]
 8009e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e5c:	d923      	bls.n	8009ea6 <USB_EPStartXfer+0x1628>
 8009e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e62:	095b      	lsrs	r3, r3, #5
 8009e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6c:	f003 031f 	and.w	r3, r3, #31
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d104      	bne.n	8009e7e <USB_EPStartXfer+0x1600>
 8009e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	029b      	lsls	r3, r3, #10
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	4313      	orrs	r3, r2
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ea2:	801a      	strh	r2, [r3, #0]
 8009ea4:	e05c      	b.n	8009f60 <USB_EPStartXfer+0x16e2>
 8009ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10c      	bne.n	8009ec8 <USB_EPStartXfer+0x164a>
 8009eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009eb2:	881b      	ldrh	r3, [r3, #0]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ec4:	801a      	strh	r2, [r3, #0]
 8009ec6:	e04b      	b.n	8009f60 <USB_EPStartXfer+0x16e2>
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ecc:	085b      	lsrs	r3, r3, #1
 8009ece:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <USB_EPStartXfer+0x166a>
 8009ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ee8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	029b      	lsls	r3, r3, #10
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	4313      	orrs	r3, r2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f02:	801a      	strh	r2, [r3, #0]
 8009f04:	e02c      	b.n	8009f60 <USB_EPStartXfer+0x16e2>
 8009f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d124      	bne.n	8009f60 <USB_EPStartXfer+0x16e2>
 8009f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	461a      	mov	r2, r3
 8009f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	00da      	lsls	r2, r3, #3
 8009f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f44:	4413      	add	r3, r2
 8009f46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f58:	801a      	strh	r2, [r3, #0]
 8009f5a:	e001      	b.n	8009f60 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e03a      	b.n	8009fd6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	881b      	ldrh	r3, [r3, #0]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f86:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009f8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009f8e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009f92:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009f96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009f9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009f9e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	441a      	add	r2, r3
 8009fbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	785b      	ldrb	r3, [r3, #1]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d020      	beq.n	800a034 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	881b      	ldrh	r3, [r3, #0]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a008:	81bb      	strh	r3, [r7, #12]
 800a00a:	89bb      	ldrh	r3, [r7, #12]
 800a00c:	f083 0310 	eor.w	r3, r3, #16
 800a010:	81bb      	strh	r3, [r7, #12]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	441a      	add	r2, r3
 800a01c:	89bb      	ldrh	r3, [r7, #12]
 800a01e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a02e:	b29b      	uxth	r3, r3
 800a030:	8013      	strh	r3, [r2, #0]
 800a032:	e01f      	b.n	800a074 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	b29b      	uxth	r3, r3
 800a042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a04a:	81fb      	strh	r3, [r7, #14]
 800a04c:	89fb      	ldrh	r3, [r7, #14]
 800a04e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a052:	81fb      	strh	r3, [r7, #14]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	441a      	add	r2, r3
 800a05e:	89fb      	ldrh	r3, [r7, #14]
 800a060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a06c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a070:	b29b      	uxth	r3, r3
 800a072:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a082:	b480      	push	{r7}
 800a084:	b087      	sub	sp, #28
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	7b1b      	ldrb	r3, [r3, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f040 809d 	bne.w	800a1d0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	785b      	ldrb	r3, [r3, #1]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d04c      	beq.n	800a138 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	823b      	strh	r3, [r7, #16]
 800a0ac:	8a3b      	ldrh	r3, [r7, #16]
 800a0ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d01b      	beq.n	800a0ee <USB_EPClearStall+0x6c>
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0cc:	81fb      	strh	r3, [r7, #14]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	441a      	add	r2, r3
 800a0d8:	89fb      	ldrh	r3, [r7, #14]
 800a0da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	78db      	ldrb	r3, [r3, #3]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d06c      	beq.n	800a1d0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	b29b      	uxth	r3, r3
 800a104:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a10c:	81bb      	strh	r3, [r7, #12]
 800a10e:	89bb      	ldrh	r3, [r7, #12]
 800a110:	f083 0320 	eor.w	r3, r3, #32
 800a114:	81bb      	strh	r3, [r7, #12]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	441a      	add	r2, r3
 800a120:	89bb      	ldrh	r3, [r7, #12]
 800a122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a12a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a12e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a132:	b29b      	uxth	r3, r3
 800a134:	8013      	strh	r3, [r2, #0]
 800a136:	e04b      	b.n	800a1d0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	82fb      	strh	r3, [r7, #22]
 800a146:	8afb      	ldrh	r3, [r7, #22]
 800a148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d01b      	beq.n	800a188 <USB_EPClearStall+0x106>
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a166:	82bb      	strh	r3, [r7, #20]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	441a      	add	r2, r3
 800a172:	8abb      	ldrh	r3, [r7, #20]
 800a174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a17c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a184:	b29b      	uxth	r3, r3
 800a186:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	b29b      	uxth	r3, r3
 800a196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a19a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a19e:	827b      	strh	r3, [r7, #18]
 800a1a0:	8a7b      	ldrh	r3, [r7, #18]
 800a1a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a1a6:	827b      	strh	r3, [r7, #18]
 800a1a8:	8a7b      	ldrh	r3, [r7, #18]
 800a1aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a1ae:	827b      	strh	r3, [r7, #18]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	441a      	add	r2, r3
 800a1ba:	8a7b      	ldrh	r3, [r7, #18]
 800a1bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	371c      	adds	r7, #28
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b083      	sub	sp, #12
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d103      	bne.n	800a1f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2280      	movs	r2, #128	@ 0x80
 800a1f4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a214:	b29b      	uxth	r3, r3
 800a216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a21a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a242:	b29b      	uxth	r3, r3
 800a244:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a246:	68fb      	ldr	r3, [r7, #12]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a254:	b480      	push	{r7}
 800a256:	b08b      	sub	sp, #44	@ 0x2c
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	4611      	mov	r1, r2
 800a260:	461a      	mov	r2, r3
 800a262:	460b      	mov	r3, r1
 800a264:	80fb      	strh	r3, [r7, #6]
 800a266:	4613      	mov	r3, r2
 800a268:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a26a:	88bb      	ldrh	r3, [r7, #4]
 800a26c:	3301      	adds	r3, #1
 800a26e:	085b      	lsrs	r3, r3, #1
 800a270:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a27a:	88fa      	ldrh	r2, [r7, #6]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	4413      	add	r3, r2
 800a280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a284:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	627b      	str	r3, [r7, #36]	@ 0x24
 800a28a:	e01b      	b.n	800a2c4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	3301      	adds	r3, #1
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	021b      	lsls	r3, r3, #8
 800a29a:	b21a      	sxth	r2, r3
 800a29c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	b21b      	sxth	r3, r3
 800a2a4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	8a7a      	ldrh	r2, [r7, #18]
 800a2aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a2ac:	6a3b      	ldr	r3, [r7, #32]
 800a2ae:	3302      	adds	r3, #2
 800a2b0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e0      	bne.n	800a28c <USB_WritePMA+0x38>
  }
}
 800a2ca:	bf00      	nop
 800a2cc:	bf00      	nop
 800a2ce:	372c      	adds	r7, #44	@ 0x2c
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b08b      	sub	sp, #44	@ 0x2c
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	80fb      	strh	r3, [r7, #6]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a2ee:	88bb      	ldrh	r3, [r7, #4]
 800a2f0:	085b      	lsrs	r3, r3, #1
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2fe:	88fa      	ldrh	r2, [r7, #6]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a308:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a30e:	e018      	b.n	800a342 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	b29b      	uxth	r3, r3
 800a316:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	3302      	adds	r3, #2
 800a31c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	b2da      	uxtb	r2, r3
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	3301      	adds	r3, #1
 800a32a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	0a1b      	lsrs	r3, r3, #8
 800a330:	b2da      	uxtb	r2, r3
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	3301      	adds	r3, #1
 800a33a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33e:	3b01      	subs	r3, #1
 800a340:	627b      	str	r3, [r7, #36]	@ 0x24
 800a342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e3      	bne.n	800a310 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a348:	88bb      	ldrh	r3, [r7, #4]
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	b29b      	uxth	r3, r3
 800a350:	2b00      	cmp	r3, #0
 800a352:	d007      	beq.n	800a364 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	b29b      	uxth	r3, r3
 800a35a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	701a      	strb	r2, [r3, #0]
  }
}
 800a364:	bf00      	nop
 800a366:	372c      	adds	r7, #44	@ 0x2c
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a37c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a380:	f002 f908 	bl	800c594 <USBD_static_malloc>
 800a384:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d105      	bne.n	800a398 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a394:	2302      	movs	r3, #2
 800a396:	e066      	b.n	800a466 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	7c1b      	ldrb	r3, [r3, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d119      	bne.n	800a3dc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	2181      	movs	r1, #129	@ 0x81
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f001 ff96 	bl	800c2e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 ff8c 	bl	800c2e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2210      	movs	r2, #16
 800a3d6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a3da:	e016      	b.n	800a40a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3dc:	2340      	movs	r3, #64	@ 0x40
 800a3de:	2202      	movs	r2, #2
 800a3e0:	2181      	movs	r1, #129	@ 0x81
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 ff7d 	bl	800c2e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3ee:	2340      	movs	r3, #64	@ 0x40
 800a3f0:	2202      	movs	r2, #2
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f001 ff74 	bl	800c2e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2210      	movs	r2, #16
 800a406:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a40a:	2308      	movs	r3, #8
 800a40c:	2203      	movs	r2, #3
 800a40e:	2182      	movs	r1, #130	@ 0x82
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 ff66 	bl	800c2e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	7c1b      	ldrb	r3, [r3, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d109      	bne.n	800a454 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a446:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a44a:	2101      	movs	r1, #1
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f002 f837 	bl	800c4c0 <USBD_LL_PrepareReceive>
 800a452:	e007      	b.n	800a464 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a45a:	2340      	movs	r3, #64	@ 0x40
 800a45c:	2101      	movs	r1, #1
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f002 f82e 	bl	800c4c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	460b      	mov	r3, r1
 800a478:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a47a:	2181      	movs	r1, #129	@ 0x81
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f001 ff56 	bl	800c32e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a488:	2101      	movs	r1, #1
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 ff4f 	bl	800c32e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a498:	2182      	movs	r1, #130	@ 0x82
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f001 ff47 	bl	800c32e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00e      	beq.n	800a4d8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f002 f870 	bl	800c5b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
	...

0800a4e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a508:	2303      	movs	r3, #3
 800a50a:	e0af      	b.n	800a66c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a514:	2b00      	cmp	r3, #0
 800a516:	d03f      	beq.n	800a598 <USBD_CDC_Setup+0xb4>
 800a518:	2b20      	cmp	r3, #32
 800a51a:	f040 809f 	bne.w	800a65c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	88db      	ldrh	r3, [r3, #6]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d02e      	beq.n	800a584 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	b25b      	sxtb	r3, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	da16      	bge.n	800a55e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a53c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	88d2      	ldrh	r2, [r2, #6]
 800a542:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	88db      	ldrh	r3, [r3, #6]
 800a548:	2b07      	cmp	r3, #7
 800a54a:	bf28      	it	cs
 800a54c:	2307      	movcs	r3, #7
 800a54e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	89fa      	ldrh	r2, [r7, #14]
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f001 facd 	bl	800baf6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a55c:	e085      	b.n	800a66a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	785a      	ldrb	r2, [r3, #1]
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	88db      	ldrh	r3, [r3, #6]
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a574:	6939      	ldr	r1, [r7, #16]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	88db      	ldrh	r3, [r3, #6]
 800a57a:	461a      	mov	r2, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 fae6 	bl	800bb4e <USBD_CtlPrepareRx>
      break;
 800a582:	e072      	b.n	800a66a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	7850      	ldrb	r0, [r2, #1]
 800a590:	2200      	movs	r2, #0
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	4798      	blx	r3
      break;
 800a596:	e068      	b.n	800a66a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	785b      	ldrb	r3, [r3, #1]
 800a59c:	2b0b      	cmp	r3, #11
 800a59e:	d852      	bhi.n	800a646 <USBD_CDC_Setup+0x162>
 800a5a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a8 <USBD_CDC_Setup+0xc4>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a5d9 	.word	0x0800a5d9
 800a5ac:	0800a655 	.word	0x0800a655
 800a5b0:	0800a647 	.word	0x0800a647
 800a5b4:	0800a647 	.word	0x0800a647
 800a5b8:	0800a647 	.word	0x0800a647
 800a5bc:	0800a647 	.word	0x0800a647
 800a5c0:	0800a647 	.word	0x0800a647
 800a5c4:	0800a647 	.word	0x0800a647
 800a5c8:	0800a647 	.word	0x0800a647
 800a5cc:	0800a647 	.word	0x0800a647
 800a5d0:	0800a603 	.word	0x0800a603
 800a5d4:	0800a62d 	.word	0x0800a62d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	d107      	bne.n	800a5f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5e4:	f107 030a 	add.w	r3, r7, #10
 800a5e8:	2202      	movs	r2, #2
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f001 fa82 	bl	800baf6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5f2:	e032      	b.n	800a65a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 fa0c 	bl	800ba14 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	75fb      	strb	r3, [r7, #23]
          break;
 800a600:	e02b      	b.n	800a65a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d107      	bne.n	800a61e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a60e:	f107 030d 	add.w	r3, r7, #13
 800a612:	2201      	movs	r2, #1
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 fa6d 	bl	800baf6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a61c:	e01d      	b.n	800a65a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f001 f9f7 	bl	800ba14 <USBD_CtlError>
            ret = USBD_FAIL;
 800a626:	2303      	movs	r3, #3
 800a628:	75fb      	strb	r3, [r7, #23]
          break;
 800a62a:	e016      	b.n	800a65a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b03      	cmp	r3, #3
 800a636:	d00f      	beq.n	800a658 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f001 f9ea 	bl	800ba14 <USBD_CtlError>
            ret = USBD_FAIL;
 800a640:	2303      	movs	r3, #3
 800a642:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a644:	e008      	b.n	800a658 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 f9e3 	bl	800ba14 <USBD_CtlError>
          ret = USBD_FAIL;
 800a64e:	2303      	movs	r3, #3
 800a650:	75fb      	strb	r3, [r7, #23]
          break;
 800a652:	e002      	b.n	800a65a <USBD_CDC_Setup+0x176>
          break;
 800a654:	bf00      	nop
 800a656:	e008      	b.n	800a66a <USBD_CDC_Setup+0x186>
          break;
 800a658:	bf00      	nop
      }
      break;
 800a65a:	e006      	b.n	800a66a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f001 f9d8 	bl	800ba14 <USBD_CtlError>
      ret = USBD_FAIL;
 800a664:	2303      	movs	r3, #3
 800a666:	75fb      	strb	r3, [r7, #23]
      break;
 800a668:	bf00      	nop
  }

  return (uint8_t)ret;
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a692:	2303      	movs	r3, #3
 800a694:	e04f      	b.n	800a736 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a69c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a69e:	78fa      	ldrb	r2, [r7, #3]
 800a6a0:	6879      	ldr	r1, [r7, #4]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	440b      	add	r3, r1
 800a6ac:	3318      	adds	r3, #24
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d029      	beq.n	800a708 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a6b4:	78fa      	ldrb	r2, [r7, #3]
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	440b      	add	r3, r1
 800a6c2:	3318      	adds	r3, #24
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	78f9      	ldrb	r1, [r7, #3]
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	440b      	add	r3, r1
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	4403      	add	r3, r0
 800a6d4:	3320      	adds	r3, #32
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a6dc:	fb01 f303 	mul.w	r3, r1, r3
 800a6e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d110      	bne.n	800a708 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a6e6:	78fa      	ldrb	r2, [r7, #3]
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	440b      	add	r3, r1
 800a6f4:	3318      	adds	r3, #24
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a6fa:	78f9      	ldrb	r1, [r7, #3]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	2200      	movs	r2, #0
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f001 febc 	bl	800c47e <USBD_LL_Transmit>
 800a706:	e015      	b.n	800a734 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00b      	beq.n	800a734 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a730:	78fa      	ldrb	r2, [r7, #3]
 800a732:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	460b      	mov	r3, r1
 800a748:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a750:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e015      	b.n	800a78c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a760:	78fb      	ldrb	r3, [r7, #3]
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 fecc 	bl	800c502 <USBD_LL_GetRxDataSize>
 800a76a:	4602      	mov	r2, r0
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a786:	4611      	mov	r1, r2
 800a788:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d101      	bne.n	800a7ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e01a      	b.n	800a7e4 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d014      	beq.n	800a7e2 <USBD_CDC_EP0_RxReady+0x4e>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a7be:	2bff      	cmp	r3, #255	@ 0xff
 800a7c0:	d00f      	beq.n	800a7e2 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a7d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	22ff      	movs	r2, #255	@ 0xff
 800a7de:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2243      	movs	r2, #67	@ 0x43
 800a7f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a7fa:	4b03      	ldr	r3, [pc, #12]	@ (800a808 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	200000b4 	.word	0x200000b4

0800a80c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2243      	movs	r2, #67	@ 0x43
 800a818:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a81a:	4b03      	ldr	r3, [pc, #12]	@ (800a828 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	20000070 	.word	0x20000070

0800a82c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2243      	movs	r2, #67	@ 0x43
 800a838:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a83a:	4b03      	ldr	r3, [pc, #12]	@ (800a848 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	200000f8 	.word	0x200000f8

0800a84c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	220a      	movs	r2, #10
 800a858:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a85a:	4b03      	ldr	r3, [pc, #12]	@ (800a868 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	2000002c 	.word	0x2000002c

0800a86c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e004      	b.n	800a88a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a896:	b480      	push	{r7}
 800a898:	b087      	sub	sp, #28
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8a8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e008      	b.n	800a8c6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e004      	b.n	800a8f8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a912:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a914:	2301      	movs	r3, #1
 800a916:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a922:	2303      	movs	r3, #3
 800a924:	e01a      	b.n	800a95c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d114      	bne.n	800a95a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2201      	movs	r2, #1
 800a934:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a94e:	2181      	movs	r1, #129	@ 0x81
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 fd94 	bl	800c47e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a972:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d101      	bne.n	800a982 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a97e:	2303      	movs	r3, #3
 800a980:	e016      	b.n	800a9b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7c1b      	ldrb	r3, [r3, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d109      	bne.n	800a99e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a994:	2101      	movs	r1, #1
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f001 fd92 	bl	800c4c0 <USBD_LL_PrepareReceive>
 800a99c:	e007      	b.n	800a9ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a9a4:	2340      	movs	r3, #64	@ 0x40
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f001 fd89 	bl	800c4c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e01f      	b.n	800aa10 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	79fa      	ldrb	r2, [r7, #7]
 800aa02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f001 fbf1 	bl	800c1ec <USBD_LL_Init>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3718      	adds	r7, #24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e016      	b.n	800aa5e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4c:	f107 020e 	add.w	r2, r7, #14
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
 800aa54:	4602      	mov	r2, r0
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 fc1c 	bl	800c2ac <USBD_LL_Start>
 800aa74:	4603      	mov	r3, r0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d009      	beq.n	800aac2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	78fa      	ldrb	r2, [r7, #3]
 800aab8:	4611      	mov	r1, r2
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	4798      	blx	r3
 800aabe:	4603      	mov	r3, r0
 800aac0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d007      	beq.n	800aaf2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	78fa      	ldrb	r2, [r7, #3]
 800aaec:	4611      	mov	r1, r2
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	4798      	blx	r3
  }

  return USBD_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 ff46 	bl	800b9a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ab22:	461a      	mov	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ab30:	f003 031f 	and.w	r3, r3, #31
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d01a      	beq.n	800ab6e <USBD_LL_SetupStage+0x72>
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d822      	bhi.n	800ab82 <USBD_LL_SetupStage+0x86>
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <USBD_LL_SetupStage+0x4a>
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d00a      	beq.n	800ab5a <USBD_LL_SetupStage+0x5e>
 800ab44:	e01d      	b.n	800ab82 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f9ee 	bl	800af30 <USBD_StdDevReq>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]
      break;
 800ab58:	e020      	b.n	800ab9c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fa52 	bl	800b00c <USBD_StdItfReq>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab6c:	e016      	b.n	800ab9c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fa91 	bl	800b09e <USBD_StdEPReq>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab80:	e00c      	b.n	800ab9c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ab88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 fbeb 	bl	800c36c <USBD_LL_StallEP>
 800ab96:	4603      	mov	r3, r0
 800ab98:	73fb      	strb	r3, [r7, #15]
      break;
 800ab9a:	bf00      	nop
  }

  return ret;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b086      	sub	sp, #24
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	460b      	mov	r3, r1
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800abb4:	7afb      	ldrb	r3, [r7, #11]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d138      	bne.n	800ac2c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800abc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d14a      	bne.n	800ac62 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	689a      	ldr	r2, [r3, #8]
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d913      	bls.n	800ac00 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	689a      	ldr	r2, [r3, #8]
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	1ad2      	subs	r2, r2, r3
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	4293      	cmp	r3, r2
 800abf0:	bf28      	it	cs
 800abf2:	4613      	movcs	r3, r2
 800abf4:	461a      	mov	r2, r3
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 ffc5 	bl	800bb88 <USBD_CtlContinueRx>
 800abfe:	e030      	b.n	800ac62 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d10b      	bne.n	800ac24 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d005      	beq.n	800ac24 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 ffc0 	bl	800bbaa <USBD_CtlSendStatus>
 800ac2a:	e01a      	b.n	800ac62 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d114      	bne.n	800ac62 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00e      	beq.n	800ac62 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	7afa      	ldrb	r2, [r7, #11]
 800ac4e:	4611      	mov	r1, r2
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	4798      	blx	r3
 800ac54:	4603      	mov	r3, r0
 800ac56:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	e000      	b.n	800ac64 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	460b      	mov	r3, r1
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac7a:	7afb      	ldrb	r3, [r7, #11]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d16b      	bne.n	800ad58 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3314      	adds	r3, #20
 800ac84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d156      	bne.n	800ad3e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	689a      	ldr	r2, [r3, #8]
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d914      	bls.n	800acc6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	689a      	ldr	r2, [r3, #8]
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	1ad2      	subs	r2, r2, r3
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	461a      	mov	r2, r3
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 ff3a 	bl	800bb2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acb8:	2300      	movs	r3, #0
 800acba:	2200      	movs	r2, #0
 800acbc:	2100      	movs	r1, #0
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f001 fbfe 	bl	800c4c0 <USBD_LL_PrepareReceive>
 800acc4:	e03b      	b.n	800ad3e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	68da      	ldr	r2, [r3, #12]
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d11c      	bne.n	800ad0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800acda:	429a      	cmp	r2, r3
 800acdc:	d316      	bcc.n	800ad0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ace8:	429a      	cmp	r2, r3
 800acea:	d20f      	bcs.n	800ad0c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acec:	2200      	movs	r2, #0
 800acee:	2100      	movs	r1, #0
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 ff1b 	bl	800bb2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acfe:	2300      	movs	r3, #0
 800ad00:	2200      	movs	r2, #0
 800ad02:	2100      	movs	r1, #0
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f001 fbdb 	bl	800c4c0 <USBD_LL_PrepareReceive>
 800ad0a:	e018      	b.n	800ad3e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	d10b      	bne.n	800ad30 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d005      	beq.n	800ad30 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad30:	2180      	movs	r1, #128	@ 0x80
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f001 fb1a 	bl	800c36c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 ff49 	bl	800bbd0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d122      	bne.n	800ad8e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f7ff fe98 	bl	800aa7e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ad56:	e01a      	b.n	800ad8e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d114      	bne.n	800ad8e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00e      	beq.n	800ad8e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad76:	695b      	ldr	r3, [r3, #20]
 800ad78:	7afa      	ldrb	r2, [r7, #11]
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	4798      	blx	r3
 800ad80:	4603      	mov	r3, r0
 800ad82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	e000      	b.n	800ad90 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800adc8:	2303      	movs	r3, #3
 800adca:	e02f      	b.n	800ae2c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00f      	beq.n	800adf6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d009      	beq.n	800adf6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	6852      	ldr	r2, [r2, #4]
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	4611      	mov	r1, r2
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adf6:	2340      	movs	r3, #64	@ 0x40
 800adf8:	2200      	movs	r2, #0
 800adfa:	2100      	movs	r1, #0
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 fa70 	bl	800c2e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2240      	movs	r2, #64	@ 0x40
 800ae0e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae12:	2340      	movs	r3, #64	@ 0x40
 800ae14:	2200      	movs	r2, #0
 800ae16:	2180      	movs	r1, #128	@ 0x80
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f001 fa62 	bl	800c2e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2240      	movs	r2, #64	@ 0x40
 800ae28:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	78fa      	ldrb	r2, [r7, #3]
 800ae44:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d106      	bne.n	800aea2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e012      	b.n	800aeec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d10b      	bne.n	800aeea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b087      	sub	sp, #28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	3301      	adds	r3, #1
 800af0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af12:	8a3b      	ldrh	r3, [r7, #16]
 800af14:	021b      	lsls	r3, r3, #8
 800af16:	b21a      	sxth	r2, r3
 800af18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	b21b      	sxth	r3, r3
 800af20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af22:	89fb      	ldrh	r3, [r7, #14]
}
 800af24:	4618      	mov	r0, r3
 800af26:	371c      	adds	r7, #28
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af46:	2b40      	cmp	r3, #64	@ 0x40
 800af48:	d005      	beq.n	800af56 <USBD_StdDevReq+0x26>
 800af4a:	2b40      	cmp	r3, #64	@ 0x40
 800af4c:	d853      	bhi.n	800aff6 <USBD_StdDevReq+0xc6>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00b      	beq.n	800af6a <USBD_StdDevReq+0x3a>
 800af52:	2b20      	cmp	r3, #32
 800af54:	d14f      	bne.n	800aff6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	4798      	blx	r3
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]
      break;
 800af68:	e04a      	b.n	800b000 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2b09      	cmp	r3, #9
 800af70:	d83b      	bhi.n	800afea <USBD_StdDevReq+0xba>
 800af72:	a201      	add	r2, pc, #4	@ (adr r2, 800af78 <USBD_StdDevReq+0x48>)
 800af74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af78:	0800afcd 	.word	0x0800afcd
 800af7c:	0800afe1 	.word	0x0800afe1
 800af80:	0800afeb 	.word	0x0800afeb
 800af84:	0800afd7 	.word	0x0800afd7
 800af88:	0800afeb 	.word	0x0800afeb
 800af8c:	0800afab 	.word	0x0800afab
 800af90:	0800afa1 	.word	0x0800afa1
 800af94:	0800afeb 	.word	0x0800afeb
 800af98:	0800afc3 	.word	0x0800afc3
 800af9c:	0800afb5 	.word	0x0800afb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f9de 	bl	800b364 <USBD_GetDescriptor>
          break;
 800afa8:	e024      	b.n	800aff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fb6d 	bl	800b68c <USBD_SetAddress>
          break;
 800afb2:	e01f      	b.n	800aff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fbac 	bl	800b714 <USBD_SetConfig>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73fb      	strb	r3, [r7, #15]
          break;
 800afc0:	e018      	b.n	800aff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fc4b 	bl	800b860 <USBD_GetConfig>
          break;
 800afca:	e013      	b.n	800aff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fc7c 	bl	800b8cc <USBD_GetStatus>
          break;
 800afd4:	e00e      	b.n	800aff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fcab 	bl	800b934 <USBD_SetFeature>
          break;
 800afde:	e009      	b.n	800aff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fcba 	bl	800b95c <USBD_ClrFeature>
          break;
 800afe8:	e004      	b.n	800aff4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fd11 	bl	800ba14 <USBD_CtlError>
          break;
 800aff2:	bf00      	nop
      }
      break;
 800aff4:	e004      	b.n	800b000 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fd0b 	bl	800ba14 <USBD_CtlError>
      break;
 800affe:	bf00      	nop
  }

  return ret;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop

0800b00c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b022:	2b40      	cmp	r3, #64	@ 0x40
 800b024:	d005      	beq.n	800b032 <USBD_StdItfReq+0x26>
 800b026:	2b40      	cmp	r3, #64	@ 0x40
 800b028:	d82f      	bhi.n	800b08a <USBD_StdItfReq+0x7e>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <USBD_StdItfReq+0x26>
 800b02e:	2b20      	cmp	r3, #32
 800b030:	d12b      	bne.n	800b08a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	3b01      	subs	r3, #1
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d81d      	bhi.n	800b07c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	889b      	ldrh	r3, [r3, #4]
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b01      	cmp	r3, #1
 800b048:	d813      	bhi.n	800b072 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	4798      	blx	r3
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	88db      	ldrh	r3, [r3, #6]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d110      	bne.n	800b086 <USBD_StdItfReq+0x7a>
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10d      	bne.n	800b086 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fd9d 	bl	800bbaa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b070:	e009      	b.n	800b086 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fccd 	bl	800ba14 <USBD_CtlError>
          break;
 800b07a:	e004      	b.n	800b086 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fcc8 	bl	800ba14 <USBD_CtlError>
          break;
 800b084:	e000      	b.n	800b088 <USBD_StdItfReq+0x7c>
          break;
 800b086:	bf00      	nop
      }
      break;
 800b088:	e004      	b.n	800b094 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fcc1 	bl	800ba14 <USBD_CtlError>
      break;
 800b092:	bf00      	nop
  }

  return ret;
 800b094:	7bfb      	ldrb	r3, [r7, #15]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	889b      	ldrh	r3, [r3, #4]
 800b0b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b0ba:	2b40      	cmp	r3, #64	@ 0x40
 800b0bc:	d007      	beq.n	800b0ce <USBD_StdEPReq+0x30>
 800b0be:	2b40      	cmp	r3, #64	@ 0x40
 800b0c0:	f200 8145 	bhi.w	800b34e <USBD_StdEPReq+0x2b0>
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00c      	beq.n	800b0e2 <USBD_StdEPReq+0x44>
 800b0c8:	2b20      	cmp	r3, #32
 800b0ca:	f040 8140 	bne.w	800b34e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	4798      	blx	r3
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e0:	e13a      	b.n	800b358 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	785b      	ldrb	r3, [r3, #1]
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	d007      	beq.n	800b0fa <USBD_StdEPReq+0x5c>
 800b0ea:	2b03      	cmp	r3, #3
 800b0ec:	f300 8129 	bgt.w	800b342 <USBD_StdEPReq+0x2a4>
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d07f      	beq.n	800b1f4 <USBD_StdEPReq+0x156>
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d03c      	beq.n	800b172 <USBD_StdEPReq+0xd4>
 800b0f8:	e123      	b.n	800b342 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b02      	cmp	r3, #2
 800b104:	d002      	beq.n	800b10c <USBD_StdEPReq+0x6e>
 800b106:	2b03      	cmp	r3, #3
 800b108:	d016      	beq.n	800b138 <USBD_StdEPReq+0x9a>
 800b10a:	e02c      	b.n	800b166 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00d      	beq.n	800b12e <USBD_StdEPReq+0x90>
 800b112:	7bbb      	ldrb	r3, [r7, #14]
 800b114:	2b80      	cmp	r3, #128	@ 0x80
 800b116:	d00a      	beq.n	800b12e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b118:	7bbb      	ldrb	r3, [r7, #14]
 800b11a:	4619      	mov	r1, r3
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f001 f925 	bl	800c36c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b122:	2180      	movs	r1, #128	@ 0x80
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f001 f921 	bl	800c36c <USBD_LL_StallEP>
 800b12a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b12c:	e020      	b.n	800b170 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fc6f 	bl	800ba14 <USBD_CtlError>
              break;
 800b136:	e01b      	b.n	800b170 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	885b      	ldrh	r3, [r3, #2]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10e      	bne.n	800b15e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b140:	7bbb      	ldrb	r3, [r7, #14]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00b      	beq.n	800b15e <USBD_StdEPReq+0xc0>
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	2b80      	cmp	r3, #128	@ 0x80
 800b14a:	d008      	beq.n	800b15e <USBD_StdEPReq+0xc0>
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	88db      	ldrh	r3, [r3, #6]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d104      	bne.n	800b15e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b154:	7bbb      	ldrb	r3, [r7, #14]
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f001 f907 	bl	800c36c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fd23 	bl	800bbaa <USBD_CtlSendStatus>

              break;
 800b164:	e004      	b.n	800b170 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fc53 	bl	800ba14 <USBD_CtlError>
              break;
 800b16e:	bf00      	nop
          }
          break;
 800b170:	e0ec      	b.n	800b34c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d002      	beq.n	800b184 <USBD_StdEPReq+0xe6>
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d016      	beq.n	800b1b0 <USBD_StdEPReq+0x112>
 800b182:	e030      	b.n	800b1e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b184:	7bbb      	ldrb	r3, [r7, #14]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00d      	beq.n	800b1a6 <USBD_StdEPReq+0x108>
 800b18a:	7bbb      	ldrb	r3, [r7, #14]
 800b18c:	2b80      	cmp	r3, #128	@ 0x80
 800b18e:	d00a      	beq.n	800b1a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b190:	7bbb      	ldrb	r3, [r7, #14]
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 f8e9 	bl	800c36c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b19a:	2180      	movs	r1, #128	@ 0x80
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f001 f8e5 	bl	800c36c <USBD_LL_StallEP>
 800b1a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1a4:	e025      	b.n	800b1f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fc33 	bl	800ba14 <USBD_CtlError>
              break;
 800b1ae:	e020      	b.n	800b1f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	885b      	ldrh	r3, [r3, #2]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d11b      	bne.n	800b1f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b1b8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d004      	beq.n	800b1cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b1c2:	7bbb      	ldrb	r3, [r7, #14]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f001 f8ef 	bl	800c3aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fcec 	bl	800bbaa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	4798      	blx	r3
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b1e4:	e004      	b.n	800b1f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fc13 	bl	800ba14 <USBD_CtlError>
              break;
 800b1ee:	e000      	b.n	800b1f2 <USBD_StdEPReq+0x154>
              break;
 800b1f0:	bf00      	nop
          }
          break;
 800b1f2:	e0ab      	b.n	800b34c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d002      	beq.n	800b206 <USBD_StdEPReq+0x168>
 800b200:	2b03      	cmp	r3, #3
 800b202:	d032      	beq.n	800b26a <USBD_StdEPReq+0x1cc>
 800b204:	e097      	b.n	800b336 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b206:	7bbb      	ldrb	r3, [r7, #14]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d007      	beq.n	800b21c <USBD_StdEPReq+0x17e>
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	2b80      	cmp	r3, #128	@ 0x80
 800b210:	d004      	beq.n	800b21c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 fbfd 	bl	800ba14 <USBD_CtlError>
                break;
 800b21a:	e091      	b.n	800b340 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b21c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b220:	2b00      	cmp	r3, #0
 800b222:	da0b      	bge.n	800b23c <USBD_StdEPReq+0x19e>
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b22a:	4613      	mov	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	3310      	adds	r3, #16
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	4413      	add	r3, r2
 800b238:	3304      	adds	r3, #4
 800b23a:	e00b      	b.n	800b254 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b242:	4613      	mov	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	4413      	add	r3, r2
 800b252:	3304      	adds	r3, #4
 800b254:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2202      	movs	r2, #2
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fc47 	bl	800baf6 <USBD_CtlSendData>
              break;
 800b268:	e06a      	b.n	800b340 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b26a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	da11      	bge.n	800b296 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	f003 020f 	and.w	r2, r3, #15
 800b278:	6879      	ldr	r1, [r7, #4]
 800b27a:	4613      	mov	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	440b      	add	r3, r1
 800b284:	3324      	adds	r3, #36	@ 0x24
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d117      	bne.n	800b2bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fbc0 	bl	800ba14 <USBD_CtlError>
                  break;
 800b294:	e054      	b.n	800b340 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b296:	7bbb      	ldrb	r3, [r7, #14]
 800b298:	f003 020f 	and.w	r2, r3, #15
 800b29c:	6879      	ldr	r1, [r7, #4]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	440b      	add	r3, r1
 800b2a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d104      	bne.n	800b2bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fbad 	bl	800ba14 <USBD_CtlError>
                  break;
 800b2ba:	e041      	b.n	800b340 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	da0b      	bge.n	800b2dc <USBD_StdEPReq+0x23e>
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	3310      	adds	r3, #16
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	3304      	adds	r3, #4
 800b2da:	e00b      	b.n	800b2f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4413      	add	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2f6:	7bbb      	ldrb	r3, [r7, #14]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <USBD_StdEPReq+0x264>
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	2b80      	cmp	r3, #128	@ 0x80
 800b300:	d103      	bne.n	800b30a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	e00e      	b.n	800b328 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f001 f86a 	bl	800c3e8 <USBD_LL_IsStallEP>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2201      	movs	r2, #1
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	e002      	b.n	800b328 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2202      	movs	r2, #2
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fbe1 	bl	800baf6 <USBD_CtlSendData>
              break;
 800b334:	e004      	b.n	800b340 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fb6b 	bl	800ba14 <USBD_CtlError>
              break;
 800b33e:	bf00      	nop
          }
          break;
 800b340:	e004      	b.n	800b34c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 fb65 	bl	800ba14 <USBD_CtlError>
          break;
 800b34a:	bf00      	nop
      }
      break;
 800b34c:	e004      	b.n	800b358 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fb5f 	bl	800ba14 <USBD_CtlError>
      break;
 800b356:	bf00      	nop
  }

  return ret;
 800b358:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
	...

0800b364 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	885b      	ldrh	r3, [r3, #2]
 800b37e:	0a1b      	lsrs	r3, r3, #8
 800b380:	b29b      	uxth	r3, r3
 800b382:	3b01      	subs	r3, #1
 800b384:	2b0e      	cmp	r3, #14
 800b386:	f200 8152 	bhi.w	800b62e <USBD_GetDescriptor+0x2ca>
 800b38a:	a201      	add	r2, pc, #4	@ (adr r2, 800b390 <USBD_GetDescriptor+0x2c>)
 800b38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b390:	0800b401 	.word	0x0800b401
 800b394:	0800b419 	.word	0x0800b419
 800b398:	0800b459 	.word	0x0800b459
 800b39c:	0800b62f 	.word	0x0800b62f
 800b3a0:	0800b62f 	.word	0x0800b62f
 800b3a4:	0800b5cf 	.word	0x0800b5cf
 800b3a8:	0800b5fb 	.word	0x0800b5fb
 800b3ac:	0800b62f 	.word	0x0800b62f
 800b3b0:	0800b62f 	.word	0x0800b62f
 800b3b4:	0800b62f 	.word	0x0800b62f
 800b3b8:	0800b62f 	.word	0x0800b62f
 800b3bc:	0800b62f 	.word	0x0800b62f
 800b3c0:	0800b62f 	.word	0x0800b62f
 800b3c4:	0800b62f 	.word	0x0800b62f
 800b3c8:	0800b3cd 	.word	0x0800b3cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3d2:	69db      	ldr	r3, [r3, #28]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00b      	beq.n	800b3f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3de:	69db      	ldr	r3, [r3, #28]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	7c12      	ldrb	r2, [r2, #16]
 800b3e4:	f107 0108 	add.w	r1, r7, #8
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4798      	blx	r3
 800b3ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3ee:	e126      	b.n	800b63e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fb0e 	bl	800ba14 <USBD_CtlError>
        err++;
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	72fb      	strb	r3, [r7, #11]
      break;
 800b3fe:	e11e      	b.n	800b63e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	7c12      	ldrb	r2, [r2, #16]
 800b40c:	f107 0108 	add.w	r1, r7, #8
 800b410:	4610      	mov	r0, r2
 800b412:	4798      	blx	r3
 800b414:	60f8      	str	r0, [r7, #12]
      break;
 800b416:	e112      	b.n	800b63e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7c1b      	ldrb	r3, [r3, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10d      	bne.n	800b43c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b428:	f107 0208 	add.w	r2, r7, #8
 800b42c:	4610      	mov	r0, r2
 800b42e:	4798      	blx	r3
 800b430:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	3301      	adds	r3, #1
 800b436:	2202      	movs	r2, #2
 800b438:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b43a:	e100      	b.n	800b63e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b444:	f107 0208 	add.w	r2, r7, #8
 800b448:	4610      	mov	r0, r2
 800b44a:	4798      	blx	r3
 800b44c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3301      	adds	r3, #1
 800b452:	2202      	movs	r2, #2
 800b454:	701a      	strb	r2, [r3, #0]
      break;
 800b456:	e0f2      	b.n	800b63e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	885b      	ldrh	r3, [r3, #2]
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b05      	cmp	r3, #5
 800b460:	f200 80ac 	bhi.w	800b5bc <USBD_GetDescriptor+0x258>
 800b464:	a201      	add	r2, pc, #4	@ (adr r2, 800b46c <USBD_GetDescriptor+0x108>)
 800b466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46a:	bf00      	nop
 800b46c:	0800b485 	.word	0x0800b485
 800b470:	0800b4b9 	.word	0x0800b4b9
 800b474:	0800b4ed 	.word	0x0800b4ed
 800b478:	0800b521 	.word	0x0800b521
 800b47c:	0800b555 	.word	0x0800b555
 800b480:	0800b589 	.word	0x0800b589
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00b      	beq.n	800b4a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	7c12      	ldrb	r2, [r2, #16]
 800b49c:	f107 0108 	add.w	r1, r7, #8
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4798      	blx	r3
 800b4a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4a6:	e091      	b.n	800b5cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fab2 	bl	800ba14 <USBD_CtlError>
            err++;
 800b4b0:	7afb      	ldrb	r3, [r7, #11]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4b6:	e089      	b.n	800b5cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	7c12      	ldrb	r2, [r2, #16]
 800b4d0:	f107 0108 	add.w	r1, r7, #8
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	4798      	blx	r3
 800b4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4da:	e077      	b.n	800b5cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fa98 	bl	800ba14 <USBD_CtlError>
            err++;
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ea:	e06f      	b.n	800b5cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	7c12      	ldrb	r2, [r2, #16]
 800b504:	f107 0108 	add.w	r1, r7, #8
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b50e:	e05d      	b.n	800b5cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa7e 	bl	800ba14 <USBD_CtlError>
            err++;
 800b518:	7afb      	ldrb	r3, [r7, #11]
 800b51a:	3301      	adds	r3, #1
 800b51c:	72fb      	strb	r3, [r7, #11]
          break;
 800b51e:	e055      	b.n	800b5cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	7c12      	ldrb	r2, [r2, #16]
 800b538:	f107 0108 	add.w	r1, r7, #8
 800b53c:	4610      	mov	r0, r2
 800b53e:	4798      	blx	r3
 800b540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b542:	e043      	b.n	800b5cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fa64 	bl	800ba14 <USBD_CtlError>
            err++;
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	3301      	adds	r3, #1
 800b550:	72fb      	strb	r3, [r7, #11]
          break;
 800b552:	e03b      	b.n	800b5cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b566:	695b      	ldr	r3, [r3, #20]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b576:	e029      	b.n	800b5cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fa4a 	bl	800ba14 <USBD_CtlError>
            err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
          break;
 800b586:	e021      	b.n	800b5cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	7c12      	ldrb	r2, [r2, #16]
 800b5a0:	f107 0108 	add.w	r1, r7, #8
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
 800b5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5aa:	e00f      	b.n	800b5cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa30 	bl	800ba14 <USBD_CtlError>
            err++;
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ba:	e007      	b.n	800b5cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fa28 	bl	800ba14 <USBD_CtlError>
          err++;
 800b5c4:	7afb      	ldrb	r3, [r7, #11]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b5ca:	bf00      	nop
      }
      break;
 800b5cc:	e037      	b.n	800b63e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	7c1b      	ldrb	r3, [r3, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d109      	bne.n	800b5ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5de:	f107 0208 	add.w	r2, r7, #8
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	4798      	blx	r3
 800b5e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5e8:	e029      	b.n	800b63e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fa11 	bl	800ba14 <USBD_CtlError>
        err++;
 800b5f2:	7afb      	ldrb	r3, [r7, #11]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5f8:	e021      	b.n	800b63e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	7c1b      	ldrb	r3, [r3, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10d      	bne.n	800b61e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b60a:	f107 0208 	add.w	r2, r7, #8
 800b60e:	4610      	mov	r0, r2
 800b610:	4798      	blx	r3
 800b612:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3301      	adds	r3, #1
 800b618:	2207      	movs	r2, #7
 800b61a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b61c:	e00f      	b.n	800b63e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f9f7 	bl	800ba14 <USBD_CtlError>
        err++;
 800b626:	7afb      	ldrb	r3, [r7, #11]
 800b628:	3301      	adds	r3, #1
 800b62a:	72fb      	strb	r3, [r7, #11]
      break;
 800b62c:	e007      	b.n	800b63e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f9ef 	bl	800ba14 <USBD_CtlError>
      err++;
 800b636:	7afb      	ldrb	r3, [r7, #11]
 800b638:	3301      	adds	r3, #1
 800b63a:	72fb      	strb	r3, [r7, #11]
      break;
 800b63c:	bf00      	nop
  }

  if (err != 0U)
 800b63e:	7afb      	ldrb	r3, [r7, #11]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d11e      	bne.n	800b682 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	88db      	ldrh	r3, [r3, #6]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d016      	beq.n	800b67a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b64c:	893b      	ldrh	r3, [r7, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00e      	beq.n	800b670 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	88da      	ldrh	r2, [r3, #6]
 800b656:	893b      	ldrh	r3, [r7, #8]
 800b658:	4293      	cmp	r3, r2
 800b65a:	bf28      	it	cs
 800b65c:	4613      	movcs	r3, r2
 800b65e:	b29b      	uxth	r3, r3
 800b660:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b662:	893b      	ldrh	r3, [r7, #8]
 800b664:	461a      	mov	r2, r3
 800b666:	68f9      	ldr	r1, [r7, #12]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fa44 	bl	800baf6 <USBD_CtlSendData>
 800b66e:	e009      	b.n	800b684 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9ce 	bl	800ba14 <USBD_CtlError>
 800b678:	e004      	b.n	800b684 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fa95 	bl	800bbaa <USBD_CtlSendStatus>
 800b680:	e000      	b.n	800b684 <USBD_GetDescriptor+0x320>
    return;
 800b682:	bf00      	nop
  }
}
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop

0800b68c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	889b      	ldrh	r3, [r3, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d131      	bne.n	800b702 <USBD_SetAddress+0x76>
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	88db      	ldrh	r3, [r3, #6]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d12d      	bne.n	800b702 <USBD_SetAddress+0x76>
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	885b      	ldrh	r3, [r3, #2]
 800b6aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6ac:	d829      	bhi.n	800b702 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	885b      	ldrh	r3, [r3, #2]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b03      	cmp	r3, #3
 800b6c4:	d104      	bne.n	800b6d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f9a3 	bl	800ba14 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ce:	e01d      	b.n	800b70c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	7bfa      	ldrb	r2, [r7, #15]
 800b6d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 feaf 	bl	800c440 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fa61 	bl	800bbaa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d004      	beq.n	800b6f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f6:	e009      	b.n	800b70c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b700:	e004      	b.n	800b70c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f985 	bl	800ba14 <USBD_CtlError>
  }
}
 800b70a:	bf00      	nop
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b71e:	2300      	movs	r3, #0
 800b720:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	885b      	ldrh	r3, [r3, #2]
 800b726:	b2da      	uxtb	r2, r3
 800b728:	4b4c      	ldr	r3, [pc, #304]	@ (800b85c <USBD_SetConfig+0x148>)
 800b72a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b72c:	4b4b      	ldr	r3, [pc, #300]	@ (800b85c <USBD_SetConfig+0x148>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d905      	bls.n	800b740 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f96c 	bl	800ba14 <USBD_CtlError>
    return USBD_FAIL;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e088      	b.n	800b852 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d002      	beq.n	800b752 <USBD_SetConfig+0x3e>
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	d025      	beq.n	800b79c <USBD_SetConfig+0x88>
 800b750:	e071      	b.n	800b836 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b752:	4b42      	ldr	r3, [pc, #264]	@ (800b85c <USBD_SetConfig+0x148>)
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d01c      	beq.n	800b794 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b75a:	4b40      	ldr	r3, [pc, #256]	@ (800b85c <USBD_SetConfig+0x148>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	461a      	mov	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b764:	4b3d      	ldr	r3, [pc, #244]	@ (800b85c <USBD_SetConfig+0x148>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7ff f992 	bl	800aa94 <USBD_SetClassConfig>
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d004      	beq.n	800b784 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f949 	bl	800ba14 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b782:	e065      	b.n	800b850 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fa10 	bl	800bbaa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2203      	movs	r2, #3
 800b78e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b792:	e05d      	b.n	800b850 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fa08 	bl	800bbaa <USBD_CtlSendStatus>
      break;
 800b79a:	e059      	b.n	800b850 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b79c:	4b2f      	ldr	r3, [pc, #188]	@ (800b85c <USBD_SetConfig+0x148>)
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d112      	bne.n	800b7ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b7ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b85c <USBD_SetConfig+0x148>)
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7b6:	4b29      	ldr	r3, [pc, #164]	@ (800b85c <USBD_SetConfig+0x148>)
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff f985 	bl	800aacc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f9f1 	bl	800bbaa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7c8:	e042      	b.n	800b850 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b7ca:	4b24      	ldr	r3, [pc, #144]	@ (800b85c <USBD_SetConfig+0x148>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d02a      	beq.n	800b82e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff f973 	bl	800aacc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b7e6:	4b1d      	ldr	r3, [pc, #116]	@ (800b85c <USBD_SetConfig+0x148>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7f0:	4b1a      	ldr	r3, [pc, #104]	@ (800b85c <USBD_SetConfig+0x148>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff f94c 	bl	800aa94 <USBD_SetClassConfig>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b800:	7bfb      	ldrb	r3, [r7, #15]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00f      	beq.n	800b826 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f903 	bl	800ba14 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	b2db      	uxtb	r3, r3
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff f958 	bl	800aacc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2202      	movs	r2, #2
 800b820:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b824:	e014      	b.n	800b850 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f9bf 	bl	800bbaa <USBD_CtlSendStatus>
      break;
 800b82c:	e010      	b.n	800b850 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f9bb 	bl	800bbaa <USBD_CtlSendStatus>
      break;
 800b834:	e00c      	b.n	800b850 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b836:	6839      	ldr	r1, [r7, #0]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f8eb 	bl	800ba14 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b83e:	4b07      	ldr	r3, [pc, #28]	@ (800b85c <USBD_SetConfig+0x148>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7ff f941 	bl	800aacc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b84a:	2303      	movs	r3, #3
 800b84c:	73fb      	strb	r3, [r7, #15]
      break;
 800b84e:	bf00      	nop
  }

  return ret;
 800b850:	7bfb      	ldrb	r3, [r7, #15]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	200005b4 	.word	0x200005b4

0800b860 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	88db      	ldrh	r3, [r3, #6]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d004      	beq.n	800b87c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f8cd 	bl	800ba14 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b87a:	e023      	b.n	800b8c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b02      	cmp	r3, #2
 800b886:	dc02      	bgt.n	800b88e <USBD_GetConfig+0x2e>
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dc03      	bgt.n	800b894 <USBD_GetConfig+0x34>
 800b88c:	e015      	b.n	800b8ba <USBD_GetConfig+0x5a>
 800b88e:	2b03      	cmp	r3, #3
 800b890:	d00b      	beq.n	800b8aa <USBD_GetConfig+0x4a>
 800b892:	e012      	b.n	800b8ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	3308      	adds	r3, #8
 800b89e:	2201      	movs	r2, #1
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f927 	bl	800baf6 <USBD_CtlSendData>
        break;
 800b8a8:	e00c      	b.n	800b8c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f91f 	bl	800baf6 <USBD_CtlSendData>
        break;
 800b8b8:	e004      	b.n	800b8c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f8a9 	bl	800ba14 <USBD_CtlError>
        break;
 800b8c2:	bf00      	nop
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d81e      	bhi.n	800b922 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	88db      	ldrh	r3, [r3, #6]
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d004      	beq.n	800b8f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f890 	bl	800ba14 <USBD_CtlError>
        break;
 800b8f4:	e01a      	b.n	800b92c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b902:	2b00      	cmp	r3, #0
 800b904:	d005      	beq.n	800b912 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	f043 0202 	orr.w	r2, r3, #2
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	330c      	adds	r3, #12
 800b916:	2202      	movs	r2, #2
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f8eb 	bl	800baf6 <USBD_CtlSendData>
      break;
 800b920:	e004      	b.n	800b92c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f875 	bl	800ba14 <USBD_CtlError>
      break;
 800b92a:	bf00      	nop
  }
}
 800b92c:	bf00      	nop
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	885b      	ldrh	r3, [r3, #2]
 800b942:	2b01      	cmp	r3, #1
 800b944:	d106      	bne.n	800b954 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f92b 	bl	800bbaa <USBD_CtlSendStatus>
  }
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	3b01      	subs	r3, #1
 800b970:	2b02      	cmp	r3, #2
 800b972:	d80b      	bhi.n	800b98c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	885b      	ldrh	r3, [r3, #2]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d10c      	bne.n	800b996 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f910 	bl	800bbaa <USBD_CtlSendStatus>
      }
      break;
 800b98a:	e004      	b.n	800b996 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f840 	bl	800ba14 <USBD_CtlError>
      break;
 800b994:	e000      	b.n	800b998 <USBD_ClrFeature+0x3c>
      break;
 800b996:	bf00      	nop
  }
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	781a      	ldrb	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	781a      	ldrb	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff fa92 	bl	800aef4 <SWAPBYTE>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7ff fa85 	bl	800aef4 <SWAPBYTE>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7ff fa78 	bl	800aef4 <SWAPBYTE>
 800ba04:	4603      	mov	r3, r0
 800ba06:	461a      	mov	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	80da      	strh	r2, [r3, #6]
}
 800ba0c:	bf00      	nop
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba1e:	2180      	movs	r1, #128	@ 0x80
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fca3 	bl	800c36c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba26:	2100      	movs	r1, #0
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fc9f 	bl	800c36c <USBD_LL_StallEP>
}
 800ba2e:	bf00      	nop
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b086      	sub	sp, #24
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba42:	2300      	movs	r3, #0
 800ba44:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d036      	beq.n	800baba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba50:	6938      	ldr	r0, [r7, #16]
 800ba52:	f000 f836 	bl	800bac2 <USBD_GetLen>
 800ba56:	4603      	mov	r3, r0
 800ba58:	3301      	adds	r3, #1
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	005b      	lsls	r3, r3, #1
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	4413      	add	r3, r2
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	7812      	ldrb	r2, [r2, #0]
 800ba6e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	3301      	adds	r3, #1
 800ba74:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	2203      	movs	r2, #3
 800ba7e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	3301      	adds	r3, #1
 800ba84:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba86:	e013      	b.n	800bab0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	7812      	ldrb	r2, [r2, #0]
 800ba92:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	3301      	adds	r3, #1
 800ba98:	613b      	str	r3, [r7, #16]
    idx++;
 800ba9a:	7dfb      	ldrb	r3, [r7, #23]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800baa0:	7dfb      	ldrb	r3, [r7, #23]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	4413      	add	r3, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	701a      	strb	r2, [r3, #0]
    idx++;
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
 800baac:	3301      	adds	r3, #1
 800baae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1e7      	bne.n	800ba88 <USBD_GetString+0x52>
 800bab8:	e000      	b.n	800babc <USBD_GetString+0x86>
    return;
 800baba:	bf00      	nop
  }
}
 800babc:	3718      	adds	r7, #24
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bac2:	b480      	push	{r7}
 800bac4:	b085      	sub	sp, #20
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bad2:	e005      	b.n	800bae0 <USBD_GetLen+0x1e>
  {
    len++;
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
 800bad6:	3301      	adds	r3, #1
 800bad8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	3301      	adds	r3, #1
 800bade:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1f5      	bne.n	800bad4 <USBD_GetLen+0x12>
  }

  return len;
 800bae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b084      	sub	sp, #16
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2202      	movs	r2, #2
 800bb06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 fcae 	bl	800c47e <USBD_LL_Transmit>

  return USBD_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 fc9d 	bl	800c47e <USBD_LL_Transmit>

  return USBD_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	60f8      	str	r0, [r7, #12]
 800bb56:	60b9      	str	r1, [r7, #8]
 800bb58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2203      	movs	r2, #3
 800bb5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	2100      	movs	r1, #0
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 fca1 	bl	800c4c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 fc90 	bl	800c4c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b082      	sub	sp, #8
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2204      	movs	r2, #4
 800bbb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fc5c 	bl	800c47e <USBD_LL_Transmit>

  return USBD_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2205      	movs	r2, #5
 800bbdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fc6a 	bl	800c4c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	4912      	ldr	r1, [pc, #72]	@ (800bc48 <MX_USB_Device_Init+0x50>)
 800bc00:	4812      	ldr	r0, [pc, #72]	@ (800bc4c <MX_USB_Device_Init+0x54>)
 800bc02:	f7fe fed9 	bl	800a9b8 <USBD_Init>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bc0c:	f7f5 fc5c 	bl	80014c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bc10:	490f      	ldr	r1, [pc, #60]	@ (800bc50 <MX_USB_Device_Init+0x58>)
 800bc12:	480e      	ldr	r0, [pc, #56]	@ (800bc4c <MX_USB_Device_Init+0x54>)
 800bc14:	f7fe ff00 	bl	800aa18 <USBD_RegisterClass>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bc1e:	f7f5 fc53 	bl	80014c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bc22:	490c      	ldr	r1, [pc, #48]	@ (800bc54 <MX_USB_Device_Init+0x5c>)
 800bc24:	4809      	ldr	r0, [pc, #36]	@ (800bc4c <MX_USB_Device_Init+0x54>)
 800bc26:	f7fe fe21 	bl	800a86c <USBD_CDC_RegisterInterface>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800bc30:	f7f5 fc4a 	bl	80014c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bc34:	4805      	ldr	r0, [pc, #20]	@ (800bc4c <MX_USB_Device_Init+0x54>)
 800bc36:	f7fe ff16 	bl	800aa66 <USBD_Start>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800bc40:	f7f5 fc42 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bc44:	bf00      	nop
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	20000150 	.word	0x20000150
 800bc4c:	200005b8 	.word	0x200005b8
 800bc50:	20000038 	.word	0x20000038
 800bc54:	2000013c 	.word	0x2000013c

0800bc58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	4905      	ldr	r1, [pc, #20]	@ (800bc74 <CDC_Init_FS+0x1c>)
 800bc60:	4805      	ldr	r0, [pc, #20]	@ (800bc78 <CDC_Init_FS+0x20>)
 800bc62:	f7fe fe18 	bl	800a896 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc66:	4905      	ldr	r1, [pc, #20]	@ (800bc7c <CDC_Init_FS+0x24>)
 800bc68:	4803      	ldr	r0, [pc, #12]	@ (800bc78 <CDC_Init_FS+0x20>)
 800bc6a:	f7fe fe32 	bl	800a8d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	20000c88 	.word	0x20000c88
 800bc78:	200005b8 	.word	0x200005b8
 800bc7c:	20000888 	.word	0x20000888

0800bc80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc80:	b480      	push	{r7}
 800bc82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	6039      	str	r1, [r7, #0]
 800bc9a:	71fb      	strb	r3, [r7, #7]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bca0:	79fb      	ldrb	r3, [r7, #7]
 800bca2:	2b23      	cmp	r3, #35	@ 0x23
 800bca4:	d84a      	bhi.n	800bd3c <CDC_Control_FS+0xac>
 800bca6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcac <CDC_Control_FS+0x1c>)
 800bca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcac:	0800bd3d 	.word	0x0800bd3d
 800bcb0:	0800bd3d 	.word	0x0800bd3d
 800bcb4:	0800bd3d 	.word	0x0800bd3d
 800bcb8:	0800bd3d 	.word	0x0800bd3d
 800bcbc:	0800bd3d 	.word	0x0800bd3d
 800bcc0:	0800bd3d 	.word	0x0800bd3d
 800bcc4:	0800bd3d 	.word	0x0800bd3d
 800bcc8:	0800bd3d 	.word	0x0800bd3d
 800bccc:	0800bd3d 	.word	0x0800bd3d
 800bcd0:	0800bd3d 	.word	0x0800bd3d
 800bcd4:	0800bd3d 	.word	0x0800bd3d
 800bcd8:	0800bd3d 	.word	0x0800bd3d
 800bcdc:	0800bd3d 	.word	0x0800bd3d
 800bce0:	0800bd3d 	.word	0x0800bd3d
 800bce4:	0800bd3d 	.word	0x0800bd3d
 800bce8:	0800bd3d 	.word	0x0800bd3d
 800bcec:	0800bd3d 	.word	0x0800bd3d
 800bcf0:	0800bd3d 	.word	0x0800bd3d
 800bcf4:	0800bd3d 	.word	0x0800bd3d
 800bcf8:	0800bd3d 	.word	0x0800bd3d
 800bcfc:	0800bd3d 	.word	0x0800bd3d
 800bd00:	0800bd3d 	.word	0x0800bd3d
 800bd04:	0800bd3d 	.word	0x0800bd3d
 800bd08:	0800bd3d 	.word	0x0800bd3d
 800bd0c:	0800bd3d 	.word	0x0800bd3d
 800bd10:	0800bd3d 	.word	0x0800bd3d
 800bd14:	0800bd3d 	.word	0x0800bd3d
 800bd18:	0800bd3d 	.word	0x0800bd3d
 800bd1c:	0800bd3d 	.word	0x0800bd3d
 800bd20:	0800bd3d 	.word	0x0800bd3d
 800bd24:	0800bd3d 	.word	0x0800bd3d
 800bd28:	0800bd3d 	.word	0x0800bd3d
 800bd2c:	0800bd3d 	.word	0x0800bd3d
 800bd30:	0800bd3d 	.word	0x0800bd3d
 800bd34:	0800bd3d 	.word	0x0800bd3d
 800bd38:	0800bd3d 	.word	0x0800bd3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd3c:	bf00      	nop
  }

  return (USBD_OK);
 800bd3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	480a      	ldr	r0, [pc, #40]	@ (800bd84 <CDC_Receive_FS+0x38>)
 800bd5a:	f7fe fdba 	bl	800a8d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd5e:	4809      	ldr	r0, [pc, #36]	@ (800bd84 <CDC_Receive_FS+0x38>)
 800bd60:	f7fe fe00 	bl	800a964 <USBD_CDC_ReceivePacket>
  cdc_rx_len = *Len;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	4b07      	ldr	r3, [pc, #28]	@ (800bd88 <CDC_Receive_FS+0x3c>)
 800bd6c:	801a      	strh	r2, [r3, #0]
  user_shell_recive_bytes(UserRxBufferFS,cdc_rx_len);
 800bd6e:	4b06      	ldr	r3, [pc, #24]	@ (800bd88 <CDC_Receive_FS+0x3c>)
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	4619      	mov	r1, r3
 800bd74:	4805      	ldr	r0, [pc, #20]	@ (800bd8c <CDC_Receive_FS+0x40>)
 800bd76:	f002 ff8b 	bl	800ec90 <user_shell_recive_bytes>
  return (USBD_OK);
 800bd7a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	200005b8 	.word	0x200005b8
 800bd88:	20001088 	.word	0x20001088
 800bd8c:	20000888 	.word	0x20000888

0800bd90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bda0:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd8 <CDC_Transmit_FS+0x48>)
 800bda2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bda6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e00b      	b.n	800bdce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bdb6:	887b      	ldrh	r3, [r7, #2]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	4806      	ldr	r0, [pc, #24]	@ (800bdd8 <CDC_Transmit_FS+0x48>)
 800bdbe:	f7fe fd6a 	bl	800a896 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bdc2:	4805      	ldr	r0, [pc, #20]	@ (800bdd8 <CDC_Transmit_FS+0x48>)
 800bdc4:	f7fe fd9e 	bl	800a904 <USBD_CDC_TransmitPacket>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	200005b8 	.word	0x200005b8

0800bddc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	4613      	mov	r3, r2
 800bde8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bdee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	371c      	adds	r7, #28
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
	...

0800be00 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	6039      	str	r1, [r7, #0]
 800be0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	2212      	movs	r2, #18
 800be10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800be12:	4b03      	ldr	r3, [pc, #12]	@ (800be20 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800be14:	4618      	mov	r0, r3
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	20000170 	.word	0x20000170

0800be24 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	4603      	mov	r3, r0
 800be2c:	6039      	str	r1, [r7, #0]
 800be2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2204      	movs	r2, #4
 800be34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be36:	4b03      	ldr	r3, [pc, #12]	@ (800be44 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800be38:	4618      	mov	r0, r3
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	20000184 	.word	0x20000184

0800be48 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	6039      	str	r1, [r7, #0]
 800be52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be54:	79fb      	ldrb	r3, [r7, #7]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d105      	bne.n	800be66 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	4907      	ldr	r1, [pc, #28]	@ (800be7c <USBD_CDC_ProductStrDescriptor+0x34>)
 800be5e:	4808      	ldr	r0, [pc, #32]	@ (800be80 <USBD_CDC_ProductStrDescriptor+0x38>)
 800be60:	f7ff fde9 	bl	800ba36 <USBD_GetString>
 800be64:	e004      	b.n	800be70 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	4904      	ldr	r1, [pc, #16]	@ (800be7c <USBD_CDC_ProductStrDescriptor+0x34>)
 800be6a:	4805      	ldr	r0, [pc, #20]	@ (800be80 <USBD_CDC_ProductStrDescriptor+0x38>)
 800be6c:	f7ff fde3 	bl	800ba36 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be70:	4b02      	ldr	r3, [pc, #8]	@ (800be7c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800be72:	4618      	mov	r0, r3
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	2000108c 	.word	0x2000108c
 800be80:	080143b8 	.word	0x080143b8

0800be84 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	4603      	mov	r3, r0
 800be8c:	6039      	str	r1, [r7, #0]
 800be8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	4904      	ldr	r1, [pc, #16]	@ (800bea4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800be94:	4804      	ldr	r0, [pc, #16]	@ (800bea8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800be96:	f7ff fdce 	bl	800ba36 <USBD_GetString>
  return USBD_StrDesc;
 800be9a:	4b02      	ldr	r3, [pc, #8]	@ (800bea4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	2000108c 	.word	0x2000108c
 800bea8:	080143d0 	.word	0x080143d0

0800beac <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	6039      	str	r1, [r7, #0]
 800beb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	221a      	movs	r2, #26
 800bebc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bebe:	f000 f843 	bl	800bf48 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bec2:	4b02      	ldr	r3, [pc, #8]	@ (800becc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	20000188 	.word	0x20000188

0800bed0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	4603      	mov	r3, r0
 800bed8:	6039      	str	r1, [r7, #0]
 800beda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d105      	bne.n	800beee <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bee2:	683a      	ldr	r2, [r7, #0]
 800bee4:	4907      	ldr	r1, [pc, #28]	@ (800bf04 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bee6:	4808      	ldr	r0, [pc, #32]	@ (800bf08 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bee8:	f7ff fda5 	bl	800ba36 <USBD_GetString>
 800beec:	e004      	b.n	800bef8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	4904      	ldr	r1, [pc, #16]	@ (800bf04 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bef2:	4805      	ldr	r0, [pc, #20]	@ (800bf08 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bef4:	f7ff fd9f 	bl	800ba36 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef8:	4b02      	ldr	r3, [pc, #8]	@ (800bf04 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	2000108c 	.word	0x2000108c
 800bf08:	080143e4 	.word	0x080143e4

0800bf0c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	4603      	mov	r3, r0
 800bf14:	6039      	str	r1, [r7, #0]
 800bf16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf18:	79fb      	ldrb	r3, [r7, #7]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d105      	bne.n	800bf2a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	4907      	ldr	r1, [pc, #28]	@ (800bf40 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bf22:	4808      	ldr	r0, [pc, #32]	@ (800bf44 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bf24:	f7ff fd87 	bl	800ba36 <USBD_GetString>
 800bf28:	e004      	b.n	800bf34 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	4904      	ldr	r1, [pc, #16]	@ (800bf40 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bf2e:	4805      	ldr	r0, [pc, #20]	@ (800bf44 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bf30:	f7ff fd81 	bl	800ba36 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf34:	4b02      	ldr	r3, [pc, #8]	@ (800bf40 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	2000108c 	.word	0x2000108c
 800bf44:	080143f0 	.word	0x080143f0

0800bf48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf4e:	4b0f      	ldr	r3, [pc, #60]	@ (800bf8c <Get_SerialNum+0x44>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf54:	4b0e      	ldr	r3, [pc, #56]	@ (800bf90 <Get_SerialNum+0x48>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf5a:	4b0e      	ldr	r3, [pc, #56]	@ (800bf94 <Get_SerialNum+0x4c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4413      	add	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d009      	beq.n	800bf82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf6e:	2208      	movs	r2, #8
 800bf70:	4909      	ldr	r1, [pc, #36]	@ (800bf98 <Get_SerialNum+0x50>)
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 f814 	bl	800bfa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf78:	2204      	movs	r2, #4
 800bf7a:	4908      	ldr	r1, [pc, #32]	@ (800bf9c <Get_SerialNum+0x54>)
 800bf7c:	68b8      	ldr	r0, [r7, #8]
 800bf7e:	f000 f80f 	bl	800bfa0 <IntToUnicode>
  }
}
 800bf82:	bf00      	nop
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	1fff7590 	.word	0x1fff7590
 800bf90:	1fff7594 	.word	0x1fff7594
 800bf94:	1fff7598 	.word	0x1fff7598
 800bf98:	2000018a 	.word	0x2000018a
 800bf9c:	2000019a 	.word	0x2000019a

0800bfa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b087      	sub	sp, #28
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	75fb      	strb	r3, [r7, #23]
 800bfb6:	e027      	b.n	800c008 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	0f1b      	lsrs	r3, r3, #28
 800bfbc:	2b09      	cmp	r3, #9
 800bfbe:	d80b      	bhi.n	800bfd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	0f1b      	lsrs	r3, r3, #28
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	4619      	mov	r1, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	440b      	add	r3, r1
 800bfd0:	3230      	adds	r2, #48	@ 0x30
 800bfd2:	b2d2      	uxtb	r2, r2
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	e00a      	b.n	800bfee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	0f1b      	lsrs	r3, r3, #28
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	440b      	add	r3, r1
 800bfe8:	3237      	adds	r2, #55	@ 0x37
 800bfea:	b2d2      	uxtb	r2, r2
 800bfec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	011b      	lsls	r3, r3, #4
 800bff2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	3301      	adds	r3, #1
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	4413      	add	r3, r2
 800bffe:	2200      	movs	r2, #0
 800c000:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c002:	7dfb      	ldrb	r3, [r7, #23]
 800c004:	3301      	adds	r3, #1
 800c006:	75fb      	strb	r3, [r7, #23]
 800c008:	7dfa      	ldrb	r2, [r7, #23]
 800c00a:	79fb      	ldrb	r3, [r7, #7]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d3d3      	bcc.n	800bfb8 <IntToUnicode+0x18>
  }
}
 800c010:	bf00      	nop
 800c012:	bf00      	nop
 800c014:	371c      	adds	r7, #28
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
	...

0800c020 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b094      	sub	sp, #80	@ 0x50
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c028:	f107 030c 	add.w	r3, r7, #12
 800c02c:	2244      	movs	r2, #68	@ 0x44
 800c02e:	2100      	movs	r1, #0
 800c030:	4618      	mov	r0, r3
 800c032:	f004 fb75 	bl	8010720 <memset>
  if(pcdHandle->Instance==USB)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a15      	ldr	r2, [pc, #84]	@ (800c090 <HAL_PCD_MspInit+0x70>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d122      	bne.n	800c086 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c044:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c046:	2300      	movs	r3, #0
 800c048:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c04a:	f107 030c 	add.w	r3, r7, #12
 800c04e:	4618      	mov	r0, r3
 800c050:	f7f9 fc80 	bl	8005954 <HAL_RCCEx_PeriphCLKConfig>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c05a:	f7f5 fa35 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c05e:	4b0d      	ldr	r3, [pc, #52]	@ (800c094 <HAL_PCD_MspInit+0x74>)
 800c060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c062:	4a0c      	ldr	r2, [pc, #48]	@ (800c094 <HAL_PCD_MspInit+0x74>)
 800c064:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c068:	6593      	str	r3, [r2, #88]	@ 0x58
 800c06a:	4b0a      	ldr	r3, [pc, #40]	@ (800c094 <HAL_PCD_MspInit+0x74>)
 800c06c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c06e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c072:	60bb      	str	r3, [r7, #8]
 800c074:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c076:	2200      	movs	r2, #0
 800c078:	2100      	movs	r1, #0
 800c07a:	2014      	movs	r0, #20
 800c07c:	f7f5 fe0f 	bl	8001c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c080:	2014      	movs	r0, #20
 800c082:	f7f5 fe26 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c086:	bf00      	nop
 800c088:	3750      	adds	r7, #80	@ 0x50
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	40005c00 	.word	0x40005c00
 800c094:	40021000 	.word	0x40021000

0800c098 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	f7fe fd24 	bl	800aafc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c0ce:	78fa      	ldrb	r2, [r7, #3]
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	4413      	add	r3, r2
 800c0d8:	00db      	lsls	r3, r3, #3
 800c0da:	440b      	add	r3, r1
 800c0dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	78fb      	ldrb	r3, [r7, #3]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	f7fe fd5e 	bl	800aba6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c0ea:	bf00      	nop
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c104:	78fa      	ldrb	r2, [r7, #3]
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	4613      	mov	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	00db      	lsls	r3, r3, #3
 800c110:	440b      	add	r3, r1
 800c112:	3324      	adds	r3, #36	@ 0x24
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	78fb      	ldrb	r3, [r7, #3]
 800c118:	4619      	mov	r1, r3
 800c11a:	f7fe fda7 	bl	800ac6c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c11e:	bf00      	nop
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b082      	sub	sp, #8
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c134:	4618      	mov	r0, r3
 800c136:	f7fe febb 	bl	800aeb0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b084      	sub	sp, #16
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c14a:	2301      	movs	r3, #1
 800c14c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	795b      	ldrb	r3, [r3, #5]
 800c152:	2b02      	cmp	r3, #2
 800c154:	d001      	beq.n	800c15a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c156:	f7f5 f9b7 	bl	80014c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c160:	7bfa      	ldrb	r2, [r7, #15]
 800c162:	4611      	mov	r1, r2
 800c164:	4618      	mov	r0, r3
 800c166:	f7fe fe65 	bl	800ae34 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe fe11 	bl	800ad98 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c176:	bf00      	nop
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
	...

0800c180 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe fe60 	bl	800ae54 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	7a5b      	ldrb	r3, [r3, #9]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d005      	beq.n	800c1a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c19c:	4b04      	ldr	r3, [pc, #16]	@ (800c1b0 <HAL_PCD_SuspendCallback+0x30>)
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	4a03      	ldr	r2, [pc, #12]	@ (800c1b0 <HAL_PCD_SuspendCallback+0x30>)
 800c1a2:	f043 0306 	orr.w	r3, r3, #6
 800c1a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c1a8:	bf00      	nop
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	e000ed00 	.word	0xe000ed00

0800c1b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	7a5b      	ldrb	r3, [r3, #9]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d007      	beq.n	800c1d4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1c4:	4b08      	ldr	r3, [pc, #32]	@ (800c1e8 <HAL_PCD_ResumeCallback+0x34>)
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	4a07      	ldr	r2, [pc, #28]	@ (800c1e8 <HAL_PCD_ResumeCallback+0x34>)
 800c1ca:	f023 0306 	bic.w	r3, r3, #6
 800c1ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c1d0:	f000 f9f8 	bl	800c5c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fe fe50 	bl	800ae80 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	e000ed00 	.word	0xe000ed00

0800c1ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c1f4:	4a2b      	ldr	r2, [pc, #172]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4a29      	ldr	r2, [pc, #164]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c200:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c204:	4b27      	ldr	r3, [pc, #156]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c206:	4a28      	ldr	r2, [pc, #160]	@ (800c2a8 <USBD_LL_Init+0xbc>)
 800c208:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c20a:	4b26      	ldr	r3, [pc, #152]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c20c:	2208      	movs	r2, #8
 800c20e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c210:	4b24      	ldr	r3, [pc, #144]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c212:	2202      	movs	r2, #2
 800c214:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c216:	4b23      	ldr	r3, [pc, #140]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c218:	2202      	movs	r2, #2
 800c21a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c21c:	4b21      	ldr	r3, [pc, #132]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c21e:	2200      	movs	r2, #0
 800c220:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c222:	4b20      	ldr	r3, [pc, #128]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c224:	2200      	movs	r2, #0
 800c226:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c228:	4b1e      	ldr	r3, [pc, #120]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c22e:	4b1d      	ldr	r3, [pc, #116]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c230:	2200      	movs	r2, #0
 800c232:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c234:	481b      	ldr	r0, [pc, #108]	@ (800c2a4 <USBD_LL_Init+0xb8>)
 800c236:	f7f7 f878 	bl	800332a <HAL_PCD_Init>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c240:	f7f5 f942 	bl	80014c8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c24a:	2318      	movs	r3, #24
 800c24c:	2200      	movs	r2, #0
 800c24e:	2100      	movs	r1, #0
 800c250:	f7f8 fd31 	bl	8004cb6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c25a:	2358      	movs	r3, #88	@ 0x58
 800c25c:	2200      	movs	r2, #0
 800c25e:	2180      	movs	r1, #128	@ 0x80
 800c260:	f7f8 fd29 	bl	8004cb6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c26a:	23c0      	movs	r3, #192	@ 0xc0
 800c26c:	2200      	movs	r2, #0
 800c26e:	2181      	movs	r1, #129	@ 0x81
 800c270:	f7f8 fd21 	bl	8004cb6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c27a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c27e:	2200      	movs	r2, #0
 800c280:	2101      	movs	r1, #1
 800c282:	f7f8 fd18 	bl	8004cb6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c28c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c290:	2200      	movs	r2, #0
 800c292:	2182      	movs	r1, #130	@ 0x82
 800c294:	f7f8 fd0f 	bl	8004cb6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	2000128c 	.word	0x2000128c
 800c2a8:	40005c00 	.word	0x40005c00

0800c2ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7f7 f8ff 	bl	80034c6 <HAL_PCD_Start>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 f97e 	bl	800c5d0 <USBD_Get_USB_Status>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	4608      	mov	r0, r1
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	70fb      	strb	r3, [r7, #3]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70bb      	strb	r3, [r7, #2]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c30a:	78bb      	ldrb	r3, [r7, #2]
 800c30c:	883a      	ldrh	r2, [r7, #0]
 800c30e:	78f9      	ldrb	r1, [r7, #3]
 800c310:	f7f7 fa46 	bl	80037a0 <HAL_PCD_EP_Open>
 800c314:	4603      	mov	r3, r0
 800c316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c318:	7bfb      	ldrb	r3, [r7, #15]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 f958 	bl	800c5d0 <USBD_Get_USB_Status>
 800c320:	4603      	mov	r3, r0
 800c322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c324:	7bbb      	ldrb	r3, [r7, #14]
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	460b      	mov	r3, r1
 800c338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c33a:	2300      	movs	r3, #0
 800c33c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c348:	78fa      	ldrb	r2, [r7, #3]
 800c34a:	4611      	mov	r1, r2
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7f7 fa84 	bl	800385a <HAL_PCD_EP_Close>
 800c352:	4603      	mov	r3, r0
 800c354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c356:	7bfb      	ldrb	r3, [r7, #15]
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 f939 	bl	800c5d0 <USBD_Get_USB_Status>
 800c35e:	4603      	mov	r3, r0
 800c360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c362:	7bbb      	ldrb	r3, [r7, #14]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c37c:	2300      	movs	r3, #0
 800c37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c386:	78fa      	ldrb	r2, [r7, #3]
 800c388:	4611      	mov	r1, r2
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7f7 fb2d 	bl	80039ea <HAL_PCD_EP_SetStall>
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c394:	7bfb      	ldrb	r3, [r7, #15]
 800c396:	4618      	mov	r0, r3
 800c398:	f000 f91a 	bl	800c5d0 <USBD_Get_USB_Status>
 800c39c:	4603      	mov	r3, r0
 800c39e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c3c4:	78fa      	ldrb	r2, [r7, #3]
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7f7 fb60 	bl	8003a8e <HAL_PCD_EP_ClrStall>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 f8fb 	bl	800c5d0 <USBD_Get_USB_Status>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c3fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c400:	2b00      	cmp	r3, #0
 800c402:	da0b      	bge.n	800c41c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c404:	78fb      	ldrb	r3, [r7, #3]
 800c406:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c40a:	68f9      	ldr	r1, [r7, #12]
 800c40c:	4613      	mov	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4413      	add	r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	440b      	add	r3, r1
 800c416:	3312      	adds	r3, #18
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	e00b      	b.n	800c434 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c41c:	78fb      	ldrb	r3, [r7, #3]
 800c41e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c422:	68f9      	ldr	r1, [r7, #12]
 800c424:	4613      	mov	r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	4413      	add	r3, r2
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	440b      	add	r3, r1
 800c42e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c432:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c434:	4618      	mov	r0, r3
 800c436:	3714      	adds	r7, #20
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	460b      	mov	r3, r1
 800c44a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c45a:	78fa      	ldrb	r2, [r7, #3]
 800c45c:	4611      	mov	r1, r2
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f7 f97a 	bl	8003758 <HAL_PCD_SetAddress>
 800c464:	4603      	mov	r3, r0
 800c466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c468:	7bfb      	ldrb	r3, [r7, #15]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 f8b0 	bl	800c5d0 <USBD_Get_USB_Status>
 800c470:	4603      	mov	r3, r0
 800c472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c474:	7bbb      	ldrb	r3, [r7, #14]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b086      	sub	sp, #24
 800c482:	af00      	add	r7, sp, #0
 800c484:	60f8      	str	r0, [r7, #12]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
 800c48a:	460b      	mov	r3, r1
 800c48c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c49c:	7af9      	ldrb	r1, [r7, #11]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	f7f7 fa6b 	bl	800397c <HAL_PCD_EP_Transmit>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4aa:	7dfb      	ldrb	r3, [r7, #23]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 f88f 	bl	800c5d0 <USBD_Get_USB_Status>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3718      	adds	r7, #24
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	607a      	str	r2, [r7, #4]
 800c4ca:	603b      	str	r3, [r7, #0]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c4de:	7af9      	ldrb	r1, [r7, #11]
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	f7f7 fa01 	bl	80038ea <HAL_PCD_EP_Receive>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ec:	7dfb      	ldrb	r3, [r7, #23]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 f86e 	bl	800c5d0 <USBD_Get_USB_Status>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3718      	adds	r7, #24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	460b      	mov	r3, r1
 800c50c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c514:	78fa      	ldrb	r2, [r7, #3]
 800c516:	4611      	mov	r1, r2
 800c518:	4618      	mov	r0, r3
 800c51a:	f7f7 fa17 	bl	800394c <HAL_PCD_EP_GetRxCount>
 800c51e:	4603      	mov	r3, r0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c534:	78fb      	ldrb	r3, [r7, #3]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d002      	beq.n	800c540 <HAL_PCDEx_LPM_Callback+0x18>
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d013      	beq.n	800c566 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c53e:	e023      	b.n	800c588 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	7a5b      	ldrb	r3, [r3, #9]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d007      	beq.n	800c558 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c548:	f000 f83c 	bl	800c5c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c54c:	4b10      	ldr	r3, [pc, #64]	@ (800c590 <HAL_PCDEx_LPM_Callback+0x68>)
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	4a0f      	ldr	r2, [pc, #60]	@ (800c590 <HAL_PCDEx_LPM_Callback+0x68>)
 800c552:	f023 0306 	bic.w	r3, r3, #6
 800c556:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fe fc8e 	bl	800ae80 <USBD_LL_Resume>
    break;
 800c564:	e010      	b.n	800c588 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fe fc71 	bl	800ae54 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	7a5b      	ldrb	r3, [r3, #9]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d005      	beq.n	800c586 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c57a:	4b05      	ldr	r3, [pc, #20]	@ (800c590 <HAL_PCDEx_LPM_Callback+0x68>)
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	4a04      	ldr	r2, [pc, #16]	@ (800c590 <HAL_PCDEx_LPM_Callback+0x68>)
 800c580:	f043 0306 	orr.w	r3, r3, #6
 800c584:	6113      	str	r3, [r2, #16]
    break;
 800c586:	bf00      	nop
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	e000ed00 	.word	0xe000ed00

0800c594 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c59c:	4b03      	ldr	r3, [pc, #12]	@ (800c5ac <USBD_static_malloc+0x18>)
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	20001568 	.word	0x20001568

0800c5b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]

}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c5c8:	f7f4 ff33 	bl	8001432 <SystemClock_Config>
}
 800c5cc:	bf00      	nop
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5de:	79fb      	ldrb	r3, [r7, #7]
 800c5e0:	2b03      	cmp	r3, #3
 800c5e2:	d817      	bhi.n	800c614 <USBD_Get_USB_Status+0x44>
 800c5e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c5ec <USBD_Get_USB_Status+0x1c>)
 800c5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ea:	bf00      	nop
 800c5ec:	0800c5fd 	.word	0x0800c5fd
 800c5f0:	0800c603 	.word	0x0800c603
 800c5f4:	0800c609 	.word	0x0800c609
 800c5f8:	0800c60f 	.word	0x0800c60f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c600:	e00b      	b.n	800c61a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c602:	2303      	movs	r3, #3
 800c604:	73fb      	strb	r3, [r7, #15]
    break;
 800c606:	e008      	b.n	800c61a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c608:	2301      	movs	r3, #1
 800c60a:	73fb      	strb	r3, [r7, #15]
    break;
 800c60c:	e005      	b.n	800c61a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c60e:	2303      	movs	r3, #3
 800c610:	73fb      	strb	r3, [r7, #15]
    break;
 800c612:	e002      	b.n	800c61a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c614:	2303      	movs	r3, #3
 800c616:	73fb      	strb	r3, [r7, #15]
    break;
 800c618:	bf00      	nop
  }
  return usb_status;
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3714      	adds	r7, #20
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <acc_gyro_init>:
 * @author
 * @param  void
 * @return 0-成功 1-失败
 */
uint8_t acc_gyro_init(void)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	71bb      	strb	r3, [r7, #6]
	uint8_t cfg_index = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	71fb      	strb	r3, [r7, #7]

	BSP_I2C3_ReadReg(LSM6DS3_ADDR, WHO_AM_I, &id, 1);
 800c636:	1dba      	adds	r2, r7, #6
 800c638:	2301      	movs	r3, #1
 800c63a:	210f      	movs	r1, #15
 800c63c:	20d4      	movs	r0, #212	@ 0xd4
 800c63e:	f001 ff12 	bl	800e466 <BSP_I2C3_ReadReg>

    for (cfg_index=0; cfg_index<sizeof(acc_gyro_init_reg)/sizeof(reg_cfg_t); cfg_index++)
 800c642:	2300      	movs	r3, #0
 800c644:	71fb      	strb	r3, [r7, #7]
 800c646:	e022      	b.n	800c68e <acc_gyro_init+0x66>
    {
    	if(acc_gyro_init_reg[cfg_index].reg==0&&acc_gyro_init_reg[cfg_index].dat==0)
 800c648:	79fb      	ldrb	r3, [r7, #7]
 800c64a:	4a15      	ldr	r2, [pc, #84]	@ (800c6a0 <acc_gyro_init+0x78>)
 800c64c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d106      	bne.n	800c662 <acc_gyro_init+0x3a>
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	4a12      	ldr	r2, [pc, #72]	@ (800c6a0 <acc_gyro_init+0x78>)
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	4413      	add	r3, r2
 800c65c:	785b      	ldrb	r3, [r3, #1]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d011      	beq.n	800c686 <acc_gyro_init+0x5e>
    	{
    		continue;
    	}
    	BSP_I2C3_WriteReg(LSM6DS3_ADDR,acc_gyro_init_reg[cfg_index].reg, &acc_gyro_init_reg[cfg_index].dat,1);
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	4a0e      	ldr	r2, [pc, #56]	@ (800c6a0 <acc_gyro_init+0x78>)
 800c666:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c66a:	4619      	mov	r1, r3
 800c66c:	79fb      	ldrb	r3, [r7, #7]
 800c66e:	005b      	lsls	r3, r3, #1
 800c670:	4a0b      	ldr	r2, [pc, #44]	@ (800c6a0 <acc_gyro_init+0x78>)
 800c672:	4413      	add	r3, r2
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	2301      	movs	r3, #1
 800c678:	20d4      	movs	r0, #212	@ 0xd4
 800c67a:	f001 fed7 	bl	800e42c <BSP_I2C3_WriteReg>
        HAL_Delay(1);
 800c67e:	2001      	movs	r0, #1
 800c680:	f7f5 fa10 	bl	8001aa4 <HAL_Delay>
 800c684:	e000      	b.n	800c688 <acc_gyro_init+0x60>
    		continue;
 800c686:	bf00      	nop
    for (cfg_index=0; cfg_index<sizeof(acc_gyro_init_reg)/sizeof(reg_cfg_t); cfg_index++)
 800c688:	79fb      	ldrb	r3, [r7, #7]
 800c68a:	3301      	adds	r3, #1
 800c68c:	71fb      	strb	r3, [r7, #7]
 800c68e:	79fb      	ldrb	r3, [r7, #7]
 800c690:	2b13      	cmp	r3, #19
 800c692:	d9d9      	bls.n	800c648 <acc_gyro_init+0x20>

    }

	return id;
 800c694:	79bb      	ldrb	r3, [r7, #6]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	200001a4 	.word	0x200001a4

0800c6a4 <acc_gyro_sample_data>:
 * @author
 * @param  gyro-脱落仪数据 acc-加速度数据
 * @return void
 */
void acc_gyro_sample_data(int16_t *gyro,int16_t *acc )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
	uint8_t r_data[6];

	BSP_I2C3_ReadReg(LSM6DS3_ADDR, ACCEL_XOUT_L, r_data, 6);
 800c6ae:	f107 0208 	add.w	r2, r7, #8
 800c6b2:	2306      	movs	r3, #6
 800c6b4:	2128      	movs	r1, #40	@ 0x28
 800c6b6:	20d4      	movs	r0, #212	@ 0xd4
 800c6b8:	f001 fed5 	bl	800e466 <BSP_I2C3_ReadReg>

	acc[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c6bc:	7a3b      	ldrb	r3, [r7, #8]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	7a7b      	ldrb	r3, [r7, #9]
 800c6c2:	021b      	lsls	r3, r3, #8
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	4413      	add	r3, r2
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	b21a      	sxth	r2, r3
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	801a      	strh	r2, [r3, #0]
	acc[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c6d0:	7abb      	ldrb	r3, [r7, #10]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	7afb      	ldrb	r3, [r7, #11]
 800c6d6:	021b      	lsls	r3, r3, #8
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	4413      	add	r3, r2
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	3302      	adds	r3, #2
 800c6e2:	b212      	sxth	r2, r2
 800c6e4:	801a      	strh	r2, [r3, #0]
	acc[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c6e6:	7b3b      	ldrb	r3, [r7, #12]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	7b7b      	ldrb	r3, [r7, #13]
 800c6ec:	021b      	lsls	r3, r3, #8
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	4413      	add	r3, r2
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	b212      	sxth	r2, r2
 800c6fa:	801a      	strh	r2, [r3, #0]

	BSP_I2C3_ReadReg(LSM6DS3_ADDR, GYRO_XOUT_L, r_data, 6);
 800c6fc:	f107 0208 	add.w	r2, r7, #8
 800c700:	2306      	movs	r3, #6
 800c702:	2122      	movs	r1, #34	@ 0x22
 800c704:	20d4      	movs	r0, #212	@ 0xd4
 800c706:	f001 feae 	bl	800e466 <BSP_I2C3_ReadReg>
	gyro[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c70a:	7a3b      	ldrb	r3, [r7, #8]
 800c70c:	461a      	mov	r2, r3
 800c70e:	7a7b      	ldrb	r3, [r7, #9]
 800c710:	021b      	lsls	r3, r3, #8
 800c712:	b29b      	uxth	r3, r3
 800c714:	4413      	add	r3, r2
 800c716:	b29b      	uxth	r3, r3
 800c718:	b21a      	sxth	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	801a      	strh	r2, [r3, #0]
	gyro[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c71e:	7abb      	ldrb	r3, [r7, #10]
 800c720:	461a      	mov	r2, r3
 800c722:	7afb      	ldrb	r3, [r7, #11]
 800c724:	021b      	lsls	r3, r3, #8
 800c726:	b29b      	uxth	r3, r3
 800c728:	4413      	add	r3, r2
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3302      	adds	r3, #2
 800c730:	b212      	sxth	r2, r2
 800c732:	801a      	strh	r2, [r3, #0]
	gyro[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c734:	7b3b      	ldrb	r3, [r7, #12]
 800c736:	461a      	mov	r2, r3
 800c738:	7b7b      	ldrb	r3, [r7, #13]
 800c73a:	021b      	lsls	r3, r3, #8
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	4413      	add	r3, r2
 800c740:	b29a      	uxth	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	3304      	adds	r3, #4
 800c746:	b212      	sxth	r2, r2
 800c748:	801a      	strh	r2, [r3, #0]



}
 800c74a:	bf00      	nop
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <set_acc_gyro_offset>:


void set_acc_gyro_offset(void)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b08e      	sub	sp, #56	@ 0x38
 800c758:	af00      	add	r7, sp, #0
    uint8_t i;
    int16_t ax_offset, ay_offset, az_offset, gx_offset, gy_offset, gz_offset;
    int32_t ax_offset_sum, ay_offset_sum, az_offset_sum, gx_offset_sum, gy_offset_sum, gz_offset_sum;
    int16_t gyro_off[3],acc_off[3];

    ax_offset_sum = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	633b      	str	r3, [r7, #48]	@ 0x30
    ay_offset_sum = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    az_offset_sum = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	62bb      	str	r3, [r7, #40]	@ 0x28
    gx_offset_sum = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	627b      	str	r3, [r7, #36]	@ 0x24
    gy_offset_sum = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	623b      	str	r3, [r7, #32]
    gz_offset_sum = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	61fb      	str	r3, [r7, #28]

    for (i = 0; i < 20; i++)
 800c772:	2300      	movs	r3, #0
 800c774:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c778:	e035      	b.n	800c7e6 <set_acc_gyro_offset+0x92>
   {
	  acc_gyro_sample_data(gyro_off,acc_off);
 800c77a:	463a      	mov	r2, r7
 800c77c:	f107 0308 	add.w	r3, r7, #8
 800c780:	4611      	mov	r1, r2
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff ff8e 	bl	800c6a4 <acc_gyro_sample_data>

	   ax_offset = acc_off[0];
 800c788:	883b      	ldrh	r3, [r7, #0]
 800c78a:	837b      	strh	r3, [r7, #26]
	   ay_offset = acc_off[1];
 800c78c:	887b      	ldrh	r3, [r7, #2]
 800c78e:	833b      	strh	r3, [r7, #24]
	   az_offset = acc_off[2];
 800c790:	88bb      	ldrh	r3, [r7, #4]
 800c792:	82fb      	strh	r3, [r7, #22]
	   ax_offset_sum = ax_offset_sum + ax_offset;
 800c794:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c79a:	4413      	add	r3, r2
 800c79c:	633b      	str	r3, [r7, #48]	@ 0x30
	   ay_offset_sum = ay_offset_sum + ay_offset;
 800c79e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c7a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7a4:	4413      	add	r3, r2
 800c7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   az_offset_sum = az_offset_sum + az_offset;
 800c7a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c7ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7ae:	4413      	add	r3, r2
 800c7b0:	62bb      	str	r3, [r7, #40]	@ 0x28

	   gx_offset = gyro_off[0];
 800c7b2:	893b      	ldrh	r3, [r7, #8]
 800c7b4:	82bb      	strh	r3, [r7, #20]
	   gy_offset = gyro_off[1];
 800c7b6:	897b      	ldrh	r3, [r7, #10]
 800c7b8:	827b      	strh	r3, [r7, #18]
	   gz_offset = gyro_off[2];
 800c7ba:	89bb      	ldrh	r3, [r7, #12]
 800c7bc:	823b      	strh	r3, [r7, #16]
	   gx_offset_sum = gx_offset_sum + gx_offset;
 800c7be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c7c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7c4:	4413      	add	r3, r2
 800c7c6:	627b      	str	r3, [r7, #36]	@ 0x24
	   gy_offset_sum = gy_offset_sum + gy_offset;
 800c7c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c7cc:	6a3a      	ldr	r2, [r7, #32]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	623b      	str	r3, [r7, #32]
	   gz_offset_sum = gz_offset_sum + gz_offset;
 800c7d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c7d6:	69fa      	ldr	r2, [r7, #28]
 800c7d8:	4413      	add	r3, r2
 800c7da:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < 20; i++)
 800c7dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c7e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7ea:	2b13      	cmp	r3, #19
 800c7ec:	d9c5      	bls.n	800c77a <set_acc_gyro_offset+0x26>
   }
    imu_9.acc_zero[0] = ax_offset_sum/20;
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f0:	4a29      	ldr	r2, [pc, #164]	@ (800c898 <set_acc_gyro_offset+0x144>)
 800c7f2:	fb82 1203 	smull	r1, r2, r2, r3
 800c7f6:	10d2      	asrs	r2, r2, #3
 800c7f8:	17db      	asrs	r3, r3, #31
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	b21a      	sxth	r2, r3
 800c7fe:	4b27      	ldr	r3, [pc, #156]	@ (800c89c <set_acc_gyro_offset+0x148>)
 800c800:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    imu_9.acc_zero[1] = ay_offset_sum/20;
 800c804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c806:	4a24      	ldr	r2, [pc, #144]	@ (800c898 <set_acc_gyro_offset+0x144>)
 800c808:	fb82 1203 	smull	r1, r2, r2, r3
 800c80c:	10d2      	asrs	r2, r2, #3
 800c80e:	17db      	asrs	r3, r3, #31
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	b21a      	sxth	r2, r3
 800c814:	4b21      	ldr	r3, [pc, #132]	@ (800c89c <set_acc_gyro_offset+0x148>)
 800c816:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    imu_9.acc_zero[2] = az_offset_sum/20 - 16384;
 800c81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c81c:	4a1e      	ldr	r2, [pc, #120]	@ (800c898 <set_acc_gyro_offset+0x144>)
 800c81e:	fb82 1203 	smull	r1, r2, r2, r3
 800c822:	10d2      	asrs	r2, r2, #3
 800c824:	17db      	asrs	r3, r3, #31
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	b29b      	uxth	r3, r3
 800c82a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c82e:	b29b      	uxth	r3, r3
 800c830:	b21a      	sxth	r2, r3
 800c832:	4b1a      	ldr	r3, [pc, #104]	@ (800c89c <set_acc_gyro_offset+0x148>)
 800c834:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    imu_9.gyro_zero[0] = gx_offset_sum/20;
 800c838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83a:	4a17      	ldr	r2, [pc, #92]	@ (800c898 <set_acc_gyro_offset+0x144>)
 800c83c:	fb82 1203 	smull	r1, r2, r2, r3
 800c840:	10d2      	asrs	r2, r2, #3
 800c842:	17db      	asrs	r3, r3, #31
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	b21a      	sxth	r2, r3
 800c848:	4b14      	ldr	r3, [pc, #80]	@ (800c89c <set_acc_gyro_offset+0x148>)
 800c84a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    imu_9.gyro_zero[1] = gy_offset_sum/20;
 800c84e:	6a3b      	ldr	r3, [r7, #32]
 800c850:	4a11      	ldr	r2, [pc, #68]	@ (800c898 <set_acc_gyro_offset+0x144>)
 800c852:	fb82 1203 	smull	r1, r2, r2, r3
 800c856:	10d2      	asrs	r2, r2, #3
 800c858:	17db      	asrs	r3, r3, #31
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	b21a      	sxth	r2, r3
 800c85e:	4b0f      	ldr	r3, [pc, #60]	@ (800c89c <set_acc_gyro_offset+0x148>)
 800c860:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    imu_9.gyro_zero[2] = gz_offset_sum/20;
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	4a0c      	ldr	r2, [pc, #48]	@ (800c898 <set_acc_gyro_offset+0x144>)
 800c868:	fb82 1203 	smull	r1, r2, r2, r3
 800c86c:	10d2      	asrs	r2, r2, #3
 800c86e:	17db      	asrs	r3, r3, #31
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	b21a      	sxth	r2, r3
 800c874:	4b09      	ldr	r3, [pc, #36]	@ (800c89c <set_acc_gyro_offset+0x148>)
 800c876:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    //存入
    STMFLASH_Write(ACC_ZERO_ADDR,(uint8_t*)&imu_9.acc_zero,6);
 800c87a:	2206      	movs	r2, #6
 800c87c:	4908      	ldr	r1, [pc, #32]	@ (800c8a0 <set_acc_gyro_offset+0x14c>)
 800c87e:	4809      	ldr	r0, [pc, #36]	@ (800c8a4 <set_acc_gyro_offset+0x150>)
 800c880:	f001 fe5a 	bl	800e538 <STMFLASH_Write>
    STMFLASH_Write(GYRO_ZERO_ADDR,(uint8_t*)&imu_9.gyro_zero,6);
 800c884:	2206      	movs	r2, #6
 800c886:	4908      	ldr	r1, [pc, #32]	@ (800c8a8 <set_acc_gyro_offset+0x154>)
 800c888:	4808      	ldr	r0, [pc, #32]	@ (800c8ac <set_acc_gyro_offset+0x158>)
 800c88a:	f001 fe55 	bl	800e538 <STMFLASH_Write>





}
 800c88e:	bf00      	nop
 800c890:	3738      	adds	r7, #56	@ 0x38
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	66666667 	.word	0x66666667
 800c89c:	20002164 	.word	0x20002164
 800c8a0:	200021aa 	.word	0x200021aa
 800c8a4:	0801f800 	.word	0x0801f800
 800c8a8:	200021a4 	.word	0x200021a4
 800c8ac:	0801f806 	.word	0x0801f806

0800c8b0 <mag_sample_data>:
}



void mag_sample_data(int16_t *mag )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
	uint8_t r_data[6];
//	mag_wait_data_update();
	BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD, LIS2MDL_OUTX_L_REG, r_data, 6);  //读地磁原始数据
 800c8b8:	f107 0208 	add.w	r2, r7, #8
 800c8bc:	2306      	movs	r3, #6
 800c8be:	2168      	movs	r1, #104	@ 0x68
 800c8c0:	203c      	movs	r0, #60	@ 0x3c
 800c8c2:	f001 fd4e 	bl	800e362 <BSP_I2C1_ReadReg>
    mag[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c8c6:	7a3b      	ldrb	r3, [r7, #8]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	7a7b      	ldrb	r3, [r7, #9]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	4413      	add	r3, r2
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	b21a      	sxth	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	801a      	strh	r2, [r3, #0]
	mag[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c8da:	7abb      	ldrb	r3, [r7, #10]
 800c8dc:	461a      	mov	r2, r3
 800c8de:	7afb      	ldrb	r3, [r7, #11]
 800c8e0:	021b      	lsls	r3, r3, #8
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	4413      	add	r3, r2
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3302      	adds	r3, #2
 800c8ec:	b212      	sxth	r2, r2
 800c8ee:	801a      	strh	r2, [r3, #0]
	mag[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c8f0:	7b3b      	ldrb	r3, [r7, #12]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	7b7b      	ldrb	r3, [r7, #13]
 800c8f6:	021b      	lsls	r3, r3, #8
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	4413      	add	r3, r2
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	3304      	adds	r3, #4
 800c902:	b212      	sxth	r2, r2
 800c904:	801a      	strh	r2, [r3, #0]



}
 800c906:	bf00      	nop
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
	...

0800c910 <mag_init>:

uint8_t mag_init(void)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	73bb      	strb	r3, [r7, #14]
	uint8_t cfg_index = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	73fb      	strb	r3, [r7, #15]
	uint8_t read_reg_data[3];
	int16_t mag_hard_iron[3];

	BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD, LIS2MDL_WHO_AM_I, &id, 1);//
 800c91e:	f107 020e 	add.w	r2, r7, #14
 800c922:	2301      	movs	r3, #1
 800c924:	214f      	movs	r1, #79	@ 0x4f
 800c926:	203c      	movs	r0, #60	@ 0x3c
 800c928:	f001 fd1b 	bl	800e362 <BSP_I2C1_ReadReg>

    for (cfg_index=0; cfg_index<sizeof(mag_init_reg)/sizeof(reg_cfg_t); cfg_index++) //写配置寄存器
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
 800c930:	e022      	b.n	800c978 <mag_init+0x68>
    {
    	if(mag_init_reg[cfg_index].reg==0&&mag_init_reg[cfg_index].dat==0)
 800c932:	7bfb      	ldrb	r3, [r7, #15]
 800c934:	4a19      	ldr	r2, [pc, #100]	@ (800c99c <mag_init+0x8c>)
 800c936:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d106      	bne.n	800c94c <mag_init+0x3c>
 800c93e:	7bfb      	ldrb	r3, [r7, #15]
 800c940:	4a16      	ldr	r2, [pc, #88]	@ (800c99c <mag_init+0x8c>)
 800c942:	005b      	lsls	r3, r3, #1
 800c944:	4413      	add	r3, r2
 800c946:	785b      	ldrb	r3, [r3, #1]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d011      	beq.n	800c970 <mag_init+0x60>
    	{
    		continue;
    	}
    	BSP_I2C1_WriteReg(LIS2MDL_I2C_ADD,mag_init_reg[cfg_index].reg, &mag_init_reg[cfg_index].dat,1);
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
 800c94e:	4a13      	ldr	r2, [pc, #76]	@ (800c99c <mag_init+0x8c>)
 800c950:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c954:	4619      	mov	r1, r3
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	4a10      	ldr	r2, [pc, #64]	@ (800c99c <mag_init+0x8c>)
 800c95c:	4413      	add	r3, r2
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	2301      	movs	r3, #1
 800c962:	203c      	movs	r0, #60	@ 0x3c
 800c964:	f001 fce0 	bl	800e328 <BSP_I2C1_WriteReg>
        HAL_Delay(1);
 800c968:	2001      	movs	r0, #1
 800c96a:	f7f5 f89b 	bl	8001aa4 <HAL_Delay>
 800c96e:	e000      	b.n	800c972 <mag_init+0x62>
    		continue;
 800c970:	bf00      	nop
    for (cfg_index=0; cfg_index<sizeof(mag_init_reg)/sizeof(reg_cfg_t); cfg_index++) //写配置寄存器
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	3301      	adds	r3, #1
 800c976:	73fb      	strb	r3, [r7, #15]
 800c978:	7bfb      	ldrb	r3, [r7, #15]
 800c97a:	2b09      	cmp	r3, #9
 800c97c:	d9d9      	bls.n	800c932 <mag_init+0x22>
    }
      BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD,LIS2MDL_CFG_REG_A,read_reg_data,3);/* 回读寄存器校验 */
 800c97e:	f107 0208 	add.w	r2, r7, #8
 800c982:	2303      	movs	r3, #3
 800c984:	2160      	movs	r1, #96	@ 0x60
 800c986:	203c      	movs	r0, #60	@ 0x3c
 800c988:	f001 fceb 	bl	800e362 <BSP_I2C1_ReadReg>
      HAL_Delay(20);
 800c98c:	2014      	movs	r0, #20
 800c98e:	f7f5 f889 	bl	8001aa4 <HAL_Delay>

//      mag_sample_data(mag_hard_iron);

//      mag_Write_Offset(mag_hard_iron[0],mag_hard_iron[1],mag_hard_iron[2]);

	return id;
 800c992:	7bbb      	ldrb	r3, [r7, #14]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	200001cc 	.word	0x200001cc

0800c9a0 <mag_set_offset>:
/*校准过程
 * 一段时间内连续采集地磁xyz三个轴向上的最大值和最小值，做运算
 *
 */
void mag_set_offset(void)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b088      	sub	sp, #32
 800c9a4:	af00      	add	r7, sp, #0

	uint32_t cnt = 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	61fb      	str	r3, [r7, #28]
	static float Xsf;
	static float Ysf;

    int16_t xsf_buf,ysf_buf;

	while(cnt<MAG_OFFSET_TIMES)
 800c9aa:	e06c      	b.n	800ca86 <mag_set_offset+0xe6>
	{
		cnt++;
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	61fb      	str	r3, [r7, #28]
		BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD, LIS2MDL_OUTX_L_REG, r_data, 6);  //读地磁原始数据
 800c9b2:	f107 0210 	add.w	r2, r7, #16
 800c9b6:	2306      	movs	r3, #6
 800c9b8:	2168      	movs	r1, #104	@ 0x68
 800c9ba:	203c      	movs	r0, #60	@ 0x3c
 800c9bc:	f001 fcd1 	bl	800e362 <BSP_I2C1_ReadReg>
		mag_off[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c9c0:	7c3b      	ldrb	r3, [r7, #16]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	7c7b      	ldrb	r3, [r7, #17]
 800c9c6:	021b      	lsls	r3, r3, #8
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	4413      	add	r3, r2
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	b21b      	sxth	r3, r3
 800c9d0:	813b      	strh	r3, [r7, #8]
		mag_off[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c9d2:	7cbb      	ldrb	r3, [r7, #18]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	7cfb      	ldrb	r3, [r7, #19]
 800c9d8:	021b      	lsls	r3, r3, #8
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	4413      	add	r3, r2
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	b21b      	sxth	r3, r3
 800c9e2:	817b      	strh	r3, [r7, #10]
		mag_off[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c9e4:	7d3b      	ldrb	r3, [r7, #20]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	7d7b      	ldrb	r3, [r7, #21]
 800c9ea:	021b      	lsls	r3, r3, #8
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	4413      	add	r3, r2
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	b21b      	sxth	r3, r3
 800c9f4:	81bb      	strh	r3, [r7, #12]

        if(mag_off[0]<mag_x_min)
 800c9f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c9fa:	4b8e      	ldr	r3, [pc, #568]	@ (800cc34 <mag_set_offset+0x294>)
 800c9fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	da04      	bge.n	800ca0e <mag_set_offset+0x6e>
        	mag_x_min = mag_off[0];
 800ca04:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ca08:	4b8a      	ldr	r3, [pc, #552]	@ (800cc34 <mag_set_offset+0x294>)
 800ca0a:	801a      	strh	r2, [r3, #0]
 800ca0c:	e00a      	b.n	800ca24 <mag_set_offset+0x84>
        else if(mag_off[0]>mag_x_max)
 800ca0e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ca12:	4b89      	ldr	r3, [pc, #548]	@ (800cc38 <mag_set_offset+0x298>)
 800ca14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	dd03      	ble.n	800ca24 <mag_set_offset+0x84>
        	mag_x_max = mag_off[0];
 800ca1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ca20:	4b85      	ldr	r3, [pc, #532]	@ (800cc38 <mag_set_offset+0x298>)
 800ca22:	801a      	strh	r2, [r3, #0]


        if(mag_off[1]<mag_y_min)
 800ca24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ca28:	4b84      	ldr	r3, [pc, #528]	@ (800cc3c <mag_set_offset+0x29c>)
 800ca2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	da04      	bge.n	800ca3c <mag_set_offset+0x9c>
        	mag_y_min = mag_off[1];
 800ca32:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ca36:	4b81      	ldr	r3, [pc, #516]	@ (800cc3c <mag_set_offset+0x29c>)
 800ca38:	801a      	strh	r2, [r3, #0]
 800ca3a:	e00a      	b.n	800ca52 <mag_set_offset+0xb2>
        else if(mag_off[1]>mag_y_max)
 800ca3c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ca40:	4b7f      	ldr	r3, [pc, #508]	@ (800cc40 <mag_set_offset+0x2a0>)
 800ca42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	dd03      	ble.n	800ca52 <mag_set_offset+0xb2>
        	mag_y_max = mag_off[1];
 800ca4a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ca4e:	4b7c      	ldr	r3, [pc, #496]	@ (800cc40 <mag_set_offset+0x2a0>)
 800ca50:	801a      	strh	r2, [r3, #0]

            if(mag_off[2]<mag_z_min)
 800ca52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ca56:	4b7b      	ldr	r3, [pc, #492]	@ (800cc44 <mag_set_offset+0x2a4>)
 800ca58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	da04      	bge.n	800ca6a <mag_set_offset+0xca>
            	mag_z_min = mag_off[2];
 800ca60:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ca64:	4b77      	ldr	r3, [pc, #476]	@ (800cc44 <mag_set_offset+0x2a4>)
 800ca66:	801a      	strh	r2, [r3, #0]
 800ca68:	e00a      	b.n	800ca80 <mag_set_offset+0xe0>
        else if(mag_off[2]>mag_z_max)
 800ca6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ca6e:	4b76      	ldr	r3, [pc, #472]	@ (800cc48 <mag_set_offset+0x2a8>)
 800ca70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	dd03      	ble.n	800ca80 <mag_set_offset+0xe0>
        	mag_z_max = mag_off[2];
 800ca78:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ca7c:	4b72      	ldr	r3, [pc, #456]	@ (800cc48 <mag_set_offset+0x2a8>)
 800ca7e:	801a      	strh	r2, [r3, #0]

        HAL_Delay(1);
 800ca80:	2001      	movs	r0, #1
 800ca82:	f7f5 f80f 	bl	8001aa4 <HAL_Delay>
	while(cnt<MAG_OFFSET_TIMES)
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d98d      	bls.n	800c9ac <mag_set_offset+0xc>
	}
	cnt = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	61fb      	str	r3, [r7, #28]

    Xsf = (mag_y_max - mag_y_min) / (mag_x_max - mag_x_min);
 800ca94:	4b6a      	ldr	r3, [pc, #424]	@ (800cc40 <mag_set_offset+0x2a0>)
 800ca96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	4b67      	ldr	r3, [pc, #412]	@ (800cc3c <mag_set_offset+0x29c>)
 800ca9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800caa2:	1ad2      	subs	r2, r2, r3
 800caa4:	4b64      	ldr	r3, [pc, #400]	@ (800cc38 <mag_set_offset+0x298>)
 800caa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800caaa:	4619      	mov	r1, r3
 800caac:	4b61      	ldr	r3, [pc, #388]	@ (800cc34 <mag_set_offset+0x294>)
 800caae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cab2:	1acb      	subs	r3, r1, r3
 800cab4:	fb92 f3f3 	sdiv	r3, r2, r3
 800cab8:	ee07 3a90 	vmov	s15, r3
 800cabc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cac0:	4b62      	ldr	r3, [pc, #392]	@ (800cc4c <mag_set_offset+0x2ac>)
 800cac2:	edc3 7a00 	vstr	s15, [r3]
    Ysf = (mag_x_max - mag_x_min) / (mag_y_max - mag_y_min);
 800cac6:	4b5c      	ldr	r3, [pc, #368]	@ (800cc38 <mag_set_offset+0x298>)
 800cac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cacc:	461a      	mov	r2, r3
 800cace:	4b59      	ldr	r3, [pc, #356]	@ (800cc34 <mag_set_offset+0x294>)
 800cad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cad4:	1ad2      	subs	r2, r2, r3
 800cad6:	4b5a      	ldr	r3, [pc, #360]	@ (800cc40 <mag_set_offset+0x2a0>)
 800cad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cadc:	4619      	mov	r1, r3
 800cade:	4b57      	ldr	r3, [pc, #348]	@ (800cc3c <mag_set_offset+0x29c>)
 800cae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cae4:	1acb      	subs	r3, r1, r3
 800cae6:	fb92 f3f3 	sdiv	r3, r2, r3
 800caea:	ee07 3a90 	vmov	s15, r3
 800caee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800caf2:	4b57      	ldr	r3, [pc, #348]	@ (800cc50 <mag_set_offset+0x2b0>)
 800caf4:	edc3 7a00 	vstr	s15, [r3]

    if (Xsf < 1)
 800caf8:	4b54      	ldr	r3, [pc, #336]	@ (800cc4c <mag_set_offset+0x2ac>)
 800cafa:	edd3 7a00 	vldr	s15, [r3]
 800cafe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb0a:	d503      	bpl.n	800cb14 <mag_set_offset+0x174>
    {
    	Xsf = 1;
 800cb0c:	4b4f      	ldr	r3, [pc, #316]	@ (800cc4c <mag_set_offset+0x2ac>)
 800cb0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800cb12:	601a      	str	r2, [r3, #0]
    }

    if (Ysf < 1)
 800cb14:	4b4e      	ldr	r3, [pc, #312]	@ (800cc50 <mag_set_offset+0x2b0>)
 800cb16:	edd3 7a00 	vldr	s15, [r3]
 800cb1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb26:	d503      	bpl.n	800cb30 <mag_set_offset+0x190>
    {
    	Ysf = 1;
 800cb28:	4b49      	ldr	r3, [pc, #292]	@ (800cc50 <mag_set_offset+0x2b0>)
 800cb2a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800cb2e:	601a      	str	r2, [r3, #0]
    }

    Xoffset = ( (mag_x_max - mag_x_min)/2 - mag_x_max) *Xsf;
 800cb30:	4b41      	ldr	r3, [pc, #260]	@ (800cc38 <mag_set_offset+0x298>)
 800cb32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb36:	461a      	mov	r2, r3
 800cb38:	4b3e      	ldr	r3, [pc, #248]	@ (800cc34 <mag_set_offset+0x294>)
 800cb3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	0fda      	lsrs	r2, r3, #31
 800cb42:	4413      	add	r3, r2
 800cb44:	105b      	asrs	r3, r3, #1
 800cb46:	461a      	mov	r2, r3
 800cb48:	4b3b      	ldr	r3, [pc, #236]	@ (800cc38 <mag_set_offset+0x298>)
 800cb4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cb58:	4b3c      	ldr	r3, [pc, #240]	@ (800cc4c <mag_set_offset+0x2ac>)
 800cb5a:	edd3 7a00 	vldr	s15, [r3]
 800cb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb66:	ee17 3a90 	vmov	r3, s15
 800cb6a:	837b      	strh	r3, [r7, #26]
    Yoffset = ( (mag_y_max - mag_y_min)/2 - mag_y_max) *Ysf;
 800cb6c:	4b34      	ldr	r3, [pc, #208]	@ (800cc40 <mag_set_offset+0x2a0>)
 800cb6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb72:	461a      	mov	r2, r3
 800cb74:	4b31      	ldr	r3, [pc, #196]	@ (800cc3c <mag_set_offset+0x29c>)
 800cb76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	0fda      	lsrs	r2, r3, #31
 800cb7e:	4413      	add	r3, r2
 800cb80:	105b      	asrs	r3, r3, #1
 800cb82:	461a      	mov	r2, r3
 800cb84:	4b2e      	ldr	r3, [pc, #184]	@ (800cc40 <mag_set_offset+0x2a0>)
 800cb86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	ee07 3a90 	vmov	s15, r3
 800cb90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cb94:	4b2e      	ldr	r3, [pc, #184]	@ (800cc50 <mag_set_offset+0x2b0>)
 800cb96:	edd3 7a00 	vldr	s15, [r3]
 800cb9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cba2:	ee17 3a90 	vmov	r3, s15
 800cba6:	833b      	strh	r3, [r7, #24]
//    Zoffset = ( (mag_z_max-mag_z_min)/2 - mag_z_max) *Xsf;

    imu_9.mag_xsf = Xsf;
 800cba8:	4b28      	ldr	r3, [pc, #160]	@ (800cc4c <mag_set_offset+0x2ac>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a29      	ldr	r2, [pc, #164]	@ (800cc54 <mag_set_offset+0x2b4>)
 800cbae:	6393      	str	r3, [r2, #56]	@ 0x38
    imu_9.mag_ysf = Ysf;
 800cbb0:	4b27      	ldr	r3, [pc, #156]	@ (800cc50 <mag_set_offset+0x2b0>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a27      	ldr	r2, [pc, #156]	@ (800cc54 <mag_set_offset+0x2b4>)
 800cbb6:	63d3      	str	r3, [r2, #60]	@ 0x3c

    imu_9.mag_zero[0] = Xoffset;
 800cbb8:	4a26      	ldr	r2, [pc, #152]	@ (800cc54 <mag_set_offset+0x2b4>)
 800cbba:	8b7b      	ldrh	r3, [r7, #26]
 800cbbc:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
    imu_9.mag_zero[1] = Yoffset;
 800cbc0:	4a24      	ldr	r2, [pc, #144]	@ (800cc54 <mag_set_offset+0x2b4>)
 800cbc2:	8b3b      	ldrh	r3, [r7, #24]
 800cbc4:	f8a2 304e 	strh.w	r3, [r2, #78]	@ 0x4e
//    imu_9.mag_zero[2] = Zoffset;
    imu_9.mag_zero[2] = 0.0f;
 800cbc8:	4b22      	ldr	r3, [pc, #136]	@ (800cc54 <mag_set_offset+0x2b4>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

    xsf_buf =(uint16_t) (Xsf*1000);
 800cbd0:	4b1e      	ldr	r3, [pc, #120]	@ (800cc4c <mag_set_offset+0x2ac>)
 800cbd2:	edd3 7a00 	vldr	s15, [r3]
 800cbd6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800cc58 <mag_set_offset+0x2b8>
 800cbda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbe2:	ee17 3a90 	vmov	r3, s15
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	b21b      	sxth	r3, r3
 800cbea:	80fb      	strh	r3, [r7, #6]
    ysf_buf =(uint16_t) (Ysf*1000);
 800cbec:	4b18      	ldr	r3, [pc, #96]	@ (800cc50 <mag_set_offset+0x2b0>)
 800cbee:	edd3 7a00 	vldr	s15, [r3]
 800cbf2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cc58 <mag_set_offset+0x2b8>
 800cbf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbfe:	ee17 3a90 	vmov	r3, s15
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	b21b      	sxth	r3, r3
 800cc06:	80bb      	strh	r3, [r7, #4]

	    //存入
	STMFLASH_Write(MAG_ZERO_ADDR,(uint8_t*)&imu_9.mag_zero,6);
 800cc08:	2206      	movs	r2, #6
 800cc0a:	4914      	ldr	r1, [pc, #80]	@ (800cc5c <mag_set_offset+0x2bc>)
 800cc0c:	4814      	ldr	r0, [pc, #80]	@ (800cc60 <mag_set_offset+0x2c0>)
 800cc0e:	f001 fc93 	bl	800e538 <STMFLASH_Write>
	STMFLASH_Write(MAG_OFFSET_XSF_ADDR,(uint8_t*)&xsf_buf,2);
 800cc12:	1dbb      	adds	r3, r7, #6
 800cc14:	2202      	movs	r2, #2
 800cc16:	4619      	mov	r1, r3
 800cc18:	4812      	ldr	r0, [pc, #72]	@ (800cc64 <mag_set_offset+0x2c4>)
 800cc1a:	f001 fc8d 	bl	800e538 <STMFLASH_Write>
	STMFLASH_Write(MAG_OFFSET_YSF_ADDR,(uint8_t*)&ysf_buf,2);
 800cc1e:	1d3b      	adds	r3, r7, #4
 800cc20:	2202      	movs	r2, #2
 800cc22:	4619      	mov	r1, r3
 800cc24:	4810      	ldr	r0, [pc, #64]	@ (800cc68 <mag_set_offset+0x2c8>)
 800cc26:	f001 fc87 	bl	800e538 <STMFLASH_Write>

}
 800cc2a:	bf00      	nop
 800cc2c:	3720      	adds	r7, #32
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	2000178a 	.word	0x2000178a
 800cc38:	20001788 	.word	0x20001788
 800cc3c:	2000178e 	.word	0x2000178e
 800cc40:	2000178c 	.word	0x2000178c
 800cc44:	20001792 	.word	0x20001792
 800cc48:	20001790 	.word	0x20001790
 800cc4c:	20001794 	.word	0x20001794
 800cc50:	20001798 	.word	0x20001798
 800cc54:	20002164 	.word	0x20002164
 800cc58:	447a0000 	.word	0x447a0000
 800cc5c:	200021b0 	.word	0x200021b0
 800cc60:	0801f80c 	.word	0x0801f80c
 800cc64:	0801f814 	.word	0x0801f814
 800cc68:	0801f816 	.word	0x0801f816

0800cc6c <init_attitude>:
#include "imu_9.h"

ATT_Module attitude;

void init_attitude(ATT_Module *attitude)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
//标志位初始化
	attitude->flag.run = 1;						//开启计算
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2201      	movs	r2, #1
 800cc78:	701a      	strb	r2, [r3, #0]
	attitude->flag.use_mag = 1;				//使用地磁
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	705a      	strb	r2, [r3, #1]
//接口初始化
	attitude->interface.data.a_x = 0;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f04f 0200 	mov.w	r2, #0
 800cc86:	605a      	str	r2, [r3, #4]
	attitude->interface.data.a_y = 0;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f04f 0200 	mov.w	r2, #0
 800cc8e:	609a      	str	r2, [r3, #8]
	attitude->interface.data.a_z = 0;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f04f 0200 	mov.w	r2, #0
 800cc96:	60da      	str	r2, [r3, #12]
	attitude->interface.data.g_x = 0;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f04f 0200 	mov.w	r2, #0
 800cc9e:	611a      	str	r2, [r3, #16]
	attitude->interface.data.g_y = 0;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f04f 0200 	mov.w	r2, #0
 800cca6:	615a      	str	r2, [r3, #20]
	attitude->interface.data.g_z = 0;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f04f 0200 	mov.w	r2, #0
 800ccae:	619a      	str	r2, [r3, #24]
	attitude->interface.data.m_x = 0;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f04f 0200 	mov.w	r2, #0
 800ccb6:	61da      	str	r2, [r3, #28]
	attitude->interface.data.m_y = 0;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f04f 0200 	mov.w	r2, #0
 800ccbe:	621a      	str	r2, [r3, #32]
	attitude->interface.data.m_z = 0;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f04f 0200 	mov.w	r2, #0
 800ccc6:	625a      	str	r2, [r3, #36]	@ 0x24
//参数初始化	
	attitude->parameter.error_ki = 1.25f;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4a5b      	ldr	r2, [pc, #364]	@ (800ce38 <init_attitude+0x1cc>)
 800cccc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	attitude->parameter.error_kp = 5.5f;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4a5a      	ldr	r2, [pc, #360]	@ (800ce3c <init_attitude+0x1d0>)
 800ccd4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	attitude->parameter.correct_kp = 0.4f;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a59      	ldr	r2, [pc, #356]	@ (800ce40 <init_attitude+0x1d4>)
 800ccdc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
//中间变量清空	
	attitude->process.error.x = 0;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f04f 0200 	mov.w	r2, #0
 800cce6:	641a      	str	r2, [r3, #64]	@ 0x40
	attitude->process.error.y = 0;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f04f 0200 	mov.w	r2, #0
 800ccee:	645a      	str	r2, [r3, #68]	@ 0x44
	attitude->process.error.z = 0;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f04f 0200 	mov.w	r2, #0
 800ccf6:	649a      	str	r2, [r3, #72]	@ 0x48
	attitude->process.error_integral.x = 0;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f04f 0200 	mov.w	r2, #0
 800ccfe:	64da      	str	r2, [r3, #76]	@ 0x4c
	attitude->process.error_integral.y = 0;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f04f 0200 	mov.w	r2, #0
 800cd06:	651a      	str	r2, [r3, #80]	@ 0x50
	attitude->process.error_integral.z = 0;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f04f 0200 	mov.w	r2, #0
 800cd0e:	655a      	str	r2, [r3, #84]	@ 0x54
	
	attitude->process.quaternion[0] = 1;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800cd16:	631a      	str	r2, [r3, #48]	@ 0x30
	attitude->process.quaternion[1] = 0;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f04f 0200 	mov.w	r2, #0
 800cd1e:	635a      	str	r2, [r3, #52]	@ 0x34
	attitude->process.quaternion[2] = 0;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f04f 0200 	mov.w	r2, #0
 800cd26:	639a      	str	r2, [r3, #56]	@ 0x38
	attitude->process.quaternion[3] = 0;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f04f 0200 	mov.w	r2, #0
 800cd2e:	63da      	str	r2, [r3, #60]	@ 0x3c
//数据初始化
	attitude->data.rotate_matrix[0][0] = 0;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f04f 0200 	mov.w	r2, #0
 800cd36:	665a      	str	r2, [r3, #100]	@ 0x64
	attitude->data.rotate_matrix[0][1] = 0;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f04f 0200 	mov.w	r2, #0
 800cd3e:	669a      	str	r2, [r3, #104]	@ 0x68
	attitude->data.rotate_matrix[0][2] = 0;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f04f 0200 	mov.w	r2, #0
 800cd46:	66da      	str	r2, [r3, #108]	@ 0x6c
	attitude->data.rotate_matrix[1][0] = 0;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f04f 0200 	mov.w	r2, #0
 800cd4e:	671a      	str	r2, [r3, #112]	@ 0x70
	attitude->data.rotate_matrix[1][1] = 0;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f04f 0200 	mov.w	r2, #0
 800cd56:	675a      	str	r2, [r3, #116]	@ 0x74
	attitude->data.rotate_matrix[1][2] = 0;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f04f 0200 	mov.w	r2, #0
 800cd5e:	679a      	str	r2, [r3, #120]	@ 0x78
	attitude->data.rotate_matrix[2][0] = 0;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f04f 0200 	mov.w	r2, #0
 800cd66:	67da      	str	r2, [r3, #124]	@ 0x7c
	attitude->data.rotate_matrix[2][1] = 0;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f04f 0200 	mov.w	r2, #0
 800cd6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	attitude->data.rotate_matrix[2][2] = 0;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f04f 0200 	mov.w	r2, #0
 800cd78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	
	attitude->data.mag_world.x = 0;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f04f 0200 	mov.w	r2, #0
 800cd82:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	attitude->data.mag_world.y = 0;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f04f 0200 	mov.w	r2, #0
 800cd8c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	attitude->data.mag_world.z = 0;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f04f 0200 	mov.w	r2, #0
 800cd96:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	
	attitude->data.acc_world.x = 0;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f04f 0200 	mov.w	r2, #0
 800cda0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	attitude->data.acc_world.y = 0;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f04f 0200 	mov.w	r2, #0
 800cdaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	attitude->data.acc_world.z = 0;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f04f 0200 	mov.w	r2, #0
 800cdb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	
	attitude->data.mag_correct.x = 0;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f04f 0200 	mov.w	r2, #0
 800cdbe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	attitude->data.mag_correct.y = 0;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f04f 0200 	mov.w	r2, #0
 800cdc8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	attitude->data.mag_correct.z = 0;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f04f 0200 	mov.w	r2, #0
 800cdd2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	
	attitude->data.acc_correct.x = 0;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f04f 0200 	mov.w	r2, #0
 800cddc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	attitude->data.acc_correct.y = 0;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f04f 0200 	mov.w	r2, #0
 800cde6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	attitude->data.acc_correct.z = 0;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f04f 0200 	mov.w	r2, #0
 800cdf0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	
	attitude->data.gyro_correct.x = 0;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f04f 0200 	mov.w	r2, #0
 800cdfa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	attitude->data.gyro_correct.y = 0;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f04f 0200 	mov.w	r2, #0
 800ce04:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	attitude->data.gyro_correct.z = 0;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f04f 0200 	mov.w	r2, #0
 800ce0e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	
	attitude->data.pitch = 0;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f04f 0200 	mov.w	r2, #0
 800ce18:	661a      	str	r2, [r3, #96]	@ 0x60
	attitude->data.rol = 0;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f04f 0200 	mov.w	r2, #0
 800ce20:	65da      	str	r2, [r3, #92]	@ 0x5c
	attitude->data.yaw = 0;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f04f 0200 	mov.w	r2, #0
 800ce28:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800ce2a:	bf00      	nop
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	3fa00000 	.word	0x3fa00000
 800ce3c:	40b00000 	.word	0x40b00000
 800ce40:	3ecccccd 	.word	0x3ecccccd

0800ce44 <simple_3d_trans>:


void simple_3d_trans(XYZ_Data_f *ref, XYZ_Data_f *in, XYZ_Data_f *out) //小范围内正确。
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	607a      	str	r2, [r7, #4]
	static char pn;
	static float h_tmp_x,h_tmp_y;
	
	h_tmp_x = fast_sqrt(ref->z * ref->z + ref->y * ref->y);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	ed93 7a02 	vldr	s14, [r3, #8]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	edd3 6a01 	vldr	s13, [r3, #4]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	edd3 7a01 	vldr	s15, [r3, #4]
 800ce6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce74:	eeb0 0a67 	vmov.f32	s0, s15
 800ce78:	f000 ff52 	bl	800dd20 <fast_sqrt>
 800ce7c:	eef0 7a40 	vmov.f32	s15, s0
 800ce80:	4b43      	ldr	r3, [pc, #268]	@ (800cf90 <simple_3d_trans+0x14c>)
 800ce82:	edc3 7a00 	vstr	s15, [r3]
	h_tmp_y = fast_sqrt(ref->z * ref->z + ref->x * ref->x);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	ed93 7a02 	vldr	s14, [r3, #8]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	edd3 6a00 	vldr	s13, [r3]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	edd3 7a00 	vldr	s15, [r3]
 800cea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ceaa:	eeb0 0a67 	vmov.f32	s0, s15
 800ceae:	f000 ff37 	bl	800dd20 <fast_sqrt>
 800ceb2:	eef0 7a40 	vmov.f32	s15, s0
 800ceb6:	4b37      	ldr	r3, [pc, #220]	@ (800cf94 <simple_3d_trans+0x150>)
 800ceb8:	edc3 7a00 	vstr	s15, [r3]
	
	pn = ref->z < 0 ? -1 : 1;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	edd3 7a02 	vldr	s15, [r3, #8]
 800cec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceca:	d501      	bpl.n	800ced0 <simple_3d_trans+0x8c>
 800cecc:	22ff      	movs	r2, #255	@ 0xff
 800cece:	e000      	b.n	800ced2 <simple_3d_trans+0x8e>
 800ced0:	2201      	movs	r2, #1
 800ced2:	4b31      	ldr	r3, [pc, #196]	@ (800cf98 <simple_3d_trans+0x154>)
 800ced4:	701a      	strb	r2, [r3, #0]
	
	out->x = ( h_tmp_x *in->x - pn *ref->x *in->z ) ;
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	ed93 7a00 	vldr	s14, [r3]
 800cedc:	4b2c      	ldr	r3, [pc, #176]	@ (800cf90 <simple_3d_trans+0x14c>)
 800cede:	edd3 7a00 	vldr	s15, [r3]
 800cee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cee6:	4b2c      	ldr	r3, [pc, #176]	@ (800cf98 <simple_3d_trans+0x154>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	ee07 3a90 	vmov	s15, r3
 800ceee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	edd3 7a00 	vldr	s15, [r3]
 800cef8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	edd3 7a02 	vldr	s15, [r3, #8]
 800cf02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	edc3 7a00 	vstr	s15, [r3]
	out->y = ( pn *h_tmp_y *in->y - ref->y *in->z ) ;
 800cf10:	4b21      	ldr	r3, [pc, #132]	@ (800cf98 <simple_3d_trans+0x154>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	ee07 3a90 	vmov	s15, r3
 800cf18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cf1c:	4b1d      	ldr	r3, [pc, #116]	@ (800cf94 <simple_3d_trans+0x150>)
 800cf1e:	edd3 7a00 	vldr	s15, [r3]
 800cf22:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	edd3 7a02 	vldr	s15, [r3, #8]
 800cf3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	edc3 7a01 	vstr	s15, [r3, #4]
	out->z = ref->x *in->x + ref->y *in->y + ref->z *in->z ;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	ed93 7a00 	vldr	s14, [r3]
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	edd3 7a00 	vldr	s15, [r3]
 800cf56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	edd3 6a02 	vldr	s13, [r3, #8]
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	edd3 7a02 	vldr	s15, [r3, #8]
 800cf7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	edc3 7a02 	vstr	s15, [r3, #8]

}
 800cf88:	bf00      	nop
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	2000186c 	.word	0x2000186c
 800cf94:	20001870 	.word	0x20001870
 800cf98:	20001874 	.word	0x20001874

0800cf9c <calculate_attitude>:



void calculate_attitude(ATT_Module *attitude, float cycle)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	ed2d 8b02 	vpush	{d8}
 800cfa2:	b096      	sub	sp, #88	@ 0x58
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	ed87 0a00 	vstr	s0, [r7]
	float length;
	XYZ_Data_f acc_tmp; 
	XYZ_Data_f error;

	attitude->interface.data.a_x = imu_9.f_acc[0]*1000.0f;
 800cfac:	4bbf      	ldr	r3, [pc, #764]	@ (800d2ac <calculate_attitude+0x310>)
 800cfae:	edd3 7a08 	vldr	s15, [r3, #32]
 800cfb2:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 800d2b0 <calculate_attitude+0x314>
 800cfb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude->interface.data.a_y = imu_9.f_acc[1]*1000.0f;
 800cfc0:	4bba      	ldr	r3, [pc, #744]	@ (800d2ac <calculate_attitude+0x310>)
 800cfc2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800cfc6:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800d2b0 <calculate_attitude+0x314>
 800cfca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	edc3 7a02 	vstr	s15, [r3, #8]
	attitude->interface.data.a_z = imu_9.f_acc[2]*1000.0f;
 800cfd4:	4bb5      	ldr	r3, [pc, #724]	@ (800d2ac <calculate_attitude+0x310>)
 800cfd6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800cfda:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 800d2b0 <calculate_attitude+0x314>
 800cfde:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	edc3 7a03 	vstr	s15, [r3, #12]
	attitude->interface.data.g_x = imu_9.f_gyro[0];
 800cfe8:	4bb0      	ldr	r3, [pc, #704]	@ (800d2ac <calculate_attitude+0x310>)
 800cfea:	695a      	ldr	r2, [r3, #20]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	611a      	str	r2, [r3, #16]
	attitude->interface.data.g_y = imu_9.f_gyro[1];
 800cff0:	4bae      	ldr	r3, [pc, #696]	@ (800d2ac <calculate_attitude+0x310>)
 800cff2:	699a      	ldr	r2, [r3, #24]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	615a      	str	r2, [r3, #20]
	attitude->interface.data.g_z = imu_9.f_gyro[2];
 800cff8:	4bac      	ldr	r3, [pc, #688]	@ (800d2ac <calculate_attitude+0x310>)
 800cffa:	69da      	ldr	r2, [r3, #28]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	619a      	str	r2, [r3, #24]
	attitude->interface.data.m_x = imu_9.f_mag[1];
 800d000:	4baa      	ldr	r3, [pc, #680]	@ (800d2ac <calculate_attitude+0x310>)
 800d002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	61da      	str	r2, [r3, #28]
	attitude->interface.data.m_y = imu_9.f_mag[0];
 800d008:	4ba8      	ldr	r3, [pc, #672]	@ (800d2ac <calculate_attitude+0x310>)
 800d00a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	621a      	str	r2, [r3, #32]
	attitude->interface.data.m_z = -imu_9.f_mag[2];
 800d010:	4ba6      	ldr	r3, [pc, #664]	@ (800d2ac <calculate_attitude+0x310>)
 800d012:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d016:	eef1 7a67 	vneg.f32	s15, s15
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24


	
	if (attitude->flag.run == 0)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 8675 	beq.w	800dd14 <calculate_attitude+0xd78>
		return;
	
/////////////////////////////////////////////////////////////////////////////////////////////////		
	//电子罗盘处理
	if (attitude->flag.use_mag == 1)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	785b      	ldrb	r3, [r3, #1]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	f040 808c 	bne.w	800d14c <calculate_attitude+0x1b0>
	{	
		//利用电子罗盘计算yaw
		length = fast_sqrt(attitude->data.mag_correct.x * attitude->data.mag_correct.x + attitude->data.mag_correct.y * attitude->data.mag_correct.y);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 800d040:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	edd3 6a2c 	vldr	s13, [r3, #176]	@ 0xb0
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 800d050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d054:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d058:	eeb0 0a67 	vmov.f32	s0, s15
 800d05c:	f000 fe60 	bl	800dd20 <fast_sqrt>
 800d060:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
		if( attitude->data.mag_correct.x != 0 && attitude->data.mag_correct.y != 0 && attitude->data.mag_correct.z != 0 && length != 0)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 800d06a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d072:	d02f      	beq.n	800d0d4 <calculate_attitude+0x138>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 800d07a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d082:	d027      	beq.n	800d0d4 <calculate_attitude+0x138>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800d08a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d092:	d01f      	beq.n	800d0d4 <calculate_attitude+0x138>
 800d094:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d098:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0a0:	d018      	beq.n	800d0d4 <calculate_attitude+0x138>
		{
			attitude->process.mag_yaw = arctan2(attitude->data.mag_correct.y / length, attitude->data.mag_correct.x / length);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 800d0a8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d0ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 800d0b6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d0ba:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800d0be:	eef0 0a46 	vmov.f32	s1, s12
 800d0c2:	eeb0 0a66 	vmov.f32	s0, s13
 800d0c6:	f001 f83d 	bl	800e144 <arctan2>
 800d0ca:	eef0 7a40 	vmov.f32	s15, s0
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
//			attitude->process.mag_yaw = arctan2(attitude->data.mag_correct.y , attitude->data.mag_correct.x);
		}

		//计算yaw偏差
		if(attitude->data.rotate_matrix[2][2] > 0.0f )
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800d0da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e2:	dd2e      	ble.n	800d142 <calculate_attitude+0x1a6>
		{
			attitude->process.mag_yaw_bias = attitude->parameter.correct_kp * translateAngle(attitude->data.yaw - attitude->process.mag_yaw);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	ed93 8a31 	vldr	s16, [r3, #196]	@ 0xc4
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d0f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0fa:	eeb0 0a67 	vmov.f32	s0, s15
 800d0fe:	f000 fe65 	bl	800ddcc <translateAngle>
 800d102:	eef0 7a40 	vmov.f32	s15, s0
 800d106:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			//矫正值过大 -- 矫正值错误
			if(attitude->process.mag_yaw_bias > 360 || attitude->process.mag_yaw_bias < -360)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d116:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800d2b4 <calculate_attitude+0x318>
 800d11a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d122:	dc09      	bgt.n	800d138 <calculate_attitude+0x19c>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d12a:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800d2b8 <calculate_attitude+0x31c>
 800d12e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d136:	d50d      	bpl.n	800d154 <calculate_attitude+0x1b8>
			{
				attitude->process.mag_yaw_bias = 0;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f04f 0200 	mov.w	r2, #0
 800d13e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d140:	e008      	b.n	800d154 <calculate_attitude+0x1b8>
			}
		}
		
		else
		{
			attitude->process.mag_yaw_bias = 0; //角度过大，停止修正，修正的目标值可能不正确
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f04f 0200 	mov.w	r2, #0
 800d148:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d14a:	e003      	b.n	800d154 <calculate_attitude+0x1b8>
		}
	}

	else
	{
		attitude->process.mag_yaw_bias = 0;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f04f 0200 	mov.w	r2, #0
 800d152:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
/////////////////////////////////////////////////////////////////////////////////////////////////	
	//加速度计处理
	length = fast_sqrt(	(attitude->interface.data.a_x) * (attitude->interface.data.a_x) +
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	ed93 7a01 	vldr	s14, [r3, #4]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d160:	ee27 7a27 	vmul.f32	s14, s14, s15
									(attitude->interface.data.a_y) * (attitude->interface.data.a_y) +
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	edd3 6a02 	vldr	s13, [r3, #8]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	edd3 7a02 	vldr	s15, [r3, #8]
 800d170:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(	(attitude->interface.data.a_x) * (attitude->interface.data.a_x) +
 800d174:	ee37 7a27 	vadd.f32	s14, s14, s15
									(attitude->interface.data.a_z) * (attitude->interface.data.a_z));
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	edd3 6a03 	vldr	s13, [r3, #12]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	edd3 7a03 	vldr	s15, [r3, #12]
 800d184:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(	(attitude->interface.data.a_x) * (attitude->interface.data.a_x) +
 800d188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d18c:	eeb0 0a67 	vmov.f32	s0, s15
 800d190:	f000 fdc6 	bl	800dd20 <fast_sqrt>
 800d194:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
	
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	edd3 7a01 	vldr	s15, [r3, #4]
 800d19e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a6:	dd0a      	ble.n	800d1be <calculate_attitude+0x222>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	edd3 7a01 	vldr	s15, [r3, #4]
 800d1ae:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800d2bc <calculate_attitude+0x320>
 800d1b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ba:	d40b      	bmi.n	800d1d4 <calculate_attitude+0x238>
 800d1bc:	e106      	b.n	800d3cc <calculate_attitude+0x430>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	edd3 7a01 	vldr	s15, [r3, #4]
 800d1c4:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800d2c0 <calculate_attitude+0x324>
 800d1c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d0:	f340 80fc 	ble.w	800d3cc <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	edd3 7a02 	vldr	s15, [r3, #8]
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d1da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e2:	dd0a      	ble.n	800d1fa <calculate_attitude+0x25e>
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	edd3 7a02 	vldr	s15, [r3, #8]
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d1ea:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d2bc <calculate_attitude+0x320>
 800d1ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f6:	d40b      	bmi.n	800d210 <calculate_attitude+0x274>
 800d1f8:	e0e8      	b.n	800d3cc <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	edd3 7a02 	vldr	s15, [r3, #8]
 800d200:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d2c0 <calculate_attitude+0x324>
 800d204:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20c:	f340 80de 	ble.w	800d3cc <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_z)) < 1050.0f )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	edd3 7a03 	vldr	s15, [r3, #12]
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21e:	dd0a      	ble.n	800d236 <calculate_attitude+0x29a>
			ABS((attitude->interface.data.a_z)) < 1050.0f )
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	edd3 7a03 	vldr	s15, [r3, #12]
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d226:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800d2bc <calculate_attitude+0x320>
 800d22a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d232:	d40b      	bmi.n	800d24c <calculate_attitude+0x2b0>
 800d234:	e0ca      	b.n	800d3cc <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_z)) < 1050.0f )
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	edd3 7a03 	vldr	s15, [r3, #12]
 800d23c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800d2c0 <calculate_attitude+0x324>
 800d240:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d248:	f340 80c0 	ble.w	800d3cc <calculate_attitude+0x430>
	{
		//加速度计归一化
		acc_tmp.x = (attitude->interface.data.a_x) / length;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	edd3 6a01 	vldr	s13, [r3, #4]
 800d252:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800d256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d25a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		acc_tmp.y = (attitude->interface.data.a_y) / length;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	edd3 6a02 	vldr	s13, [r3, #8]
 800d264:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800d268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d26c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		acc_tmp.z = (attitude->interface.data.a_z) / length;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	edd3 6a03 	vldr	s13, [r3, #12]
 800d276:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800d27a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d27e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		
		//叉乘计算偏差	--
		if(800.0f < length && length < 1200.0f)
 800d282:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d286:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800d2c4 <calculate_attitude+0x328>
 800d28a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d292:	f340 80a7 	ble.w	800d3e4 <calculate_attitude+0x448>
 800d296:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d29a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800d2c8 <calculate_attitude+0x32c>
 800d29e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a6:	d415      	bmi.n	800d2d4 <calculate_attitude+0x338>
 800d2a8:	e09c      	b.n	800d3e4 <calculate_attitude+0x448>
 800d2aa:	bf00      	nop
 800d2ac:	20002164 	.word	0x20002164
 800d2b0:	447a0000 	.word	0x447a0000
 800d2b4:	43b40000 	.word	0x43b40000
 800d2b8:	c3b40000 	.word	0xc3b40000
 800d2bc:	44834000 	.word	0x44834000
 800d2c0:	c4834000 	.word	0xc4834000
 800d2c4:	44480000 	.word	0x44480000
 800d2c8:	44960000 	.word	0x44960000
 800d2cc:	4048f5c3 	.word	0x4048f5c3
 800d2d0:	bd0f5c29 	.word	0xbd0f5c29
		{
			/* 叉乘得到误差 */
			error.x = (acc_tmp.y * attitude->data.rotate_matrix[2][2] - acc_tmp.z * attitude->data.rotate_matrix[1][2]);
 800d2d4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800d2de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2e2:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800d2ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2f4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
			error.y = (acc_tmp.z * attitude->data.rotate_matrix[0][2] - acc_tmp.x * attitude->data.rotate_matrix[2][2]);
 800d2f8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800d302:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d306:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800d310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d314:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d318:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	        error.z = (acc_tmp.x * attitude->data.rotate_matrix[1][2] - acc_tmp.y * attitude->data.rotate_matrix[0][2]);
 800d31c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800d326:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d32a:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800d334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d33c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			
			/* 误差低通 */
			attitude->process.error.x += 1.0f * 3.14f * cycle *(error.x  - attitude->process.error.x );
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800d346:	edd7 7a00 	vldr	s15, [r7]
 800d34a:	ed5f 6a20 	vldr	s13, [pc, #-128]	@ 800d2cc <calculate_attitude+0x330>
 800d34e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d352:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800d35c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d364:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
			attitude->process.error.y += 1.0f * 3.14f * cycle *(error.y  - attitude->process.error.y );
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800d374:	edd7 7a00 	vldr	s15, [r7]
 800d378:	ed5f 6a2c 	vldr	s13, [pc, #-176]	@ 800d2cc <calculate_attitude+0x330>
 800d37c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d380:	ed97 6a10 	vldr	s12, [r7, #64]	@ 0x40
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800d38a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d38e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d392:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
			attitude->process.error.z += 1.0f * 3.14f * cycle *(error.z  - attitude->process.error.z );
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800d3a2:	edd7 7a00 	vldr	s15, [r7]
 800d3a6:	ed5f 6a37 	vldr	s13, [pc, #-220]	@ 800d2cc <calculate_attitude+0x330>
 800d3aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d3ae:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800d3b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d3bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		if(800.0f < length && length < 1200.0f)
 800d3ca:	e00b      	b.n	800d3e4 <calculate_attitude+0x448>
		}
	}
	else
	{
		attitude->process.error.x = 0;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f04f 0200 	mov.w	r2, #0
 800d3d2:	641a      	str	r2, [r3, #64]	@ 0x40
		attitude->process.error.y = 0  ;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f04f 0200 	mov.w	r2, #0
 800d3da:	645a      	str	r2, [r3, #68]	@ 0x44
		attitude->process.error.z = 0 ;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f04f 0200 	mov.w	r2, #0
 800d3e2:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// 误差积分	
	attitude->process.error_integral.x += attitude->process.error.x * attitude->parameter.error_ki * cycle;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 800d3f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d3fa:	edd7 7a00 	vldr	s15, [r7]
 800d3fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d402:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	attitude->process.error_integral.y += attitude->process.error.y * attitude->parameter.error_ki * cycle;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 800d41e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d422:	edd7 7a00 	vldr	s15, [r7]
 800d426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d42a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	attitude->process.error_integral.z += attitude->process.error.z * attitude->parameter.error_ki * cycle;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 800d446:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d44a:	edd7 7a00 	vldr	s15, [r7]
 800d44e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d452:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	
	//积分限幅 -- 2°以内
	attitude->process.error_integral.x = LIMIT(attitude->process.error_integral.x, - 0.035f ,0.035f );
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d462:	ed1f 7a65 	vldr	s14, [pc, #-404]	@ 800d2d0 <calculate_attitude+0x334>
 800d466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d46e:	d501      	bpl.n	800d474 <calculate_attitude+0x4d8>
 800d470:	4b22      	ldr	r3, [pc, #136]	@ (800d4fc <calculate_attitude+0x560>)
 800d472:	e00d      	b.n	800d490 <calculate_attitude+0x4f4>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d47a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800d500 <calculate_attitude+0x564>
 800d47e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d486:	dd01      	ble.n	800d48c <calculate_attitude+0x4f0>
 800d488:	4b1e      	ldr	r3, [pc, #120]	@ (800d504 <calculate_attitude+0x568>)
 800d48a:	e001      	b.n	800d490 <calculate_attitude+0x4f4>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	64d3      	str	r3, [r2, #76]	@ 0x4c
	attitude->process.error_integral.y = LIMIT(attitude->process.error_integral.y, - 0.035f ,0.035f );
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d49a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800d508 <calculate_attitude+0x56c>
 800d49e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a6:	d501      	bpl.n	800d4ac <calculate_attitude+0x510>
 800d4a8:	4b14      	ldr	r3, [pc, #80]	@ (800d4fc <calculate_attitude+0x560>)
 800d4aa:	e00d      	b.n	800d4c8 <calculate_attitude+0x52c>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d4b2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800d500 <calculate_attitude+0x564>
 800d4b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4be:	dd01      	ble.n	800d4c4 <calculate_attitude+0x528>
 800d4c0:	4b10      	ldr	r3, [pc, #64]	@ (800d504 <calculate_attitude+0x568>)
 800d4c2:	e001      	b.n	800d4c8 <calculate_attitude+0x52c>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	6513      	str	r3, [r2, #80]	@ 0x50
	attitude->process.error_integral.z = LIMIT(attitude->process.error_integral.z, - 0.035f ,0.035f );
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800d4d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d508 <calculate_attitude+0x56c>
 800d4d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4de:	d501      	bpl.n	800d4e4 <calculate_attitude+0x548>
 800d4e0:	4b06      	ldr	r3, [pc, #24]	@ (800d4fc <calculate_attitude+0x560>)
 800d4e2:	e017      	b.n	800d514 <calculate_attitude+0x578>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800d4ea:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800d500 <calculate_attitude+0x564>
 800d4ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f6:	dd0b      	ble.n	800d510 <calculate_attitude+0x574>
 800d4f8:	4b02      	ldr	r3, [pc, #8]	@ (800d504 <calculate_attitude+0x568>)
 800d4fa:	e00b      	b.n	800d514 <calculate_attitude+0x578>
 800d4fc:	bd0f5c29 	.word	0xbd0f5c29
 800d500:	3d0f5c29 	.word	0x3d0f5c29
 800d504:	3d0f5c29 	.word	0x3d0f5c29
 800d508:	bd0f5c29 	.word	0xbd0f5c29
 800d50c:	3c8efa34 	.word	0x3c8efa34
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	6553      	str	r3, [r2, #84]	@ 0x54
	
/////////////////////////////////////////////////////////////////////////////////////////////////
	//开始修正陀螺仪值
	attitude->data.gyro_correct.x = ((attitude->interface.data.g_x) - attitude->data.rotate_matrix[0][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	ed93 7a04 	vldr	s14, [r3, #16]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	edd3 6a1b 	vldr	s13, [r3, #108]	@ 0x6c
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d52a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d532:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 800d50c <calculate_attitude+0x570>
 800d536:	ee27 7a87 	vmul.f32	s14, s15, s14
						(attitude->parameter.error_kp * attitude->process.error.x + attitude->process.error_integral.x) ;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	edd3 6a32 	vldr	s13, [r3, #200]	@ 0xc8
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800d546:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d550:	ee76 7aa7 	vadd.f32	s15, s13, s15
	attitude->data.gyro_correct.x = ((attitude->interface.data.g_x) - attitude->data.rotate_matrix[0][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d554:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8
	attitude->data.gyro_correct.y = ((attitude->interface.data.g_y) - attitude->data.rotate_matrix[1][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	ed93 7a05 	vldr	s14, [r3, #20]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d574:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d578:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 800d50c <calculate_attitude+0x570>
 800d57c:	ee27 7a87 	vmul.f32	s14, s15, s14
						(attitude->parameter.error_kp * attitude->process.error.y + attitude->process.error_integral.y) ;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	edd3 6a32 	vldr	s13, [r3, #200]	@ 0xc8
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800d58c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d596:	ee76 7aa7 	vadd.f32	s15, s13, s15
	attitude->data.gyro_correct.y = ((attitude->interface.data.g_y) - attitude->data.rotate_matrix[1][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d59a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
	attitude->data.gyro_correct.z = ((attitude->interface.data.g_z) - attitude->data.rotate_matrix[2][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	ed93 7a06 	vldr	s14, [r3, #24]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	edd3 6a21 	vldr	s13, [r3, #132]	@ 0x84
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d5b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5be:	ed1f 7a2d 	vldr	s14, [pc, #-180]	@ 800d50c <calculate_attitude+0x570>
 800d5c2:	ee27 7a87 	vmul.f32	s14, s15, s14
						(attitude->parameter.error_kp * attitude->process.error.z + attitude->process.error_integral.z) ;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	edd3 6a32 	vldr	s13, [r3, #200]	@ 0xc8
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800d5d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800d5dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
	attitude->data.gyro_correct.z = ((attitude->interface.data.g_z) - attitude->data.rotate_matrix[2][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d5e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	
/////////////////////////////////////////////////////////////////////////////////////////////////
	// 一阶龙格库塔更新四元数值
	attitude->process.quaternion[0] += (-attitude->process.quaternion[1] * attitude->data.gyro_correct.x - attitude->process.quaternion[2] * attitude->data.gyro_correct.y - attitude->process.quaternion[3] * attitude->data.gyro_correct.z) * cycle / 2.0f;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d5f6:	eef1 6a67 	vneg.f32	s13, s15
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 800d600:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800d610:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d614:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800d624:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d628:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d62c:	edd7 7a00 	vldr	s15, [r7]
 800d630:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d634:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d638:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d63c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	attitude->process.quaternion[1] +=  (attitude->process.quaternion[0] * attitude->data.gyro_correct.x + attitude->process.quaternion[2] * attitude->data.gyro_correct.z - attitude->process.quaternion[3] * attitude->data.gyro_correct.y) * cycle / 2.0f;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 800d658:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800d668:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d66c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800d67c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d680:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d684:	edd7 7a00 	vldr	s15, [r7]
 800d688:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d68c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d690:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d694:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	attitude->process.quaternion[2] +=  (attitude->process.quaternion[0] * attitude->data.gyro_correct.y - attitude->process.quaternion[1] * attitude->data.gyro_correct.z + attitude->process.quaternion[3] * attitude->data.gyro_correct.x) * cycle / 2.0f;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800d6b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800d6c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d6c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 800d6d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d6d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d6dc:	edd7 7a00 	vldr	s15, [r7]
 800d6e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d6e4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d6e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d6ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	attitude->process.quaternion[3] +=  (attitude->process.quaternion[0] * attitude->data.gyro_correct.z + attitude->process.quaternion[1] * attitude->data.gyro_correct.y - attitude->process.quaternion[2] * attitude->data.gyro_correct.x) * cycle / 2.0f;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800d708:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800d718:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d71c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 800d72c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d730:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d734:	edd7 7a00 	vldr	s15, [r7]
 800d738:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d73c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d740:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d744:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	//四元数归一化
	length = fast_sqrt(attitude->process.quaternion[0] * attitude->process.quaternion[0] +
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800d75a:	ee27 7a27 	vmul.f32	s14, s14, s15
								attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d76a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(attitude->process.quaternion[0] * attitude->process.quaternion[0] +
 800d76e:	ee37 7a27 	vadd.f32	s14, s14, s15
								attitude->process.quaternion[2] * attitude->process.quaternion[2] +
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d77e:	ee66 7aa7 	vmul.f32	s15, s13, s15
								attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d782:	ee37 7a27 	vadd.f32	s14, s14, s15
								attitude->process.quaternion[3] * attitude->process.quaternion[3]);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d792:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(attitude->process.quaternion[0] * attitude->process.quaternion[0] +
 800d796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d79a:	eeb0 0a67 	vmov.f32	s0, s15
 800d79e:	f000 fabf 	bl	800dd20 <fast_sqrt>
 800d7a2:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
		
	if (length != 0)
 800d7a6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d7aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b2:	d027      	beq.n	800d804 <calculate_attitude+0x868>
	{
		attitude->process.quaternion[0] /= length;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d7ba:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800d7be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		attitude->process.quaternion[1] /= length;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800d7ce:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800d7d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		attitude->process.quaternion[2] /= length;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800d7e2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800d7e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		attitude->process.quaternion[3] /= length;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800d7f6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800d7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	}
	
///////////////////////////////////////////////////////////////////////////////////////////////////	
	//计算旋转矩阵
	attitude->data.rotate_matrix[0][0] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] + attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800d810:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d824:	ee37 7a27 	vadd.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d834:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.rotate_matrix[0][0] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] + attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d838:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d84c:	ee77 7a67 	vsub.f32	s15, s14, s15
	attitude->data.rotate_matrix[0][0] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] + attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
	attitude->data.rotate_matrix[0][1] = 	2 * (attitude->process.quaternion[1] * attitude->process.quaternion[2] + attitude->process.quaternion[0] * attitude->process.quaternion[3]);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d862:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d87a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
	attitude->data.rotate_matrix[0][2] =  2 * (attitude->process.quaternion[1] * attitude->process.quaternion[3] - attitude->process.quaternion[0] * attitude->process.quaternion[2]);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d890:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d8a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	
	attitude->data.rotate_matrix[1][0] =  2 * (attitude->process.quaternion[1] * attitude->process.quaternion[2] - attitude->process.quaternion[0] * attitude->process.quaternion[3]);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d8be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d8ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	attitude->data.rotate_matrix[1][1] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800d8ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d8fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d900:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d910:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.rotate_matrix[1][1] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d914:	ee37 7a27 	vadd.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d928:	ee77 7a67 	vsub.f32	s15, s14, s15
	attitude->data.rotate_matrix[1][1] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	attitude->data.rotate_matrix[1][2] =  2 * (attitude->process.quaternion[2] * attitude->process.quaternion[3] + attitude->process.quaternion[0] * attitude->process.quaternion[1]);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d93e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d94e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d952:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d956:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
	
	attitude->data.rotate_matrix[2][0] = 	2 * (attitude->process.quaternion[1] * attitude->process.quaternion[3] + attitude->process.quaternion[0] * attitude->process.quaternion[2]);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d96c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d97c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d980:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d984:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
	attitude->data.rotate_matrix[2][1] = 	2 * (attitude->process.quaternion[2] * attitude->process.quaternion[3] - attitude->process.quaternion[0] * attitude->process.quaternion[1]);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d99a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d9aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
	attitude->data.rotate_matrix[2][2] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800d9c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d9d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9dc:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] + attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d9ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.rotate_matrix[2][2] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d9f0:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] + attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800da00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da04:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.rotate_matrix[2][2] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
	
	//计算世界坐标系下的磁力计值
	if (attitude->flag.use_mag == 1)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	785b      	ldrb	r3, [r3, #1]
 800da12:	2b01      	cmp	r3, #1
 800da14:	d15c      	bne.n	800dad0 <calculate_attitude+0xb34>
	{
		attitude->data.mag_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.m_x) +
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	edd3 7a07 	vldr	s15, [r3, #28]
 800da22:	ee27 7a27 	vmul.f32	s14, s14, s15
															attitude->data.rotate_matrix[1][0] * (attitude->interface.data.m_y) +
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	edd3 6a1c 	vldr	s13, [r3, #112]	@ 0x70
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	edd3 7a08 	vldr	s15, [r3, #32]
 800da32:	ee66 7aa7 	vmul.f32	s15, s13, s15
		attitude->data.mag_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.m_x) +
 800da36:	ee37 7a27 	vadd.f32	s14, s14, s15
															attitude->data.rotate_matrix[2][0] * (attitude->interface.data.m_z) ;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	edd3 6a1f 	vldr	s13, [r3, #124]	@ 0x7c
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800da46:	ee66 7aa7 	vmul.f32	s15, s13, s15
															attitude->data.rotate_matrix[1][0] * (attitude->interface.data.m_y) +
 800da4a:	ee77 7a27 	vadd.f32	s15, s14, s15
		attitude->data.mag_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.m_x) +
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
															
		attitude->data.mag_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.m_x) +
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	edd3 7a07 	vldr	s15, [r3, #28]
 800da60:	ee27 7a27 	vmul.f32	s14, s14, s15
															attitude->data.rotate_matrix[1][1] * (attitude->interface.data.m_y) +
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	edd3 6a1d 	vldr	s13, [r3, #116]	@ 0x74
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	edd3 7a08 	vldr	s15, [r3, #32]
 800da70:	ee66 7aa7 	vmul.f32	s15, s13, s15
		attitude->data.mag_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.m_x) +
 800da74:	ee37 7a27 	vadd.f32	s14, s14, s15
															attitude->data.rotate_matrix[2][1] * (attitude->interface.data.m_z) ;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	edd3 6a20 	vldr	s13, [r3, #128]	@ 0x80
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800da84:	ee66 7aa7 	vmul.f32	s15, s13, s15
															attitude->data.rotate_matrix[1][1] * (attitude->interface.data.m_y) +
 800da88:	ee77 7a27 	vadd.f32	s15, s14, s15
		attitude->data.mag_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.m_x) +
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
															
		attitude->data.mag_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.m_x) +
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	edd3 7a07 	vldr	s15, [r3, #28]
 800da9e:	ee27 7a27 	vmul.f32	s14, s14, s15
															attitude->data.rotate_matrix[1][2] * (attitude->interface.data.m_y) +
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	edd3 7a08 	vldr	s15, [r3, #32]
 800daae:	ee66 7aa7 	vmul.f32	s15, s13, s15
		attitude->data.mag_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.m_x) +
 800dab2:	ee37 7a27 	vadd.f32	s14, s14, s15
															attitude->data.rotate_matrix[2][2] * (attitude->interface.data.m_z) ;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	edd3 6a21 	vldr	s13, [r3, #132]	@ 0x84
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
															attitude->data.rotate_matrix[1][2] * (attitude->interface.data.m_y) +
 800dac6:	ee77 7a27 	vadd.f32	s15, s14, s15
		attitude->data.mag_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.m_x) +
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
	}
	
	//计算世界坐标系下的加速度值
	attitude->data.acc_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.a_x) +
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	edd3 7a01 	vldr	s15, [r3, #4]
 800dadc:	ee27 7a27 	vmul.f32	s14, s14, s15
														attitude->data.rotate_matrix[1][0] * (attitude->interface.data.a_y) +
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	edd3 6a1c 	vldr	s13, [r3, #112]	@ 0x70
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	edd3 7a02 	vldr	s15, [r3, #8]
 800daec:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.acc_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.a_x) +
 800daf0:	ee37 7a27 	vadd.f32	s14, s14, s15
														attitude->data.rotate_matrix[2][0] * (attitude->interface.data.a_z) ;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	edd3 6a1f 	vldr	s13, [r3, #124]	@ 0x7c
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	edd3 7a03 	vldr	s15, [r3, #12]
 800db00:	ee66 7aa7 	vmul.f32	s15, s13, s15
														attitude->data.rotate_matrix[1][0] * (attitude->interface.data.a_y) +
 800db04:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.acc_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.a_x) +
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
														
	attitude->data.acc_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.a_x) +
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	edd3 7a01 	vldr	s15, [r3, #4]
 800db1a:	ee27 7a27 	vmul.f32	s14, s14, s15
														attitude->data.rotate_matrix[1][1] * (attitude->interface.data.a_y) +
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	edd3 6a1d 	vldr	s13, [r3, #116]	@ 0x74
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	edd3 7a02 	vldr	s15, [r3, #8]
 800db2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.acc_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.a_x) +
 800db2e:	ee37 7a27 	vadd.f32	s14, s14, s15
														attitude->data.rotate_matrix[2][1] * (attitude->interface.data.a_z) ;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	edd3 6a20 	vldr	s13, [r3, #128]	@ 0x80
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	edd3 7a03 	vldr	s15, [r3, #12]
 800db3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
														attitude->data.rotate_matrix[1][1] * (attitude->interface.data.a_y) +
 800db42:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.acc_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.a_x) +
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
														
	attitude->data.acc_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.a_x) +
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	edd3 7a01 	vldr	s15, [r3, #4]
 800db58:	ee27 7a27 	vmul.f32	s14, s14, s15
														attitude->data.rotate_matrix[1][2] * (attitude->interface.data.a_y) +
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	edd3 7a02 	vldr	s15, [r3, #8]
 800db68:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.acc_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.a_x) +
 800db6c:	ee37 7a27 	vadd.f32	s14, s14, s15
														attitude->data.rotate_matrix[2][2] * (attitude->interface.data.a_z) ;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	edd3 6a21 	vldr	s13, [r3, #132]	@ 0x84
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	edd3 7a03 	vldr	s15, [r3, #12]
 800db7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
														attitude->data.rotate_matrix[1][2] * (attitude->interface.data.a_y) +
 800db80:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.acc_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.a_x) +
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
	
	//求解欧拉角
	attitude->data.rol = arctan2(attitude->data.rotate_matrix[2][2], attitude->data.rotate_matrix[1][2]);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 800db96:	eef0 0a47 	vmov.f32	s1, s14
 800db9a:	eeb0 0a67 	vmov.f32	s0, s15
 800db9e:	f000 fad1 	bl	800e144 <arctan2>
 800dba2:	eef0 7a40 	vmov.f32	s15, s0
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	attitude->data.pitch = -arcsin(attitude->data.rotate_matrix[0][2]);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800dbb2:	eeb0 0a67 	vmov.f32	s0, s15
 800dbb6:	f000 fb4d 	bl	800e254 <arcsin>
 800dbba:	eef0 7a40 	vmov.f32	s15, s0
 800dbbe:	eef1 7a67 	vneg.f32	s15, s15
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
	attitude->data.yaw = arctan2(attitude->data.rotate_matrix[0][0], attitude->data.rotate_matrix[0][1]);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800dbd4:	eef0 0a47 	vmov.f32	s1, s14
 800dbd8:	eeb0 0a67 	vmov.f32	s0, s15
 800dbdc:	f000 fab2 	bl	800e144 <arctan2>
 800dbe0:	eef0 7a40 	vmov.f32	s15, s0
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	
/////////////////////////////////////////////////////////////////////////////////////////////////			
	//计算机体坐标系矫正后的加速度--不受俯仰和翻滚影响
	attitude->data.acc_correct.x =   attitude->data.acc_world.x * my_cos(attitude->data.yaw) + attitude->data.acc_world.y * my_sin(attitude->data.yaw);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800dbf6:	eeb0 0a67 	vmov.f32	s0, s15
 800dbfa:	f000 f9a1 	bl	800df40 <my_cos>
 800dbfe:	eef0 7a40 	vmov.f32	s15, s0
 800dc02:	ee28 8a27 	vmul.f32	s16, s16, s15
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	edd3 8a23 	vldr	s17, [r3, #140]	@ 0x8c
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800dc12:	eeb0 0a67 	vmov.f32	s0, s15
 800dc16:	f000 f913 	bl	800de40 <my_sin>
 800dc1a:	eef0 7a40 	vmov.f32	s15, s0
 800dc1e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800dc22:	ee78 7a27 	vadd.f32	s15, s16, s15
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
	attitude->data.acc_correct.y =  -attitude->data.acc_world.x * my_sin(attitude->data.yaw) + attitude->data.acc_world.y * my_cos(attitude->data.yaw);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 800dc32:	eeb1 8a67 	vneg.f32	s16, s15
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800dc3c:	eeb0 0a67 	vmov.f32	s0, s15
 800dc40:	f000 f8fe 	bl	800de40 <my_sin>
 800dc44:	eef0 7a40 	vmov.f32	s15, s0
 800dc48:	ee28 8a27 	vmul.f32	s16, s16, s15
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	edd3 8a23 	vldr	s17, [r3, #140]	@ 0x8c
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800dc58:	eeb0 0a67 	vmov.f32	s0, s15
 800dc5c:	f000 f970 	bl	800df40 <my_cos>
 800dc60:	eef0 7a40 	vmov.f32	s15, s0
 800dc64:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800dc68:	ee78 7a27 	vadd.f32	s15, s16, s15
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
	attitude->data.acc_correct.z =   attitude->data.acc_world.z;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	
	//计算机体坐标系矫正后的磁场--不受俯仰和翻滚影响
	if (attitude->flag.use_mag == 1)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	785b      	ldrb	r3, [r3, #1]
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d147      	bne.n	800dd16 <calculate_attitude+0xd7a>
	{
		XYZ_Data_f ref_v = (XYZ_Data_f){attitude->data.rotate_matrix[0][2], attitude->data.rotate_matrix[1][2], attitude->data.rotate_matrix[2][2]};
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc90:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc98:	63bb      	str	r3, [r7, #56]	@ 0x38
		XYZ_Data_f mag_tmp = (XYZ_Data_f){attitude->interface.data.m_x, attitude->interface.data.m_y, attitude->interface.data.m_z};
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	61bb      	str	r3, [r7, #24]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6a1b      	ldr	r3, [r3, #32]
 800dca4:	61fb      	str	r3, [r7, #28]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcaa:	623b      	str	r3, [r7, #32]
		
		length = 	fast_sqrt(	(attitude->interface.data.m_x) * (attitude->interface.data.m_x) +
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	ed93 7a07 	vldr	s14, [r3, #28]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	edd3 7a07 	vldr	s15, [r3, #28]
 800dcb8:	ee27 7a27 	vmul.f32	s14, s14, s15
										(attitude->interface.data.m_y) * (attitude->interface.data.m_y) +
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	edd3 6a08 	vldr	s13, [r3, #32]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	edd3 7a08 	vldr	s15, [r3, #32]
 800dcc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		length = 	fast_sqrt(	(attitude->interface.data.m_x) * (attitude->interface.data.m_x) +
 800dccc:	ee37 7a27 	vadd.f32	s14, s14, s15
										(attitude->interface.data.m_z) * (attitude->interface.data.m_z));
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dcdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		length = 	fast_sqrt(	(attitude->interface.data.m_x) * (attitude->interface.data.m_x) +
 800dce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dce4:	eeb0 0a67 	vmov.f32	s0, s15
 800dce8:	f000 f81a 	bl	800dd20 <fast_sqrt>
 800dcec:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

		if (length != 0)
 800dcf0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800dcf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcfc:	d00b      	beq.n	800dd16 <calculate_attitude+0xd7a>
		{
			simple_3d_trans(&ref_v, &mag_tmp, &attitude->data.mag_correct);//地磁坐标变换
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 800dd04:	f107 0118 	add.w	r1, r7, #24
 800dd08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7ff f899 	bl	800ce44 <simple_3d_trans>
 800dd12:	e000      	b.n	800dd16 <calculate_attitude+0xd7a>
		return;
 800dd14:	bf00      	nop
//			attitude->data.mag_correct.x = fast_sqrt(1 - (attitude->data.mag_correct.z / length) * (attitude->data.mag_correct.z / length)) * *(attitude->interface.data.m_x);
//			attitude->data.mag_correct.y = fast_sqrt(1 - (attitude->data.mag_correct.z / length) * (pose->data.mag_correct.z / length)) * *(attitude->interface.data.m_y);
		}
	}
	
}
 800dd16:	3758      	adds	r7, #88	@ 0x58
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	ecbd 8b02 	vpop	{d8}
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <fast_sqrt>:
* 函数功能		     : 快速算根值
* 输    入         : number 根号里边的数
* 输    出         : 最大的绝对值
*******************************************************************************/
float fast_sqrt(float number)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b087      	sub	sp, #28
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	ed87 0a01 	vstr	s0, [r7, #4]
	long i;
	float x, y;
	const float f = 1.5F;
 800dd2a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800dd2e:	617b      	str	r3, [r7, #20]
	x = number * 0.5F;
 800dd30:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd34:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dd38:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd3c:	edc7 7a04 	vstr	s15, [r7, #16]
	y = number;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	60bb      	str	r3, [r7, #8]
	i = * ( long * ) &y;
 800dd44:	f107 0308 	add.w	r3, r7, #8
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - ( i >> 1 );
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	105a      	asrs	r2, r3, #1
 800dd50:	4b1d      	ldr	r3, [pc, #116]	@ (800ddc8 <fast_sqrt+0xa8>)
 800dd52:	1a9b      	subs	r3, r3, r2
 800dd54:	60fb      	str	r3, [r7, #12]

	y = * ( float * ) &i;
 800dd56:	f107 030c 	add.w	r3, r7, #12
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	60bb      	str	r3, [r7, #8]
	y = y * ( f - ( x * y * y ) );
 800dd5e:	ed97 7a02 	vldr	s14, [r7, #8]
 800dd62:	edd7 7a04 	vldr	s15, [r7, #16]
 800dd66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd6a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd72:	ed97 7a05 	vldr	s14, [r7, #20]
 800dd76:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dd7a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd82:	edc7 7a02 	vstr	s15, [r7, #8]
	y = y * ( f - ( x * y * y ) );
 800dd86:	ed97 7a02 	vldr	s14, [r7, #8]
 800dd8a:	edd7 7a04 	vldr	s15, [r7, #16]
 800dd8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd92:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd9a:	ed97 7a05 	vldr	s14, [r7, #20]
 800dd9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dda2:	edd7 7a02 	vldr	s15, [r7, #8]
 800dda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddaa:	edc7 7a02 	vstr	s15, [r7, #8]
	return number * y;
 800ddae:	ed97 7a02 	vldr	s14, [r7, #8]
 800ddb2:	edd7 7a01 	vldr	s15, [r7, #4]
 800ddb6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800ddba:	eeb0 0a67 	vmov.f32	s0, s15
 800ddbe:	371c      	adds	r7, #28
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr
 800ddc8:	5f3759df 	.word	0x5f3759df

0800ddcc <translateAngle>:
//* 函数功能		     : 将角度转变为-180~180之间
//* 输    入         :
//* 输    出         :
//*******************************************************************************/
float translateAngle(float angle)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	ed87 0a01 	vstr	s0, [r7, #4]
	while (angle > ANGLE_MAX)					//判断目标角度是否在允许角度范围
 800ddd6:	e007      	b.n	800dde8 <translateAngle+0x1c>
		angle -= 360.0f;
 800ddd8:	edd7 7a01 	vldr	s15, [r7, #4]
 800dddc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800de34 <translateAngle+0x68>
 800dde0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dde4:	edc7 7a01 	vstr	s15, [r7, #4]
	while (angle > ANGLE_MAX)					//判断目标角度是否在允许角度范围
 800dde8:	edd7 7a01 	vldr	s15, [r7, #4]
 800ddec:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800de38 <translateAngle+0x6c>
 800ddf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf8:	dcee      	bgt.n	800ddd8 <translateAngle+0xc>
	while (angle < ANGLE_MIN)
 800ddfa:	e007      	b.n	800de0c <translateAngle+0x40>
		angle += 360.0f;
 800ddfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800de00:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800de34 <translateAngle+0x68>
 800de04:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de08:	edc7 7a01 	vstr	s15, [r7, #4]
	while (angle < ANGLE_MIN)
 800de0c:	edd7 7a01 	vldr	s15, [r7, #4]
 800de10:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800de3c <translateAngle+0x70>
 800de14:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de1c:	d4ee      	bmi.n	800ddfc <translateAngle+0x30>
	return angle;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	ee07 3a90 	vmov	s15, r3
}
 800de24:	eeb0 0a67 	vmov.f32	s0, s15
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	43b40000 	.word	0x43b40000
 800de38:	43340000 	.word	0x43340000
 800de3c:	c3340000 	.word	0xc3340000

0800de40 <my_sin>:
* 函数功能		     :
* 输    入         :
* 输    出         :
*******************************************************************************/
float my_sin(float angle)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	ed87 0a01 	vstr	s0, [r7, #4]
	float sine, rad;
	angle = translateAngle(angle);
 800de4a:	ed97 0a01 	vldr	s0, [r7, #4]
 800de4e:	f7ff ffbd 	bl	800ddcc <translateAngle>
 800de52:	ed87 0a01 	vstr	s0, [r7, #4]
	rad = angle * PI / 180.0f;
 800de56:	edd7 7a01 	vldr	s15, [r7, #4]
 800de5a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800df28 <my_sin+0xe8>
 800de5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800de62:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800df2c <my_sin+0xec>
 800de66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800de6a:	edc7 7a03 	vstr	s15, [r7, #12]

	sine = (rad < 0) ? rad * (1.27323954f + 0.405284735f * rad) : rad * (1.27323954f - 0.405284735f * rad);
 800de6e:	edd7 7a03 	vldr	s15, [r7, #12]
 800de72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7a:	d50e      	bpl.n	800de9a <my_sin+0x5a>
 800de7c:	edd7 7a03 	vldr	s15, [r7, #12]
 800de80:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800df30 <my_sin+0xf0>
 800de84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de88:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800df34 <my_sin+0xf4>
 800de8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de90:	edd7 7a03 	vldr	s15, [r7, #12]
 800de94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de98:	e00d      	b.n	800deb6 <my_sin+0x76>
 800de9a:	edd7 7a03 	vldr	s15, [r7, #12]
 800de9e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800df30 <my_sin+0xf0>
 800dea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dea6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800df34 <my_sin+0xf4>
 800deaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800deae:	edd7 7a03 	vldr	s15, [r7, #12]
 800deb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deb6:	edc7 7a02 	vstr	s15, [r7, #8]
	sine = (sine < 0) ? sine * (-0.225f * (sine + 1) + 1) : sine * (0.225f * (sine - 1) + 1);
 800deba:	edd7 7a02 	vldr	s15, [r7, #8]
 800debe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec6:	d512      	bpl.n	800deee <my_sin+0xae>
 800dec8:	edd7 7a02 	vldr	s15, [r7, #8]
 800decc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ded0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ded4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800df38 <my_sin+0xf8>
 800ded8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dedc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dee4:	edd7 7a02 	vldr	s15, [r7, #8]
 800dee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deec:	e011      	b.n	800df12 <my_sin+0xd2>
 800deee:	edd7 7a02 	vldr	s15, [r7, #8]
 800def2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800def6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800defa:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800df3c <my_sin+0xfc>
 800defe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df0a:	edd7 7a02 	vldr	s15, [r7, #8]
 800df0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df12:	edc7 7a02 	vstr	s15, [r7, #8]
	return sine;
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	ee07 3a90 	vmov	s15, r3
}
 800df1c:	eeb0 0a67 	vmov.f32	s0, s15
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	40490fdb 	.word	0x40490fdb
 800df2c:	43340000 	.word	0x43340000
 800df30:	3ecf817b 	.word	0x3ecf817b
 800df34:	3fa2f983 	.word	0x3fa2f983
 800df38:	be666666 	.word	0xbe666666
 800df3c:	3e666666 	.word	0x3e666666

0800df40 <my_cos>:
* 函数功能		     :
* 输    入         :
* 输    出         :
*******************************************************************************/
float my_cos(float angle)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	ed87 0a01 	vstr	s0, [r7, #4]
	return my_sin(angle + 90.0f);
 800df4a:	edd7 7a01 	vldr	s15, [r7, #4]
 800df4e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800df6c <my_cos+0x2c>
 800df52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800df56:	eeb0 0a67 	vmov.f32	s0, s15
 800df5a:	f7ff ff71 	bl	800de40 <my_sin>
 800df5e:	eef0 7a40 	vmov.f32	s15, s0
}
 800df62:	eeb0 0a67 	vmov.f32	s0, s15
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	42b40000 	.word	0x42b40000

0800df70 <arctan1>:
* 函数功能		     : 反正切 （+- 0.09°）
* 输    入         :
* 输    出         :
*******************************************************************************/
float arctan1(float tan)
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	ed87 0a01 	vstr	s0, [r7, #4]
	float angle = (ABS(tan) > 1.0f)	? 																																								\
 800df7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800df7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df86:	dd0c      	ble.n	800dfa2 <arctan1+0x32>
 800df88:	edd7 7a01 	vldr	s15, [r7, #4]
 800df8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df90:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df98:	bfcc      	ite	gt
 800df9a:	2301      	movgt	r3, #1
 800df9c:	2300      	movle	r3, #0
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	e00b      	b.n	800dfba <arctan1+0x4a>
 800dfa2:	edd7 7a01 	vldr	s15, [r7, #4]
 800dfa6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800dfaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfb2:	bf4c      	ite	mi
 800dfb4:	2301      	movmi	r3, #1
 800dfb6:	2300      	movpl	r3, #0
 800dfb8:	b2db      	uxtb	r3, r3
								90.0f - ABS(1.0f / tan) * (45.0f - (ABS(1.0f / tan) - 1.0f) * (14.0f + 3.83f * ABS(1.0f / tan)))	: \
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d066      	beq.n	800e08c <arctan1+0x11c>
 800dfbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfc2:	ed97 7a01 	vldr	s14, [r7, #4]
 800dfc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dfce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd2:	dd06      	ble.n	800dfe2 <arctan1+0x72>
 800dfd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfd8:	ed97 7a01 	vldr	s14, [r7, #4]
 800dfdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfe0:	e007      	b.n	800dff2 <arctan1+0x82>
 800dfe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfe6:	ed97 7a01 	vldr	s14, [r7, #4]
 800dfea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfee:	eef1 7a67 	vneg.f32	s15, s15
 800dff2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800dff6:	edd7 6a01 	vldr	s13, [r7, #4]
 800dffa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800dffe:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e006:	dd06      	ble.n	800e016 <arctan1+0xa6>
 800e008:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800e00c:	edd7 6a01 	vldr	s13, [r7, #4]
 800e010:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e014:	e007      	b.n	800e026 <arctan1+0xb6>
 800e016:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800e01a:	edd7 6a01 	vldr	s13, [r7, #4]
 800e01e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e022:	eeb1 7a47 	vneg.f32	s14, s14
 800e026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e02a:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e02e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800e032:	ed97 6a01 	vldr	s12, [r7, #4]
 800e036:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800e03a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e042:	dd06      	ble.n	800e052 <arctan1+0xe2>
 800e044:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800e048:	ed97 6a01 	vldr	s12, [r7, #4]
 800e04c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800e050:	e007      	b.n	800e062 <arctan1+0xf2>
 800e052:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800e056:	ed97 6a01 	vldr	s12, [r7, #4]
 800e05a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800e05e:	eeb1 7a47 	vneg.f32	s14, s14
 800e062:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800e138 <arctan1+0x1c8>
 800e066:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e06a:	eeb2 6a0c 	vmov.f32	s12, #44	@ 0x41600000  14.0
 800e06e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e072:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e076:	eddf 6a31 	vldr	s13, [pc, #196]	@ 800e13c <arctan1+0x1cc>
 800e07a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e07e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e082:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800e140 <arctan1+0x1d0>
 800e086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e08a:	e03d      	b.n	800e108 <arctan1+0x198>
								ABS(tan) * (45.0f - (ABS(tan) - 1.0f) * (14.0f + 3.83f * ABS(tan)));
 800e08c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e098:	dd02      	ble.n	800e0a0 <arctan1+0x130>
 800e09a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e09e:	e003      	b.n	800e0a8 <arctan1+0x138>
 800e0a0:	edd7 7a01 	vldr	s15, [r7, #4]
 800e0a4:	eef1 7a67 	vneg.f32	s15, s15
 800e0a8:	ed97 7a01 	vldr	s14, [r7, #4]
 800e0ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b4:	dd02      	ble.n	800e0bc <arctan1+0x14c>
 800e0b6:	ed97 7a01 	vldr	s14, [r7, #4]
 800e0ba:	e003      	b.n	800e0c4 <arctan1+0x154>
 800e0bc:	ed97 7a01 	vldr	s14, [r7, #4]
 800e0c0:	eeb1 7a47 	vneg.f32	s14, s14
 800e0c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0c8:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e0cc:	ed97 7a01 	vldr	s14, [r7, #4]
 800e0d0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d8:	dd02      	ble.n	800e0e0 <arctan1+0x170>
 800e0da:	ed97 7a01 	vldr	s14, [r7, #4]
 800e0de:	e003      	b.n	800e0e8 <arctan1+0x178>
 800e0e0:	ed97 7a01 	vldr	s14, [r7, #4]
 800e0e4:	eeb1 7a47 	vneg.f32	s14, s14
 800e0e8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800e138 <arctan1+0x1c8>
 800e0ec:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e0f0:	eeb2 6a0c 	vmov.f32	s12, #44	@ 0x41600000  14.0
 800e0f4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e0f8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e0fc:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800e13c <arctan1+0x1cc>
 800e100:	ee36 7ac7 	vsub.f32	s14, s13, s14
								90.0f - ABS(1.0f / tan) * (45.0f - (ABS(1.0f / tan) - 1.0f) * (14.0f + 3.83f * ABS(1.0f / tan)))	: \
 800e104:	ee67 7a87 	vmul.f32	s15, s15, s14
	float angle = (ABS(tan) > 1.0f)	? 																																								\
 800e108:	edc7 7a03 	vstr	s15, [r7, #12]
	return (tan > 0) ? angle : -angle;
 800e10c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e110:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e118:	dd02      	ble.n	800e120 <arctan1+0x1b0>
 800e11a:	edd7 7a03 	vldr	s15, [r7, #12]
 800e11e:	e003      	b.n	800e128 <arctan1+0x1b8>
 800e120:	edd7 7a03 	vldr	s15, [r7, #12]
 800e124:	eef1 7a67 	vneg.f32	s15, s15
}
 800e128:	eeb0 0a67 	vmov.f32	s0, s15
 800e12c:	3714      	adds	r7, #20
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	40751eb8 	.word	0x40751eb8
 800e13c:	42340000 	.word	0x42340000
 800e140:	42b40000 	.word	0x42b40000

0800e144 <arctan2>:
* 函数功能		     : 反正切 （+- 0.09°）
* 输    入         :
* 输    出         :
*******************************************************************************/
float arctan2(float x, float y)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	ed87 0a01 	vstr	s0, [r7, #4]
 800e14e:	edc7 0a00 	vstr	s1, [r7]
	float tan, angle;

	if (x == 0 && y == 0)		//不存在
 800e152:	edd7 7a01 	vldr	s15, [r7, #4]
 800e156:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e15e:	d109      	bne.n	800e174 <arctan2+0x30>
 800e160:	edd7 7a00 	vldr	s15, [r7]
 800e164:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16c:	d102      	bne.n	800e174 <arctan2+0x30>
		return 0;
 800e16e:	f04f 0300 	mov.w	r3, #0
 800e172:	e060      	b.n	800e236 <arctan2+0xf2>

	if (x == 0)							//y轴上
 800e174:	edd7 7a01 	vldr	s15, [r7, #4]
 800e178:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e180:	d10a      	bne.n	800e198 <arctan2+0x54>
	{
		if (y > 0)
 800e182:	edd7 7a00 	vldr	s15, [r7]
 800e186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18e:	dd01      	ble.n	800e194 <arctan2+0x50>
			return 90;
 800e190:	4b2c      	ldr	r3, [pc, #176]	@ (800e244 <arctan2+0x100>)
 800e192:	e050      	b.n	800e236 <arctan2+0xf2>
		else
			return -90;
 800e194:	4b2c      	ldr	r3, [pc, #176]	@ (800e248 <arctan2+0x104>)
 800e196:	e04e      	b.n	800e236 <arctan2+0xf2>
	}

	if (y == 0)							//x轴上
 800e198:	edd7 7a00 	vldr	s15, [r7]
 800e19c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a4:	d10b      	bne.n	800e1be <arctan2+0x7a>
	{
		if (x > 0)
 800e1a6:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b2:	dd02      	ble.n	800e1ba <arctan2+0x76>
			return 0;
 800e1b4:	f04f 0300 	mov.w	r3, #0
 800e1b8:	e03d      	b.n	800e236 <arctan2+0xf2>
		else
			return -180.0f;
 800e1ba:	4b24      	ldr	r3, [pc, #144]	@ (800e24c <arctan2+0x108>)
 800e1bc:	e03b      	b.n	800e236 <arctan2+0xf2>
	}

	tan = y / x;
 800e1be:	edd7 6a00 	vldr	s13, [r7]
 800e1c2:	ed97 7a01 	vldr	s14, [r7, #4]
 800e1c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1ca:	edc7 7a02 	vstr	s15, [r7, #8]
	angle = arctan1(tan);
 800e1ce:	ed97 0a02 	vldr	s0, [r7, #8]
 800e1d2:	f7ff fecd 	bl	800df70 <arctan1>
 800e1d6:	ed87 0a03 	vstr	s0, [r7, #12]
	if (x < 0 && angle > 0)
 800e1da:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e6:	d50f      	bpl.n	800e208 <arctan2+0xc4>
 800e1e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800e1ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f4:	dd08      	ble.n	800e208 <arctan2+0xc4>
		angle -= 180.0f;
 800e1f6:	edd7 7a03 	vldr	s15, [r7, #12]
 800e1fa:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800e250 <arctan2+0x10c>
 800e1fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e202:	edc7 7a03 	vstr	s15, [r7, #12]
 800e206:	e015      	b.n	800e234 <arctan2+0xf0>
	else if (x < 0 && angle < 0)
 800e208:	edd7 7a01 	vldr	s15, [r7, #4]
 800e20c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e214:	d50e      	bpl.n	800e234 <arctan2+0xf0>
 800e216:	edd7 7a03 	vldr	s15, [r7, #12]
 800e21a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e222:	d507      	bpl.n	800e234 <arctan2+0xf0>
		angle += 180.0f;
 800e224:	edd7 7a03 	vldr	s15, [r7, #12]
 800e228:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800e250 <arctan2+0x10c>
 800e22c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e230:	edc7 7a03 	vstr	s15, [r7, #12]
	return angle;
 800e234:	68fb      	ldr	r3, [r7, #12]
}
 800e236:	ee07 3a90 	vmov	s15, r3
 800e23a:	eeb0 0a67 	vmov.f32	s0, s15
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	42b40000 	.word	0x42b40000
 800e248:	c2b40000 	.word	0xc2b40000
 800e24c:	c3340000 	.word	0xc3340000
 800e250:	43340000 	.word	0x43340000

0800e254 <arcsin>:
* 函数功能		     : 反正切 （+- 0.09°）
* 输    入         :
* 输    出         :
*******************************************************************************/
float arcsin(float i)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	ed87 0a01 	vstr	s0, [r7, #4]
	return arctan1(i / fast_sqrt(1 - i * i));
 800e25e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e262:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e26a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e26e:	eeb0 0a67 	vmov.f32	s0, s15
 800e272:	f7ff fd55 	bl	800dd20 <fast_sqrt>
 800e276:	eef0 6a40 	vmov.f32	s13, s0
 800e27a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e27e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e282:	eeb0 0a47 	vmov.f32	s0, s14
 800e286:	f7ff fe73 	bl	800df70 <arctan1>
 800e28a:	eef0 7a40 	vmov.f32	s15, s0
}
 800e28e:	eeb0 0a67 	vmov.f32	s0, s15
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b088      	sub	sp, #32
 800e29c:	af04      	add	r7, sp, #16
 800e29e:	607b      	str	r3, [r7, #4]
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	81fb      	strh	r3, [r7, #14]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	81bb      	strh	r3, [r7, #12]
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e2ac:	8978      	ldrh	r0, [r7, #10]
 800e2ae:	89ba      	ldrh	r2, [r7, #12]
 800e2b0:	89f9      	ldrh	r1, [r7, #14]
 800e2b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e2b6:	9302      	str	r3, [sp, #8]
 800e2b8:	8b3b      	ldrh	r3, [r7, #24]
 800e2ba:	9301      	str	r3, [sp, #4]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	4806      	ldr	r0, [pc, #24]	@ (800e2dc <I2C1_WriteReg+0x44>)
 800e2c4:	f7f4 faaa 	bl	800281c <HAL_I2C_Mem_Write>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d101      	bne.n	800e2d2 <I2C1_WriteReg+0x3a>
  {
    return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e000      	b.n	800e2d4 <I2C1_WriteReg+0x3c>
  }

  return HAL_ERROR;
 800e2d2:	2301      	movs	r3, #1
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20000424 	.word	0x20000424

0800e2e0 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b088      	sub	sp, #32
 800e2e4:	af04      	add	r7, sp, #16
 800e2e6:	607b      	str	r3, [r7, #4]
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	81fb      	strh	r3, [r7, #14]
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	81bb      	strh	r3, [r7, #12]
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e2f4:	8978      	ldrh	r0, [r7, #10]
 800e2f6:	89ba      	ldrh	r2, [r7, #12]
 800e2f8:	89f9      	ldrh	r1, [r7, #14]
 800e2fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e2fe:	9302      	str	r3, [sp, #8]
 800e300:	8b3b      	ldrh	r3, [r7, #24]
 800e302:	9301      	str	r3, [sp, #4]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	4603      	mov	r3, r0
 800e30a:	4806      	ldr	r0, [pc, #24]	@ (800e324 <I2C1_ReadReg+0x44>)
 800e30c:	f7f4 fb9a 	bl	8002a44 <HAL_I2C_Mem_Read>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d101      	bne.n	800e31a <I2C1_ReadReg+0x3a>
  {
    return HAL_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	e000      	b.n	800e31c <I2C1_ReadReg+0x3c>
  }

  return HAL_ERROR;
 800e31a:	2301      	movs	r3, #1
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	20000424 	.word	0x20000424

0800e328 <BSP_I2C1_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af02      	add	r7, sp, #8
 800e32e:	60ba      	str	r2, [r7, #8]
 800e330:	461a      	mov	r2, r3
 800e332:	4603      	mov	r3, r0
 800e334:	81fb      	strh	r3, [r7, #14]
 800e336:	460b      	mov	r3, r1
 800e338:	81bb      	strh	r3, [r7, #12]
 800e33a:	4613      	mov	r3, r2
 800e33c:	80fb      	strh	r3, [r7, #6]
  if(I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800e33e:	89b9      	ldrh	r1, [r7, #12]
 800e340:	89f8      	ldrh	r0, [r7, #14]
 800e342:	88fb      	ldrh	r3, [r7, #6]
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	2201      	movs	r2, #1
 800e34a:	f7ff ffa5 	bl	800e298 <I2C1_WriteReg>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d101      	bne.n	800e358 <BSP_I2C1_WriteReg+0x30>
  {
	 return HAL_OK;
 800e354:	2300      	movs	r3, #0
 800e356:	e000      	b.n	800e35a <BSP_I2C1_WriteReg+0x32>
  }
  return HAL_ERROR;
 800e358:	2301      	movs	r3, #1
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b086      	sub	sp, #24
 800e366:	af02      	add	r7, sp, #8
 800e368:	60ba      	str	r2, [r7, #8]
 800e36a:	461a      	mov	r2, r3
 800e36c:	4603      	mov	r3, r0
 800e36e:	81fb      	strh	r3, [r7, #14]
 800e370:	460b      	mov	r3, r1
 800e372:	81bb      	strh	r3, [r7, #12]
 800e374:	4613      	mov	r3, r2
 800e376:	80fb      	strh	r3, [r7, #6]
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == HAL_OK)
 800e378:	89b9      	ldrh	r1, [r7, #12]
 800e37a:	89f8      	ldrh	r0, [r7, #14]
 800e37c:	88fb      	ldrh	r3, [r7, #6]
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	2201      	movs	r2, #1
 800e384:	f7ff ffac 	bl	800e2e0 <I2C1_ReadReg>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d101      	bne.n	800e392 <BSP_I2C1_ReadReg+0x30>
  {
	 return HAL_OK;
 800e38e:	2300      	movs	r3, #0
 800e390:	e000      	b.n	800e394 <BSP_I2C1_ReadReg+0x32>
  }
  return HAL_ERROR;
 800e392:	2301      	movs	r3, #1
}
 800e394:	4618      	mov	r0, r3
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <I2C3_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b088      	sub	sp, #32
 800e3a0:	af04      	add	r7, sp, #16
 800e3a2:	607b      	str	r3, [r7, #4]
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	81fb      	strh	r3, [r7, #14]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	81bb      	strh	r3, [r7, #12]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c3, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e3b0:	8978      	ldrh	r0, [r7, #10]
 800e3b2:	89ba      	ldrh	r2, [r7, #12]
 800e3b4:	89f9      	ldrh	r1, [r7, #14]
 800e3b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e3ba:	9302      	str	r3, [sp, #8]
 800e3bc:	8b3b      	ldrh	r3, [r7, #24]
 800e3be:	9301      	str	r3, [sp, #4]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	4806      	ldr	r0, [pc, #24]	@ (800e3e0 <I2C3_ReadReg+0x44>)
 800e3c8:	f7f4 fb3c 	bl	8002a44 <HAL_I2C_Mem_Read>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d101      	bne.n	800e3d6 <I2C3_ReadReg+0x3a>
  {
    return HAL_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	e000      	b.n	800e3d8 <I2C3_ReadReg+0x3c>
  }

  return HAL_ERROR;
 800e3d6:	2301      	movs	r3, #1
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	20000478 	.word	0x20000478

0800e3e4 <I2C3_WriteReg>:


static int32_t I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b088      	sub	sp, #32
 800e3e8:	af04      	add	r7, sp, #16
 800e3ea:	607b      	str	r3, [r7, #4]
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	81fb      	strh	r3, [r7, #14]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	81bb      	strh	r3, [r7, #12]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c3, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e3f8:	8978      	ldrh	r0, [r7, #10]
 800e3fa:	89ba      	ldrh	r2, [r7, #12]
 800e3fc:	89f9      	ldrh	r1, [r7, #14]
 800e3fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e402:	9302      	str	r3, [sp, #8]
 800e404:	8b3b      	ldrh	r3, [r7, #24]
 800e406:	9301      	str	r3, [sp, #4]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	4603      	mov	r3, r0
 800e40e:	4806      	ldr	r0, [pc, #24]	@ (800e428 <I2C3_WriteReg+0x44>)
 800e410:	f7f4 fa04 	bl	800281c <HAL_I2C_Mem_Write>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <I2C3_WriteReg+0x3a>
  {
    return HAL_OK;
 800e41a:	2300      	movs	r3, #0
 800e41c:	e000      	b.n	800e420 <I2C3_WriteReg+0x3c>
  }

  return HAL_ERROR;
 800e41e:	2301      	movs	r3, #1
}
 800e420:	4618      	mov	r0, r3
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	20000478 	.word	0x20000478

0800e42c <BSP_I2C3_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af02      	add	r7, sp, #8
 800e432:	60ba      	str	r2, [r7, #8]
 800e434:	461a      	mov	r2, r3
 800e436:	4603      	mov	r3, r0
 800e438:	81fb      	strh	r3, [r7, #14]
 800e43a:	460b      	mov	r3, r1
 800e43c:	81bb      	strh	r3, [r7, #12]
 800e43e:	4613      	mov	r3, r2
 800e440:	80fb      	strh	r3, [r7, #6]
  if(I2C3_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800e442:	89b9      	ldrh	r1, [r7, #12]
 800e444:	89f8      	ldrh	r0, [r7, #14]
 800e446:	88fb      	ldrh	r3, [r7, #6]
 800e448:	9300      	str	r3, [sp, #0]
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	2201      	movs	r2, #1
 800e44e:	f7ff ffc9 	bl	800e3e4 <I2C3_WriteReg>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d101      	bne.n	800e45c <BSP_I2C3_WriteReg+0x30>
  {
	 return HAL_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	e000      	b.n	800e45e <BSP_I2C3_WriteReg+0x32>
  }
  return HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <BSP_I2C3_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e466:	b580      	push	{r7, lr}
 800e468:	b086      	sub	sp, #24
 800e46a:	af02      	add	r7, sp, #8
 800e46c:	60ba      	str	r2, [r7, #8]
 800e46e:	461a      	mov	r2, r3
 800e470:	4603      	mov	r3, r0
 800e472:	81fb      	strh	r3, [r7, #14]
 800e474:	460b      	mov	r3, r1
 800e476:	81bb      	strh	r3, [r7, #12]
 800e478:	4613      	mov	r3, r2
 800e47a:	80fb      	strh	r3, [r7, #6]
  if(I2C3_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == HAL_OK)
 800e47c:	89b9      	ldrh	r1, [r7, #12]
 800e47e:	89f8      	ldrh	r0, [r7, #14]
 800e480:	88fb      	ldrh	r3, [r7, #6]
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	2201      	movs	r2, #1
 800e488:	f7ff ff88 	bl	800e39c <I2C3_ReadReg>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d101      	bne.n	800e496 <BSP_I2C3_ReadReg+0x30>
  {
	 return HAL_OK;
 800e492:	2300      	movs	r3, #0
 800e494:	e000      	b.n	800e498 <BSP_I2C3_ReadReg+0x32>
  }
  return HAL_ERROR;
 800e496:	2301      	movs	r3, #1
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <STMFLASH_Write_NoCheck>:
#include "in_flash.h"

union_t  f_data;

void STMFLASH_Write_NoCheck(uint32_t WriteAddr, uint8_t *pBuffer, uint32_t NumToWrite)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	607a      	str	r2, [r7, #4]
    for(int i=0;i<(NumToWrite>>3);i++)
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	617b      	str	r3, [r7, #20]
 800e4b0:	e00f      	b.n	800e4d2 <STMFLASH_Write_NoCheck+0x32>
    {
  	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,WriteAddr,f_data.eight[i]);
 800e4b2:	4a0d      	ldr	r2, [pc, #52]	@ (800e4e8 <STMFLASH_Write_NoCheck+0x48>)
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	00db      	lsls	r3, r3, #3
 800e4b8:	4413      	add	r3, r2
 800e4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4be:	68f9      	ldr	r1, [r7, #12]
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	f7f3 fce1 	bl	8001e88 <HAL_FLASH_Program>
  	  WriteAddr += 8;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	3308      	adds	r3, #8
 800e4ca:	60fb      	str	r3, [r7, #12]
    for(int i=0;i<(NumToWrite>>3);i++)
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	617b      	str	r3, [r7, #20]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	08da      	lsrs	r2, r3, #3
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d8ea      	bhi.n	800e4b2 <STMFLASH_Write_NoCheck+0x12>
    }
}
 800e4dc:	bf00      	nop
 800e4de:	bf00      	nop
 800e4e0:	3718      	adds	r7, #24
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20001878 	.word	0x20001878

0800e4ec <FLASH_ErasePage>:
 @param pageAddress -[in] 擦除的起始地址
 @param nbPages -[in] 擦除页数
 @return 0 - 成功；-1 - 失败
*/
int FLASH_ErasePage(uint32_t pageAddress, uint32_t nbPages)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b088      	sub	sp, #32
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
	uint32_t pageError = 0;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	60fb      	str	r3, [r7, #12]
	eraseInit.Page = (pageAddress - FLASH_BASE)/PAGE_SIZE;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800e504:	0adb      	lsrs	r3, r3, #11
 800e506:	617b      	str	r3, [r7, #20]
	eraseInit.Banks = FLASH_BANK_1;
 800e508:	2301      	movs	r3, #1
 800e50a:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = nbPages;
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	61bb      	str	r3, [r7, #24]
	if(HAL_FLASHEx_Erase(&eraseInit, &pageError) != HAL_OK)
 800e510:	f107 021c 	add.w	r2, r7, #28
 800e514:	f107 030c 	add.w	r3, r7, #12
 800e518:	4611      	mov	r1, r2
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7f3 fe0a 	bl	8002134 <HAL_FLASHEx_Erase>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d002      	beq.n	800e52c <FLASH_ErasePage+0x40>
	{
		return -1;
 800e526:	f04f 33ff 	mov.w	r3, #4294967295
 800e52a:	e000      	b.n	800e52e <FLASH_ErasePage+0x42>
	}
	return 0;
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3720      	adds	r7, #32
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
	...

0800e538 <STMFLASH_Write>:

void STMFLASH_Write(uint32_t WriteAddr, uint8_t *pBuffer, uint32_t NumToWrite)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	f5ad 6d02 	sub.w	sp, sp, #2080	@ 0x820
 800e53e:	af00      	add	r7, sp, #0
 800e540:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800e544:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800e548:	6018      	str	r0, [r3, #0]
 800e54a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800e54e:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800e552:	6019      	str	r1, [r3, #0]
 800e554:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800e558:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800e55c:	601a      	str	r2, [r3, #0]
	uint16_t secoff;
	uint16_t secremain;
	uint16_t i;
	uint32_t offaddr;

	HAL_FLASH_Unlock();
 800e55e:	f7f3 fcff 	bl	8001f60 <HAL_FLASH_Unlock>
	offaddr = WriteAddr - USER_FLASH_ADDR_START;
 800e562:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800e566:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800e570:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
 800e574:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
	secpos = offaddr / PAGE_SIZE;
 800e578:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800e57c:	0adb      	lsrs	r3, r3, #11
 800e57e:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
	secoff = (offaddr % PAGE_SIZE);
 800e582:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800e586:	b29b      	uxth	r3, r3
 800e588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e58c:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
	secremain = PAGE_SIZE  - secoff;
 800e590:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 800e594:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800e598:	f8a7 381e 	strh.w	r3, [r7, #2078]	@ 0x81e
	if (NumToWrite <= secremain)
 800e59c:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 800e5a0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800e5a4:	f6a2 021c 	subw	r2, r2, #2076	@ 0x81c
 800e5a8:	6812      	ldr	r2, [r2, #0]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d806      	bhi.n	800e5bc <STMFLASH_Write+0x84>
		secremain = NumToWrite;
 800e5ae:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800e5b2:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f8a7 381e 	strh.w	r3, [r7, #2078]	@ 0x81e
//	while (1)
//	{
		STMFLASH_Read(secpos * PAGE_SIZE + USER_FLASH_ADDR_START, STMFLASH_BUF, PAGE_SIZE);
 800e5bc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800e5c0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800e5c4:	333f      	adds	r3, #63	@ 0x3f
 800e5c6:	02db      	lsls	r3, r3, #11
 800e5c8:	f107 0110 	add.w	r1, r7, #16
 800e5cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f000 f83f 	bl	800e654 <STMFLASH_Read>
//			if (STMFLASH_BUF[secoff + i] != 0XFFFFFFFF)
//				break;
//		}
//		if (i < secremain)
//		{
			FLASH_ErasePage(secpos * PAGE_SIZE + USER_FLASH_ADDR_START,1);
 800e5d6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800e5da:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800e5de:	333f      	adds	r3, #63	@ 0x3f
 800e5e0:	02db      	lsls	r3, r3, #11
 800e5e2:	2101      	movs	r1, #1
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7ff ff81 	bl	800e4ec <FLASH_ErasePage>
			for (i = 0; i < secremain; i++)
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	f8a7 381c 	strh.w	r3, [r7, #2076]	@ 0x81c
 800e5f0:	e014      	b.n	800e61c <STMFLASH_Write+0xe4>
			{
				f_data.one[i + secoff] = pBuffer[i];
 800e5f2:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	@ 0x81c
 800e5f6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800e5fa:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 800e5fe:	6812      	ldr	r2, [r2, #0]
 800e600:	441a      	add	r2, r3
 800e602:	f8b7 181c 	ldrh.w	r1, [r7, #2076]	@ 0x81c
 800e606:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 800e60a:	440b      	add	r3, r1
 800e60c:	7811      	ldrb	r1, [r2, #0]
 800e60e:	4a10      	ldr	r2, [pc, #64]	@ (800e650 <STMFLASH_Write+0x118>)
 800e610:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < secremain; i++)
 800e612:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	@ 0x81c
 800e616:	3301      	adds	r3, #1
 800e618:	f8a7 381c 	strh.w	r3, [r7, #2076]	@ 0x81c
 800e61c:	f8b7 281c 	ldrh.w	r2, [r7, #2076]	@ 0x81c
 800e620:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 800e624:	429a      	cmp	r2, r3
 800e626:	d3e4      	bcc.n	800e5f2 <STMFLASH_Write+0xba>
			}
			STMFLASH_Write_NoCheck(secpos * PAGE_SIZE + USER_FLASH_ADDR_START, STMFLASH_BUF, PAGE_SIZE);
 800e628:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800e62c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800e630:	333f      	adds	r3, #63	@ 0x3f
 800e632:	02db      	lsls	r3, r3, #11
 800e634:	f107 0110 	add.w	r1, r7, #16
 800e638:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff ff2f 	bl	800e4a0 <STMFLASH_Write_NoCheck>
//				secremain = PAGE_SIZE;
//			else
//				secremain = NumToWrite;
//		}
//	};
	HAL_FLASH_Lock();
 800e642:	f7f3 fcaf 	bl	8001fa4 <HAL_FLASH_Lock>
}
 800e646:	bf00      	nop
 800e648:	f507 6702 	add.w	r7, r7, #2080	@ 0x820
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	20001878 	.word	0x20001878

0800e654 <STMFLASH_Read>:

void STMFLASH_Read(uint32_t ReadAddr, uint8_t *pBuffer, uint32_t NumToRead)
{
 800e654:	b480      	push	{r7}
 800e656:	b08b      	sub	sp, #44	@ 0x2c
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	607a      	str	r2, [r7, #4]
	uint64_t data;
	uint32_t temp1,temp2;

	temp1 = NumToRead/8;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	08db      	lsrs	r3, r3, #3
 800e664:	61fb      	str	r3, [r7, #28]
	temp2 = NumToRead%8;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f003 0307 	and.w	r3, r3, #7
 800e66c:	61bb      	str	r3, [r7, #24]
	if(temp2>0)
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <STMFLASH_Read+0x26>
	{
		temp1 = temp1 + 1 ;
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	3301      	adds	r3, #1
 800e678:	61fb      	str	r3, [r7, #28]

	}
	 for(uint32_t i=0; i<(PAGE_SIZE>>3); i++)
 800e67a:	2300      	movs	r3, #0
 800e67c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e67e:	e014      	b.n	800e6aa <STMFLASH_Read+0x56>
	  {
		 data = *(__IO uint64_t *)(USER_FLASH_ADDR_START+i*8);
 800e680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e682:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 800e686:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 800e68a:	00db      	lsls	r3, r3, #3
 800e68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e690:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    f_data.eight[i] = data;
 800e694:	4a15      	ldr	r2, [pc, #84]	@ (800e6ec <STMFLASH_Read+0x98>)
 800e696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e698:	00db      	lsls	r3, r3, #3
 800e69a:	18d1      	adds	r1, r2, r3
 800e69c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e6a0:	e9c1 2300 	strd	r2, r3, [r1]
	 for(uint32_t i=0; i<(PAGE_SIZE>>3); i++)
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ac:	2bff      	cmp	r3, #255	@ 0xff
 800e6ae:	d9e7      	bls.n	800e680 <STMFLASH_Read+0x2c>
	  }

     for(int i=0;i<NumToRead;i++)
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	623b      	str	r3, [r7, #32]
 800e6b4:	e00f      	b.n	800e6d6 <STMFLASH_Read+0x82>
     {
    	 pBuffer[i] = f_data.one[ReadAddr - USER_FLASH_ADDR_START+i];
 800e6b6:	6a3a      	ldr	r2, [r7, #32]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800e6c0:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
 800e6c4:	6a3a      	ldr	r2, [r7, #32]
 800e6c6:	68b9      	ldr	r1, [r7, #8]
 800e6c8:	440a      	add	r2, r1
 800e6ca:	4908      	ldr	r1, [pc, #32]	@ (800e6ec <STMFLASH_Read+0x98>)
 800e6cc:	5ccb      	ldrb	r3, [r1, r3]
 800e6ce:	7013      	strb	r3, [r2, #0]
     for(int i=0;i<NumToRead;i++)
 800e6d0:	6a3b      	ldr	r3, [r7, #32]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	623b      	str	r3, [r7, #32]
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d8eb      	bhi.n	800e6b6 <STMFLASH_Read+0x62>

     }
}
 800e6de:	bf00      	nop
 800e6e0:	bf00      	nop
 800e6e2:	372c      	adds	r7, #44	@ 0x2c
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	20001878 	.word	0x20001878

0800e6f0 <parseCommand>:
#define shell_debug  0

static bsp_console_parm *shell_con=0;
 shell_context_struct shell_context={0};

 static void parseCommand(shell_context_struct *context, const char* command) {
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b0b6      	sub	sp, #216	@ 0xd8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
     char commandCopy[SHELL_BUFFER_SIZE+1];  // 复制命令，以便进行修改
     char *cmd_ptr;
     char* argv[10] = {};
 800e6fa:	f107 030c 	add.w	r3, r7, #12
 800e6fe:	2228      	movs	r2, #40	@ 0x28
 800e700:	2100      	movs	r1, #0
 800e702:	4618      	mov	r0, r3
 800e704:	f002 f80c 	bl	8010720 <memset>
	 char* param=NULL;
 800e708:	2300      	movs	r3, #0
 800e70a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	 int valid_cmd=0;
 800e70e:	2300      	movs	r3, #0
 800e710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	 char* cmd_head;
	 const char *header="cmd";
 800e714:	4b4f      	ldr	r3, [pc, #316]	@ (800e854 <parseCommand+0x164>)
 800e716:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

     strcpy(commandCopy, command);
 800e71a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	4618      	mov	r0, r3
 800e722:	f002 f8ee 	bl	8010902 <strcpy>
     console_cmds_t *cmds=NULL;
 800e726:	2300      	movs	r3, #0
 800e728:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

     if(shell_con==0)
 800e72c:	4b4a      	ldr	r3, [pc, #296]	@ (800e858 <parseCommand+0x168>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	f000 8086 	beq.w	800e842 <parseCommand+0x152>
         {
        	 return ;
         }

     cmd_head = strtok(commandCopy, " ");  // 使用空格和换行符分割命令
 800e736:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e73a:	4948      	ldr	r1, [pc, #288]	@ (800e85c <parseCommand+0x16c>)
 800e73c:	4618      	mov	r0, r3
 800e73e:	f001 fff7 	bl	8010730 <strtok>
 800e742:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
     if((strcmp(shell_con->head,cmd_head)!=0)&&(strcmp(cmd_head,header)!=0))//
 800e746:	4b44      	ldr	r3, [pc, #272]	@ (800e858 <parseCommand+0x168>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	3310      	adds	r3, #16
 800e74c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800e750:	4618      	mov	r0, r3
 800e752:	f7f1 fd65 	bl	8000220 <strcmp>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d008      	beq.n	800e76e <parseCommand+0x7e>
 800e75c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800e760:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800e764:	f7f1 fd5c 	bl	8000220 <strcmp>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d16b      	bne.n	800e846 <parseCommand+0x156>
    	 usb_printf("parseAddrCommand err: %s\n", cmd_head);
#endif
				 return;
     }

     char* cmd = strtok(NULL, " \r\n");  // 使用空格和换行符分割命令
 800e76e:	493c      	ldr	r1, [pc, #240]	@ (800e860 <parseCommand+0x170>)
 800e770:	2000      	movs	r0, #0
 800e772:	f001 ffdd 	bl	8010730 <strtok>
 800e776:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
     if(strstr(cmd,"\r\n"))
 800e77a:	493a      	ldr	r1, [pc, #232]	@ (800e864 <parseCommand+0x174>)
 800e77c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800e780:	f002 f832 	bl	80107e8 <strstr>
     {

     }

     cmds=shell_con->tbl;
 800e784:	4b34      	ldr	r3, [pc, #208]	@ (800e858 <parseCommand+0x168>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     if (cmd != NULL) {
 800e78e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e792:	2b00      	cmp	r3, #0
 800e794:	d04d      	beq.n	800e832 <parseCommand+0x142>
    	 while(cmds!=NULL)
 800e796:	e048      	b.n	800e82a <parseCommand+0x13a>
    	 {
    		 cmd_ptr=cmds->name;
 800e798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			 if (strcmp(cmd, cmd_ptr) == 0)
 800e7a2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800e7a6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800e7aa:	f7f1 fd39 	bl	8000220 <strcmp>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d135      	bne.n	800e820 <parseCommand+0x130>
			 {
#if shell_debug
				 usb_printf("parseCommand cmd: %s\n", cmd);
#endif
				 valid_cmd=1;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				 int param_len=0;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
				 param = strtok(NULL, " ");
 800e7c0:	4926      	ldr	r1, [pc, #152]	@ (800e85c <parseCommand+0x16c>)
 800e7c2:	2000      	movs	r0, #0
 800e7c4:	f001 ffb4 	bl	8010730 <strtok>
 800e7c8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				 while((param!=NULL)&&(param_len<9))
 800e7cc:	e017      	b.n	800e7fe <parseCommand+0x10e>
				 {
#if shell_debug
					 usb_printf("Param: %s\r\n", param);
#endif
					 argv[param_len]=param;
 800e7ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	33d8      	adds	r3, #216	@ 0xd8
 800e7d6:	443b      	add	r3, r7
 800e7d8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e7dc:	f843 2ccc 	str.w	r2, [r3, #-204]
					 param_len++;
 800e7e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
					 if(param_len>=10)
 800e7ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e7ee:	2b09      	cmp	r3, #9
 800e7f0:	dc2b      	bgt.n	800e84a <parseCommand+0x15a>
					 {
						 return;
					 }
					 param = strtok(NULL, " ");
 800e7f2:	491a      	ldr	r1, [pc, #104]	@ (800e85c <parseCommand+0x16c>)
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	f001 ff9b 	bl	8010730 <strtok>
 800e7fa:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
				 while((param!=NULL)&&(param_len<9))
 800e7fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <parseCommand+0x11e>
 800e806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e80a:	2b08      	cmp	r3, #8
 800e80c:	dddf      	ble.n	800e7ce <parseCommand+0xde>
				 }

				 cmds->cmd(context,param_len,argv);
 800e80e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	f107 020c 	add.w	r2, r7, #12
 800e818:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	4798      	blx	r3

			 }
			 cmds=cmds->argv1_tbl;
 800e820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    	 while(cmds!=NULL)
 800e82a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1b2      	bne.n	800e798 <parseCommand+0xa8>
    	 }

     }
     if(valid_cmd==0)
 800e832:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d108      	bne.n	800e84c <parseCommand+0x15c>
     {
    	 usb_printf("Invalid command....\r\n");
 800e83a:	480b      	ldr	r0, [pc, #44]	@ (800e868 <parseCommand+0x178>)
 800e83c:	f000 fec4 	bl	800f5c8 <usb_printf>
 800e840:	e004      	b.n	800e84c <parseCommand+0x15c>
        	 return ;
 800e842:	bf00      	nop
 800e844:	e002      	b.n	800e84c <parseCommand+0x15c>
				 return;
 800e846:	bf00      	nop
 800e848:	e000      	b.n	800e84c <parseCommand+0x15c>
						 return;
 800e84a:	bf00      	nop
     }



 }
 800e84c:	37d8      	adds	r7, #216	@ 0xd8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	08014400 	.word	0x08014400
 800e858:	20002078 	.word	0x20002078
 800e85c:	08014404 	.word	0x08014404
 800e860:	08014408 	.word	0x08014408
 800e864:	0801440c 	.word	0x0801440c
 800e868:	08014410 	.word	0x08014410

0800e86c <shell_driver_main_loop>:

static int shell_driver_main_loop(uint8_t ch)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	4603      	mov	r3, r0
 800e874:	71fb      	strb	r3, [r7, #7]

   shell_context.line[shell_context.c_pos++]=ch;
 800e876:	4b18      	ldr	r3, [pc, #96]	@ (800e8d8 <shell_driver_main_loop+0x6c>)
 800e878:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 800e87c:	1c5a      	adds	r2, r3, #1
 800e87e:	b291      	uxth	r1, r2
 800e880:	4a15      	ldr	r2, [pc, #84]	@ (800e8d8 <shell_driver_main_loop+0x6c>)
 800e882:	f8a2 10b6 	strh.w	r1, [r2, #182]	@ 0xb6
 800e886:	461a      	mov	r2, r3
 800e888:	4b13      	ldr	r3, [pc, #76]	@ (800e8d8 <shell_driver_main_loop+0x6c>)
 800e88a:	4413      	add	r3, r2
 800e88c:	79fa      	ldrb	r2, [r7, #7]
 800e88e:	711a      	strb	r2, [r3, #4]
   if(shell_context.c_pos>=SHELL_BUFFER_SIZE)
 800e890:	4b11      	ldr	r3, [pc, #68]	@ (800e8d8 <shell_driver_main_loop+0x6c>)
 800e892:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 800e896:	2b7f      	cmp	r3, #127	@ 0x7f
 800e898:	d906      	bls.n	800e8a8 <shell_driver_main_loop+0x3c>
   {
	   shell_context.c_pos=0;
 800e89a:	4b0f      	ldr	r3, [pc, #60]	@ (800e8d8 <shell_driver_main_loop+0x6c>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
	   usb_printf("shell_driver_main_loop pos err \r\n");
 800e8a2:	480e      	ldr	r0, [pc, #56]	@ (800e8dc <shell_driver_main_loop+0x70>)
 800e8a4:	f000 fe90 	bl	800f5c8 <usb_printf>
   }

   if(ch=='\n')//检测到换行符，增加\0
 800e8a8:	79fb      	ldrb	r3, [r7, #7]
 800e8aa:	2b0a      	cmp	r3, #10
 800e8ac:	d10f      	bne.n	800e8ce <shell_driver_main_loop+0x62>
   {
	   shell_context.line[shell_context.c_pos]='\0';
 800e8ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e8d8 <shell_driver_main_loop+0x6c>)
 800e8b0:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	4b08      	ldr	r3, [pc, #32]	@ (800e8d8 <shell_driver_main_loop+0x6c>)
 800e8b8:	4413      	add	r3, r2
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	711a      	strb	r2, [r3, #4]
	   parseCommand(&shell_context, shell_context.line);
 800e8be:	4908      	ldr	r1, [pc, #32]	@ (800e8e0 <shell_driver_main_loop+0x74>)
 800e8c0:	4805      	ldr	r0, [pc, #20]	@ (800e8d8 <shell_driver_main_loop+0x6c>)
 800e8c2:	f7ff ff15 	bl	800e6f0 <parseCommand>
	   shell_context.c_pos=0;//解析完清0
 800e8c6:	4b04      	ldr	r3, [pc, #16]	@ (800e8d8 <shell_driver_main_loop+0x6c>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6

   }

	return 0;
 800e8ce:	2300      	movs	r3, #0
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	2000207c 	.word	0x2000207c
 800e8dc:	08014428 	.word	0x08014428
 800e8e0:	20002080 	.word	0x20002080

0800e8e4 <shell_console_hande>:


int shell_console_hande(uint8_t *dat,uint16_t len)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	807b      	strh	r3, [r7, #2]
	while(len--)
 800e8f0:	e006      	b.n	800e900 <shell_console_hande+0x1c>
	{
		shell_driver_main_loop(*dat++);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	1c5a      	adds	r2, r3, #1
 800e8f6:	607a      	str	r2, [r7, #4]
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7ff ffb6 	bl	800e86c <shell_driver_main_loop>
	while(len--)
 800e900:	887b      	ldrh	r3, [r7, #2]
 800e902:	1e5a      	subs	r2, r3, #1
 800e904:	807a      	strh	r2, [r7, #2]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1f3      	bne.n	800e8f2 <shell_console_hande+0xe>
	}

	return 0;
 800e90a:	2300      	movs	r3, #0

}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <console_driver_init>:



void console_driver_init(bsp_console_parm *p_cnl_parm)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  if(p_cnl_parm==0)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d103      	bne.n	800e92a <console_driver_init+0x16>
  {
	  usb_printf("console_driver_init prr is null \r\n");
 800e922:	4807      	ldr	r0, [pc, #28]	@ (800e940 <console_driver_init+0x2c>)
 800e924:	f000 fe50 	bl	800f5c8 <usb_printf>
	  return;
 800e928:	e006      	b.n	800e938 <console_driver_init+0x24>
  }
  shell_con=p_cnl_parm;
 800e92a:	4a06      	ldr	r2, [pc, #24]	@ (800e944 <console_driver_init+0x30>)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6013      	str	r3, [r2, #0]
  shell_context.c_pos=0;
 800e930:	4b05      	ldr	r3, [pc, #20]	@ (800e948 <console_driver_init+0x34>)
 800e932:	2200      	movs	r2, #0
 800e934:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6


}
 800e938:	3708      	adds	r7, #8
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	0801444c 	.word	0x0801444c
 800e944:	20002078 	.word	0x20002078
 800e948:	2000207c 	.word	0x2000207c

0800e94c <__NVIC_SystemReset>:
{
 800e94c:	b480      	push	{r7}
 800e94e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e950:	f3bf 8f4f 	dsb	sy
}
 800e954:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e956:	4b06      	ldr	r3, [pc, #24]	@ (800e970 <__NVIC_SystemReset+0x24>)
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e95e:	4904      	ldr	r1, [pc, #16]	@ (800e970 <__NVIC_SystemReset+0x24>)
 800e960:	4b04      	ldr	r3, [pc, #16]	@ (800e974 <__NVIC_SystemReset+0x28>)
 800e962:	4313      	orrs	r3, r2
 800e964:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e966:	f3bf 8f4f 	dsb	sy
}
 800e96a:	bf00      	nop
    __NOP();
 800e96c:	bf00      	nop
 800e96e:	e7fd      	b.n	800e96c <__NVIC_SystemReset+0x20>
 800e970:	e000ed00 	.word	0xe000ed00
 800e974:	05fa0004 	.word	0x05fa0004

0800e978 <cmd_cali>:
/// @param context
/// @param argc
/// @param argv
/// @return
int cmd_cali(void *context, int argc, char **argv)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_res_read...parm-num:%d\n", argc);
#endif
    if (argc >= 1)
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	2b00      	cmp	r3, #0
 800e988:	dd27      	ble.n	800e9da <cmd_cali+0x62>
    {
    	if(strcmp(*argv,"a+g")==0)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4915      	ldr	r1, [pc, #84]	@ (800e9e4 <cmd_cali+0x6c>)
 800e990:	4618      	mov	r0, r3
 800e992:	f7f1 fc45 	bl	8000220 <strcmp>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d10a      	bne.n	800e9b2 <cmd_cali+0x3a>
    	{
    		shell_printf("cali a+g \r\n");
 800e99c:	4812      	ldr	r0, [pc, #72]	@ (800e9e8 <cmd_cali+0x70>)
 800e99e:	f000 fe13 	bl	800f5c8 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e9a2:	4b12      	ldr	r3, [pc, #72]	@ (800e9ec <cmd_cali+0x74>)
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    		imu_9.cali_flag = 1;
 800e9aa:	4b10      	ldr	r3, [pc, #64]	@ (800e9ec <cmd_cali+0x74>)
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    	}
    	if(strcmp(*argv,"mag")==0)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	490e      	ldr	r1, [pc, #56]	@ (800e9f0 <cmd_cali+0x78>)
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7f1 fc31 	bl	8000220 <strcmp>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d10a      	bne.n	800e9da <cmd_cali+0x62>
    	{
    		shell_printf("cali mag \r\n");
 800e9c4:	480b      	ldr	r0, [pc, #44]	@ (800e9f4 <cmd_cali+0x7c>)
 800e9c6:	f000 fdff 	bl	800f5c8 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e9ca:	4b08      	ldr	r3, [pc, #32]	@ (800e9ec <cmd_cali+0x74>)
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    		imu_9.cali_flag = 2;
 800e9d2:	4b06      	ldr	r3, [pc, #24]	@ (800e9ec <cmd_cali+0x74>)
 800e9d4:	2202      	movs	r2, #2
 800e9d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    	}

    }
    return 0; // 返回执行结果，根据需要进行修改
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3710      	adds	r7, #16
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	08014470 	.word	0x08014470
 800e9e8:	08014474 	.word	0x08014474
 800e9ec:	20002164 	.word	0x20002164
 800e9f0:	08014480 	.word	0x08014480
 800e9f4:	08014484 	.word	0x08014484

0800e9f8 <cmd_reset>:
/// @param context
/// @param argc
/// @param argv
/// @return test ok  24.4.3 liu
int cmd_reset(void *context, int argc, char **argv)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid f" : : : "memory");
 800ea04:	b671      	cpsid	f
}
 800ea06:	bf00      	nop
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_reset...parm-num:%d\n", argc);
#endif
    __disable_fault_irq();
    NVIC_SystemReset();
 800ea08:	f7ff ffa0 	bl	800e94c <__NVIC_SystemReset>

0800ea0c <cmd_restore>:

    return 0; // 返回执行结果，根据需要进行修改
}

int cmd_restore(void *context, int argc, char **argv)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_reset...parm-num:%d\n", argc);
#endif

    HAL_FLASH_Unlock();
 800ea18:	f7f3 faa2 	bl	8001f60 <HAL_FLASH_Unlock>
    FLASH_ErasePage(USER_FLASH_ADDR_START,1);
 800ea1c:	2101      	movs	r1, #1
 800ea1e:	4808      	ldr	r0, [pc, #32]	@ (800ea40 <cmd_restore+0x34>)
 800ea20:	f7ff fd64 	bl	800e4ec <FLASH_ErasePage>
    HAL_Delay(5);
 800ea24:	2005      	movs	r0, #5
 800ea26:	f7f3 f83d 	bl	8001aa4 <HAL_Delay>
    HAL_FLASH_Unlock();
 800ea2a:	f7f3 fa99 	bl	8001f60 <HAL_FLASH_Unlock>
    HAL_Delay(500);
 800ea2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ea32:	f7f3 f837 	bl	8001aa4 <HAL_Delay>
  __ASM volatile ("cpsid f" : : : "memory");
 800ea36:	b671      	cpsid	f
}
 800ea38:	bf00      	nop
    __disable_fault_irq();
    NVIC_SystemReset();
 800ea3a:	f7ff ff87 	bl	800e94c <__NVIC_SystemReset>
 800ea3e:	bf00      	nop
 800ea40:	0801f800 	.word	0x0801f800

0800ea44 <cmd_output>:
/// @param context
/// @param argc
/// @param argv
/// @return
int cmd_output(void *context, int argc, char **argv)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_ad_read...parm-num:%d\n", argc);
#endif

    if (argc >= 1)
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f340 80a8 	ble.w	800eba8 <cmd_output+0x164>
    {
    	if(strcmp(*argv,"euler")==0)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4955      	ldr	r1, [pc, #340]	@ (800ebb4 <cmd_output+0x170>)
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7f1 fbde 	bl	8000220 <strcmp>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10e      	bne.n	800ea88 <cmd_output+0x44>
    	{
    		shell_printf("output euler \r\n");
 800ea6a:	4853      	ldr	r0, [pc, #332]	@ (800ebb8 <cmd_output+0x174>)
 800ea6c:	f000 fdac 	bl	800f5c8 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800ea70:	4b52      	ldr	r3, [pc, #328]	@ (800ebbc <cmd_output+0x178>)
 800ea72:	2201      	movs	r2, #1
 800ea74:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    		imu_9.output_flag = 1;
 800ea78:	4b50      	ldr	r3, [pc, #320]	@ (800ebbc <cmd_output+0x178>)
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
    		imu_9.output_mode = 0;
 800ea80:	4b4e      	ldr	r3, [pc, #312]	@ (800ebbc <cmd_output+0x178>)
 800ea82:	2200      	movs	r2, #0
 800ea84:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    	}
    	if(strcmp(*argv,"quaternion")==0)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	494c      	ldr	r1, [pc, #304]	@ (800ebc0 <cmd_output+0x17c>)
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7f1 fbc6 	bl	8000220 <strcmp>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d10e      	bne.n	800eab8 <cmd_output+0x74>
    	{
    		shell_printf("output quaternion \r\n");
 800ea9a:	484a      	ldr	r0, [pc, #296]	@ (800ebc4 <cmd_output+0x180>)
 800ea9c:	f000 fd94 	bl	800f5c8 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800eaa0:	4b46      	ldr	r3, [pc, #280]	@ (800ebbc <cmd_output+0x178>)
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    		imu_9.output_flag = 1;
 800eaa8:	4b44      	ldr	r3, [pc, #272]	@ (800ebbc <cmd_output+0x178>)
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
    		imu_9.output_mode = 1;
 800eab0:	4b42      	ldr	r3, [pc, #264]	@ (800ebbc <cmd_output+0x178>)
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    	}

    	if(strcmp(*argv,"earth_a")==0)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4942      	ldr	r1, [pc, #264]	@ (800ebc8 <cmd_output+0x184>)
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7f1 fbae 	bl	8000220 <strcmp>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d10e      	bne.n	800eae8 <cmd_output+0xa4>
    	{
    		shell_printf("output earth_a \r\n");
 800eaca:	4840      	ldr	r0, [pc, #256]	@ (800ebcc <cmd_output+0x188>)
 800eacc:	f000 fd7c 	bl	800f5c8 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800ead0:	4b3a      	ldr	r3, [pc, #232]	@ (800ebbc <cmd_output+0x178>)
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    		imu_9.output_flag = 1;
 800ead8:	4b38      	ldr	r3, [pc, #224]	@ (800ebbc <cmd_output+0x178>)
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
    		imu_9.output_mode = 2;
 800eae0:	4b36      	ldr	r3, [pc, #216]	@ (800ebbc <cmd_output+0x178>)
 800eae2:	2202      	movs	r2, #2
 800eae4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    	}

    	if(strcmp(*argv,"acc")==0)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4938      	ldr	r1, [pc, #224]	@ (800ebd0 <cmd_output+0x18c>)
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7f1 fb96 	bl	8000220 <strcmp>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10e      	bne.n	800eb18 <cmd_output+0xd4>
    	{
    		shell_printf("output acc \r\n");
 800eafa:	4836      	ldr	r0, [pc, #216]	@ (800ebd4 <cmd_output+0x190>)
 800eafc:	f000 fd64 	bl	800f5c8 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800eb00:	4b2e      	ldr	r3, [pc, #184]	@ (800ebbc <cmd_output+0x178>)
 800eb02:	2201      	movs	r2, #1
 800eb04:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    		imu_9.output_flag = 1;
 800eb08:	4b2c      	ldr	r3, [pc, #176]	@ (800ebbc <cmd_output+0x178>)
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
    		imu_9.output_mode = 3;
 800eb10:	4b2a      	ldr	r3, [pc, #168]	@ (800ebbc <cmd_output+0x178>)
 800eb12:	2203      	movs	r2, #3
 800eb14:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    	}

    	if(strcmp(*argv,"gyro")==0)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	492e      	ldr	r1, [pc, #184]	@ (800ebd8 <cmd_output+0x194>)
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7f1 fb7e 	bl	8000220 <strcmp>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10e      	bne.n	800eb48 <cmd_output+0x104>
    	{
    		shell_printf("output gyro \r\n");
 800eb2a:	482c      	ldr	r0, [pc, #176]	@ (800ebdc <cmd_output+0x198>)
 800eb2c:	f000 fd4c 	bl	800f5c8 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800eb30:	4b22      	ldr	r3, [pc, #136]	@ (800ebbc <cmd_output+0x178>)
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    		imu_9.output_flag = 1;
 800eb38:	4b20      	ldr	r3, [pc, #128]	@ (800ebbc <cmd_output+0x178>)
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
    		imu_9.output_mode = 4;
 800eb40:	4b1e      	ldr	r3, [pc, #120]	@ (800ebbc <cmd_output+0x178>)
 800eb42:	2204      	movs	r2, #4
 800eb44:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    	}

    	if(strcmp(*argv,"mag")==0)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4924      	ldr	r1, [pc, #144]	@ (800ebe0 <cmd_output+0x19c>)
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7f1 fb66 	bl	8000220 <strcmp>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10e      	bne.n	800eb78 <cmd_output+0x134>
    	{
    		shell_printf("output mag \r\n");
 800eb5a:	4822      	ldr	r0, [pc, #136]	@ (800ebe4 <cmd_output+0x1a0>)
 800eb5c:	f000 fd34 	bl	800f5c8 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800eb60:	4b16      	ldr	r3, [pc, #88]	@ (800ebbc <cmd_output+0x178>)
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    		imu_9.output_flag = 1;
 800eb68:	4b14      	ldr	r3, [pc, #80]	@ (800ebbc <cmd_output+0x178>)
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
    		imu_9.output_mode = 5;
 800eb70:	4b12      	ldr	r3, [pc, #72]	@ (800ebbc <cmd_output+0x178>)
 800eb72:	2205      	movs	r2, #5
 800eb74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    	}

    	if(strcmp(*argv,"acc_gyro_mag")==0)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	491a      	ldr	r1, [pc, #104]	@ (800ebe8 <cmd_output+0x1a4>)
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7f1 fb4e 	bl	8000220 <strcmp>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d10e      	bne.n	800eba8 <cmd_output+0x164>
    	{
    		shell_printf("output acc_gyro_mag \r\n");
 800eb8a:	4818      	ldr	r0, [pc, #96]	@ (800ebec <cmd_output+0x1a8>)
 800eb8c:	f000 fd1c 	bl	800f5c8 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800eb90:	4b0a      	ldr	r3, [pc, #40]	@ (800ebbc <cmd_output+0x178>)
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    		imu_9.output_flag = 1;
 800eb98:	4b08      	ldr	r3, [pc, #32]	@ (800ebbc <cmd_output+0x178>)
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
    		imu_9.output_mode = 6;
 800eba0:	4b06      	ldr	r3, [pc, #24]	@ (800ebbc <cmd_output+0x178>)
 800eba2:	2206      	movs	r2, #6
 800eba4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    	}
    }

    return 0; // 返回执行结果，根据需要进行修改
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	08014490 	.word	0x08014490
 800ebb8:	08014498 	.word	0x08014498
 800ebbc:	20002164 	.word	0x20002164
 800ebc0:	080144a8 	.word	0x080144a8
 800ebc4:	080144b4 	.word	0x080144b4
 800ebc8:	080144cc 	.word	0x080144cc
 800ebcc:	080144d4 	.word	0x080144d4
 800ebd0:	080144e8 	.word	0x080144e8
 800ebd4:	080144ec 	.word	0x080144ec
 800ebd8:	080144fc 	.word	0x080144fc
 800ebdc:	08014504 	.word	0x08014504
 800ebe0:	08014480 	.word	0x08014480
 800ebe4:	08014514 	.word	0x08014514
 800ebe8:	08014524 	.word	0x08014524
 800ebec:	08014534 	.word	0x08014534

0800ebf0 <cmd_modify_freq>:
    return 0; // 返回执行结果，根据需要进行修改
}


int cmd_modify_freq(void *context, int argc, char **argv)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]

	if (argc >= 1)
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	dd09      	ble.n	800ec16 <cmd_modify_freq+0x26>
	{
		imu_9.output_freq = atoi(argv[0]);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f000 fd36 	bl	800f678 <atoi>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	4b03      	ldr	r3, [pc, #12]	@ (800ec20 <cmd_modify_freq+0x30>)
 800ec12:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

	}

}
 800ec16:	bf00      	nop
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20002164 	.word	0x20002164

0800ec24 <user_shell_init>:
    .tbl = (console_cmds_t *)cmds,
    .prompt = 0,
    .head = {0}};

void user_shell_init(void)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
    char addr_str[10] = {0};
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	603b      	str	r3, [r7, #0]
 800ec2e:	1d3b      	adds	r3, r7, #4
 800ec30:	2200      	movs	r2, #0
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	809a      	strh	r2, [r3, #4]

    strcpy(console_parm.head, addr_str);
 800ec36:	463b      	mov	r3, r7
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4812      	ldr	r0, [pc, #72]	@ (800ec84 <user_shell_init+0x60>)
 800ec3c:	f001 fe61 	bl	8010902 <strcpy>

    console_driver_init(&console_parm);
 800ec40:	4811      	ldr	r0, [pc, #68]	@ (800ec88 <user_shell_init+0x64>)
 800ec42:	f7ff fe67 	bl	800e914 <console_driver_init>
    for (int i = 1; i < sizeof(cmds) / (sizeof(console_cmds_t)); i++) // 链表初始化
 800ec46:	2301      	movs	r3, #1
 800ec48:	60fb      	str	r3, [r7, #12]
 800ec4a:	e013      	b.n	800ec74 <user_shell_init+0x50>
    {
        cmds[i - 1].argv1_tbl = &cmds[i];
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	1e5a      	subs	r2, r3, #1
 800ec50:	68f9      	ldr	r1, [r7, #12]
 800ec52:	460b      	mov	r3, r1
 800ec54:	005b      	lsls	r3, r3, #1
 800ec56:	440b      	add	r3, r1
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	490c      	ldr	r1, [pc, #48]	@ (800ec8c <user_shell_init+0x68>)
 800ec5c:	4419      	add	r1, r3
 800ec5e:	480b      	ldr	r0, [pc, #44]	@ (800ec8c <user_shell_init+0x68>)
 800ec60:	4613      	mov	r3, r2
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	4413      	add	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4403      	add	r3, r0
 800ec6a:	3308      	adds	r3, #8
 800ec6c:	6019      	str	r1, [r3, #0]
    for (int i = 1; i < sizeof(cmds) / (sizeof(console_cmds_t)); i++) // 链表初始化
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	3301      	adds	r3, #1
 800ec72:	60fb      	str	r3, [r7, #12]
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b04      	cmp	r3, #4
 800ec78:	d9e8      	bls.n	800ec4c <user_shell_init+0x28>
    }
}
 800ec7a:	bf00      	nop
 800ec7c:	bf00      	nop
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	2000022c 	.word	0x2000022c
 800ec88:	2000021c 	.word	0x2000021c
 800ec8c:	200001e0 	.word	0x200001e0

0800ec90 <user_shell_recive_bytes>:
int user_shell_recive_bytes(uint8_t *data, int len)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	60fb      	str	r3, [r7, #12]
    ret = shell_console_hande(data, len);
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	4619      	mov	r1, r3
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7ff fe1d 	bl	800e8e4 <shell_console_hande>
 800ecaa:	60f8      	str	r0, [r7, #12]

    return ret;
 800ecac:	68fb      	ldr	r3, [r7, #12]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <window_filter>:
 * @param window_Array
 * @param i
 * @param sliding_Window_Length
 */
int16_t window_filter(int16_t data, int16_t *buf, uint8_t len)
{
 800ecb6:	b480      	push	{r7}
 800ecb8:	b085      	sub	sp, #20
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	6039      	str	r1, [r7, #0]
 800ecc0:	80fb      	strh	r3, [r7, #6]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	int32_t sum = 0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	60bb      	str	r3, [r7, #8]

	for (i = 1; i < len; i++)
 800ecca:	2301      	movs	r3, #1
 800eccc:	73fb      	strb	r3, [r7, #15]
 800ecce:	e010      	b.n	800ecf2 <window_filter+0x3c>
	{
		buf[i - 1] = buf[i];
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
 800ecd2:	005b      	lsls	r3, r3, #1
 800ecd4:	683a      	ldr	r2, [r7, #0]
 800ecd6:	441a      	add	r2, r3
 800ecd8:	7bfb      	ldrb	r3, [r7, #15]
 800ecda:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ecde:	3b01      	subs	r3, #1
 800ece0:	005b      	lsls	r3, r3, #1
 800ece2:	6839      	ldr	r1, [r7, #0]
 800ece4:	440b      	add	r3, r1
 800ece6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ecea:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < len; i++)
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	73fb      	strb	r3, [r7, #15]
 800ecf2:	7bfa      	ldrb	r2, [r7, #15]
 800ecf4:	797b      	ldrb	r3, [r7, #5]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d3ea      	bcc.n	800ecd0 <window_filter+0x1a>
	}
	buf[len - 1] = data;
 800ecfa:	797b      	ldrb	r3, [r7, #5]
 800ecfc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ed00:	3b01      	subs	r3, #1
 800ed02:	005b      	lsls	r3, r3, #1
 800ed04:	683a      	ldr	r2, [r7, #0]
 800ed06:	4413      	add	r3, r2
 800ed08:	88fa      	ldrh	r2, [r7, #6]
 800ed0a:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < len; i++)
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	73fb      	strb	r3, [r7, #15]
 800ed10:	e00c      	b.n	800ed2c <window_filter+0x76>
	{
		sum += buf[i];
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
 800ed14:	005b      	lsls	r3, r3, #1
 800ed16:	683a      	ldr	r2, [r7, #0]
 800ed18:	4413      	add	r3, r2
 800ed1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	4413      	add	r3, r2
 800ed24:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < len; i++)
 800ed26:	7bfb      	ldrb	r3, [r7, #15]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	73fb      	strb	r3, [r7, #15]
 800ed2c:	7bfa      	ldrb	r2, [r7, #15]
 800ed2e:	797b      	ldrb	r3, [r7, #5]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d3ee      	bcc.n	800ed12 <window_filter+0x5c>
	}

	sum /= len;
 800ed34:	797b      	ldrb	r3, [r7, #5]
 800ed36:	68ba      	ldr	r2, [r7, #8]
 800ed38:	fb92 f3f3 	sdiv	r3, r2, r3
 800ed3c:	60bb      	str	r3, [r7, #8]

	return sum;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	b21b      	sxth	r3, r3
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3714      	adds	r7, #20
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
	...

0800ed50 <read_flash_information>:
int16_t window_my[WIN_NUM];
int16_t window_mz[WIN_NUM];


void read_flash_information(void)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0

	int16_t xsf_read_buf,ysf_read_buf;
	float Xsf_temp = 1.0f;
 800ed56:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800ed5a:	60fb      	str	r3, [r7, #12]
	float Ysf_temp = 1.0f;
 800ed5c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800ed60:	60bb      	str	r3, [r7, #8]

	STMFLASH_Read(ACC_ZERO_ADDR,(uint8_t*)&imu_9.acc_zero,6); //读取加速度零点
 800ed62:	2206      	movs	r2, #6
 800ed64:	495a      	ldr	r1, [pc, #360]	@ (800eed0 <read_flash_information+0x180>)
 800ed66:	485b      	ldr	r0, [pc, #364]	@ (800eed4 <read_flash_information+0x184>)
 800ed68:	f7ff fc74 	bl	800e654 <STMFLASH_Read>
	STMFLASH_Read(GYRO_ZERO_ADDR,(uint8_t*)&imu_9.gyro_zero,6); //读取陀螺仪零点
 800ed6c:	2206      	movs	r2, #6
 800ed6e:	495a      	ldr	r1, [pc, #360]	@ (800eed8 <read_flash_information+0x188>)
 800ed70:	485a      	ldr	r0, [pc, #360]	@ (800eedc <read_flash_information+0x18c>)
 800ed72:	f7ff fc6f 	bl	800e654 <STMFLASH_Read>
	STMFLASH_Read(MAG_ZERO_ADDR,(uint8_t*)&imu_9.mag_zero,6);  //读取磁力计零点
 800ed76:	2206      	movs	r2, #6
 800ed78:	4959      	ldr	r1, [pc, #356]	@ (800eee0 <read_flash_information+0x190>)
 800ed7a:	485a      	ldr	r0, [pc, #360]	@ (800eee4 <read_flash_information+0x194>)
 800ed7c:	f7ff fc6a 	bl	800e654 <STMFLASH_Read>
	STMFLASH_Read(MAG_OFFSET_XSF_ADDR,(uint8_t*)&xsf_read_buf,2);  //
 800ed80:	1dbb      	adds	r3, r7, #6
 800ed82:	2202      	movs	r2, #2
 800ed84:	4619      	mov	r1, r3
 800ed86:	4858      	ldr	r0, [pc, #352]	@ (800eee8 <read_flash_information+0x198>)
 800ed88:	f7ff fc64 	bl	800e654 <STMFLASH_Read>
	STMFLASH_Read(MAG_OFFSET_YSF_ADDR,(uint8_t*)&ysf_read_buf,2);  //
 800ed8c:	1d3b      	adds	r3, r7, #4
 800ed8e:	2202      	movs	r2, #2
 800ed90:	4619      	mov	r1, r3
 800ed92:	4856      	ldr	r0, [pc, #344]	@ (800eeec <read_flash_information+0x19c>)
 800ed94:	f7ff fc5e 	bl	800e654 <STMFLASH_Read>

    if(imu_9.acc_zero[0]==-1) //默认0点是0
 800ed98:	4b55      	ldr	r3, [pc, #340]	@ (800eef0 <read_flash_information+0x1a0>)
 800ed9a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800ed9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda2:	d103      	bne.n	800edac <read_flash_information+0x5c>
    {
    	imu_9.acc_zero[0] = 0;
 800eda4:	4b52      	ldr	r3, [pc, #328]	@ (800eef0 <read_flash_information+0x1a0>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    }
    if(imu_9.acc_zero[1]==-1)
 800edac:	4b50      	ldr	r3, [pc, #320]	@ (800eef0 <read_flash_information+0x1a0>)
 800edae:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800edb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb6:	d103      	bne.n	800edc0 <read_flash_information+0x70>
    {
    	imu_9.acc_zero[1] = 0;
 800edb8:	4b4d      	ldr	r3, [pc, #308]	@ (800eef0 <read_flash_information+0x1a0>)
 800edba:	2200      	movs	r2, #0
 800edbc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    }
    if(imu_9.acc_zero[2]==-1)
 800edc0:	4b4b      	ldr	r3, [pc, #300]	@ (800eef0 <read_flash_information+0x1a0>)
 800edc2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 800edc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edca:	d103      	bne.n	800edd4 <read_flash_information+0x84>
    {
    	imu_9.acc_zero[2] = 0;
 800edcc:	4b48      	ldr	r3, [pc, #288]	@ (800eef0 <read_flash_information+0x1a0>)
 800edce:	2200      	movs	r2, #0
 800edd0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    if(imu_9.gyro_zero[0]==-1)
 800edd4:	4b46      	ldr	r3, [pc, #280]	@ (800eef0 <read_flash_information+0x1a0>)
 800edd6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800edda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edde:	d103      	bne.n	800ede8 <read_flash_information+0x98>
    {
    	imu_9.gyro_zero[0] = 0;
 800ede0:	4b43      	ldr	r3, [pc, #268]	@ (800eef0 <read_flash_information+0x1a0>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    }
    if(imu_9.gyro_zero[1]==-1)
 800ede8:	4b41      	ldr	r3, [pc, #260]	@ (800eef0 <read_flash_information+0x1a0>)
 800edea:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 800edee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf2:	d103      	bne.n	800edfc <read_flash_information+0xac>
    {
    	imu_9.gyro_zero[1] = 0;
 800edf4:	4b3e      	ldr	r3, [pc, #248]	@ (800eef0 <read_flash_information+0x1a0>)
 800edf6:	2200      	movs	r2, #0
 800edf8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    }
    if(imu_9.gyro_zero[2]==-1)
 800edfc:	4b3c      	ldr	r3, [pc, #240]	@ (800eef0 <read_flash_information+0x1a0>)
 800edfe:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800ee02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee06:	d103      	bne.n	800ee10 <read_flash_information+0xc0>
    {
    	imu_9.acc_zero[2] = 0;
 800ee08:	4b39      	ldr	r3, [pc, #228]	@ (800eef0 <read_flash_information+0x1a0>)
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    if(imu_9.mag_zero[0]==-1)
 800ee10:	4b37      	ldr	r3, [pc, #220]	@ (800eef0 <read_flash_information+0x1a0>)
 800ee12:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800ee16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee1a:	d103      	bne.n	800ee24 <read_flash_information+0xd4>
    {
    	imu_9.mag_zero[0] = 0;
 800ee1c:	4b34      	ldr	r3, [pc, #208]	@ (800eef0 <read_flash_information+0x1a0>)
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    }
    if(imu_9.mag_zero[1]==-1)
 800ee24:	4b32      	ldr	r3, [pc, #200]	@ (800eef0 <read_flash_information+0x1a0>)
 800ee26:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 800ee2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2e:	d103      	bne.n	800ee38 <read_flash_information+0xe8>
    {
    	imu_9.mag_zero[1] = 0;
 800ee30:	4b2f      	ldr	r3, [pc, #188]	@ (800eef0 <read_flash_information+0x1a0>)
 800ee32:	2200      	movs	r2, #0
 800ee34:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    }
    if(imu_9.mag_zero[2]==-1)
 800ee38:	4b2d      	ldr	r3, [pc, #180]	@ (800eef0 <read_flash_information+0x1a0>)
 800ee3a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800ee3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee42:	d103      	bne.n	800ee4c <read_flash_information+0xfc>
    {
    	imu_9.mag_zero[2] = 0;
 800ee44:	4b2a      	ldr	r3, [pc, #168]	@ (800eef0 <read_flash_information+0x1a0>)
 800ee46:	2200      	movs	r2, #0
 800ee48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    }

    Xsf_temp = xsf_read_buf;
 800ee4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee50:	ee07 3a90 	vmov	s15, r3
 800ee54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee58:	edc7 7a03 	vstr	s15, [r7, #12]
    Ysf_temp = ysf_read_buf;
 800ee5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ee60:	ee07 3a90 	vmov	s15, r3
 800ee64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee68:	edc7 7a02 	vstr	s15, [r7, #8]

    if(xsf_read_buf==-1)
 800ee6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee74:	d101      	bne.n	800ee7a <read_flash_information+0x12a>
    {
    	Xsf_temp = 1000.0f;
 800ee76:	4b1f      	ldr	r3, [pc, #124]	@ (800eef4 <read_flash_information+0x1a4>)
 800ee78:	60fb      	str	r3, [r7, #12]
    }
    if(ysf_read_buf==-1)
 800ee7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ee7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee82:	d101      	bne.n	800ee88 <read_flash_information+0x138>
    {
    	Ysf_temp = 1000.0f;
 800ee84:	4b1b      	ldr	r3, [pc, #108]	@ (800eef4 <read_flash_information+0x1a4>)
 800ee86:	60bb      	str	r3, [r7, #8]
    }



    imu_9.mag_xsf = Xsf_temp/1000.0f; //读取磁力计校准系数
 800ee88:	ed97 7a03 	vldr	s14, [r7, #12]
 800ee8c:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800eef8 <read_flash_information+0x1a8>
 800ee90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee94:	4b16      	ldr	r3, [pc, #88]	@ (800eef0 <read_flash_information+0x1a0>)
 800ee96:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
   	imu_9.mag_ysf = Ysf_temp/1000.0f;
 800ee9a:	ed97 7a02 	vldr	s14, [r7, #8]
 800ee9e:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800eef8 <read_flash_information+0x1a8>
 800eea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eea6:	4b12      	ldr	r3, [pc, #72]	@ (800eef0 <read_flash_information+0x1a0>)
 800eea8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    STMFLASH_Read(OUTPUT_ADDR,(uint8_t*)&imu_9.output_mode,1); //读取数据输出模式
 800eeac:	2201      	movs	r2, #1
 800eeae:	4913      	ldr	r1, [pc, #76]	@ (800eefc <read_flash_information+0x1ac>)
 800eeb0:	4813      	ldr	r0, [pc, #76]	@ (800ef00 <read_flash_information+0x1b0>)
 800eeb2:	f7ff fbcf 	bl	800e654 <STMFLASH_Read>
    if(imu_9.output_mode==0xFF)
 800eeb6:	4b0e      	ldr	r3, [pc, #56]	@ (800eef0 <read_flash_information+0x1a0>)
 800eeb8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800eebc:	2bff      	cmp	r3, #255	@ 0xff
 800eebe:	d103      	bne.n	800eec8 <read_flash_information+0x178>
    {
    	imu_9.output_mode = 0; //默认欧拉角输出
 800eec0:	4b0b      	ldr	r3, [pc, #44]	@ (800eef0 <read_flash_information+0x1a0>)
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    }

}
 800eec8:	bf00      	nop
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	200021aa 	.word	0x200021aa
 800eed4:	0801f800 	.word	0x0801f800
 800eed8:	200021a4 	.word	0x200021a4
 800eedc:	0801f806 	.word	0x0801f806
 800eee0:	200021b0 	.word	0x200021b0
 800eee4:	0801f80c 	.word	0x0801f80c
 800eee8:	0801f814 	.word	0x0801f814
 800eeec:	0801f816 	.word	0x0801f816
 800eef0:	20002164 	.word	0x20002164
 800eef4:	447a0000 	.word	0x447a0000
 800eef8:	447a0000 	.word	0x447a0000
 800eefc:	200021ed 	.word	0x200021ed
 800ef00:	0801f812 	.word	0x0801f812

0800ef04 <imu_init>:


void imu_init(void)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
	uint8_t test_id_ag = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	71fb      	strb	r3, [r7, #7]
	uint8_t test_id_mag = 0;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	71bb      	strb	r3, [r7, #6]

	test_id_ag = acc_gyro_init();
 800ef12:	f7fd fb89 	bl	800c628 <acc_gyro_init>
 800ef16:	4603      	mov	r3, r0
 800ef18:	71fb      	strb	r3, [r7, #7]
    test_id_mag = mag_init();
 800ef1a:	f7fd fcf9 	bl	800c910 <mag_init>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	71bb      	strb	r3, [r7, #6]

    read_flash_information();
 800ef22:	f7ff ff15 	bl	800ed50 <read_flash_information>
    init_attitude(&attitude);
 800ef26:	4808      	ldr	r0, [pc, #32]	@ (800ef48 <imu_init+0x44>)
 800ef28:	f7fd fea0 	bl	800cc6c <init_attitude>
    imu_9.output_freq = 1;
 800ef2c:	4b07      	ldr	r3, [pc, #28]	@ (800ef4c <imu_init+0x48>)
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
    HAL_Delay(100);
 800ef34:	2064      	movs	r0, #100	@ 0x64
 800ef36:	f7f2 fdb5 	bl	8001aa4 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim2);
 800ef3a:	4805      	ldr	r0, [pc, #20]	@ (800ef50 <imu_init+0x4c>)
 800ef3c:	f7f6 ff52 	bl	8005de4 <HAL_TIM_Base_Start_IT>
}
 800ef40:	bf00      	nop
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	2000179c 	.word	0x2000179c
 800ef4c:	20002164 	.word	0x20002164
 800ef50:	200004d0 	.word	0x200004d0

0800ef54 <imu_sample_data>:


void imu_sample_data(void)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	af00      	add	r7, sp, #0
	acc_gyro_sample_data(imu_9.i_gyro,imu_9.i_acc);
 800ef58:	4904      	ldr	r1, [pc, #16]	@ (800ef6c <imu_sample_data+0x18>)
 800ef5a:	4805      	ldr	r0, [pc, #20]	@ (800ef70 <imu_sample_data+0x1c>)
 800ef5c:	f7fd fba2 	bl	800c6a4 <acc_gyro_sample_data>
	mag_sample_data(imu_9.i_mag);
 800ef60:	4804      	ldr	r0, [pc, #16]	@ (800ef74 <imu_sample_data+0x20>)
 800ef62:	f7fd fca5 	bl	800c8b0 <mag_sample_data>

//    usb_printf("gyro_x=%d , gyro_y=%d,gyro_z=%d\r\n",imu_9.i_gyro[0],imu_9.i_gyro[1],imu_9.i_gyro[2]);
//    usb_printf("acc_x=%d , acc_y=%d,acc_z=%d\r\n",imu_9.i_acc[0],imu_9.i_acc[1],imu_9.i_acc[2]);
//    usb_printf("mag_x=%d , mag_y=%d,mag_z=%d\r\n",imu_9.i_mag[0],imu_9.i_mag[1],imu_9.i_mag[2]);
//	usb_printf("\r\n");
}
 800ef66:	bf00      	nop
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	2000216a 	.word	0x2000216a
 800ef70:	20002164 	.word	0x20002164
 800ef74:	20002170 	.word	0x20002170

0800ef78 <imu_data_transition>:

//将九轴数据转换为实际物理数据
void imu_data_transition(int16_t ax,int16_t ay,int16_t az,int16_t gx,int16_t gy,int16_t gz,int16_t mx,int16_t my,int16_t mz)
{
 800ef78:	b490      	push	{r4, r7}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4604      	mov	r4, r0
 800ef80:	4608      	mov	r0, r1
 800ef82:	4611      	mov	r1, r2
 800ef84:	461a      	mov	r2, r3
 800ef86:	4623      	mov	r3, r4
 800ef88:	80fb      	strh	r3, [r7, #6]
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	80bb      	strh	r3, [r7, #4]
 800ef8e:	460b      	mov	r3, r1
 800ef90:	807b      	strh	r3, [r7, #2]
 800ef92:	4613      	mov	r3, r2
 800ef94:	803b      	strh	r3, [r7, #0]

	imu_9.f_acc[0] = (float)(ax-imu_9.acc_zero[0])/ 16393.0f;  // 加速度量程为:±2G      获取到的加速度计数据 除以 16393 ，可以转化为带物理单位的数据，单位：g(m/s^2)
 800ef96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef9a:	4a58      	ldr	r2, [pc, #352]	@ (800f0fc <imu_data_transition+0x184>)
 800ef9c:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	@ 0x46
 800efa0:	1a9b      	subs	r3, r3, r2
 800efa2:	ee07 3a90 	vmov	s15, r3
 800efa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800efaa:	eddf 6a55 	vldr	s13, [pc, #340]	@ 800f100 <imu_data_transition+0x188>
 800efae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800efb2:	4b52      	ldr	r3, [pc, #328]	@ (800f0fc <imu_data_transition+0x184>)
 800efb4:	edc3 7a08 	vstr	s15, [r3, #32]
	imu_9.f_acc[1] = (float)(ay-imu_9.acc_zero[1]) / 16393.0f;
 800efb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800efbc:	4a4f      	ldr	r2, [pc, #316]	@ (800f0fc <imu_data_transition+0x184>)
 800efbe:	f9b2 2048 	ldrsh.w	r2, [r2, #72]	@ 0x48
 800efc2:	1a9b      	subs	r3, r3, r2
 800efc4:	ee07 3a90 	vmov	s15, r3
 800efc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800efcc:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 800f100 <imu_data_transition+0x188>
 800efd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800efd4:	4b49      	ldr	r3, [pc, #292]	@ (800f0fc <imu_data_transition+0x184>)
 800efd6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	imu_9.f_acc[2] = (float)(az-imu_9.acc_zero[2]) / 16393.0f;
 800efda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800efde:	4a47      	ldr	r2, [pc, #284]	@ (800f0fc <imu_data_transition+0x184>)
 800efe0:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	@ 0x4a
 800efe4:	1a9b      	subs	r3, r3, r2
 800efe6:	ee07 3a90 	vmov	s15, r3
 800efea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800efee:	eddf 6a44 	vldr	s13, [pc, #272]	@ 800f100 <imu_data_transition+0x188>
 800eff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eff6:	4b41      	ldr	r3, [pc, #260]	@ (800f0fc <imu_data_transition+0x184>)
 800eff8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	imu_9.f_gyro[0] = (float)(gx-imu_9.gyro_zero[0]) / 57.1f; //  陀螺仪量程为:±500dps  获取到的陀螺仪数据除以 57.1，    可以转化为带物理单位的数据，单位为：°/s
 800effc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f000:	4a3e      	ldr	r2, [pc, #248]	@ (800f0fc <imu_data_transition+0x184>)
 800f002:	f9b2 2040 	ldrsh.w	r2, [r2, #64]	@ 0x40
 800f006:	1a9b      	subs	r3, r3, r2
 800f008:	ee07 3a90 	vmov	s15, r3
 800f00c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f010:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800f104 <imu_data_transition+0x18c>
 800f014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f018:	4b38      	ldr	r3, [pc, #224]	@ (800f0fc <imu_data_transition+0x184>)
 800f01a:	edc3 7a05 	vstr	s15, [r3, #20]
	imu_9.f_gyro[1] = (float)(gy-imu_9.gyro_zero[1]) / 57.1f;
 800f01e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f022:	4a36      	ldr	r2, [pc, #216]	@ (800f0fc <imu_data_transition+0x184>)
 800f024:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	@ 0x42
 800f028:	1a9b      	subs	r3, r3, r2
 800f02a:	ee07 3a90 	vmov	s15, r3
 800f02e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f032:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800f104 <imu_data_transition+0x18c>
 800f036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f03a:	4b30      	ldr	r3, [pc, #192]	@ (800f0fc <imu_data_transition+0x184>)
 800f03c:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_9.f_gyro[2] = (float)(gz-imu_9.gyro_zero[2]) / 57.1f;
 800f040:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f044:	4a2d      	ldr	r2, [pc, #180]	@ (800f0fc <imu_data_transition+0x184>)
 800f046:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	@ 0x44
 800f04a:	1a9b      	subs	r3, r3, r2
 800f04c:	ee07 3a90 	vmov	s15, r3
 800f050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f054:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800f104 <imu_data_transition+0x18c>
 800f058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f05c:	4b27      	ldr	r3, [pc, #156]	@ (800f0fc <imu_data_transition+0x184>)
 800f05e:	edc3 7a07 	vstr	s15, [r3, #28]

	imu_9.f_mag[0] = (float)(imu_9.mag_xsf*mx+imu_9.mag_zero[0]) * 1.5f;
 800f062:	4b26      	ldr	r3, [pc, #152]	@ (800f0fc <imu_data_transition+0x184>)
 800f064:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800f068:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800f06c:	ee07 3a90 	vmov	s15, r3
 800f070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f074:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f078:	4b20      	ldr	r3, [pc, #128]	@ (800f0fc <imu_data_transition+0x184>)
 800f07a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800f07e:	ee07 3a90 	vmov	s15, r3
 800f082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f08a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f08e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f092:	4b1a      	ldr	r3, [pc, #104]	@ (800f0fc <imu_data_transition+0x184>)
 800f094:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	imu_9.f_mag[1] = (float)(imu_9.mag_ysf*my+imu_9.mag_zero[1]) * 1.5f;
 800f098:	4b18      	ldr	r3, [pc, #96]	@ (800f0fc <imu_data_transition+0x184>)
 800f09a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800f09e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f0a2:	ee07 3a90 	vmov	s15, r3
 800f0a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0ae:	4b13      	ldr	r3, [pc, #76]	@ (800f0fc <imu_data_transition+0x184>)
 800f0b0:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 800f0b4:	ee07 3a90 	vmov	s15, r3
 800f0b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0c0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f0c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0c8:	4b0c      	ldr	r3, [pc, #48]	@ (800f0fc <imu_data_transition+0x184>)
 800f0ca:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	imu_9.f_mag[2] = (float)(mz+imu_9.mag_zero[2]) * 1.5f;
 800f0ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f0d2:	4a0a      	ldr	r2, [pc, #40]	@ (800f0fc <imu_data_transition+0x184>)
 800f0d4:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	@ 0x50
 800f0d8:	4413      	add	r3, r2
 800f0da:	ee07 3a90 	vmov	s15, r3
 800f0de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0e2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f0e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0ea:	4b04      	ldr	r3, [pc, #16]	@ (800f0fc <imu_data_transition+0x184>)
 800f0ec:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34



}
 800f0f0:	bf00      	nop
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bc90      	pop	{r4, r7}
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop
 800f0fc:	20002164 	.word	0x20002164
 800f100:	46801200 	.word	0x46801200
 800f104:	42646666 	.word	0x42646666

0800f108 <imu_final_data_get>:

void imu_final_data_get(void)
{
 800f108:	b590      	push	{r4, r7, lr}
 800f10a:	b08d      	sub	sp, #52	@ 0x34
 800f10c:	af06      	add	r7, sp, #24
	int16_t filter_ax ,filter_ay,filter_az ;
	int16_t filter_gx ,filter_gy,filter_gz ;
	int16_t filter_mx ,filter_my,filter_mz ;

	  imu_sample_data(); //采样得到九轴原始数据
 800f10e:	f7ff ff21 	bl	800ef54 <imu_sample_data>
	  //原始数据窗口滤波
	  filter_ax = window_filter(imu_9.i_acc[0],window_ax,WIN_NUM);
 800f112:	4b3c      	ldr	r3, [pc, #240]	@ (800f204 <imu_final_data_get+0xfc>)
 800f114:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f118:	2205      	movs	r2, #5
 800f11a:	493b      	ldr	r1, [pc, #236]	@ (800f208 <imu_final_data_get+0x100>)
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7ff fdca 	bl	800ecb6 <window_filter>
 800f122:	4603      	mov	r3, r0
 800f124:	82fb      	strh	r3, [r7, #22]
	  filter_ay = window_filter(imu_9.i_acc[1],window_ay,WIN_NUM);
 800f126:	4b37      	ldr	r3, [pc, #220]	@ (800f204 <imu_final_data_get+0xfc>)
 800f128:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f12c:	2205      	movs	r2, #5
 800f12e:	4937      	ldr	r1, [pc, #220]	@ (800f20c <imu_final_data_get+0x104>)
 800f130:	4618      	mov	r0, r3
 800f132:	f7ff fdc0 	bl	800ecb6 <window_filter>
 800f136:	4603      	mov	r3, r0
 800f138:	82bb      	strh	r3, [r7, #20]
	  filter_az = window_filter(imu_9.i_acc[2],window_az,WIN_NUM);
 800f13a:	4b32      	ldr	r3, [pc, #200]	@ (800f204 <imu_final_data_get+0xfc>)
 800f13c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f140:	2205      	movs	r2, #5
 800f142:	4933      	ldr	r1, [pc, #204]	@ (800f210 <imu_final_data_get+0x108>)
 800f144:	4618      	mov	r0, r3
 800f146:	f7ff fdb6 	bl	800ecb6 <window_filter>
 800f14a:	4603      	mov	r3, r0
 800f14c:	827b      	strh	r3, [r7, #18]

	  filter_gx = window_filter(imu_9.i_gyro[0],window_gx,WIN_NUM);
 800f14e:	4b2d      	ldr	r3, [pc, #180]	@ (800f204 <imu_final_data_get+0xfc>)
 800f150:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f154:	2205      	movs	r2, #5
 800f156:	492f      	ldr	r1, [pc, #188]	@ (800f214 <imu_final_data_get+0x10c>)
 800f158:	4618      	mov	r0, r3
 800f15a:	f7ff fdac 	bl	800ecb6 <window_filter>
 800f15e:	4603      	mov	r3, r0
 800f160:	823b      	strh	r3, [r7, #16]
	  filter_gy = window_filter(imu_9.i_gyro[1],window_gy,WIN_NUM);
 800f162:	4b28      	ldr	r3, [pc, #160]	@ (800f204 <imu_final_data_get+0xfc>)
 800f164:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f168:	2205      	movs	r2, #5
 800f16a:	492b      	ldr	r1, [pc, #172]	@ (800f218 <imu_final_data_get+0x110>)
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7ff fda2 	bl	800ecb6 <window_filter>
 800f172:	4603      	mov	r3, r0
 800f174:	81fb      	strh	r3, [r7, #14]
	  filter_gz = window_filter(imu_9.i_gyro[2],window_gz,WIN_NUM);
 800f176:	4b23      	ldr	r3, [pc, #140]	@ (800f204 <imu_final_data_get+0xfc>)
 800f178:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f17c:	2205      	movs	r2, #5
 800f17e:	4927      	ldr	r1, [pc, #156]	@ (800f21c <imu_final_data_get+0x114>)
 800f180:	4618      	mov	r0, r3
 800f182:	f7ff fd98 	bl	800ecb6 <window_filter>
 800f186:	4603      	mov	r3, r0
 800f188:	81bb      	strh	r3, [r7, #12]

	  filter_mx = window_filter(imu_9.i_mag[0],window_mx,WIN_NUM);
 800f18a:	4b1e      	ldr	r3, [pc, #120]	@ (800f204 <imu_final_data_get+0xfc>)
 800f18c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f190:	2205      	movs	r2, #5
 800f192:	4923      	ldr	r1, [pc, #140]	@ (800f220 <imu_final_data_get+0x118>)
 800f194:	4618      	mov	r0, r3
 800f196:	f7ff fd8e 	bl	800ecb6 <window_filter>
 800f19a:	4603      	mov	r3, r0
 800f19c:	817b      	strh	r3, [r7, #10]
	  filter_my = window_filter(imu_9.i_mag[1],window_my,WIN_NUM);
 800f19e:	4b19      	ldr	r3, [pc, #100]	@ (800f204 <imu_final_data_get+0xfc>)
 800f1a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f1a4:	2205      	movs	r2, #5
 800f1a6:	491f      	ldr	r1, [pc, #124]	@ (800f224 <imu_final_data_get+0x11c>)
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7ff fd84 	bl	800ecb6 <window_filter>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	813b      	strh	r3, [r7, #8]
	  filter_mz = window_filter(imu_9.i_mag[2],window_mz,WIN_NUM);
 800f1b2:	4b14      	ldr	r3, [pc, #80]	@ (800f204 <imu_final_data_get+0xfc>)
 800f1b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f1b8:	2205      	movs	r2, #5
 800f1ba:	491b      	ldr	r1, [pc, #108]	@ (800f228 <imu_final_data_get+0x120>)
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7ff fd7a 	bl	800ecb6 <window_filter>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	80fb      	strh	r3, [r7, #6]
	  //转换成实际物理量
	  imu_data_transition(filter_ax,filter_ay,filter_az,filter_gx,filter_gy,filter_gz,filter_mx,filter_my,filter_mz);
 800f1c6:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 800f1ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f1ce:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800f1d2:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800f1d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f1da:	9304      	str	r3, [sp, #16]
 800f1dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f1e0:	9303      	str	r3, [sp, #12]
 800f1e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f1e6:	9302      	str	r3, [sp, #8]
 800f1e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f1ec:	9301      	str	r3, [sp, #4]
 800f1ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	4623      	mov	r3, r4
 800f1f6:	f7ff febf 	bl	800ef78 <imu_data_transition>

}
 800f1fa:	bf00      	nop
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd90      	pop	{r4, r7, pc}
 800f202:	bf00      	nop
 800f204:	20002164 	.word	0x20002164
 800f208:	200021f8 	.word	0x200021f8
 800f20c:	20002204 	.word	0x20002204
 800f210:	20002210 	.word	0x20002210
 800f214:	2000221c 	.word	0x2000221c
 800f218:	20002228 	.word	0x20002228
 800f21c:	20002234 	.word	0x20002234
 800f220:	20002240 	.word	0x20002240
 800f224:	2000224c 	.word	0x2000224c
 800f228:	20002258 	.word	0x20002258

0800f22c <imu_9_shell_cmd_to_do>:


void imu_9_shell_cmd_to_do(void)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	af00      	add	r7, sp, #0
	if(imu_9.shell_cmd_ok==1)
 800f230:	4b1a      	ldr	r3, [pc, #104]	@ (800f29c <imu_9_shell_cmd_to_do+0x70>)
 800f232:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800f236:	2b01      	cmp	r3, #1
 800f238:	d12d      	bne.n	800f296 <imu_9_shell_cmd_to_do+0x6a>
	{
		imu_9.shell_cmd_ok = 0;
 800f23a:	4b18      	ldr	r3, [pc, #96]	@ (800f29c <imu_9_shell_cmd_to_do+0x70>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	    if(imu_9.cali_flag!=0)  //校准
 800f242:	4b16      	ldr	r3, [pc, #88]	@ (800f29c <imu_9_shell_cmd_to_do+0x70>)
 800f244:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d016      	beq.n	800f27a <imu_9_shell_cmd_to_do+0x4e>
	    {
	    	if(imu_9.cali_flag==1)
 800f24c:	4b13      	ldr	r3, [pc, #76]	@ (800f29c <imu_9_shell_cmd_to_do+0x70>)
 800f24e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f252:	2b01      	cmp	r3, #1
 800f254:	d106      	bne.n	800f264 <imu_9_shell_cmd_to_do+0x38>
	    	{
	    		set_acc_gyro_offset();
 800f256:	f7fd fa7d 	bl	800c754 <set_acc_gyro_offset>
	    		imu_9.cali_flag = 0;
 800f25a:	4b10      	ldr	r3, [pc, #64]	@ (800f29c <imu_9_shell_cmd_to_do+0x70>)
 800f25c:	2200      	movs	r2, #0
 800f25e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800f262:	e00a      	b.n	800f27a <imu_9_shell_cmd_to_do+0x4e>
	    	}
	    	else if(imu_9.cali_flag==2)
 800f264:	4b0d      	ldr	r3, [pc, #52]	@ (800f29c <imu_9_shell_cmd_to_do+0x70>)
 800f266:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d105      	bne.n	800f27a <imu_9_shell_cmd_to_do+0x4e>
	    	{
	    		mag_set_offset();
 800f26e:	f7fd fb97 	bl	800c9a0 <mag_set_offset>
	    		imu_9.cali_flag = 0;
 800f272:	4b0a      	ldr	r3, [pc, #40]	@ (800f29c <imu_9_shell_cmd_to_do+0x70>)
 800f274:	2200      	movs	r2, #0
 800f276:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	    	}
	    }
	    if(imu_9.output_flag!=0)  //数据输出
 800f27a:	4b08      	ldr	r3, [pc, #32]	@ (800f29c <imu_9_shell_cmd_to_do+0x70>)
 800f27c:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 800f280:	2b00      	cmp	r3, #0
 800f282:	d008      	beq.n	800f296 <imu_9_shell_cmd_to_do+0x6a>
	    {
	    	STMFLASH_Write(OUTPUT_ADDR,&imu_9.output_mode,1);
 800f284:	2201      	movs	r2, #1
 800f286:	4906      	ldr	r1, [pc, #24]	@ (800f2a0 <imu_9_shell_cmd_to_do+0x74>)
 800f288:	4806      	ldr	r0, [pc, #24]	@ (800f2a4 <imu_9_shell_cmd_to_do+0x78>)
 800f28a:	f7ff f955 	bl	800e538 <STMFLASH_Write>
	    	imu_9.output_flag = 0;
 800f28e:	4b03      	ldr	r3, [pc, #12]	@ (800f29c <imu_9_shell_cmd_to_do+0x70>)
 800f290:	2200      	movs	r2, #0
 800f292:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	    }

	}

}
 800f296:	bf00      	nop
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	20002164 	.word	0x20002164
 800f2a0:	200021ed 	.word	0x200021ed
 800f2a4:	0801f812 	.word	0x0801f812

0800f2a8 <data_output_mode>:

void data_output_mode(uint8_t mode)  //数据输出模式,vofa+查看曲线图形
{
 800f2a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2ac:	b09c      	sub	sp, #112	@ 0x70
 800f2ae:	af10      	add	r7, sp, #64	@ 0x40
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	switch(mode)
 800f2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2ba:	2b06      	cmp	r3, #6
 800f2bc:	f200 80f1 	bhi.w	800f4a2 <data_output_mode+0x1fa>
 800f2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800f2c8 <data_output_mode+0x20>)
 800f2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c6:	bf00      	nop
 800f2c8:	0800f2e5 	.word	0x0800f2e5
 800f2cc:	0800f313 	.word	0x0800f313
 800f2d0:	0800f341 	.word	0x0800f341
 800f2d4:	0800f371 	.word	0x0800f371
 800f2d8:	0800f399 	.word	0x0800f399
 800f2dc:	0800f3c1 	.word	0x0800f3c1
 800f2e0:	0800f3e9 	.word	0x0800f3e9
	{
	case 0:  //欧拉角输出
		vofa_FireWater_USB_output(attitude.data.rol, attitude.data.pitch, attitude.data.yaw,imu_9.mag_yaw_test);
 800f2e4:	4b72      	ldr	r3, [pc, #456]	@ (800f4b0 <data_output_mode+0x208>)
 800f2e6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800f2ea:	4b71      	ldr	r3, [pc, #452]	@ (800f4b0 <data_output_mode+0x208>)
 800f2ec:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800f2f0:	4b6f      	ldr	r3, [pc, #444]	@ (800f4b0 <data_output_mode+0x208>)
 800f2f2:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800f2f6:	4b6f      	ldr	r3, [pc, #444]	@ (800f4b4 <data_output_mode+0x20c>)
 800f2f8:	ed93 6a18 	vldr	s12, [r3, #96]	@ 0x60
 800f2fc:	eef0 1a46 	vmov.f32	s3, s12
 800f300:	eeb0 1a66 	vmov.f32	s2, s13
 800f304:	eef0 0a47 	vmov.f32	s1, s14
 800f308:	eeb0 0a67 	vmov.f32	s0, s15
 800f30c:	f000 f982 	bl	800f614 <vofa_FireWater_USB_output>
//		vofa_FireWater_output(attitude.data.rol, attitude.data.pitch, attitude.data.yaw);
		break;
 800f310:	e0c8      	b.n	800f4a4 <data_output_mode+0x1fc>
	case 1: //四元数输出
		vofa_FireWater_USB_output(attitude.process.quaternion[0],attitude.process.quaternion[1],attitude.process.quaternion[2],attitude.process.quaternion[3]);
 800f312:	4b67      	ldr	r3, [pc, #412]	@ (800f4b0 <data_output_mode+0x208>)
 800f314:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f318:	4b65      	ldr	r3, [pc, #404]	@ (800f4b0 <data_output_mode+0x208>)
 800f31a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800f31e:	4b64      	ldr	r3, [pc, #400]	@ (800f4b0 <data_output_mode+0x208>)
 800f320:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800f324:	4b62      	ldr	r3, [pc, #392]	@ (800f4b0 <data_output_mode+0x208>)
 800f326:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800f32a:	eef0 1a46 	vmov.f32	s3, s12
 800f32e:	eeb0 1a66 	vmov.f32	s2, s13
 800f332:	eef0 0a47 	vmov.f32	s1, s14
 800f336:	eeb0 0a67 	vmov.f32	s0, s15
 800f33a:	f000 f96b 	bl	800f614 <vofa_FireWater_USB_output>

		break;
 800f33e:	e0b1      	b.n	800f4a4 <data_output_mode+0x1fc>
	case 2://线性加速度输出
		vofa_FireWater_USB_output(attitude.data.acc_correct.x,attitude.data.acc_correct.y,attitude.data.acc_correct.z-1000.0f,2.0f);
 800f340:	4b5b      	ldr	r3, [pc, #364]	@ (800f4b0 <data_output_mode+0x208>)
 800f342:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
 800f346:	4b5a      	ldr	r3, [pc, #360]	@ (800f4b0 <data_output_mode+0x208>)
 800f348:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 800f34c:	4b58      	ldr	r3, [pc, #352]	@ (800f4b0 <data_output_mode+0x208>)
 800f34e:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 800f352:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 800f4b8 <data_output_mode+0x210>
 800f356:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f35a:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 800f35e:	eeb0 1a67 	vmov.f32	s2, s15
 800f362:	eef0 0a66 	vmov.f32	s1, s13
 800f366:	eeb0 0a47 	vmov.f32	s0, s14
 800f36a:	f000 f953 	bl	800f614 <vofa_FireWater_USB_output>
		break;
 800f36e:	e099      	b.n	800f4a4 <data_output_mode+0x1fc>
	case 3://加速度 数据输出  单位：g(m/s^2)
		vofa_FireWater_USB_output(imu_9.f_acc[0],imu_9.f_acc[1],imu_9.f_acc[2],3.0f);
 800f370:	4b50      	ldr	r3, [pc, #320]	@ (800f4b4 <data_output_mode+0x20c>)
 800f372:	edd3 7a08 	vldr	s15, [r3, #32]
 800f376:	4b4f      	ldr	r3, [pc, #316]	@ (800f4b4 <data_output_mode+0x20c>)
 800f378:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800f37c:	4b4d      	ldr	r3, [pc, #308]	@ (800f4b4 <data_output_mode+0x20c>)
 800f37e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800f382:	eef0 1a08 	vmov.f32	s3, #8	@ 0x40400000  3.0
 800f386:	eeb0 1a66 	vmov.f32	s2, s13
 800f38a:	eef0 0a47 	vmov.f32	s1, s14
 800f38e:	eeb0 0a67 	vmov.f32	s0, s15
 800f392:	f000 f93f 	bl	800f614 <vofa_FireWater_USB_output>
		break;
 800f396:	e085      	b.n	800f4a4 <data_output_mode+0x1fc>
	case 4://陀螺仪数据输出  单位为：°/s
		vofa_FireWater_USB_output(imu_9.f_gyro[0],imu_9.f_gyro[1],imu_9.f_gyro[2],4.0f);
 800f398:	4b46      	ldr	r3, [pc, #280]	@ (800f4b4 <data_output_mode+0x20c>)
 800f39a:	edd3 7a05 	vldr	s15, [r3, #20]
 800f39e:	4b45      	ldr	r3, [pc, #276]	@ (800f4b4 <data_output_mode+0x20c>)
 800f3a0:	ed93 7a06 	vldr	s14, [r3, #24]
 800f3a4:	4b43      	ldr	r3, [pc, #268]	@ (800f4b4 <data_output_mode+0x20c>)
 800f3a6:	edd3 6a07 	vldr	s13, [r3, #28]
 800f3aa:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 800f3ae:	eeb0 1a66 	vmov.f32	s2, s13
 800f3b2:	eef0 0a47 	vmov.f32	s1, s14
 800f3b6:	eeb0 0a67 	vmov.f32	s0, s15
 800f3ba:	f000 f92b 	bl	800f614 <vofa_FireWater_USB_output>
		break;
 800f3be:	e071      	b.n	800f4a4 <data_output_mode+0x1fc>
	case 5://地磁数据输出
		vofa_FireWater_USB_output(imu_9.f_mag[0],imu_9.f_mag[1],imu_9.f_mag[2],5.0f);
 800f3c0:	4b3c      	ldr	r3, [pc, #240]	@ (800f4b4 <data_output_mode+0x20c>)
 800f3c2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f3c6:	4b3b      	ldr	r3, [pc, #236]	@ (800f4b4 <data_output_mode+0x20c>)
 800f3c8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800f3cc:	4b39      	ldr	r3, [pc, #228]	@ (800f4b4 <data_output_mode+0x20c>)
 800f3ce:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800f3d2:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 800f3d6:	eeb0 1a66 	vmov.f32	s2, s13
 800f3da:	eef0 0a47 	vmov.f32	s1, s14
 800f3de:	eeb0 0a67 	vmov.f32	s0, s15
 800f3e2:	f000 f917 	bl	800f614 <vofa_FireWater_USB_output>
		break;
 800f3e6:	e05d      	b.n	800f4a4 <data_output_mode+0x1fc>
	case 6://地磁数据输出
		usb_printf("simples:%f,%f,%f,%f,%f,%f,%f,%f,%f\n",imu_9.f_acc[0],imu_9.f_acc[1],imu_9.f_acc[2],imu_9.f_gyro[0],imu_9.f_gyro[1],imu_9.f_gyro[2],imu_9.f_mag[0],imu_9.f_mag[1],imu_9.f_mag[2]);
 800f3e8:	4b32      	ldr	r3, [pc, #200]	@ (800f4b4 <data_output_mode+0x20c>)
 800f3ea:	6a1b      	ldr	r3, [r3, #32]
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7f1 f8e3 	bl	80005b8 <__aeabi_f2d>
 800f3f2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800f3f6:	4b2f      	ldr	r3, [pc, #188]	@ (800f4b4 <data_output_mode+0x20c>)
 800f3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7f1 f8dc 	bl	80005b8 <__aeabi_f2d>
 800f400:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800f404:	4b2b      	ldr	r3, [pc, #172]	@ (800f4b4 <data_output_mode+0x20c>)
 800f406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f408:	4618      	mov	r0, r3
 800f40a:	f7f1 f8d5 	bl	80005b8 <__aeabi_f2d>
 800f40e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800f412:	4b28      	ldr	r3, [pc, #160]	@ (800f4b4 <data_output_mode+0x20c>)
 800f414:	695b      	ldr	r3, [r3, #20]
 800f416:	4618      	mov	r0, r3
 800f418:	f7f1 f8ce 	bl	80005b8 <__aeabi_f2d>
 800f41c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800f420:	4b24      	ldr	r3, [pc, #144]	@ (800f4b4 <data_output_mode+0x20c>)
 800f422:	699b      	ldr	r3, [r3, #24]
 800f424:	4618      	mov	r0, r3
 800f426:	f7f1 f8c7 	bl	80005b8 <__aeabi_f2d>
 800f42a:	e9c7 0100 	strd	r0, r1, [r7]
 800f42e:	4b21      	ldr	r3, [pc, #132]	@ (800f4b4 <data_output_mode+0x20c>)
 800f430:	69db      	ldr	r3, [r3, #28]
 800f432:	4618      	mov	r0, r3
 800f434:	f7f1 f8c0 	bl	80005b8 <__aeabi_f2d>
 800f438:	4682      	mov	sl, r0
 800f43a:	468b      	mov	fp, r1
 800f43c:	4b1d      	ldr	r3, [pc, #116]	@ (800f4b4 <data_output_mode+0x20c>)
 800f43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f440:	4618      	mov	r0, r3
 800f442:	f7f1 f8b9 	bl	80005b8 <__aeabi_f2d>
 800f446:	4680      	mov	r8, r0
 800f448:	4689      	mov	r9, r1
 800f44a:	4b1a      	ldr	r3, [pc, #104]	@ (800f4b4 <data_output_mode+0x20c>)
 800f44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f44e:	4618      	mov	r0, r3
 800f450:	f7f1 f8b2 	bl	80005b8 <__aeabi_f2d>
 800f454:	4604      	mov	r4, r0
 800f456:	460d      	mov	r5, r1
 800f458:	4b16      	ldr	r3, [pc, #88]	@ (800f4b4 <data_output_mode+0x20c>)
 800f45a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7f1 f8ab 	bl	80005b8 <__aeabi_f2d>
 800f462:	4602      	mov	r2, r0
 800f464:	460b      	mov	r3, r1
 800f466:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800f46a:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 800f46e:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 800f472:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f476:	ed97 7b00 	vldr	d7, [r7]
 800f47a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f47e:	ed97 7b02 	vldr	d7, [r7, #8]
 800f482:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f486:	ed97 7b04 	vldr	d7, [r7, #16]
 800f48a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f48e:	ed97 7b06 	vldr	d7, [r7, #24]
 800f492:	ed8d 7b00 	vstr	d7, [sp]
 800f496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f49a:	4808      	ldr	r0, [pc, #32]	@ (800f4bc <data_output_mode+0x214>)
 800f49c:	f000 f894 	bl	800f5c8 <usb_printf>
//		usb_printf("%f,%f,%f,%f,%f,%f,%f,%f,%f\n",imu_9.f_acc[0],imu_9.f_acc[1],imu_9.f_acc[2],imu_9.f_gyro[0],imu_9.f_gyro[1],imu_9.f_gyro[2],imu_9.f_mag[0],imu_9.f_mag[1],imu_9.f_mag[2]);

		break;
 800f4a0:	e000      	b.n	800f4a4 <data_output_mode+0x1fc>
	default:

		break;
 800f4a2:	bf00      	nop
	}

}
 800f4a4:	bf00      	nop
 800f4a6:	3730      	adds	r7, #48	@ 0x30
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4ae:	bf00      	nop
 800f4b0:	2000179c 	.word	0x2000179c
 800f4b4:	20002164 	.word	0x20002164
 800f4b8:	447a0000 	.word	0x447a0000
 800f4bc:	08014580 	.word	0x08014580

0800f4c0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f4c0:	b5b0      	push	{r4, r5, r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
	static uint16_t TimerCount = 0;
	float mag_yaw_test;
	if (htim == (&htim2))  //
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4a2f      	ldr	r2, [pc, #188]	@ (800f588 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d151      	bne.n	800f574 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		TimerCount++;
 800f4d0:	4b2e      	ldr	r3, [pc, #184]	@ (800f58c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800f4d2:	881b      	ldrh	r3, [r3, #0]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	4b2c      	ldr	r3, [pc, #176]	@ (800f58c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800f4da:	801a      	strh	r2, [r3, #0]
		if(TimerCount >= imu_9.output_freq)  //1ms采集一次传感器数据  1KHz
 800f4dc:	4b2c      	ldr	r3, [pc, #176]	@ (800f590 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800f4de:	f8b3 208c 	ldrh.w	r2, [r3, #140]	@ 0x8c
 800f4e2:	4b2a      	ldr	r3, [pc, #168]	@ (800f58c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800f4e4:	881b      	ldrh	r3, [r3, #0]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d844      	bhi.n	800f574 <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
			if(imu_9.cali_flag==0) //校准时不采集输出
 800f4ea:	4b29      	ldr	r3, [pc, #164]	@ (800f590 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800f4ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d13c      	bne.n	800f56e <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin); //测试引脚PA7，可使用示波器测量，确定采样时间是否准确
 800f4f4:	2180      	movs	r1, #128	@ 0x80
 800f4f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f4fa:	f7f3 f8d9 	bl	80026b0 <HAL_GPIO_TogglePin>
				imu_final_data_get(); //原始数据采样
 800f4fe:	f7ff fe03 	bl	800f108 <imu_final_data_get>
				calculate_attitude(&attitude, 0.001) ; //姿态解算
 800f502:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800f594 <HAL_TIM_PeriodElapsedCallback+0xd4>
 800f506:	4824      	ldr	r0, [pc, #144]	@ (800f598 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800f508:	f7fd fd48 	bl	800cf9c <calculate_attitude>
				imu_9.mag_yaw_test = atan2(imu_9.f_mag[1],imu_9.f_mag[0])*57.2957795131f;
 800f50c:	4b20      	ldr	r3, [pc, #128]	@ (800f590 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800f50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f510:	4618      	mov	r0, r3
 800f512:	f7f1 f851 	bl	80005b8 <__aeabi_f2d>
 800f516:	4604      	mov	r4, r0
 800f518:	460d      	mov	r5, r1
 800f51a:	4b1d      	ldr	r3, [pc, #116]	@ (800f590 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800f51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f51e:	4618      	mov	r0, r3
 800f520:	f7f1 f84a 	bl	80005b8 <__aeabi_f2d>
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	ec43 2b11 	vmov	d1, r2, r3
 800f52c:	ec45 4b10 	vmov	d0, r4, r5
 800f530:	f004 fcca 	bl	8013ec8 <atan2>
 800f534:	ec51 0b10 	vmov	r0, r1, d0
 800f538:	a311      	add	r3, pc, #68	@ (adr r3, 800f580 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53e:	f7f1 f893 	bl	8000668 <__aeabi_dmul>
 800f542:	4602      	mov	r2, r0
 800f544:	460b      	mov	r3, r1
 800f546:	4610      	mov	r0, r2
 800f548:	4619      	mov	r1, r3
 800f54a:	f7f1 fb85 	bl	8000c58 <__aeabi_d2f>
 800f54e:	4603      	mov	r3, r0
 800f550:	4a0f      	ldr	r2, [pc, #60]	@ (800f590 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800f552:	6613      	str	r3, [r2, #96]	@ 0x60
				imu_9.time_tick++;
 800f554:	4b0e      	ldr	r3, [pc, #56]	@ (800f590 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800f556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f55a:	3301      	adds	r3, #1
 800f55c:	4a0c      	ldr	r2, [pc, #48]	@ (800f590 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800f55e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
				data_output_mode(imu_9.output_mode);  //数据输出,vofa+查看曲线图形
 800f562:	4b0b      	ldr	r3, [pc, #44]	@ (800f590 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800f564:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800f568:	4618      	mov	r0, r3
 800f56a:	f7ff fe9d 	bl	800f2a8 <data_output_mode>
			}

			TimerCount = 0;
 800f56e:	4b07      	ldr	r3, [pc, #28]	@ (800f58c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800f570:	2200      	movs	r2, #0
 800f572:	801a      	strh	r2, [r3, #0]
		}

	}

}
 800f574:	bf00      	nop
 800f576:	3708      	adds	r7, #8
 800f578:	46bd      	mov	sp, r7
 800f57a:	bdb0      	pop	{r4, r5, r7, pc}
 800f57c:	f3af 8000 	nop.w
 800f580:	20000000 	.word	0x20000000
 800f584:	404ca5dc 	.word	0x404ca5dc
 800f588:	200004d0 	.word	0x200004d0
 800f58c:	20002262 	.word	0x20002262
 800f590:	20002164 	.word	0x20002164
 800f594:	3a83126f 	.word	0x3a83126f
 800f598:	2000179c 	.word	0x2000179c

0800f59c <_write>:
}


//重写printf函数
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b0:	68b9      	ldr	r1, [r7, #8]
 800f5b2:	4804      	ldr	r0, [pc, #16]	@ (800f5c4 <_write+0x28>)
 800f5b4:	f7f7 f942 	bl	800683c <HAL_UART_Transmit>
  return len;
 800f5b8:	687b      	ldr	r3, [r7, #4]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	2000051c 	.word	0x2000051c

0800f5c8 <usb_printf>:
  // 发送帧尾
  HAL_UART_Transmit(&huart1, tail, 4, 100);
}

void usb_printf(const char *format, ...)
{
 800f5c8:	b40f      	push	{r0, r1, r2, r3}
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 800f5d0:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    uint8_t buf[APP_TX_DATA_SIZE];

    va_start(args, format);
 800f5d2:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 800f5d6:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
    length = vsnprintf((char *)buf, APP_TX_DATA_SIZE, (char *)format, args);
 800f5da:	4638      	mov	r0, r7
 800f5dc:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 800f5e0:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 800f5e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f5e8:	f001 f88c 	bl	8010704 <vsniprintf>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    va_end(args);
    CDC_Transmit_FS(buf, length);
 800f5f2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	463b      	mov	r3, r7
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fc fbc7 	bl	800bd90 <CDC_Transmit_FS>
}
 800f602:	bf00      	nop
 800f604:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 800f608:	46bd      	mov	sp, r7
 800f60a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f60e:	b004      	add	sp, #16
 800f610:	4770      	bx	lr
	...

0800f614 <vofa_FireWater_USB_output>:

}

// 本协议是CSV风格的字符串流，直观简洁，编程像printf简单
void vofa_FireWater_USB_output(float s1, float s2, float s3,float s4)
{
 800f614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f618:	b08a      	sub	sp, #40	@ 0x28
 800f61a:	af06      	add	r7, sp, #24
 800f61c:	ed87 0a03 	vstr	s0, [r7, #12]
 800f620:	edc7 0a02 	vstr	s1, [r7, #8]
 800f624:	ed87 1a01 	vstr	s2, [r7, #4]
 800f628:	edc7 1a00 	vstr	s3, [r7]
	usb_printf("simples:%f,%f,%f,%f\n", s1, s2,s3,s4);
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	f7f0 ffc3 	bl	80005b8 <__aeabi_f2d>
 800f632:	4682      	mov	sl, r0
 800f634:	468b      	mov	fp, r1
 800f636:	68b8      	ldr	r0, [r7, #8]
 800f638:	f7f0 ffbe 	bl	80005b8 <__aeabi_f2d>
 800f63c:	4604      	mov	r4, r0
 800f63e:	460d      	mov	r5, r1
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7f0 ffb9 	bl	80005b8 <__aeabi_f2d>
 800f646:	4680      	mov	r8, r0
 800f648:	4689      	mov	r9, r1
 800f64a:	6838      	ldr	r0, [r7, #0]
 800f64c:	f7f0 ffb4 	bl	80005b8 <__aeabi_f2d>
 800f650:	4602      	mov	r2, r0
 800f652:	460b      	mov	r3, r1
 800f654:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f658:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f65c:	e9cd 4500 	strd	r4, r5, [sp]
 800f660:	4652      	mov	r2, sl
 800f662:	465b      	mov	r3, fp
 800f664:	4803      	ldr	r0, [pc, #12]	@ (800f674 <vofa_FireWater_USB_output+0x60>)
 800f666:	f7ff ffaf 	bl	800f5c8 <usb_printf>
}
 800f66a:	bf00      	nop
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f674:	080145b8 	.word	0x080145b8

0800f678 <atoi>:
 800f678:	220a      	movs	r2, #10
 800f67a:	2100      	movs	r1, #0
 800f67c:	f000 b87c 	b.w	800f778 <strtol>

0800f680 <_strtol_l.constprop.0>:
 800f680:	2b24      	cmp	r3, #36	@ 0x24
 800f682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f686:	4686      	mov	lr, r0
 800f688:	4690      	mov	r8, r2
 800f68a:	d801      	bhi.n	800f690 <_strtol_l.constprop.0+0x10>
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d106      	bne.n	800f69e <_strtol_l.constprop.0+0x1e>
 800f690:	f001 f90a 	bl	80108a8 <__errno>
 800f694:	2316      	movs	r3, #22
 800f696:	6003      	str	r3, [r0, #0]
 800f698:	2000      	movs	r0, #0
 800f69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f69e:	4834      	ldr	r0, [pc, #208]	@ (800f770 <_strtol_l.constprop.0+0xf0>)
 800f6a0:	460d      	mov	r5, r1
 800f6a2:	462a      	mov	r2, r5
 800f6a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f6a8:	5d06      	ldrb	r6, [r0, r4]
 800f6aa:	f016 0608 	ands.w	r6, r6, #8
 800f6ae:	d1f8      	bne.n	800f6a2 <_strtol_l.constprop.0+0x22>
 800f6b0:	2c2d      	cmp	r4, #45	@ 0x2d
 800f6b2:	d12d      	bne.n	800f710 <_strtol_l.constprop.0+0x90>
 800f6b4:	782c      	ldrb	r4, [r5, #0]
 800f6b6:	2601      	movs	r6, #1
 800f6b8:	1c95      	adds	r5, r2, #2
 800f6ba:	f033 0210 	bics.w	r2, r3, #16
 800f6be:	d109      	bne.n	800f6d4 <_strtol_l.constprop.0+0x54>
 800f6c0:	2c30      	cmp	r4, #48	@ 0x30
 800f6c2:	d12a      	bne.n	800f71a <_strtol_l.constprop.0+0x9a>
 800f6c4:	782a      	ldrb	r2, [r5, #0]
 800f6c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f6ca:	2a58      	cmp	r2, #88	@ 0x58
 800f6cc:	d125      	bne.n	800f71a <_strtol_l.constprop.0+0x9a>
 800f6ce:	786c      	ldrb	r4, [r5, #1]
 800f6d0:	2310      	movs	r3, #16
 800f6d2:	3502      	adds	r5, #2
 800f6d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f6d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f6dc:	2200      	movs	r2, #0
 800f6de:	fbbc f9f3 	udiv	r9, ip, r3
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	fb03 ca19 	mls	sl, r3, r9, ip
 800f6e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f6ec:	2f09      	cmp	r7, #9
 800f6ee:	d81b      	bhi.n	800f728 <_strtol_l.constprop.0+0xa8>
 800f6f0:	463c      	mov	r4, r7
 800f6f2:	42a3      	cmp	r3, r4
 800f6f4:	dd27      	ble.n	800f746 <_strtol_l.constprop.0+0xc6>
 800f6f6:	1c57      	adds	r7, r2, #1
 800f6f8:	d007      	beq.n	800f70a <_strtol_l.constprop.0+0x8a>
 800f6fa:	4581      	cmp	r9, r0
 800f6fc:	d320      	bcc.n	800f740 <_strtol_l.constprop.0+0xc0>
 800f6fe:	d101      	bne.n	800f704 <_strtol_l.constprop.0+0x84>
 800f700:	45a2      	cmp	sl, r4
 800f702:	db1d      	blt.n	800f740 <_strtol_l.constprop.0+0xc0>
 800f704:	fb00 4003 	mla	r0, r0, r3, r4
 800f708:	2201      	movs	r2, #1
 800f70a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f70e:	e7eb      	b.n	800f6e8 <_strtol_l.constprop.0+0x68>
 800f710:	2c2b      	cmp	r4, #43	@ 0x2b
 800f712:	bf04      	itt	eq
 800f714:	782c      	ldrbeq	r4, [r5, #0]
 800f716:	1c95      	addeq	r5, r2, #2
 800f718:	e7cf      	b.n	800f6ba <_strtol_l.constprop.0+0x3a>
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1da      	bne.n	800f6d4 <_strtol_l.constprop.0+0x54>
 800f71e:	2c30      	cmp	r4, #48	@ 0x30
 800f720:	bf0c      	ite	eq
 800f722:	2308      	moveq	r3, #8
 800f724:	230a      	movne	r3, #10
 800f726:	e7d5      	b.n	800f6d4 <_strtol_l.constprop.0+0x54>
 800f728:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f72c:	2f19      	cmp	r7, #25
 800f72e:	d801      	bhi.n	800f734 <_strtol_l.constprop.0+0xb4>
 800f730:	3c37      	subs	r4, #55	@ 0x37
 800f732:	e7de      	b.n	800f6f2 <_strtol_l.constprop.0+0x72>
 800f734:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f738:	2f19      	cmp	r7, #25
 800f73a:	d804      	bhi.n	800f746 <_strtol_l.constprop.0+0xc6>
 800f73c:	3c57      	subs	r4, #87	@ 0x57
 800f73e:	e7d8      	b.n	800f6f2 <_strtol_l.constprop.0+0x72>
 800f740:	f04f 32ff 	mov.w	r2, #4294967295
 800f744:	e7e1      	b.n	800f70a <_strtol_l.constprop.0+0x8a>
 800f746:	1c53      	adds	r3, r2, #1
 800f748:	d108      	bne.n	800f75c <_strtol_l.constprop.0+0xdc>
 800f74a:	2322      	movs	r3, #34	@ 0x22
 800f74c:	f8ce 3000 	str.w	r3, [lr]
 800f750:	4660      	mov	r0, ip
 800f752:	f1b8 0f00 	cmp.w	r8, #0
 800f756:	d0a0      	beq.n	800f69a <_strtol_l.constprop.0+0x1a>
 800f758:	1e69      	subs	r1, r5, #1
 800f75a:	e006      	b.n	800f76a <_strtol_l.constprop.0+0xea>
 800f75c:	b106      	cbz	r6, 800f760 <_strtol_l.constprop.0+0xe0>
 800f75e:	4240      	negs	r0, r0
 800f760:	f1b8 0f00 	cmp.w	r8, #0
 800f764:	d099      	beq.n	800f69a <_strtol_l.constprop.0+0x1a>
 800f766:	2a00      	cmp	r2, #0
 800f768:	d1f6      	bne.n	800f758 <_strtol_l.constprop.0+0xd8>
 800f76a:	f8c8 1000 	str.w	r1, [r8]
 800f76e:	e794      	b.n	800f69a <_strtol_l.constprop.0+0x1a>
 800f770:	08014611 	.word	0x08014611

0800f774 <_strtol_r>:
 800f774:	f7ff bf84 	b.w	800f680 <_strtol_l.constprop.0>

0800f778 <strtol>:
 800f778:	4613      	mov	r3, r2
 800f77a:	460a      	mov	r2, r1
 800f77c:	4601      	mov	r1, r0
 800f77e:	4802      	ldr	r0, [pc, #8]	@ (800f788 <strtol+0x10>)
 800f780:	6800      	ldr	r0, [r0, #0]
 800f782:	f7ff bf7d 	b.w	800f680 <_strtol_l.constprop.0>
 800f786:	bf00      	nop
 800f788:	20000248 	.word	0x20000248

0800f78c <__cvt>:
 800f78c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f790:	ec57 6b10 	vmov	r6, r7, d0
 800f794:	2f00      	cmp	r7, #0
 800f796:	460c      	mov	r4, r1
 800f798:	4619      	mov	r1, r3
 800f79a:	463b      	mov	r3, r7
 800f79c:	bfbb      	ittet	lt
 800f79e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f7a2:	461f      	movlt	r7, r3
 800f7a4:	2300      	movge	r3, #0
 800f7a6:	232d      	movlt	r3, #45	@ 0x2d
 800f7a8:	700b      	strb	r3, [r1, #0]
 800f7aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f7b0:	4691      	mov	r9, r2
 800f7b2:	f023 0820 	bic.w	r8, r3, #32
 800f7b6:	bfbc      	itt	lt
 800f7b8:	4632      	movlt	r2, r6
 800f7ba:	4616      	movlt	r6, r2
 800f7bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f7c0:	d005      	beq.n	800f7ce <__cvt+0x42>
 800f7c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f7c6:	d100      	bne.n	800f7ca <__cvt+0x3e>
 800f7c8:	3401      	adds	r4, #1
 800f7ca:	2102      	movs	r1, #2
 800f7cc:	e000      	b.n	800f7d0 <__cvt+0x44>
 800f7ce:	2103      	movs	r1, #3
 800f7d0:	ab03      	add	r3, sp, #12
 800f7d2:	9301      	str	r3, [sp, #4]
 800f7d4:	ab02      	add	r3, sp, #8
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	ec47 6b10 	vmov	d0, r6, r7
 800f7dc:	4653      	mov	r3, sl
 800f7de:	4622      	mov	r2, r4
 800f7e0:	f001 f952 	bl	8010a88 <_dtoa_r>
 800f7e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	d119      	bne.n	800f820 <__cvt+0x94>
 800f7ec:	f019 0f01 	tst.w	r9, #1
 800f7f0:	d00e      	beq.n	800f810 <__cvt+0x84>
 800f7f2:	eb00 0904 	add.w	r9, r0, r4
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	f7f1 f99b 	bl	8000b38 <__aeabi_dcmpeq>
 800f802:	b108      	cbz	r0, 800f808 <__cvt+0x7c>
 800f804:	f8cd 900c 	str.w	r9, [sp, #12]
 800f808:	2230      	movs	r2, #48	@ 0x30
 800f80a:	9b03      	ldr	r3, [sp, #12]
 800f80c:	454b      	cmp	r3, r9
 800f80e:	d31e      	bcc.n	800f84e <__cvt+0xc2>
 800f810:	9b03      	ldr	r3, [sp, #12]
 800f812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f814:	1b5b      	subs	r3, r3, r5
 800f816:	4628      	mov	r0, r5
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	b004      	add	sp, #16
 800f81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f820:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f824:	eb00 0904 	add.w	r9, r0, r4
 800f828:	d1e5      	bne.n	800f7f6 <__cvt+0x6a>
 800f82a:	7803      	ldrb	r3, [r0, #0]
 800f82c:	2b30      	cmp	r3, #48	@ 0x30
 800f82e:	d10a      	bne.n	800f846 <__cvt+0xba>
 800f830:	2200      	movs	r2, #0
 800f832:	2300      	movs	r3, #0
 800f834:	4630      	mov	r0, r6
 800f836:	4639      	mov	r1, r7
 800f838:	f7f1 f97e 	bl	8000b38 <__aeabi_dcmpeq>
 800f83c:	b918      	cbnz	r0, 800f846 <__cvt+0xba>
 800f83e:	f1c4 0401 	rsb	r4, r4, #1
 800f842:	f8ca 4000 	str.w	r4, [sl]
 800f846:	f8da 3000 	ldr.w	r3, [sl]
 800f84a:	4499      	add	r9, r3
 800f84c:	e7d3      	b.n	800f7f6 <__cvt+0x6a>
 800f84e:	1c59      	adds	r1, r3, #1
 800f850:	9103      	str	r1, [sp, #12]
 800f852:	701a      	strb	r2, [r3, #0]
 800f854:	e7d9      	b.n	800f80a <__cvt+0x7e>

0800f856 <__exponent>:
 800f856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f858:	2900      	cmp	r1, #0
 800f85a:	bfba      	itte	lt
 800f85c:	4249      	neglt	r1, r1
 800f85e:	232d      	movlt	r3, #45	@ 0x2d
 800f860:	232b      	movge	r3, #43	@ 0x2b
 800f862:	2909      	cmp	r1, #9
 800f864:	7002      	strb	r2, [r0, #0]
 800f866:	7043      	strb	r3, [r0, #1]
 800f868:	dd29      	ble.n	800f8be <__exponent+0x68>
 800f86a:	f10d 0307 	add.w	r3, sp, #7
 800f86e:	461d      	mov	r5, r3
 800f870:	270a      	movs	r7, #10
 800f872:	461a      	mov	r2, r3
 800f874:	fbb1 f6f7 	udiv	r6, r1, r7
 800f878:	fb07 1416 	mls	r4, r7, r6, r1
 800f87c:	3430      	adds	r4, #48	@ 0x30
 800f87e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f882:	460c      	mov	r4, r1
 800f884:	2c63      	cmp	r4, #99	@ 0x63
 800f886:	f103 33ff 	add.w	r3, r3, #4294967295
 800f88a:	4631      	mov	r1, r6
 800f88c:	dcf1      	bgt.n	800f872 <__exponent+0x1c>
 800f88e:	3130      	adds	r1, #48	@ 0x30
 800f890:	1e94      	subs	r4, r2, #2
 800f892:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f896:	1c41      	adds	r1, r0, #1
 800f898:	4623      	mov	r3, r4
 800f89a:	42ab      	cmp	r3, r5
 800f89c:	d30a      	bcc.n	800f8b4 <__exponent+0x5e>
 800f89e:	f10d 0309 	add.w	r3, sp, #9
 800f8a2:	1a9b      	subs	r3, r3, r2
 800f8a4:	42ac      	cmp	r4, r5
 800f8a6:	bf88      	it	hi
 800f8a8:	2300      	movhi	r3, #0
 800f8aa:	3302      	adds	r3, #2
 800f8ac:	4403      	add	r3, r0
 800f8ae:	1a18      	subs	r0, r3, r0
 800f8b0:	b003      	add	sp, #12
 800f8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f8b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f8bc:	e7ed      	b.n	800f89a <__exponent+0x44>
 800f8be:	2330      	movs	r3, #48	@ 0x30
 800f8c0:	3130      	adds	r1, #48	@ 0x30
 800f8c2:	7083      	strb	r3, [r0, #2]
 800f8c4:	70c1      	strb	r1, [r0, #3]
 800f8c6:	1d03      	adds	r3, r0, #4
 800f8c8:	e7f1      	b.n	800f8ae <__exponent+0x58>
	...

0800f8cc <_printf_float>:
 800f8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d0:	b08d      	sub	sp, #52	@ 0x34
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f8d8:	4616      	mov	r6, r2
 800f8da:	461f      	mov	r7, r3
 800f8dc:	4605      	mov	r5, r0
 800f8de:	f000 ff99 	bl	8010814 <_localeconv_r>
 800f8e2:	6803      	ldr	r3, [r0, #0]
 800f8e4:	9304      	str	r3, [sp, #16]
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7f0 fcfa 	bl	80002e0 <strlen>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8f0:	f8d8 3000 	ldr.w	r3, [r8]
 800f8f4:	9005      	str	r0, [sp, #20]
 800f8f6:	3307      	adds	r3, #7
 800f8f8:	f023 0307 	bic.w	r3, r3, #7
 800f8fc:	f103 0208 	add.w	r2, r3, #8
 800f900:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f904:	f8d4 b000 	ldr.w	fp, [r4]
 800f908:	f8c8 2000 	str.w	r2, [r8]
 800f90c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f910:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f914:	9307      	str	r3, [sp, #28]
 800f916:	f8cd 8018 	str.w	r8, [sp, #24]
 800f91a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f91e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f922:	4b9c      	ldr	r3, [pc, #624]	@ (800fb94 <_printf_float+0x2c8>)
 800f924:	f04f 32ff 	mov.w	r2, #4294967295
 800f928:	f7f1 f938 	bl	8000b9c <__aeabi_dcmpun>
 800f92c:	bb70      	cbnz	r0, 800f98c <_printf_float+0xc0>
 800f92e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f932:	4b98      	ldr	r3, [pc, #608]	@ (800fb94 <_printf_float+0x2c8>)
 800f934:	f04f 32ff 	mov.w	r2, #4294967295
 800f938:	f7f1 f912 	bl	8000b60 <__aeabi_dcmple>
 800f93c:	bb30      	cbnz	r0, 800f98c <_printf_float+0xc0>
 800f93e:	2200      	movs	r2, #0
 800f940:	2300      	movs	r3, #0
 800f942:	4640      	mov	r0, r8
 800f944:	4649      	mov	r1, r9
 800f946:	f7f1 f901 	bl	8000b4c <__aeabi_dcmplt>
 800f94a:	b110      	cbz	r0, 800f952 <_printf_float+0x86>
 800f94c:	232d      	movs	r3, #45	@ 0x2d
 800f94e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f952:	4a91      	ldr	r2, [pc, #580]	@ (800fb98 <_printf_float+0x2cc>)
 800f954:	4b91      	ldr	r3, [pc, #580]	@ (800fb9c <_printf_float+0x2d0>)
 800f956:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f95a:	bf94      	ite	ls
 800f95c:	4690      	movls	r8, r2
 800f95e:	4698      	movhi	r8, r3
 800f960:	2303      	movs	r3, #3
 800f962:	6123      	str	r3, [r4, #16]
 800f964:	f02b 0304 	bic.w	r3, fp, #4
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	f04f 0900 	mov.w	r9, #0
 800f96e:	9700      	str	r7, [sp, #0]
 800f970:	4633      	mov	r3, r6
 800f972:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f974:	4621      	mov	r1, r4
 800f976:	4628      	mov	r0, r5
 800f978:	f000 f9d2 	bl	800fd20 <_printf_common>
 800f97c:	3001      	adds	r0, #1
 800f97e:	f040 808d 	bne.w	800fa9c <_printf_float+0x1d0>
 800f982:	f04f 30ff 	mov.w	r0, #4294967295
 800f986:	b00d      	add	sp, #52	@ 0x34
 800f988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98c:	4642      	mov	r2, r8
 800f98e:	464b      	mov	r3, r9
 800f990:	4640      	mov	r0, r8
 800f992:	4649      	mov	r1, r9
 800f994:	f7f1 f902 	bl	8000b9c <__aeabi_dcmpun>
 800f998:	b140      	cbz	r0, 800f9ac <_printf_float+0xe0>
 800f99a:	464b      	mov	r3, r9
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	bfbc      	itt	lt
 800f9a0:	232d      	movlt	r3, #45	@ 0x2d
 800f9a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f9a6:	4a7e      	ldr	r2, [pc, #504]	@ (800fba0 <_printf_float+0x2d4>)
 800f9a8:	4b7e      	ldr	r3, [pc, #504]	@ (800fba4 <_printf_float+0x2d8>)
 800f9aa:	e7d4      	b.n	800f956 <_printf_float+0x8a>
 800f9ac:	6863      	ldr	r3, [r4, #4]
 800f9ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f9b2:	9206      	str	r2, [sp, #24]
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	d13b      	bne.n	800fa30 <_printf_float+0x164>
 800f9b8:	2306      	movs	r3, #6
 800f9ba:	6063      	str	r3, [r4, #4]
 800f9bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	6022      	str	r2, [r4, #0]
 800f9c4:	9303      	str	r3, [sp, #12]
 800f9c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f9c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f9cc:	ab09      	add	r3, sp, #36	@ 0x24
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	6861      	ldr	r1, [r4, #4]
 800f9d2:	ec49 8b10 	vmov	d0, r8, r9
 800f9d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f7ff fed6 	bl	800f78c <__cvt>
 800f9e0:	9b06      	ldr	r3, [sp, #24]
 800f9e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9e4:	2b47      	cmp	r3, #71	@ 0x47
 800f9e6:	4680      	mov	r8, r0
 800f9e8:	d129      	bne.n	800fa3e <_printf_float+0x172>
 800f9ea:	1cc8      	adds	r0, r1, #3
 800f9ec:	db02      	blt.n	800f9f4 <_printf_float+0x128>
 800f9ee:	6863      	ldr	r3, [r4, #4]
 800f9f0:	4299      	cmp	r1, r3
 800f9f2:	dd41      	ble.n	800fa78 <_printf_float+0x1ac>
 800f9f4:	f1aa 0a02 	sub.w	sl, sl, #2
 800f9f8:	fa5f fa8a 	uxtb.w	sl, sl
 800f9fc:	3901      	subs	r1, #1
 800f9fe:	4652      	mov	r2, sl
 800fa00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fa04:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa06:	f7ff ff26 	bl	800f856 <__exponent>
 800fa0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa0c:	1813      	adds	r3, r2, r0
 800fa0e:	2a01      	cmp	r2, #1
 800fa10:	4681      	mov	r9, r0
 800fa12:	6123      	str	r3, [r4, #16]
 800fa14:	dc02      	bgt.n	800fa1c <_printf_float+0x150>
 800fa16:	6822      	ldr	r2, [r4, #0]
 800fa18:	07d2      	lsls	r2, r2, #31
 800fa1a:	d501      	bpl.n	800fa20 <_printf_float+0x154>
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	6123      	str	r3, [r4, #16]
 800fa20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d0a2      	beq.n	800f96e <_printf_float+0xa2>
 800fa28:	232d      	movs	r3, #45	@ 0x2d
 800fa2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa2e:	e79e      	b.n	800f96e <_printf_float+0xa2>
 800fa30:	9a06      	ldr	r2, [sp, #24]
 800fa32:	2a47      	cmp	r2, #71	@ 0x47
 800fa34:	d1c2      	bne.n	800f9bc <_printf_float+0xf0>
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1c0      	bne.n	800f9bc <_printf_float+0xf0>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e7bd      	b.n	800f9ba <_printf_float+0xee>
 800fa3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa42:	d9db      	bls.n	800f9fc <_printf_float+0x130>
 800fa44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fa48:	d118      	bne.n	800fa7c <_printf_float+0x1b0>
 800fa4a:	2900      	cmp	r1, #0
 800fa4c:	6863      	ldr	r3, [r4, #4]
 800fa4e:	dd0b      	ble.n	800fa68 <_printf_float+0x19c>
 800fa50:	6121      	str	r1, [r4, #16]
 800fa52:	b913      	cbnz	r3, 800fa5a <_printf_float+0x18e>
 800fa54:	6822      	ldr	r2, [r4, #0]
 800fa56:	07d0      	lsls	r0, r2, #31
 800fa58:	d502      	bpl.n	800fa60 <_printf_float+0x194>
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	440b      	add	r3, r1
 800fa5e:	6123      	str	r3, [r4, #16]
 800fa60:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa62:	f04f 0900 	mov.w	r9, #0
 800fa66:	e7db      	b.n	800fa20 <_printf_float+0x154>
 800fa68:	b913      	cbnz	r3, 800fa70 <_printf_float+0x1a4>
 800fa6a:	6822      	ldr	r2, [r4, #0]
 800fa6c:	07d2      	lsls	r2, r2, #31
 800fa6e:	d501      	bpl.n	800fa74 <_printf_float+0x1a8>
 800fa70:	3302      	adds	r3, #2
 800fa72:	e7f4      	b.n	800fa5e <_printf_float+0x192>
 800fa74:	2301      	movs	r3, #1
 800fa76:	e7f2      	b.n	800fa5e <_printf_float+0x192>
 800fa78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fa7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa7e:	4299      	cmp	r1, r3
 800fa80:	db05      	blt.n	800fa8e <_printf_float+0x1c2>
 800fa82:	6823      	ldr	r3, [r4, #0]
 800fa84:	6121      	str	r1, [r4, #16]
 800fa86:	07d8      	lsls	r0, r3, #31
 800fa88:	d5ea      	bpl.n	800fa60 <_printf_float+0x194>
 800fa8a:	1c4b      	adds	r3, r1, #1
 800fa8c:	e7e7      	b.n	800fa5e <_printf_float+0x192>
 800fa8e:	2900      	cmp	r1, #0
 800fa90:	bfd4      	ite	le
 800fa92:	f1c1 0202 	rsble	r2, r1, #2
 800fa96:	2201      	movgt	r2, #1
 800fa98:	4413      	add	r3, r2
 800fa9a:	e7e0      	b.n	800fa5e <_printf_float+0x192>
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	055a      	lsls	r2, r3, #21
 800faa0:	d407      	bmi.n	800fab2 <_printf_float+0x1e6>
 800faa2:	6923      	ldr	r3, [r4, #16]
 800faa4:	4642      	mov	r2, r8
 800faa6:	4631      	mov	r1, r6
 800faa8:	4628      	mov	r0, r5
 800faaa:	47b8      	blx	r7
 800faac:	3001      	adds	r0, #1
 800faae:	d12b      	bne.n	800fb08 <_printf_float+0x23c>
 800fab0:	e767      	b.n	800f982 <_printf_float+0xb6>
 800fab2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fab6:	f240 80dd 	bls.w	800fc74 <_printf_float+0x3a8>
 800faba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fabe:	2200      	movs	r2, #0
 800fac0:	2300      	movs	r3, #0
 800fac2:	f7f1 f839 	bl	8000b38 <__aeabi_dcmpeq>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d033      	beq.n	800fb32 <_printf_float+0x266>
 800faca:	4a37      	ldr	r2, [pc, #220]	@ (800fba8 <_printf_float+0x2dc>)
 800facc:	2301      	movs	r3, #1
 800face:	4631      	mov	r1, r6
 800fad0:	4628      	mov	r0, r5
 800fad2:	47b8      	blx	r7
 800fad4:	3001      	adds	r0, #1
 800fad6:	f43f af54 	beq.w	800f982 <_printf_float+0xb6>
 800fada:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fade:	4543      	cmp	r3, r8
 800fae0:	db02      	blt.n	800fae8 <_printf_float+0x21c>
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	07d8      	lsls	r0, r3, #31
 800fae6:	d50f      	bpl.n	800fb08 <_printf_float+0x23c>
 800fae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800faec:	4631      	mov	r1, r6
 800faee:	4628      	mov	r0, r5
 800faf0:	47b8      	blx	r7
 800faf2:	3001      	adds	r0, #1
 800faf4:	f43f af45 	beq.w	800f982 <_printf_float+0xb6>
 800faf8:	f04f 0900 	mov.w	r9, #0
 800fafc:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb00:	f104 0a1a 	add.w	sl, r4, #26
 800fb04:	45c8      	cmp	r8, r9
 800fb06:	dc09      	bgt.n	800fb1c <_printf_float+0x250>
 800fb08:	6823      	ldr	r3, [r4, #0]
 800fb0a:	079b      	lsls	r3, r3, #30
 800fb0c:	f100 8103 	bmi.w	800fd16 <_printf_float+0x44a>
 800fb10:	68e0      	ldr	r0, [r4, #12]
 800fb12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb14:	4298      	cmp	r0, r3
 800fb16:	bfb8      	it	lt
 800fb18:	4618      	movlt	r0, r3
 800fb1a:	e734      	b.n	800f986 <_printf_float+0xba>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	4652      	mov	r2, sl
 800fb20:	4631      	mov	r1, r6
 800fb22:	4628      	mov	r0, r5
 800fb24:	47b8      	blx	r7
 800fb26:	3001      	adds	r0, #1
 800fb28:	f43f af2b 	beq.w	800f982 <_printf_float+0xb6>
 800fb2c:	f109 0901 	add.w	r9, r9, #1
 800fb30:	e7e8      	b.n	800fb04 <_printf_float+0x238>
 800fb32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	dc39      	bgt.n	800fbac <_printf_float+0x2e0>
 800fb38:	4a1b      	ldr	r2, [pc, #108]	@ (800fba8 <_printf_float+0x2dc>)
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	4631      	mov	r1, r6
 800fb3e:	4628      	mov	r0, r5
 800fb40:	47b8      	blx	r7
 800fb42:	3001      	adds	r0, #1
 800fb44:	f43f af1d 	beq.w	800f982 <_printf_float+0xb6>
 800fb48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb4c:	ea59 0303 	orrs.w	r3, r9, r3
 800fb50:	d102      	bne.n	800fb58 <_printf_float+0x28c>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	07d9      	lsls	r1, r3, #31
 800fb56:	d5d7      	bpl.n	800fb08 <_printf_float+0x23c>
 800fb58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb5c:	4631      	mov	r1, r6
 800fb5e:	4628      	mov	r0, r5
 800fb60:	47b8      	blx	r7
 800fb62:	3001      	adds	r0, #1
 800fb64:	f43f af0d 	beq.w	800f982 <_printf_float+0xb6>
 800fb68:	f04f 0a00 	mov.w	sl, #0
 800fb6c:	f104 0b1a 	add.w	fp, r4, #26
 800fb70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb72:	425b      	negs	r3, r3
 800fb74:	4553      	cmp	r3, sl
 800fb76:	dc01      	bgt.n	800fb7c <_printf_float+0x2b0>
 800fb78:	464b      	mov	r3, r9
 800fb7a:	e793      	b.n	800faa4 <_printf_float+0x1d8>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	465a      	mov	r2, fp
 800fb80:	4631      	mov	r1, r6
 800fb82:	4628      	mov	r0, r5
 800fb84:	47b8      	blx	r7
 800fb86:	3001      	adds	r0, #1
 800fb88:	f43f aefb 	beq.w	800f982 <_printf_float+0xb6>
 800fb8c:	f10a 0a01 	add.w	sl, sl, #1
 800fb90:	e7ee      	b.n	800fb70 <_printf_float+0x2a4>
 800fb92:	bf00      	nop
 800fb94:	7fefffff 	.word	0x7fefffff
 800fb98:	08014711 	.word	0x08014711
 800fb9c:	08014715 	.word	0x08014715
 800fba0:	08014719 	.word	0x08014719
 800fba4:	0801471d 	.word	0x0801471d
 800fba8:	08014721 	.word	0x08014721
 800fbac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fbb2:	4553      	cmp	r3, sl
 800fbb4:	bfa8      	it	ge
 800fbb6:	4653      	movge	r3, sl
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	4699      	mov	r9, r3
 800fbbc:	dc36      	bgt.n	800fc2c <_printf_float+0x360>
 800fbbe:	f04f 0b00 	mov.w	fp, #0
 800fbc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbc6:	f104 021a 	add.w	r2, r4, #26
 800fbca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbcc:	9306      	str	r3, [sp, #24]
 800fbce:	eba3 0309 	sub.w	r3, r3, r9
 800fbd2:	455b      	cmp	r3, fp
 800fbd4:	dc31      	bgt.n	800fc3a <_printf_float+0x36e>
 800fbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbd8:	459a      	cmp	sl, r3
 800fbda:	dc3a      	bgt.n	800fc52 <_printf_float+0x386>
 800fbdc:	6823      	ldr	r3, [r4, #0]
 800fbde:	07da      	lsls	r2, r3, #31
 800fbe0:	d437      	bmi.n	800fc52 <_printf_float+0x386>
 800fbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe4:	ebaa 0903 	sub.w	r9, sl, r3
 800fbe8:	9b06      	ldr	r3, [sp, #24]
 800fbea:	ebaa 0303 	sub.w	r3, sl, r3
 800fbee:	4599      	cmp	r9, r3
 800fbf0:	bfa8      	it	ge
 800fbf2:	4699      	movge	r9, r3
 800fbf4:	f1b9 0f00 	cmp.w	r9, #0
 800fbf8:	dc33      	bgt.n	800fc62 <_printf_float+0x396>
 800fbfa:	f04f 0800 	mov.w	r8, #0
 800fbfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc02:	f104 0b1a 	add.w	fp, r4, #26
 800fc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc08:	ebaa 0303 	sub.w	r3, sl, r3
 800fc0c:	eba3 0309 	sub.w	r3, r3, r9
 800fc10:	4543      	cmp	r3, r8
 800fc12:	f77f af79 	ble.w	800fb08 <_printf_float+0x23c>
 800fc16:	2301      	movs	r3, #1
 800fc18:	465a      	mov	r2, fp
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	47b8      	blx	r7
 800fc20:	3001      	adds	r0, #1
 800fc22:	f43f aeae 	beq.w	800f982 <_printf_float+0xb6>
 800fc26:	f108 0801 	add.w	r8, r8, #1
 800fc2a:	e7ec      	b.n	800fc06 <_printf_float+0x33a>
 800fc2c:	4642      	mov	r2, r8
 800fc2e:	4631      	mov	r1, r6
 800fc30:	4628      	mov	r0, r5
 800fc32:	47b8      	blx	r7
 800fc34:	3001      	adds	r0, #1
 800fc36:	d1c2      	bne.n	800fbbe <_printf_float+0x2f2>
 800fc38:	e6a3      	b.n	800f982 <_printf_float+0xb6>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	4631      	mov	r1, r6
 800fc3e:	4628      	mov	r0, r5
 800fc40:	9206      	str	r2, [sp, #24]
 800fc42:	47b8      	blx	r7
 800fc44:	3001      	adds	r0, #1
 800fc46:	f43f ae9c 	beq.w	800f982 <_printf_float+0xb6>
 800fc4a:	9a06      	ldr	r2, [sp, #24]
 800fc4c:	f10b 0b01 	add.w	fp, fp, #1
 800fc50:	e7bb      	b.n	800fbca <_printf_float+0x2fe>
 800fc52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc56:	4631      	mov	r1, r6
 800fc58:	4628      	mov	r0, r5
 800fc5a:	47b8      	blx	r7
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	d1c0      	bne.n	800fbe2 <_printf_float+0x316>
 800fc60:	e68f      	b.n	800f982 <_printf_float+0xb6>
 800fc62:	9a06      	ldr	r2, [sp, #24]
 800fc64:	464b      	mov	r3, r9
 800fc66:	4442      	add	r2, r8
 800fc68:	4631      	mov	r1, r6
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	47b8      	blx	r7
 800fc6e:	3001      	adds	r0, #1
 800fc70:	d1c3      	bne.n	800fbfa <_printf_float+0x32e>
 800fc72:	e686      	b.n	800f982 <_printf_float+0xb6>
 800fc74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc78:	f1ba 0f01 	cmp.w	sl, #1
 800fc7c:	dc01      	bgt.n	800fc82 <_printf_float+0x3b6>
 800fc7e:	07db      	lsls	r3, r3, #31
 800fc80:	d536      	bpl.n	800fcf0 <_printf_float+0x424>
 800fc82:	2301      	movs	r3, #1
 800fc84:	4642      	mov	r2, r8
 800fc86:	4631      	mov	r1, r6
 800fc88:	4628      	mov	r0, r5
 800fc8a:	47b8      	blx	r7
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	f43f ae78 	beq.w	800f982 <_printf_float+0xb6>
 800fc92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc96:	4631      	mov	r1, r6
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b8      	blx	r7
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	f43f ae70 	beq.w	800f982 <_printf_float+0xb6>
 800fca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fca6:	2200      	movs	r2, #0
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcae:	f7f0 ff43 	bl	8000b38 <__aeabi_dcmpeq>
 800fcb2:	b9c0      	cbnz	r0, 800fce6 <_printf_float+0x41a>
 800fcb4:	4653      	mov	r3, sl
 800fcb6:	f108 0201 	add.w	r2, r8, #1
 800fcba:	4631      	mov	r1, r6
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	47b8      	blx	r7
 800fcc0:	3001      	adds	r0, #1
 800fcc2:	d10c      	bne.n	800fcde <_printf_float+0x412>
 800fcc4:	e65d      	b.n	800f982 <_printf_float+0xb6>
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	465a      	mov	r2, fp
 800fcca:	4631      	mov	r1, r6
 800fccc:	4628      	mov	r0, r5
 800fcce:	47b8      	blx	r7
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	f43f ae56 	beq.w	800f982 <_printf_float+0xb6>
 800fcd6:	f108 0801 	add.w	r8, r8, #1
 800fcda:	45d0      	cmp	r8, sl
 800fcdc:	dbf3      	blt.n	800fcc6 <_printf_float+0x3fa>
 800fcde:	464b      	mov	r3, r9
 800fce0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fce4:	e6df      	b.n	800faa6 <_printf_float+0x1da>
 800fce6:	f04f 0800 	mov.w	r8, #0
 800fcea:	f104 0b1a 	add.w	fp, r4, #26
 800fcee:	e7f4      	b.n	800fcda <_printf_float+0x40e>
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	4642      	mov	r2, r8
 800fcf4:	e7e1      	b.n	800fcba <_printf_float+0x3ee>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	464a      	mov	r2, r9
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	47b8      	blx	r7
 800fd00:	3001      	adds	r0, #1
 800fd02:	f43f ae3e 	beq.w	800f982 <_printf_float+0xb6>
 800fd06:	f108 0801 	add.w	r8, r8, #1
 800fd0a:	68e3      	ldr	r3, [r4, #12]
 800fd0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fd0e:	1a5b      	subs	r3, r3, r1
 800fd10:	4543      	cmp	r3, r8
 800fd12:	dcf0      	bgt.n	800fcf6 <_printf_float+0x42a>
 800fd14:	e6fc      	b.n	800fb10 <_printf_float+0x244>
 800fd16:	f04f 0800 	mov.w	r8, #0
 800fd1a:	f104 0919 	add.w	r9, r4, #25
 800fd1e:	e7f4      	b.n	800fd0a <_printf_float+0x43e>

0800fd20 <_printf_common>:
 800fd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd24:	4616      	mov	r6, r2
 800fd26:	4698      	mov	r8, r3
 800fd28:	688a      	ldr	r2, [r1, #8]
 800fd2a:	690b      	ldr	r3, [r1, #16]
 800fd2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd30:	4293      	cmp	r3, r2
 800fd32:	bfb8      	it	lt
 800fd34:	4613      	movlt	r3, r2
 800fd36:	6033      	str	r3, [r6, #0]
 800fd38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd3c:	4607      	mov	r7, r0
 800fd3e:	460c      	mov	r4, r1
 800fd40:	b10a      	cbz	r2, 800fd46 <_printf_common+0x26>
 800fd42:	3301      	adds	r3, #1
 800fd44:	6033      	str	r3, [r6, #0]
 800fd46:	6823      	ldr	r3, [r4, #0]
 800fd48:	0699      	lsls	r1, r3, #26
 800fd4a:	bf42      	ittt	mi
 800fd4c:	6833      	ldrmi	r3, [r6, #0]
 800fd4e:	3302      	addmi	r3, #2
 800fd50:	6033      	strmi	r3, [r6, #0]
 800fd52:	6825      	ldr	r5, [r4, #0]
 800fd54:	f015 0506 	ands.w	r5, r5, #6
 800fd58:	d106      	bne.n	800fd68 <_printf_common+0x48>
 800fd5a:	f104 0a19 	add.w	sl, r4, #25
 800fd5e:	68e3      	ldr	r3, [r4, #12]
 800fd60:	6832      	ldr	r2, [r6, #0]
 800fd62:	1a9b      	subs	r3, r3, r2
 800fd64:	42ab      	cmp	r3, r5
 800fd66:	dc26      	bgt.n	800fdb6 <_printf_common+0x96>
 800fd68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd6c:	6822      	ldr	r2, [r4, #0]
 800fd6e:	3b00      	subs	r3, #0
 800fd70:	bf18      	it	ne
 800fd72:	2301      	movne	r3, #1
 800fd74:	0692      	lsls	r2, r2, #26
 800fd76:	d42b      	bmi.n	800fdd0 <_printf_common+0xb0>
 800fd78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fd7c:	4641      	mov	r1, r8
 800fd7e:	4638      	mov	r0, r7
 800fd80:	47c8      	blx	r9
 800fd82:	3001      	adds	r0, #1
 800fd84:	d01e      	beq.n	800fdc4 <_printf_common+0xa4>
 800fd86:	6823      	ldr	r3, [r4, #0]
 800fd88:	6922      	ldr	r2, [r4, #16]
 800fd8a:	f003 0306 	and.w	r3, r3, #6
 800fd8e:	2b04      	cmp	r3, #4
 800fd90:	bf02      	ittt	eq
 800fd92:	68e5      	ldreq	r5, [r4, #12]
 800fd94:	6833      	ldreq	r3, [r6, #0]
 800fd96:	1aed      	subeq	r5, r5, r3
 800fd98:	68a3      	ldr	r3, [r4, #8]
 800fd9a:	bf0c      	ite	eq
 800fd9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fda0:	2500      	movne	r5, #0
 800fda2:	4293      	cmp	r3, r2
 800fda4:	bfc4      	itt	gt
 800fda6:	1a9b      	subgt	r3, r3, r2
 800fda8:	18ed      	addgt	r5, r5, r3
 800fdaa:	2600      	movs	r6, #0
 800fdac:	341a      	adds	r4, #26
 800fdae:	42b5      	cmp	r5, r6
 800fdb0:	d11a      	bne.n	800fde8 <_printf_common+0xc8>
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	e008      	b.n	800fdc8 <_printf_common+0xa8>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	4652      	mov	r2, sl
 800fdba:	4641      	mov	r1, r8
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	47c8      	blx	r9
 800fdc0:	3001      	adds	r0, #1
 800fdc2:	d103      	bne.n	800fdcc <_printf_common+0xac>
 800fdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdcc:	3501      	adds	r5, #1
 800fdce:	e7c6      	b.n	800fd5e <_printf_common+0x3e>
 800fdd0:	18e1      	adds	r1, r4, r3
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	2030      	movs	r0, #48	@ 0x30
 800fdd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fdda:	4422      	add	r2, r4
 800fddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fde0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fde4:	3302      	adds	r3, #2
 800fde6:	e7c7      	b.n	800fd78 <_printf_common+0x58>
 800fde8:	2301      	movs	r3, #1
 800fdea:	4622      	mov	r2, r4
 800fdec:	4641      	mov	r1, r8
 800fdee:	4638      	mov	r0, r7
 800fdf0:	47c8      	blx	r9
 800fdf2:	3001      	adds	r0, #1
 800fdf4:	d0e6      	beq.n	800fdc4 <_printf_common+0xa4>
 800fdf6:	3601      	adds	r6, #1
 800fdf8:	e7d9      	b.n	800fdae <_printf_common+0x8e>
	...

0800fdfc <_printf_i>:
 800fdfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe00:	7e0f      	ldrb	r7, [r1, #24]
 800fe02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe04:	2f78      	cmp	r7, #120	@ 0x78
 800fe06:	4691      	mov	r9, r2
 800fe08:	4680      	mov	r8, r0
 800fe0a:	460c      	mov	r4, r1
 800fe0c:	469a      	mov	sl, r3
 800fe0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe12:	d807      	bhi.n	800fe24 <_printf_i+0x28>
 800fe14:	2f62      	cmp	r7, #98	@ 0x62
 800fe16:	d80a      	bhi.n	800fe2e <_printf_i+0x32>
 800fe18:	2f00      	cmp	r7, #0
 800fe1a:	f000 80d2 	beq.w	800ffc2 <_printf_i+0x1c6>
 800fe1e:	2f58      	cmp	r7, #88	@ 0x58
 800fe20:	f000 80b9 	beq.w	800ff96 <_printf_i+0x19a>
 800fe24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe2c:	e03a      	b.n	800fea4 <_printf_i+0xa8>
 800fe2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe32:	2b15      	cmp	r3, #21
 800fe34:	d8f6      	bhi.n	800fe24 <_printf_i+0x28>
 800fe36:	a101      	add	r1, pc, #4	@ (adr r1, 800fe3c <_printf_i+0x40>)
 800fe38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe3c:	0800fe95 	.word	0x0800fe95
 800fe40:	0800fea9 	.word	0x0800fea9
 800fe44:	0800fe25 	.word	0x0800fe25
 800fe48:	0800fe25 	.word	0x0800fe25
 800fe4c:	0800fe25 	.word	0x0800fe25
 800fe50:	0800fe25 	.word	0x0800fe25
 800fe54:	0800fea9 	.word	0x0800fea9
 800fe58:	0800fe25 	.word	0x0800fe25
 800fe5c:	0800fe25 	.word	0x0800fe25
 800fe60:	0800fe25 	.word	0x0800fe25
 800fe64:	0800fe25 	.word	0x0800fe25
 800fe68:	0800ffa9 	.word	0x0800ffa9
 800fe6c:	0800fed3 	.word	0x0800fed3
 800fe70:	0800ff63 	.word	0x0800ff63
 800fe74:	0800fe25 	.word	0x0800fe25
 800fe78:	0800fe25 	.word	0x0800fe25
 800fe7c:	0800ffcb 	.word	0x0800ffcb
 800fe80:	0800fe25 	.word	0x0800fe25
 800fe84:	0800fed3 	.word	0x0800fed3
 800fe88:	0800fe25 	.word	0x0800fe25
 800fe8c:	0800fe25 	.word	0x0800fe25
 800fe90:	0800ff6b 	.word	0x0800ff6b
 800fe94:	6833      	ldr	r3, [r6, #0]
 800fe96:	1d1a      	adds	r2, r3, #4
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	6032      	str	r2, [r6, #0]
 800fe9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fea4:	2301      	movs	r3, #1
 800fea6:	e09d      	b.n	800ffe4 <_printf_i+0x1e8>
 800fea8:	6833      	ldr	r3, [r6, #0]
 800feaa:	6820      	ldr	r0, [r4, #0]
 800feac:	1d19      	adds	r1, r3, #4
 800feae:	6031      	str	r1, [r6, #0]
 800feb0:	0606      	lsls	r6, r0, #24
 800feb2:	d501      	bpl.n	800feb8 <_printf_i+0xbc>
 800feb4:	681d      	ldr	r5, [r3, #0]
 800feb6:	e003      	b.n	800fec0 <_printf_i+0xc4>
 800feb8:	0645      	lsls	r5, r0, #25
 800feba:	d5fb      	bpl.n	800feb4 <_printf_i+0xb8>
 800febc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fec0:	2d00      	cmp	r5, #0
 800fec2:	da03      	bge.n	800fecc <_printf_i+0xd0>
 800fec4:	232d      	movs	r3, #45	@ 0x2d
 800fec6:	426d      	negs	r5, r5
 800fec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fecc:	4859      	ldr	r0, [pc, #356]	@ (8010034 <_printf_i+0x238>)
 800fece:	230a      	movs	r3, #10
 800fed0:	e011      	b.n	800fef6 <_printf_i+0xfa>
 800fed2:	6821      	ldr	r1, [r4, #0]
 800fed4:	6833      	ldr	r3, [r6, #0]
 800fed6:	0608      	lsls	r0, r1, #24
 800fed8:	f853 5b04 	ldr.w	r5, [r3], #4
 800fedc:	d402      	bmi.n	800fee4 <_printf_i+0xe8>
 800fede:	0649      	lsls	r1, r1, #25
 800fee0:	bf48      	it	mi
 800fee2:	b2ad      	uxthmi	r5, r5
 800fee4:	2f6f      	cmp	r7, #111	@ 0x6f
 800fee6:	4853      	ldr	r0, [pc, #332]	@ (8010034 <_printf_i+0x238>)
 800fee8:	6033      	str	r3, [r6, #0]
 800feea:	bf14      	ite	ne
 800feec:	230a      	movne	r3, #10
 800feee:	2308      	moveq	r3, #8
 800fef0:	2100      	movs	r1, #0
 800fef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fef6:	6866      	ldr	r6, [r4, #4]
 800fef8:	60a6      	str	r6, [r4, #8]
 800fefa:	2e00      	cmp	r6, #0
 800fefc:	bfa2      	ittt	ge
 800fefe:	6821      	ldrge	r1, [r4, #0]
 800ff00:	f021 0104 	bicge.w	r1, r1, #4
 800ff04:	6021      	strge	r1, [r4, #0]
 800ff06:	b90d      	cbnz	r5, 800ff0c <_printf_i+0x110>
 800ff08:	2e00      	cmp	r6, #0
 800ff0a:	d04b      	beq.n	800ffa4 <_printf_i+0x1a8>
 800ff0c:	4616      	mov	r6, r2
 800ff0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff12:	fb03 5711 	mls	r7, r3, r1, r5
 800ff16:	5dc7      	ldrb	r7, [r0, r7]
 800ff18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff1c:	462f      	mov	r7, r5
 800ff1e:	42bb      	cmp	r3, r7
 800ff20:	460d      	mov	r5, r1
 800ff22:	d9f4      	bls.n	800ff0e <_printf_i+0x112>
 800ff24:	2b08      	cmp	r3, #8
 800ff26:	d10b      	bne.n	800ff40 <_printf_i+0x144>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	07df      	lsls	r7, r3, #31
 800ff2c:	d508      	bpl.n	800ff40 <_printf_i+0x144>
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	6861      	ldr	r1, [r4, #4]
 800ff32:	4299      	cmp	r1, r3
 800ff34:	bfde      	ittt	le
 800ff36:	2330      	movle	r3, #48	@ 0x30
 800ff38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff40:	1b92      	subs	r2, r2, r6
 800ff42:	6122      	str	r2, [r4, #16]
 800ff44:	f8cd a000 	str.w	sl, [sp]
 800ff48:	464b      	mov	r3, r9
 800ff4a:	aa03      	add	r2, sp, #12
 800ff4c:	4621      	mov	r1, r4
 800ff4e:	4640      	mov	r0, r8
 800ff50:	f7ff fee6 	bl	800fd20 <_printf_common>
 800ff54:	3001      	adds	r0, #1
 800ff56:	d14a      	bne.n	800ffee <_printf_i+0x1f2>
 800ff58:	f04f 30ff 	mov.w	r0, #4294967295
 800ff5c:	b004      	add	sp, #16
 800ff5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff62:	6823      	ldr	r3, [r4, #0]
 800ff64:	f043 0320 	orr.w	r3, r3, #32
 800ff68:	6023      	str	r3, [r4, #0]
 800ff6a:	4833      	ldr	r0, [pc, #204]	@ (8010038 <_printf_i+0x23c>)
 800ff6c:	2778      	movs	r7, #120	@ 0x78
 800ff6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	6831      	ldr	r1, [r6, #0]
 800ff76:	061f      	lsls	r7, r3, #24
 800ff78:	f851 5b04 	ldr.w	r5, [r1], #4
 800ff7c:	d402      	bmi.n	800ff84 <_printf_i+0x188>
 800ff7e:	065f      	lsls	r7, r3, #25
 800ff80:	bf48      	it	mi
 800ff82:	b2ad      	uxthmi	r5, r5
 800ff84:	6031      	str	r1, [r6, #0]
 800ff86:	07d9      	lsls	r1, r3, #31
 800ff88:	bf44      	itt	mi
 800ff8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ff8e:	6023      	strmi	r3, [r4, #0]
 800ff90:	b11d      	cbz	r5, 800ff9a <_printf_i+0x19e>
 800ff92:	2310      	movs	r3, #16
 800ff94:	e7ac      	b.n	800fef0 <_printf_i+0xf4>
 800ff96:	4827      	ldr	r0, [pc, #156]	@ (8010034 <_printf_i+0x238>)
 800ff98:	e7e9      	b.n	800ff6e <_printf_i+0x172>
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	f023 0320 	bic.w	r3, r3, #32
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	e7f6      	b.n	800ff92 <_printf_i+0x196>
 800ffa4:	4616      	mov	r6, r2
 800ffa6:	e7bd      	b.n	800ff24 <_printf_i+0x128>
 800ffa8:	6833      	ldr	r3, [r6, #0]
 800ffaa:	6825      	ldr	r5, [r4, #0]
 800ffac:	6961      	ldr	r1, [r4, #20]
 800ffae:	1d18      	adds	r0, r3, #4
 800ffb0:	6030      	str	r0, [r6, #0]
 800ffb2:	062e      	lsls	r6, r5, #24
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	d501      	bpl.n	800ffbc <_printf_i+0x1c0>
 800ffb8:	6019      	str	r1, [r3, #0]
 800ffba:	e002      	b.n	800ffc2 <_printf_i+0x1c6>
 800ffbc:	0668      	lsls	r0, r5, #25
 800ffbe:	d5fb      	bpl.n	800ffb8 <_printf_i+0x1bc>
 800ffc0:	8019      	strh	r1, [r3, #0]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	6123      	str	r3, [r4, #16]
 800ffc6:	4616      	mov	r6, r2
 800ffc8:	e7bc      	b.n	800ff44 <_printf_i+0x148>
 800ffca:	6833      	ldr	r3, [r6, #0]
 800ffcc:	1d1a      	adds	r2, r3, #4
 800ffce:	6032      	str	r2, [r6, #0]
 800ffd0:	681e      	ldr	r6, [r3, #0]
 800ffd2:	6862      	ldr	r2, [r4, #4]
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	f7f0 f932 	bl	8000240 <memchr>
 800ffdc:	b108      	cbz	r0, 800ffe2 <_printf_i+0x1e6>
 800ffde:	1b80      	subs	r0, r0, r6
 800ffe0:	6060      	str	r0, [r4, #4]
 800ffe2:	6863      	ldr	r3, [r4, #4]
 800ffe4:	6123      	str	r3, [r4, #16]
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffec:	e7aa      	b.n	800ff44 <_printf_i+0x148>
 800ffee:	6923      	ldr	r3, [r4, #16]
 800fff0:	4632      	mov	r2, r6
 800fff2:	4649      	mov	r1, r9
 800fff4:	4640      	mov	r0, r8
 800fff6:	47d0      	blx	sl
 800fff8:	3001      	adds	r0, #1
 800fffa:	d0ad      	beq.n	800ff58 <_printf_i+0x15c>
 800fffc:	6823      	ldr	r3, [r4, #0]
 800fffe:	079b      	lsls	r3, r3, #30
 8010000:	d413      	bmi.n	801002a <_printf_i+0x22e>
 8010002:	68e0      	ldr	r0, [r4, #12]
 8010004:	9b03      	ldr	r3, [sp, #12]
 8010006:	4298      	cmp	r0, r3
 8010008:	bfb8      	it	lt
 801000a:	4618      	movlt	r0, r3
 801000c:	e7a6      	b.n	800ff5c <_printf_i+0x160>
 801000e:	2301      	movs	r3, #1
 8010010:	4632      	mov	r2, r6
 8010012:	4649      	mov	r1, r9
 8010014:	4640      	mov	r0, r8
 8010016:	47d0      	blx	sl
 8010018:	3001      	adds	r0, #1
 801001a:	d09d      	beq.n	800ff58 <_printf_i+0x15c>
 801001c:	3501      	adds	r5, #1
 801001e:	68e3      	ldr	r3, [r4, #12]
 8010020:	9903      	ldr	r1, [sp, #12]
 8010022:	1a5b      	subs	r3, r3, r1
 8010024:	42ab      	cmp	r3, r5
 8010026:	dcf2      	bgt.n	801000e <_printf_i+0x212>
 8010028:	e7eb      	b.n	8010002 <_printf_i+0x206>
 801002a:	2500      	movs	r5, #0
 801002c:	f104 0619 	add.w	r6, r4, #25
 8010030:	e7f5      	b.n	801001e <_printf_i+0x222>
 8010032:	bf00      	nop
 8010034:	08014723 	.word	0x08014723
 8010038:	08014734 	.word	0x08014734

0801003c <_scanf_float>:
 801003c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010040:	b087      	sub	sp, #28
 8010042:	4617      	mov	r7, r2
 8010044:	9303      	str	r3, [sp, #12]
 8010046:	688b      	ldr	r3, [r1, #8]
 8010048:	1e5a      	subs	r2, r3, #1
 801004a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801004e:	bf81      	itttt	hi
 8010050:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010054:	eb03 0b05 	addhi.w	fp, r3, r5
 8010058:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801005c:	608b      	strhi	r3, [r1, #8]
 801005e:	680b      	ldr	r3, [r1, #0]
 8010060:	460a      	mov	r2, r1
 8010062:	f04f 0500 	mov.w	r5, #0
 8010066:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801006a:	f842 3b1c 	str.w	r3, [r2], #28
 801006e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010072:	4680      	mov	r8, r0
 8010074:	460c      	mov	r4, r1
 8010076:	bf98      	it	ls
 8010078:	f04f 0b00 	movls.w	fp, #0
 801007c:	9201      	str	r2, [sp, #4]
 801007e:	4616      	mov	r6, r2
 8010080:	46aa      	mov	sl, r5
 8010082:	46a9      	mov	r9, r5
 8010084:	9502      	str	r5, [sp, #8]
 8010086:	68a2      	ldr	r2, [r4, #8]
 8010088:	b152      	cbz	r2, 80100a0 <_scanf_float+0x64>
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	2b4e      	cmp	r3, #78	@ 0x4e
 8010090:	d864      	bhi.n	801015c <_scanf_float+0x120>
 8010092:	2b40      	cmp	r3, #64	@ 0x40
 8010094:	d83c      	bhi.n	8010110 <_scanf_float+0xd4>
 8010096:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801009a:	b2c8      	uxtb	r0, r1
 801009c:	280e      	cmp	r0, #14
 801009e:	d93a      	bls.n	8010116 <_scanf_float+0xda>
 80100a0:	f1b9 0f00 	cmp.w	r9, #0
 80100a4:	d003      	beq.n	80100ae <_scanf_float+0x72>
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100b2:	f1ba 0f01 	cmp.w	sl, #1
 80100b6:	f200 8117 	bhi.w	80102e8 <_scanf_float+0x2ac>
 80100ba:	9b01      	ldr	r3, [sp, #4]
 80100bc:	429e      	cmp	r6, r3
 80100be:	f200 8108 	bhi.w	80102d2 <_scanf_float+0x296>
 80100c2:	2001      	movs	r0, #1
 80100c4:	b007      	add	sp, #28
 80100c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80100ce:	2a0d      	cmp	r2, #13
 80100d0:	d8e6      	bhi.n	80100a0 <_scanf_float+0x64>
 80100d2:	a101      	add	r1, pc, #4	@ (adr r1, 80100d8 <_scanf_float+0x9c>)
 80100d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80100d8:	0801021f 	.word	0x0801021f
 80100dc:	080100a1 	.word	0x080100a1
 80100e0:	080100a1 	.word	0x080100a1
 80100e4:	080100a1 	.word	0x080100a1
 80100e8:	0801027f 	.word	0x0801027f
 80100ec:	08010257 	.word	0x08010257
 80100f0:	080100a1 	.word	0x080100a1
 80100f4:	080100a1 	.word	0x080100a1
 80100f8:	0801022d 	.word	0x0801022d
 80100fc:	080100a1 	.word	0x080100a1
 8010100:	080100a1 	.word	0x080100a1
 8010104:	080100a1 	.word	0x080100a1
 8010108:	080100a1 	.word	0x080100a1
 801010c:	080101e5 	.word	0x080101e5
 8010110:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010114:	e7db      	b.n	80100ce <_scanf_float+0x92>
 8010116:	290e      	cmp	r1, #14
 8010118:	d8c2      	bhi.n	80100a0 <_scanf_float+0x64>
 801011a:	a001      	add	r0, pc, #4	@ (adr r0, 8010120 <_scanf_float+0xe4>)
 801011c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010120:	080101d5 	.word	0x080101d5
 8010124:	080100a1 	.word	0x080100a1
 8010128:	080101d5 	.word	0x080101d5
 801012c:	0801026b 	.word	0x0801026b
 8010130:	080100a1 	.word	0x080100a1
 8010134:	0801017d 	.word	0x0801017d
 8010138:	080101bb 	.word	0x080101bb
 801013c:	080101bb 	.word	0x080101bb
 8010140:	080101bb 	.word	0x080101bb
 8010144:	080101bb 	.word	0x080101bb
 8010148:	080101bb 	.word	0x080101bb
 801014c:	080101bb 	.word	0x080101bb
 8010150:	080101bb 	.word	0x080101bb
 8010154:	080101bb 	.word	0x080101bb
 8010158:	080101bb 	.word	0x080101bb
 801015c:	2b6e      	cmp	r3, #110	@ 0x6e
 801015e:	d809      	bhi.n	8010174 <_scanf_float+0x138>
 8010160:	2b60      	cmp	r3, #96	@ 0x60
 8010162:	d8b2      	bhi.n	80100ca <_scanf_float+0x8e>
 8010164:	2b54      	cmp	r3, #84	@ 0x54
 8010166:	d07b      	beq.n	8010260 <_scanf_float+0x224>
 8010168:	2b59      	cmp	r3, #89	@ 0x59
 801016a:	d199      	bne.n	80100a0 <_scanf_float+0x64>
 801016c:	2d07      	cmp	r5, #7
 801016e:	d197      	bne.n	80100a0 <_scanf_float+0x64>
 8010170:	2508      	movs	r5, #8
 8010172:	e02c      	b.n	80101ce <_scanf_float+0x192>
 8010174:	2b74      	cmp	r3, #116	@ 0x74
 8010176:	d073      	beq.n	8010260 <_scanf_float+0x224>
 8010178:	2b79      	cmp	r3, #121	@ 0x79
 801017a:	e7f6      	b.n	801016a <_scanf_float+0x12e>
 801017c:	6821      	ldr	r1, [r4, #0]
 801017e:	05c8      	lsls	r0, r1, #23
 8010180:	d51b      	bpl.n	80101ba <_scanf_float+0x17e>
 8010182:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010186:	6021      	str	r1, [r4, #0]
 8010188:	f109 0901 	add.w	r9, r9, #1
 801018c:	f1bb 0f00 	cmp.w	fp, #0
 8010190:	d003      	beq.n	801019a <_scanf_float+0x15e>
 8010192:	3201      	adds	r2, #1
 8010194:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010198:	60a2      	str	r2, [r4, #8]
 801019a:	68a3      	ldr	r3, [r4, #8]
 801019c:	3b01      	subs	r3, #1
 801019e:	60a3      	str	r3, [r4, #8]
 80101a0:	6923      	ldr	r3, [r4, #16]
 80101a2:	3301      	adds	r3, #1
 80101a4:	6123      	str	r3, [r4, #16]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	3b01      	subs	r3, #1
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	607b      	str	r3, [r7, #4]
 80101ae:	f340 8087 	ble.w	80102c0 <_scanf_float+0x284>
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	3301      	adds	r3, #1
 80101b6:	603b      	str	r3, [r7, #0]
 80101b8:	e765      	b.n	8010086 <_scanf_float+0x4a>
 80101ba:	eb1a 0105 	adds.w	r1, sl, r5
 80101be:	f47f af6f 	bne.w	80100a0 <_scanf_float+0x64>
 80101c2:	6822      	ldr	r2, [r4, #0]
 80101c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80101c8:	6022      	str	r2, [r4, #0]
 80101ca:	460d      	mov	r5, r1
 80101cc:	468a      	mov	sl, r1
 80101ce:	f806 3b01 	strb.w	r3, [r6], #1
 80101d2:	e7e2      	b.n	801019a <_scanf_float+0x15e>
 80101d4:	6822      	ldr	r2, [r4, #0]
 80101d6:	0610      	lsls	r0, r2, #24
 80101d8:	f57f af62 	bpl.w	80100a0 <_scanf_float+0x64>
 80101dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80101e0:	6022      	str	r2, [r4, #0]
 80101e2:	e7f4      	b.n	80101ce <_scanf_float+0x192>
 80101e4:	f1ba 0f00 	cmp.w	sl, #0
 80101e8:	d10e      	bne.n	8010208 <_scanf_float+0x1cc>
 80101ea:	f1b9 0f00 	cmp.w	r9, #0
 80101ee:	d10e      	bne.n	801020e <_scanf_float+0x1d2>
 80101f0:	6822      	ldr	r2, [r4, #0]
 80101f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80101f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80101fa:	d108      	bne.n	801020e <_scanf_float+0x1d2>
 80101fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010200:	6022      	str	r2, [r4, #0]
 8010202:	f04f 0a01 	mov.w	sl, #1
 8010206:	e7e2      	b.n	80101ce <_scanf_float+0x192>
 8010208:	f1ba 0f02 	cmp.w	sl, #2
 801020c:	d055      	beq.n	80102ba <_scanf_float+0x27e>
 801020e:	2d01      	cmp	r5, #1
 8010210:	d002      	beq.n	8010218 <_scanf_float+0x1dc>
 8010212:	2d04      	cmp	r5, #4
 8010214:	f47f af44 	bne.w	80100a0 <_scanf_float+0x64>
 8010218:	3501      	adds	r5, #1
 801021a:	b2ed      	uxtb	r5, r5
 801021c:	e7d7      	b.n	80101ce <_scanf_float+0x192>
 801021e:	f1ba 0f01 	cmp.w	sl, #1
 8010222:	f47f af3d 	bne.w	80100a0 <_scanf_float+0x64>
 8010226:	f04f 0a02 	mov.w	sl, #2
 801022a:	e7d0      	b.n	80101ce <_scanf_float+0x192>
 801022c:	b97d      	cbnz	r5, 801024e <_scanf_float+0x212>
 801022e:	f1b9 0f00 	cmp.w	r9, #0
 8010232:	f47f af38 	bne.w	80100a6 <_scanf_float+0x6a>
 8010236:	6822      	ldr	r2, [r4, #0]
 8010238:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801023c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010240:	f040 8108 	bne.w	8010454 <_scanf_float+0x418>
 8010244:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010248:	6022      	str	r2, [r4, #0]
 801024a:	2501      	movs	r5, #1
 801024c:	e7bf      	b.n	80101ce <_scanf_float+0x192>
 801024e:	2d03      	cmp	r5, #3
 8010250:	d0e2      	beq.n	8010218 <_scanf_float+0x1dc>
 8010252:	2d05      	cmp	r5, #5
 8010254:	e7de      	b.n	8010214 <_scanf_float+0x1d8>
 8010256:	2d02      	cmp	r5, #2
 8010258:	f47f af22 	bne.w	80100a0 <_scanf_float+0x64>
 801025c:	2503      	movs	r5, #3
 801025e:	e7b6      	b.n	80101ce <_scanf_float+0x192>
 8010260:	2d06      	cmp	r5, #6
 8010262:	f47f af1d 	bne.w	80100a0 <_scanf_float+0x64>
 8010266:	2507      	movs	r5, #7
 8010268:	e7b1      	b.n	80101ce <_scanf_float+0x192>
 801026a:	6822      	ldr	r2, [r4, #0]
 801026c:	0591      	lsls	r1, r2, #22
 801026e:	f57f af17 	bpl.w	80100a0 <_scanf_float+0x64>
 8010272:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010276:	6022      	str	r2, [r4, #0]
 8010278:	f8cd 9008 	str.w	r9, [sp, #8]
 801027c:	e7a7      	b.n	80101ce <_scanf_float+0x192>
 801027e:	6822      	ldr	r2, [r4, #0]
 8010280:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010284:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010288:	d006      	beq.n	8010298 <_scanf_float+0x25c>
 801028a:	0550      	lsls	r0, r2, #21
 801028c:	f57f af08 	bpl.w	80100a0 <_scanf_float+0x64>
 8010290:	f1b9 0f00 	cmp.w	r9, #0
 8010294:	f000 80de 	beq.w	8010454 <_scanf_float+0x418>
 8010298:	0591      	lsls	r1, r2, #22
 801029a:	bf58      	it	pl
 801029c:	9902      	ldrpl	r1, [sp, #8]
 801029e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80102a2:	bf58      	it	pl
 80102a4:	eba9 0101 	subpl.w	r1, r9, r1
 80102a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80102ac:	bf58      	it	pl
 80102ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80102b2:	6022      	str	r2, [r4, #0]
 80102b4:	f04f 0900 	mov.w	r9, #0
 80102b8:	e789      	b.n	80101ce <_scanf_float+0x192>
 80102ba:	f04f 0a03 	mov.w	sl, #3
 80102be:	e786      	b.n	80101ce <_scanf_float+0x192>
 80102c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80102c4:	4639      	mov	r1, r7
 80102c6:	4640      	mov	r0, r8
 80102c8:	4798      	blx	r3
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f43f aedb 	beq.w	8010086 <_scanf_float+0x4a>
 80102d0:	e6e6      	b.n	80100a0 <_scanf_float+0x64>
 80102d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80102d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80102da:	463a      	mov	r2, r7
 80102dc:	4640      	mov	r0, r8
 80102de:	4798      	blx	r3
 80102e0:	6923      	ldr	r3, [r4, #16]
 80102e2:	3b01      	subs	r3, #1
 80102e4:	6123      	str	r3, [r4, #16]
 80102e6:	e6e8      	b.n	80100ba <_scanf_float+0x7e>
 80102e8:	1e6b      	subs	r3, r5, #1
 80102ea:	2b06      	cmp	r3, #6
 80102ec:	d824      	bhi.n	8010338 <_scanf_float+0x2fc>
 80102ee:	2d02      	cmp	r5, #2
 80102f0:	d836      	bhi.n	8010360 <_scanf_float+0x324>
 80102f2:	9b01      	ldr	r3, [sp, #4]
 80102f4:	429e      	cmp	r6, r3
 80102f6:	f67f aee4 	bls.w	80100c2 <_scanf_float+0x86>
 80102fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80102fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010302:	463a      	mov	r2, r7
 8010304:	4640      	mov	r0, r8
 8010306:	4798      	blx	r3
 8010308:	6923      	ldr	r3, [r4, #16]
 801030a:	3b01      	subs	r3, #1
 801030c:	6123      	str	r3, [r4, #16]
 801030e:	e7f0      	b.n	80102f2 <_scanf_float+0x2b6>
 8010310:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010314:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010318:	463a      	mov	r2, r7
 801031a:	4640      	mov	r0, r8
 801031c:	4798      	blx	r3
 801031e:	6923      	ldr	r3, [r4, #16]
 8010320:	3b01      	subs	r3, #1
 8010322:	6123      	str	r3, [r4, #16]
 8010324:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010328:	fa5f fa8a 	uxtb.w	sl, sl
 801032c:	f1ba 0f02 	cmp.w	sl, #2
 8010330:	d1ee      	bne.n	8010310 <_scanf_float+0x2d4>
 8010332:	3d03      	subs	r5, #3
 8010334:	b2ed      	uxtb	r5, r5
 8010336:	1b76      	subs	r6, r6, r5
 8010338:	6823      	ldr	r3, [r4, #0]
 801033a:	05da      	lsls	r2, r3, #23
 801033c:	d530      	bpl.n	80103a0 <_scanf_float+0x364>
 801033e:	055b      	lsls	r3, r3, #21
 8010340:	d511      	bpl.n	8010366 <_scanf_float+0x32a>
 8010342:	9b01      	ldr	r3, [sp, #4]
 8010344:	429e      	cmp	r6, r3
 8010346:	f67f aebc 	bls.w	80100c2 <_scanf_float+0x86>
 801034a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801034e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010352:	463a      	mov	r2, r7
 8010354:	4640      	mov	r0, r8
 8010356:	4798      	blx	r3
 8010358:	6923      	ldr	r3, [r4, #16]
 801035a:	3b01      	subs	r3, #1
 801035c:	6123      	str	r3, [r4, #16]
 801035e:	e7f0      	b.n	8010342 <_scanf_float+0x306>
 8010360:	46aa      	mov	sl, r5
 8010362:	46b3      	mov	fp, r6
 8010364:	e7de      	b.n	8010324 <_scanf_float+0x2e8>
 8010366:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801036a:	6923      	ldr	r3, [r4, #16]
 801036c:	2965      	cmp	r1, #101	@ 0x65
 801036e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010372:	f106 35ff 	add.w	r5, r6, #4294967295
 8010376:	6123      	str	r3, [r4, #16]
 8010378:	d00c      	beq.n	8010394 <_scanf_float+0x358>
 801037a:	2945      	cmp	r1, #69	@ 0x45
 801037c:	d00a      	beq.n	8010394 <_scanf_float+0x358>
 801037e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010382:	463a      	mov	r2, r7
 8010384:	4640      	mov	r0, r8
 8010386:	4798      	blx	r3
 8010388:	6923      	ldr	r3, [r4, #16]
 801038a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801038e:	3b01      	subs	r3, #1
 8010390:	1eb5      	subs	r5, r6, #2
 8010392:	6123      	str	r3, [r4, #16]
 8010394:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010398:	463a      	mov	r2, r7
 801039a:	4640      	mov	r0, r8
 801039c:	4798      	blx	r3
 801039e:	462e      	mov	r6, r5
 80103a0:	6822      	ldr	r2, [r4, #0]
 80103a2:	f012 0210 	ands.w	r2, r2, #16
 80103a6:	d001      	beq.n	80103ac <_scanf_float+0x370>
 80103a8:	2000      	movs	r0, #0
 80103aa:	e68b      	b.n	80100c4 <_scanf_float+0x88>
 80103ac:	7032      	strb	r2, [r6, #0]
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80103b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103b8:	d11c      	bne.n	80103f4 <_scanf_float+0x3b8>
 80103ba:	9b02      	ldr	r3, [sp, #8]
 80103bc:	454b      	cmp	r3, r9
 80103be:	eba3 0209 	sub.w	r2, r3, r9
 80103c2:	d123      	bne.n	801040c <_scanf_float+0x3d0>
 80103c4:	9901      	ldr	r1, [sp, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	4640      	mov	r0, r8
 80103ca:	f002 fcd5 	bl	8012d78 <_strtod_r>
 80103ce:	9b03      	ldr	r3, [sp, #12]
 80103d0:	6821      	ldr	r1, [r4, #0]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f011 0f02 	tst.w	r1, #2
 80103d8:	ec57 6b10 	vmov	r6, r7, d0
 80103dc:	f103 0204 	add.w	r2, r3, #4
 80103e0:	d01f      	beq.n	8010422 <_scanf_float+0x3e6>
 80103e2:	9903      	ldr	r1, [sp, #12]
 80103e4:	600a      	str	r2, [r1, #0]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	e9c3 6700 	strd	r6, r7, [r3]
 80103ec:	68e3      	ldr	r3, [r4, #12]
 80103ee:	3301      	adds	r3, #1
 80103f0:	60e3      	str	r3, [r4, #12]
 80103f2:	e7d9      	b.n	80103a8 <_scanf_float+0x36c>
 80103f4:	9b04      	ldr	r3, [sp, #16]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d0e4      	beq.n	80103c4 <_scanf_float+0x388>
 80103fa:	9905      	ldr	r1, [sp, #20]
 80103fc:	230a      	movs	r3, #10
 80103fe:	3101      	adds	r1, #1
 8010400:	4640      	mov	r0, r8
 8010402:	f7ff f9b7 	bl	800f774 <_strtol_r>
 8010406:	9b04      	ldr	r3, [sp, #16]
 8010408:	9e05      	ldr	r6, [sp, #20]
 801040a:	1ac2      	subs	r2, r0, r3
 801040c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010410:	429e      	cmp	r6, r3
 8010412:	bf28      	it	cs
 8010414:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010418:	4910      	ldr	r1, [pc, #64]	@ (801045c <_scanf_float+0x420>)
 801041a:	4630      	mov	r0, r6
 801041c:	f000 f8e4 	bl	80105e8 <siprintf>
 8010420:	e7d0      	b.n	80103c4 <_scanf_float+0x388>
 8010422:	f011 0f04 	tst.w	r1, #4
 8010426:	9903      	ldr	r1, [sp, #12]
 8010428:	600a      	str	r2, [r1, #0]
 801042a:	d1dc      	bne.n	80103e6 <_scanf_float+0x3aa>
 801042c:	681d      	ldr	r5, [r3, #0]
 801042e:	4632      	mov	r2, r6
 8010430:	463b      	mov	r3, r7
 8010432:	4630      	mov	r0, r6
 8010434:	4639      	mov	r1, r7
 8010436:	f7f0 fbb1 	bl	8000b9c <__aeabi_dcmpun>
 801043a:	b128      	cbz	r0, 8010448 <_scanf_float+0x40c>
 801043c:	4808      	ldr	r0, [pc, #32]	@ (8010460 <_scanf_float+0x424>)
 801043e:	f000 fa77 	bl	8010930 <nanf>
 8010442:	ed85 0a00 	vstr	s0, [r5]
 8010446:	e7d1      	b.n	80103ec <_scanf_float+0x3b0>
 8010448:	4630      	mov	r0, r6
 801044a:	4639      	mov	r1, r7
 801044c:	f7f0 fc04 	bl	8000c58 <__aeabi_d2f>
 8010450:	6028      	str	r0, [r5, #0]
 8010452:	e7cb      	b.n	80103ec <_scanf_float+0x3b0>
 8010454:	f04f 0900 	mov.w	r9, #0
 8010458:	e629      	b.n	80100ae <_scanf_float+0x72>
 801045a:	bf00      	nop
 801045c:	08014745 	.word	0x08014745
 8010460:	080147f6 	.word	0x080147f6

08010464 <std>:
 8010464:	2300      	movs	r3, #0
 8010466:	b510      	push	{r4, lr}
 8010468:	4604      	mov	r4, r0
 801046a:	e9c0 3300 	strd	r3, r3, [r0]
 801046e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010472:	6083      	str	r3, [r0, #8]
 8010474:	8181      	strh	r1, [r0, #12]
 8010476:	6643      	str	r3, [r0, #100]	@ 0x64
 8010478:	81c2      	strh	r2, [r0, #14]
 801047a:	6183      	str	r3, [r0, #24]
 801047c:	4619      	mov	r1, r3
 801047e:	2208      	movs	r2, #8
 8010480:	305c      	adds	r0, #92	@ 0x5c
 8010482:	f000 f94d 	bl	8010720 <memset>
 8010486:	4b0d      	ldr	r3, [pc, #52]	@ (80104bc <std+0x58>)
 8010488:	6263      	str	r3, [r4, #36]	@ 0x24
 801048a:	4b0d      	ldr	r3, [pc, #52]	@ (80104c0 <std+0x5c>)
 801048c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801048e:	4b0d      	ldr	r3, [pc, #52]	@ (80104c4 <std+0x60>)
 8010490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010492:	4b0d      	ldr	r3, [pc, #52]	@ (80104c8 <std+0x64>)
 8010494:	6323      	str	r3, [r4, #48]	@ 0x30
 8010496:	4b0d      	ldr	r3, [pc, #52]	@ (80104cc <std+0x68>)
 8010498:	6224      	str	r4, [r4, #32]
 801049a:	429c      	cmp	r4, r3
 801049c:	d006      	beq.n	80104ac <std+0x48>
 801049e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80104a2:	4294      	cmp	r4, r2
 80104a4:	d002      	beq.n	80104ac <std+0x48>
 80104a6:	33d0      	adds	r3, #208	@ 0xd0
 80104a8:	429c      	cmp	r4, r3
 80104aa:	d105      	bne.n	80104b8 <std+0x54>
 80104ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80104b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104b4:	f000 ba22 	b.w	80108fc <__retarget_lock_init_recursive>
 80104b8:	bd10      	pop	{r4, pc}
 80104ba:	bf00      	nop
 80104bc:	08010629 	.word	0x08010629
 80104c0:	0801064b 	.word	0x0801064b
 80104c4:	08010683 	.word	0x08010683
 80104c8:	080106a7 	.word	0x080106a7
 80104cc:	20002264 	.word	0x20002264

080104d0 <stdio_exit_handler>:
 80104d0:	4a02      	ldr	r2, [pc, #8]	@ (80104dc <stdio_exit_handler+0xc>)
 80104d2:	4903      	ldr	r1, [pc, #12]	@ (80104e0 <stdio_exit_handler+0x10>)
 80104d4:	4803      	ldr	r0, [pc, #12]	@ (80104e4 <stdio_exit_handler+0x14>)
 80104d6:	f000 b869 	b.w	80105ac <_fwalk_sglue>
 80104da:	bf00      	nop
 80104dc:	2000023c 	.word	0x2000023c
 80104e0:	080133c1 	.word	0x080133c1
 80104e4:	2000024c 	.word	0x2000024c

080104e8 <cleanup_stdio>:
 80104e8:	6841      	ldr	r1, [r0, #4]
 80104ea:	4b0c      	ldr	r3, [pc, #48]	@ (801051c <cleanup_stdio+0x34>)
 80104ec:	4299      	cmp	r1, r3
 80104ee:	b510      	push	{r4, lr}
 80104f0:	4604      	mov	r4, r0
 80104f2:	d001      	beq.n	80104f8 <cleanup_stdio+0x10>
 80104f4:	f002 ff64 	bl	80133c0 <_fflush_r>
 80104f8:	68a1      	ldr	r1, [r4, #8]
 80104fa:	4b09      	ldr	r3, [pc, #36]	@ (8010520 <cleanup_stdio+0x38>)
 80104fc:	4299      	cmp	r1, r3
 80104fe:	d002      	beq.n	8010506 <cleanup_stdio+0x1e>
 8010500:	4620      	mov	r0, r4
 8010502:	f002 ff5d 	bl	80133c0 <_fflush_r>
 8010506:	68e1      	ldr	r1, [r4, #12]
 8010508:	4b06      	ldr	r3, [pc, #24]	@ (8010524 <cleanup_stdio+0x3c>)
 801050a:	4299      	cmp	r1, r3
 801050c:	d004      	beq.n	8010518 <cleanup_stdio+0x30>
 801050e:	4620      	mov	r0, r4
 8010510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010514:	f002 bf54 	b.w	80133c0 <_fflush_r>
 8010518:	bd10      	pop	{r4, pc}
 801051a:	bf00      	nop
 801051c:	20002264 	.word	0x20002264
 8010520:	200022cc 	.word	0x200022cc
 8010524:	20002334 	.word	0x20002334

08010528 <global_stdio_init.part.0>:
 8010528:	b510      	push	{r4, lr}
 801052a:	4b0b      	ldr	r3, [pc, #44]	@ (8010558 <global_stdio_init.part.0+0x30>)
 801052c:	4c0b      	ldr	r4, [pc, #44]	@ (801055c <global_stdio_init.part.0+0x34>)
 801052e:	4a0c      	ldr	r2, [pc, #48]	@ (8010560 <global_stdio_init.part.0+0x38>)
 8010530:	601a      	str	r2, [r3, #0]
 8010532:	4620      	mov	r0, r4
 8010534:	2200      	movs	r2, #0
 8010536:	2104      	movs	r1, #4
 8010538:	f7ff ff94 	bl	8010464 <std>
 801053c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010540:	2201      	movs	r2, #1
 8010542:	2109      	movs	r1, #9
 8010544:	f7ff ff8e 	bl	8010464 <std>
 8010548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801054c:	2202      	movs	r2, #2
 801054e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010552:	2112      	movs	r1, #18
 8010554:	f7ff bf86 	b.w	8010464 <std>
 8010558:	2000239c 	.word	0x2000239c
 801055c:	20002264 	.word	0x20002264
 8010560:	080104d1 	.word	0x080104d1

08010564 <__sfp_lock_acquire>:
 8010564:	4801      	ldr	r0, [pc, #4]	@ (801056c <__sfp_lock_acquire+0x8>)
 8010566:	f000 b9ca 	b.w	80108fe <__retarget_lock_acquire_recursive>
 801056a:	bf00      	nop
 801056c:	200023a5 	.word	0x200023a5

08010570 <__sfp_lock_release>:
 8010570:	4801      	ldr	r0, [pc, #4]	@ (8010578 <__sfp_lock_release+0x8>)
 8010572:	f000 b9c5 	b.w	8010900 <__retarget_lock_release_recursive>
 8010576:	bf00      	nop
 8010578:	200023a5 	.word	0x200023a5

0801057c <__sinit>:
 801057c:	b510      	push	{r4, lr}
 801057e:	4604      	mov	r4, r0
 8010580:	f7ff fff0 	bl	8010564 <__sfp_lock_acquire>
 8010584:	6a23      	ldr	r3, [r4, #32]
 8010586:	b11b      	cbz	r3, 8010590 <__sinit+0x14>
 8010588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801058c:	f7ff bff0 	b.w	8010570 <__sfp_lock_release>
 8010590:	4b04      	ldr	r3, [pc, #16]	@ (80105a4 <__sinit+0x28>)
 8010592:	6223      	str	r3, [r4, #32]
 8010594:	4b04      	ldr	r3, [pc, #16]	@ (80105a8 <__sinit+0x2c>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1f5      	bne.n	8010588 <__sinit+0xc>
 801059c:	f7ff ffc4 	bl	8010528 <global_stdio_init.part.0>
 80105a0:	e7f2      	b.n	8010588 <__sinit+0xc>
 80105a2:	bf00      	nop
 80105a4:	080104e9 	.word	0x080104e9
 80105a8:	2000239c 	.word	0x2000239c

080105ac <_fwalk_sglue>:
 80105ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b0:	4607      	mov	r7, r0
 80105b2:	4688      	mov	r8, r1
 80105b4:	4614      	mov	r4, r2
 80105b6:	2600      	movs	r6, #0
 80105b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105bc:	f1b9 0901 	subs.w	r9, r9, #1
 80105c0:	d505      	bpl.n	80105ce <_fwalk_sglue+0x22>
 80105c2:	6824      	ldr	r4, [r4, #0]
 80105c4:	2c00      	cmp	r4, #0
 80105c6:	d1f7      	bne.n	80105b8 <_fwalk_sglue+0xc>
 80105c8:	4630      	mov	r0, r6
 80105ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ce:	89ab      	ldrh	r3, [r5, #12]
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d907      	bls.n	80105e4 <_fwalk_sglue+0x38>
 80105d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105d8:	3301      	adds	r3, #1
 80105da:	d003      	beq.n	80105e4 <_fwalk_sglue+0x38>
 80105dc:	4629      	mov	r1, r5
 80105de:	4638      	mov	r0, r7
 80105e0:	47c0      	blx	r8
 80105e2:	4306      	orrs	r6, r0
 80105e4:	3568      	adds	r5, #104	@ 0x68
 80105e6:	e7e9      	b.n	80105bc <_fwalk_sglue+0x10>

080105e8 <siprintf>:
 80105e8:	b40e      	push	{r1, r2, r3}
 80105ea:	b500      	push	{lr}
 80105ec:	b09c      	sub	sp, #112	@ 0x70
 80105ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80105f0:	9002      	str	r0, [sp, #8]
 80105f2:	9006      	str	r0, [sp, #24]
 80105f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80105f8:	4809      	ldr	r0, [pc, #36]	@ (8010620 <siprintf+0x38>)
 80105fa:	9107      	str	r1, [sp, #28]
 80105fc:	9104      	str	r1, [sp, #16]
 80105fe:	4909      	ldr	r1, [pc, #36]	@ (8010624 <siprintf+0x3c>)
 8010600:	f853 2b04 	ldr.w	r2, [r3], #4
 8010604:	9105      	str	r1, [sp, #20]
 8010606:	6800      	ldr	r0, [r0, #0]
 8010608:	9301      	str	r3, [sp, #4]
 801060a:	a902      	add	r1, sp, #8
 801060c:	f002 fc16 	bl	8012e3c <_svfiprintf_r>
 8010610:	9b02      	ldr	r3, [sp, #8]
 8010612:	2200      	movs	r2, #0
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	b01c      	add	sp, #112	@ 0x70
 8010618:	f85d eb04 	ldr.w	lr, [sp], #4
 801061c:	b003      	add	sp, #12
 801061e:	4770      	bx	lr
 8010620:	20000248 	.word	0x20000248
 8010624:	ffff0208 	.word	0xffff0208

08010628 <__sread>:
 8010628:	b510      	push	{r4, lr}
 801062a:	460c      	mov	r4, r1
 801062c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010630:	f000 f916 	bl	8010860 <_read_r>
 8010634:	2800      	cmp	r0, #0
 8010636:	bfab      	itete	ge
 8010638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801063a:	89a3      	ldrhlt	r3, [r4, #12]
 801063c:	181b      	addge	r3, r3, r0
 801063e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010642:	bfac      	ite	ge
 8010644:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010646:	81a3      	strhlt	r3, [r4, #12]
 8010648:	bd10      	pop	{r4, pc}

0801064a <__swrite>:
 801064a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801064e:	461f      	mov	r7, r3
 8010650:	898b      	ldrh	r3, [r1, #12]
 8010652:	05db      	lsls	r3, r3, #23
 8010654:	4605      	mov	r5, r0
 8010656:	460c      	mov	r4, r1
 8010658:	4616      	mov	r6, r2
 801065a:	d505      	bpl.n	8010668 <__swrite+0x1e>
 801065c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010660:	2302      	movs	r3, #2
 8010662:	2200      	movs	r2, #0
 8010664:	f000 f8ea 	bl	801083c <_lseek_r>
 8010668:	89a3      	ldrh	r3, [r4, #12]
 801066a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801066e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010672:	81a3      	strh	r3, [r4, #12]
 8010674:	4632      	mov	r2, r6
 8010676:	463b      	mov	r3, r7
 8010678:	4628      	mov	r0, r5
 801067a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801067e:	f000 b901 	b.w	8010884 <_write_r>

08010682 <__sseek>:
 8010682:	b510      	push	{r4, lr}
 8010684:	460c      	mov	r4, r1
 8010686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801068a:	f000 f8d7 	bl	801083c <_lseek_r>
 801068e:	1c43      	adds	r3, r0, #1
 8010690:	89a3      	ldrh	r3, [r4, #12]
 8010692:	bf15      	itete	ne
 8010694:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801069a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801069e:	81a3      	strheq	r3, [r4, #12]
 80106a0:	bf18      	it	ne
 80106a2:	81a3      	strhne	r3, [r4, #12]
 80106a4:	bd10      	pop	{r4, pc}

080106a6 <__sclose>:
 80106a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106aa:	f000 b8b7 	b.w	801081c <_close_r>

080106ae <_vsniprintf_r>:
 80106ae:	b530      	push	{r4, r5, lr}
 80106b0:	4614      	mov	r4, r2
 80106b2:	2c00      	cmp	r4, #0
 80106b4:	b09b      	sub	sp, #108	@ 0x6c
 80106b6:	4605      	mov	r5, r0
 80106b8:	461a      	mov	r2, r3
 80106ba:	da05      	bge.n	80106c8 <_vsniprintf_r+0x1a>
 80106bc:	238b      	movs	r3, #139	@ 0x8b
 80106be:	6003      	str	r3, [r0, #0]
 80106c0:	f04f 30ff 	mov.w	r0, #4294967295
 80106c4:	b01b      	add	sp, #108	@ 0x6c
 80106c6:	bd30      	pop	{r4, r5, pc}
 80106c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80106cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80106d0:	bf14      	ite	ne
 80106d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80106d6:	4623      	moveq	r3, r4
 80106d8:	9302      	str	r3, [sp, #8]
 80106da:	9305      	str	r3, [sp, #20]
 80106dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106e0:	9100      	str	r1, [sp, #0]
 80106e2:	9104      	str	r1, [sp, #16]
 80106e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80106e8:	4669      	mov	r1, sp
 80106ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80106ec:	f002 fba6 	bl	8012e3c <_svfiprintf_r>
 80106f0:	1c43      	adds	r3, r0, #1
 80106f2:	bfbc      	itt	lt
 80106f4:	238b      	movlt	r3, #139	@ 0x8b
 80106f6:	602b      	strlt	r3, [r5, #0]
 80106f8:	2c00      	cmp	r4, #0
 80106fa:	d0e3      	beq.n	80106c4 <_vsniprintf_r+0x16>
 80106fc:	9b00      	ldr	r3, [sp, #0]
 80106fe:	2200      	movs	r2, #0
 8010700:	701a      	strb	r2, [r3, #0]
 8010702:	e7df      	b.n	80106c4 <_vsniprintf_r+0x16>

08010704 <vsniprintf>:
 8010704:	b507      	push	{r0, r1, r2, lr}
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	4613      	mov	r3, r2
 801070a:	460a      	mov	r2, r1
 801070c:	4601      	mov	r1, r0
 801070e:	4803      	ldr	r0, [pc, #12]	@ (801071c <vsniprintf+0x18>)
 8010710:	6800      	ldr	r0, [r0, #0]
 8010712:	f7ff ffcc 	bl	80106ae <_vsniprintf_r>
 8010716:	b003      	add	sp, #12
 8010718:	f85d fb04 	ldr.w	pc, [sp], #4
 801071c:	20000248 	.word	0x20000248

08010720 <memset>:
 8010720:	4402      	add	r2, r0
 8010722:	4603      	mov	r3, r0
 8010724:	4293      	cmp	r3, r2
 8010726:	d100      	bne.n	801072a <memset+0xa>
 8010728:	4770      	bx	lr
 801072a:	f803 1b01 	strb.w	r1, [r3], #1
 801072e:	e7f9      	b.n	8010724 <memset+0x4>

08010730 <strtok>:
 8010730:	4b16      	ldr	r3, [pc, #88]	@ (801078c <strtok+0x5c>)
 8010732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010736:	681f      	ldr	r7, [r3, #0]
 8010738:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801073a:	4605      	mov	r5, r0
 801073c:	460e      	mov	r6, r1
 801073e:	b9ec      	cbnz	r4, 801077c <strtok+0x4c>
 8010740:	2050      	movs	r0, #80	@ 0x50
 8010742:	f000 ffaf 	bl	80116a4 <malloc>
 8010746:	4602      	mov	r2, r0
 8010748:	6478      	str	r0, [r7, #68]	@ 0x44
 801074a:	b920      	cbnz	r0, 8010756 <strtok+0x26>
 801074c:	4b10      	ldr	r3, [pc, #64]	@ (8010790 <strtok+0x60>)
 801074e:	4811      	ldr	r0, [pc, #68]	@ (8010794 <strtok+0x64>)
 8010750:	215b      	movs	r1, #91	@ 0x5b
 8010752:	f000 f8f3 	bl	801093c <__assert_func>
 8010756:	e9c0 4400 	strd	r4, r4, [r0]
 801075a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801075e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010762:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010766:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801076a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801076e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8010772:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010776:	6184      	str	r4, [r0, #24]
 8010778:	7704      	strb	r4, [r0, #28]
 801077a:	6244      	str	r4, [r0, #36]	@ 0x24
 801077c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801077e:	4631      	mov	r1, r6
 8010780:	4628      	mov	r0, r5
 8010782:	2301      	movs	r3, #1
 8010784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010788:	f000 b806 	b.w	8010798 <__strtok_r>
 801078c:	20000248 	.word	0x20000248
 8010790:	0801474a 	.word	0x0801474a
 8010794:	08014761 	.word	0x08014761

08010798 <__strtok_r>:
 8010798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801079a:	4604      	mov	r4, r0
 801079c:	b908      	cbnz	r0, 80107a2 <__strtok_r+0xa>
 801079e:	6814      	ldr	r4, [r2, #0]
 80107a0:	b144      	cbz	r4, 80107b4 <__strtok_r+0x1c>
 80107a2:	4620      	mov	r0, r4
 80107a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80107a8:	460f      	mov	r7, r1
 80107aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80107ae:	b91e      	cbnz	r6, 80107b8 <__strtok_r+0x20>
 80107b0:	b965      	cbnz	r5, 80107cc <__strtok_r+0x34>
 80107b2:	6015      	str	r5, [r2, #0]
 80107b4:	2000      	movs	r0, #0
 80107b6:	e005      	b.n	80107c4 <__strtok_r+0x2c>
 80107b8:	42b5      	cmp	r5, r6
 80107ba:	d1f6      	bne.n	80107aa <__strtok_r+0x12>
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1f0      	bne.n	80107a2 <__strtok_r+0xa>
 80107c0:	6014      	str	r4, [r2, #0]
 80107c2:	7003      	strb	r3, [r0, #0]
 80107c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c6:	461c      	mov	r4, r3
 80107c8:	e00c      	b.n	80107e4 <__strtok_r+0x4c>
 80107ca:	b915      	cbnz	r5, 80107d2 <__strtok_r+0x3a>
 80107cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80107d0:	460e      	mov	r6, r1
 80107d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80107d6:	42ab      	cmp	r3, r5
 80107d8:	d1f7      	bne.n	80107ca <__strtok_r+0x32>
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d0f3      	beq.n	80107c6 <__strtok_r+0x2e>
 80107de:	2300      	movs	r3, #0
 80107e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80107e4:	6014      	str	r4, [r2, #0]
 80107e6:	e7ed      	b.n	80107c4 <__strtok_r+0x2c>

080107e8 <strstr>:
 80107e8:	780a      	ldrb	r2, [r1, #0]
 80107ea:	b570      	push	{r4, r5, r6, lr}
 80107ec:	b96a      	cbnz	r2, 801080a <strstr+0x22>
 80107ee:	bd70      	pop	{r4, r5, r6, pc}
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d109      	bne.n	8010808 <strstr+0x20>
 80107f4:	460c      	mov	r4, r1
 80107f6:	4605      	mov	r5, r0
 80107f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d0f6      	beq.n	80107ee <strstr+0x6>
 8010800:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010804:	429e      	cmp	r6, r3
 8010806:	d0f7      	beq.n	80107f8 <strstr+0x10>
 8010808:	3001      	adds	r0, #1
 801080a:	7803      	ldrb	r3, [r0, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d1ef      	bne.n	80107f0 <strstr+0x8>
 8010810:	4618      	mov	r0, r3
 8010812:	e7ec      	b.n	80107ee <strstr+0x6>

08010814 <_localeconv_r>:
 8010814:	4800      	ldr	r0, [pc, #0]	@ (8010818 <_localeconv_r+0x4>)
 8010816:	4770      	bx	lr
 8010818:	20000388 	.word	0x20000388

0801081c <_close_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4d06      	ldr	r5, [pc, #24]	@ (8010838 <_close_r+0x1c>)
 8010820:	2300      	movs	r3, #0
 8010822:	4604      	mov	r4, r0
 8010824:	4608      	mov	r0, r1
 8010826:	602b      	str	r3, [r5, #0]
 8010828:	f7f0 ff06 	bl	8001638 <_close>
 801082c:	1c43      	adds	r3, r0, #1
 801082e:	d102      	bne.n	8010836 <_close_r+0x1a>
 8010830:	682b      	ldr	r3, [r5, #0]
 8010832:	b103      	cbz	r3, 8010836 <_close_r+0x1a>
 8010834:	6023      	str	r3, [r4, #0]
 8010836:	bd38      	pop	{r3, r4, r5, pc}
 8010838:	200023a0 	.word	0x200023a0

0801083c <_lseek_r>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	4d07      	ldr	r5, [pc, #28]	@ (801085c <_lseek_r+0x20>)
 8010840:	4604      	mov	r4, r0
 8010842:	4608      	mov	r0, r1
 8010844:	4611      	mov	r1, r2
 8010846:	2200      	movs	r2, #0
 8010848:	602a      	str	r2, [r5, #0]
 801084a:	461a      	mov	r2, r3
 801084c:	f7f0 ff1b 	bl	8001686 <_lseek>
 8010850:	1c43      	adds	r3, r0, #1
 8010852:	d102      	bne.n	801085a <_lseek_r+0x1e>
 8010854:	682b      	ldr	r3, [r5, #0]
 8010856:	b103      	cbz	r3, 801085a <_lseek_r+0x1e>
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	bd38      	pop	{r3, r4, r5, pc}
 801085c:	200023a0 	.word	0x200023a0

08010860 <_read_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d07      	ldr	r5, [pc, #28]	@ (8010880 <_read_r+0x20>)
 8010864:	4604      	mov	r4, r0
 8010866:	4608      	mov	r0, r1
 8010868:	4611      	mov	r1, r2
 801086a:	2200      	movs	r2, #0
 801086c:	602a      	str	r2, [r5, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	f7f0 fec5 	bl	80015fe <_read>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_read_r+0x1e>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_read_r+0x1e>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	200023a0 	.word	0x200023a0

08010884 <_write_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4d07      	ldr	r5, [pc, #28]	@ (80108a4 <_write_r+0x20>)
 8010888:	4604      	mov	r4, r0
 801088a:	4608      	mov	r0, r1
 801088c:	4611      	mov	r1, r2
 801088e:	2200      	movs	r2, #0
 8010890:	602a      	str	r2, [r5, #0]
 8010892:	461a      	mov	r2, r3
 8010894:	f7fe fe82 	bl	800f59c <_write>
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	d102      	bne.n	80108a2 <_write_r+0x1e>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	b103      	cbz	r3, 80108a2 <_write_r+0x1e>
 80108a0:	6023      	str	r3, [r4, #0]
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	200023a0 	.word	0x200023a0

080108a8 <__errno>:
 80108a8:	4b01      	ldr	r3, [pc, #4]	@ (80108b0 <__errno+0x8>)
 80108aa:	6818      	ldr	r0, [r3, #0]
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop
 80108b0:	20000248 	.word	0x20000248

080108b4 <__libc_init_array>:
 80108b4:	b570      	push	{r4, r5, r6, lr}
 80108b6:	4d0d      	ldr	r5, [pc, #52]	@ (80108ec <__libc_init_array+0x38>)
 80108b8:	4c0d      	ldr	r4, [pc, #52]	@ (80108f0 <__libc_init_array+0x3c>)
 80108ba:	1b64      	subs	r4, r4, r5
 80108bc:	10a4      	asrs	r4, r4, #2
 80108be:	2600      	movs	r6, #0
 80108c0:	42a6      	cmp	r6, r4
 80108c2:	d109      	bne.n	80108d8 <__libc_init_array+0x24>
 80108c4:	4d0b      	ldr	r5, [pc, #44]	@ (80108f4 <__libc_init_array+0x40>)
 80108c6:	4c0c      	ldr	r4, [pc, #48]	@ (80108f8 <__libc_init_array+0x44>)
 80108c8:	f003 fd6a 	bl	80143a0 <_init>
 80108cc:	1b64      	subs	r4, r4, r5
 80108ce:	10a4      	asrs	r4, r4, #2
 80108d0:	2600      	movs	r6, #0
 80108d2:	42a6      	cmp	r6, r4
 80108d4:	d105      	bne.n	80108e2 <__libc_init_array+0x2e>
 80108d6:	bd70      	pop	{r4, r5, r6, pc}
 80108d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80108dc:	4798      	blx	r3
 80108de:	3601      	adds	r6, #1
 80108e0:	e7ee      	b.n	80108c0 <__libc_init_array+0xc>
 80108e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80108e6:	4798      	blx	r3
 80108e8:	3601      	adds	r6, #1
 80108ea:	e7f2      	b.n	80108d2 <__libc_init_array+0x1e>
 80108ec:	08014b18 	.word	0x08014b18
 80108f0:	08014b18 	.word	0x08014b18
 80108f4:	08014b18 	.word	0x08014b18
 80108f8:	08014b1c 	.word	0x08014b1c

080108fc <__retarget_lock_init_recursive>:
 80108fc:	4770      	bx	lr

080108fe <__retarget_lock_acquire_recursive>:
 80108fe:	4770      	bx	lr

08010900 <__retarget_lock_release_recursive>:
 8010900:	4770      	bx	lr

08010902 <strcpy>:
 8010902:	4603      	mov	r3, r0
 8010904:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010908:	f803 2b01 	strb.w	r2, [r3], #1
 801090c:	2a00      	cmp	r2, #0
 801090e:	d1f9      	bne.n	8010904 <strcpy+0x2>
 8010910:	4770      	bx	lr

08010912 <memcpy>:
 8010912:	440a      	add	r2, r1
 8010914:	4291      	cmp	r1, r2
 8010916:	f100 33ff 	add.w	r3, r0, #4294967295
 801091a:	d100      	bne.n	801091e <memcpy+0xc>
 801091c:	4770      	bx	lr
 801091e:	b510      	push	{r4, lr}
 8010920:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010924:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010928:	4291      	cmp	r1, r2
 801092a:	d1f9      	bne.n	8010920 <memcpy+0xe>
 801092c:	bd10      	pop	{r4, pc}
	...

08010930 <nanf>:
 8010930:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010938 <nanf+0x8>
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	7fc00000 	.word	0x7fc00000

0801093c <__assert_func>:
 801093c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801093e:	4614      	mov	r4, r2
 8010940:	461a      	mov	r2, r3
 8010942:	4b09      	ldr	r3, [pc, #36]	@ (8010968 <__assert_func+0x2c>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4605      	mov	r5, r0
 8010948:	68d8      	ldr	r0, [r3, #12]
 801094a:	b954      	cbnz	r4, 8010962 <__assert_func+0x26>
 801094c:	4b07      	ldr	r3, [pc, #28]	@ (801096c <__assert_func+0x30>)
 801094e:	461c      	mov	r4, r3
 8010950:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010954:	9100      	str	r1, [sp, #0]
 8010956:	462b      	mov	r3, r5
 8010958:	4905      	ldr	r1, [pc, #20]	@ (8010970 <__assert_func+0x34>)
 801095a:	f002 fd59 	bl	8013410 <fiprintf>
 801095e:	f002 fe43 	bl	80135e8 <abort>
 8010962:	4b04      	ldr	r3, [pc, #16]	@ (8010974 <__assert_func+0x38>)
 8010964:	e7f4      	b.n	8010950 <__assert_func+0x14>
 8010966:	bf00      	nop
 8010968:	20000248 	.word	0x20000248
 801096c:	080147f6 	.word	0x080147f6
 8010970:	080147c8 	.word	0x080147c8
 8010974:	080147bb 	.word	0x080147bb

08010978 <quorem>:
 8010978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801097c:	6903      	ldr	r3, [r0, #16]
 801097e:	690c      	ldr	r4, [r1, #16]
 8010980:	42a3      	cmp	r3, r4
 8010982:	4607      	mov	r7, r0
 8010984:	db7e      	blt.n	8010a84 <quorem+0x10c>
 8010986:	3c01      	subs	r4, #1
 8010988:	f101 0814 	add.w	r8, r1, #20
 801098c:	00a3      	lsls	r3, r4, #2
 801098e:	f100 0514 	add.w	r5, r0, #20
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010998:	9301      	str	r3, [sp, #4]
 801099a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801099e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109a2:	3301      	adds	r3, #1
 80109a4:	429a      	cmp	r2, r3
 80109a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80109aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80109ae:	d32e      	bcc.n	8010a0e <quorem+0x96>
 80109b0:	f04f 0a00 	mov.w	sl, #0
 80109b4:	46c4      	mov	ip, r8
 80109b6:	46ae      	mov	lr, r5
 80109b8:	46d3      	mov	fp, sl
 80109ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 80109be:	b298      	uxth	r0, r3
 80109c0:	fb06 a000 	mla	r0, r6, r0, sl
 80109c4:	0c02      	lsrs	r2, r0, #16
 80109c6:	0c1b      	lsrs	r3, r3, #16
 80109c8:	fb06 2303 	mla	r3, r6, r3, r2
 80109cc:	f8de 2000 	ldr.w	r2, [lr]
 80109d0:	b280      	uxth	r0, r0
 80109d2:	b292      	uxth	r2, r2
 80109d4:	1a12      	subs	r2, r2, r0
 80109d6:	445a      	add	r2, fp
 80109d8:	f8de 0000 	ldr.w	r0, [lr]
 80109dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109e0:	b29b      	uxth	r3, r3
 80109e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80109e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80109ea:	b292      	uxth	r2, r2
 80109ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80109f0:	45e1      	cmp	r9, ip
 80109f2:	f84e 2b04 	str.w	r2, [lr], #4
 80109f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80109fa:	d2de      	bcs.n	80109ba <quorem+0x42>
 80109fc:	9b00      	ldr	r3, [sp, #0]
 80109fe:	58eb      	ldr	r3, [r5, r3]
 8010a00:	b92b      	cbnz	r3, 8010a0e <quorem+0x96>
 8010a02:	9b01      	ldr	r3, [sp, #4]
 8010a04:	3b04      	subs	r3, #4
 8010a06:	429d      	cmp	r5, r3
 8010a08:	461a      	mov	r2, r3
 8010a0a:	d32f      	bcc.n	8010a6c <quorem+0xf4>
 8010a0c:	613c      	str	r4, [r7, #16]
 8010a0e:	4638      	mov	r0, r7
 8010a10:	f001 f9c2 	bl	8011d98 <__mcmp>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	db25      	blt.n	8010a64 <quorem+0xec>
 8010a18:	4629      	mov	r1, r5
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a20:	f8d1 c000 	ldr.w	ip, [r1]
 8010a24:	fa1f fe82 	uxth.w	lr, r2
 8010a28:	fa1f f38c 	uxth.w	r3, ip
 8010a2c:	eba3 030e 	sub.w	r3, r3, lr
 8010a30:	4403      	add	r3, r0
 8010a32:	0c12      	lsrs	r2, r2, #16
 8010a34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010a38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a42:	45c1      	cmp	r9, r8
 8010a44:	f841 3b04 	str.w	r3, [r1], #4
 8010a48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010a4c:	d2e6      	bcs.n	8010a1c <quorem+0xa4>
 8010a4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a56:	b922      	cbnz	r2, 8010a62 <quorem+0xea>
 8010a58:	3b04      	subs	r3, #4
 8010a5a:	429d      	cmp	r5, r3
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	d30b      	bcc.n	8010a78 <quorem+0x100>
 8010a60:	613c      	str	r4, [r7, #16]
 8010a62:	3601      	adds	r6, #1
 8010a64:	4630      	mov	r0, r6
 8010a66:	b003      	add	sp, #12
 8010a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a6c:	6812      	ldr	r2, [r2, #0]
 8010a6e:	3b04      	subs	r3, #4
 8010a70:	2a00      	cmp	r2, #0
 8010a72:	d1cb      	bne.n	8010a0c <quorem+0x94>
 8010a74:	3c01      	subs	r4, #1
 8010a76:	e7c6      	b.n	8010a06 <quorem+0x8e>
 8010a78:	6812      	ldr	r2, [r2, #0]
 8010a7a:	3b04      	subs	r3, #4
 8010a7c:	2a00      	cmp	r2, #0
 8010a7e:	d1ef      	bne.n	8010a60 <quorem+0xe8>
 8010a80:	3c01      	subs	r4, #1
 8010a82:	e7ea      	b.n	8010a5a <quorem+0xe2>
 8010a84:	2000      	movs	r0, #0
 8010a86:	e7ee      	b.n	8010a66 <quorem+0xee>

08010a88 <_dtoa_r>:
 8010a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a8c:	69c7      	ldr	r7, [r0, #28]
 8010a8e:	b099      	sub	sp, #100	@ 0x64
 8010a90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010a94:	ec55 4b10 	vmov	r4, r5, d0
 8010a98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010a9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8010a9c:	4683      	mov	fp, r0
 8010a9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010aa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010aa2:	b97f      	cbnz	r7, 8010ac4 <_dtoa_r+0x3c>
 8010aa4:	2010      	movs	r0, #16
 8010aa6:	f000 fdfd 	bl	80116a4 <malloc>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	f8cb 001c 	str.w	r0, [fp, #28]
 8010ab0:	b920      	cbnz	r0, 8010abc <_dtoa_r+0x34>
 8010ab2:	4ba7      	ldr	r3, [pc, #668]	@ (8010d50 <_dtoa_r+0x2c8>)
 8010ab4:	21ef      	movs	r1, #239	@ 0xef
 8010ab6:	48a7      	ldr	r0, [pc, #668]	@ (8010d54 <_dtoa_r+0x2cc>)
 8010ab8:	f7ff ff40 	bl	801093c <__assert_func>
 8010abc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010ac0:	6007      	str	r7, [r0, #0]
 8010ac2:	60c7      	str	r7, [r0, #12]
 8010ac4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ac8:	6819      	ldr	r1, [r3, #0]
 8010aca:	b159      	cbz	r1, 8010ae4 <_dtoa_r+0x5c>
 8010acc:	685a      	ldr	r2, [r3, #4]
 8010ace:	604a      	str	r2, [r1, #4]
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	4093      	lsls	r3, r2
 8010ad4:	608b      	str	r3, [r1, #8]
 8010ad6:	4658      	mov	r0, fp
 8010ad8:	f000 feda 	bl	8011890 <_Bfree>
 8010adc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	1e2b      	subs	r3, r5, #0
 8010ae6:	bfb9      	ittee	lt
 8010ae8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010aec:	9303      	strlt	r3, [sp, #12]
 8010aee:	2300      	movge	r3, #0
 8010af0:	6033      	strge	r3, [r6, #0]
 8010af2:	9f03      	ldr	r7, [sp, #12]
 8010af4:	4b98      	ldr	r3, [pc, #608]	@ (8010d58 <_dtoa_r+0x2d0>)
 8010af6:	bfbc      	itt	lt
 8010af8:	2201      	movlt	r2, #1
 8010afa:	6032      	strlt	r2, [r6, #0]
 8010afc:	43bb      	bics	r3, r7
 8010afe:	d112      	bne.n	8010b26 <_dtoa_r+0x9e>
 8010b00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010b02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010b06:	6013      	str	r3, [r2, #0]
 8010b08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010b0c:	4323      	orrs	r3, r4
 8010b0e:	f000 854d 	beq.w	80115ac <_dtoa_r+0xb24>
 8010b12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010d6c <_dtoa_r+0x2e4>
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	f000 854f 	beq.w	80115bc <_dtoa_r+0xb34>
 8010b1e:	f10a 0303 	add.w	r3, sl, #3
 8010b22:	f000 bd49 	b.w	80115b8 <_dtoa_r+0xb30>
 8010b26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	ec51 0b17 	vmov	r0, r1, d7
 8010b30:	2300      	movs	r3, #0
 8010b32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010b36:	f7ef ffff 	bl	8000b38 <__aeabi_dcmpeq>
 8010b3a:	4680      	mov	r8, r0
 8010b3c:	b158      	cbz	r0, 8010b56 <_dtoa_r+0xce>
 8010b3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010b40:	2301      	movs	r3, #1
 8010b42:	6013      	str	r3, [r2, #0]
 8010b44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b46:	b113      	cbz	r3, 8010b4e <_dtoa_r+0xc6>
 8010b48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010b4a:	4b84      	ldr	r3, [pc, #528]	@ (8010d5c <_dtoa_r+0x2d4>)
 8010b4c:	6013      	str	r3, [r2, #0]
 8010b4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010d70 <_dtoa_r+0x2e8>
 8010b52:	f000 bd33 	b.w	80115bc <_dtoa_r+0xb34>
 8010b56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010b5a:	aa16      	add	r2, sp, #88	@ 0x58
 8010b5c:	a917      	add	r1, sp, #92	@ 0x5c
 8010b5e:	4658      	mov	r0, fp
 8010b60:	f001 fa3a 	bl	8011fd8 <__d2b>
 8010b64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010b68:	4681      	mov	r9, r0
 8010b6a:	2e00      	cmp	r6, #0
 8010b6c:	d077      	beq.n	8010c5e <_dtoa_r+0x1d6>
 8010b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010b7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010b80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010b84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010b88:	4619      	mov	r1, r3
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	4b74      	ldr	r3, [pc, #464]	@ (8010d60 <_dtoa_r+0x2d8>)
 8010b8e:	f7ef fbb3 	bl	80002f8 <__aeabi_dsub>
 8010b92:	a369      	add	r3, pc, #420	@ (adr r3, 8010d38 <_dtoa_r+0x2b0>)
 8010b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b98:	f7ef fd66 	bl	8000668 <__aeabi_dmul>
 8010b9c:	a368      	add	r3, pc, #416	@ (adr r3, 8010d40 <_dtoa_r+0x2b8>)
 8010b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba2:	f7ef fbab 	bl	80002fc <__adddf3>
 8010ba6:	4604      	mov	r4, r0
 8010ba8:	4630      	mov	r0, r6
 8010baa:	460d      	mov	r5, r1
 8010bac:	f7ef fcf2 	bl	8000594 <__aeabi_i2d>
 8010bb0:	a365      	add	r3, pc, #404	@ (adr r3, 8010d48 <_dtoa_r+0x2c0>)
 8010bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb6:	f7ef fd57 	bl	8000668 <__aeabi_dmul>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	4629      	mov	r1, r5
 8010bc2:	f7ef fb9b 	bl	80002fc <__adddf3>
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	460d      	mov	r5, r1
 8010bca:	f7ef fffd 	bl	8000bc8 <__aeabi_d2iz>
 8010bce:	2200      	movs	r2, #0
 8010bd0:	4607      	mov	r7, r0
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	f7ef ffb8 	bl	8000b4c <__aeabi_dcmplt>
 8010bdc:	b140      	cbz	r0, 8010bf0 <_dtoa_r+0x168>
 8010bde:	4638      	mov	r0, r7
 8010be0:	f7ef fcd8 	bl	8000594 <__aeabi_i2d>
 8010be4:	4622      	mov	r2, r4
 8010be6:	462b      	mov	r3, r5
 8010be8:	f7ef ffa6 	bl	8000b38 <__aeabi_dcmpeq>
 8010bec:	b900      	cbnz	r0, 8010bf0 <_dtoa_r+0x168>
 8010bee:	3f01      	subs	r7, #1
 8010bf0:	2f16      	cmp	r7, #22
 8010bf2:	d851      	bhi.n	8010c98 <_dtoa_r+0x210>
 8010bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8010d64 <_dtoa_r+0x2dc>)
 8010bf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c02:	f7ef ffa3 	bl	8000b4c <__aeabi_dcmplt>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d048      	beq.n	8010c9c <_dtoa_r+0x214>
 8010c0a:	3f01      	subs	r7, #1
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010c10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010c12:	1b9b      	subs	r3, r3, r6
 8010c14:	1e5a      	subs	r2, r3, #1
 8010c16:	bf44      	itt	mi
 8010c18:	f1c3 0801 	rsbmi	r8, r3, #1
 8010c1c:	2300      	movmi	r3, #0
 8010c1e:	9208      	str	r2, [sp, #32]
 8010c20:	bf54      	ite	pl
 8010c22:	f04f 0800 	movpl.w	r8, #0
 8010c26:	9308      	strmi	r3, [sp, #32]
 8010c28:	2f00      	cmp	r7, #0
 8010c2a:	db39      	blt.n	8010ca0 <_dtoa_r+0x218>
 8010c2c:	9b08      	ldr	r3, [sp, #32]
 8010c2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010c30:	443b      	add	r3, r7
 8010c32:	9308      	str	r3, [sp, #32]
 8010c34:	2300      	movs	r3, #0
 8010c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c3a:	2b09      	cmp	r3, #9
 8010c3c:	d864      	bhi.n	8010d08 <_dtoa_r+0x280>
 8010c3e:	2b05      	cmp	r3, #5
 8010c40:	bfc4      	itt	gt
 8010c42:	3b04      	subgt	r3, #4
 8010c44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c48:	f1a3 0302 	sub.w	r3, r3, #2
 8010c4c:	bfcc      	ite	gt
 8010c4e:	2400      	movgt	r4, #0
 8010c50:	2401      	movle	r4, #1
 8010c52:	2b03      	cmp	r3, #3
 8010c54:	d863      	bhi.n	8010d1e <_dtoa_r+0x296>
 8010c56:	e8df f003 	tbb	[pc, r3]
 8010c5a:	372a      	.short	0x372a
 8010c5c:	5535      	.short	0x5535
 8010c5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010c62:	441e      	add	r6, r3
 8010c64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010c68:	2b20      	cmp	r3, #32
 8010c6a:	bfc1      	itttt	gt
 8010c6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010c70:	409f      	lslgt	r7, r3
 8010c72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010c76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010c7a:	bfd6      	itet	le
 8010c7c:	f1c3 0320 	rsble	r3, r3, #32
 8010c80:	ea47 0003 	orrgt.w	r0, r7, r3
 8010c84:	fa04 f003 	lslle.w	r0, r4, r3
 8010c88:	f7ef fc74 	bl	8000574 <__aeabi_ui2d>
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010c92:	3e01      	subs	r6, #1
 8010c94:	9214      	str	r2, [sp, #80]	@ 0x50
 8010c96:	e777      	b.n	8010b88 <_dtoa_r+0x100>
 8010c98:	2301      	movs	r3, #1
 8010c9a:	e7b8      	b.n	8010c0e <_dtoa_r+0x186>
 8010c9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8010c9e:	e7b7      	b.n	8010c10 <_dtoa_r+0x188>
 8010ca0:	427b      	negs	r3, r7
 8010ca2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	eba8 0807 	sub.w	r8, r8, r7
 8010caa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010cac:	e7c4      	b.n	8010c38 <_dtoa_r+0x1b0>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	dc35      	bgt.n	8010d24 <_dtoa_r+0x29c>
 8010cb8:	2301      	movs	r3, #1
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	9307      	str	r3, [sp, #28]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010cc2:	e00b      	b.n	8010cdc <_dtoa_r+0x254>
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	e7f3      	b.n	8010cb0 <_dtoa_r+0x228>
 8010cc8:	2300      	movs	r3, #0
 8010cca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cce:	18fb      	adds	r3, r7, r3
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	9307      	str	r3, [sp, #28]
 8010cd8:	bfb8      	it	lt
 8010cda:	2301      	movlt	r3, #1
 8010cdc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	2204      	movs	r2, #4
 8010ce4:	f102 0514 	add.w	r5, r2, #20
 8010ce8:	429d      	cmp	r5, r3
 8010cea:	d91f      	bls.n	8010d2c <_dtoa_r+0x2a4>
 8010cec:	6041      	str	r1, [r0, #4]
 8010cee:	4658      	mov	r0, fp
 8010cf0:	f000 fd8e 	bl	8011810 <_Balloc>
 8010cf4:	4682      	mov	sl, r0
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d13c      	bne.n	8010d74 <_dtoa_r+0x2ec>
 8010cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8010d68 <_dtoa_r+0x2e0>)
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	f240 11af 	movw	r1, #431	@ 0x1af
 8010d02:	e6d8      	b.n	8010ab6 <_dtoa_r+0x2e>
 8010d04:	2301      	movs	r3, #1
 8010d06:	e7e0      	b.n	8010cca <_dtoa_r+0x242>
 8010d08:	2401      	movs	r4, #1
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010d10:	f04f 33ff 	mov.w	r3, #4294967295
 8010d14:	9300      	str	r3, [sp, #0]
 8010d16:	9307      	str	r3, [sp, #28]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	2312      	movs	r3, #18
 8010d1c:	e7d0      	b.n	8010cc0 <_dtoa_r+0x238>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d22:	e7f5      	b.n	8010d10 <_dtoa_r+0x288>
 8010d24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d26:	9300      	str	r3, [sp, #0]
 8010d28:	9307      	str	r3, [sp, #28]
 8010d2a:	e7d7      	b.n	8010cdc <_dtoa_r+0x254>
 8010d2c:	3101      	adds	r1, #1
 8010d2e:	0052      	lsls	r2, r2, #1
 8010d30:	e7d8      	b.n	8010ce4 <_dtoa_r+0x25c>
 8010d32:	bf00      	nop
 8010d34:	f3af 8000 	nop.w
 8010d38:	636f4361 	.word	0x636f4361
 8010d3c:	3fd287a7 	.word	0x3fd287a7
 8010d40:	8b60c8b3 	.word	0x8b60c8b3
 8010d44:	3fc68a28 	.word	0x3fc68a28
 8010d48:	509f79fb 	.word	0x509f79fb
 8010d4c:	3fd34413 	.word	0x3fd34413
 8010d50:	0801474a 	.word	0x0801474a
 8010d54:	08014804 	.word	0x08014804
 8010d58:	7ff00000 	.word	0x7ff00000
 8010d5c:	08014722 	.word	0x08014722
 8010d60:	3ff80000 	.word	0x3ff80000
 8010d64:	08014900 	.word	0x08014900
 8010d68:	0801485c 	.word	0x0801485c
 8010d6c:	08014800 	.word	0x08014800
 8010d70:	08014721 	.word	0x08014721
 8010d74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010d78:	6018      	str	r0, [r3, #0]
 8010d7a:	9b07      	ldr	r3, [sp, #28]
 8010d7c:	2b0e      	cmp	r3, #14
 8010d7e:	f200 80a4 	bhi.w	8010eca <_dtoa_r+0x442>
 8010d82:	2c00      	cmp	r4, #0
 8010d84:	f000 80a1 	beq.w	8010eca <_dtoa_r+0x442>
 8010d88:	2f00      	cmp	r7, #0
 8010d8a:	dd33      	ble.n	8010df4 <_dtoa_r+0x36c>
 8010d8c:	4bad      	ldr	r3, [pc, #692]	@ (8011044 <_dtoa_r+0x5bc>)
 8010d8e:	f007 020f 	and.w	r2, r7, #15
 8010d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d96:	ed93 7b00 	vldr	d7, [r3]
 8010d9a:	05f8      	lsls	r0, r7, #23
 8010d9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010da0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010da4:	d516      	bpl.n	8010dd4 <_dtoa_r+0x34c>
 8010da6:	4ba8      	ldr	r3, [pc, #672]	@ (8011048 <_dtoa_r+0x5c0>)
 8010da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010dac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010db0:	f7ef fd84 	bl	80008bc <__aeabi_ddiv>
 8010db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010db8:	f004 040f 	and.w	r4, r4, #15
 8010dbc:	2603      	movs	r6, #3
 8010dbe:	4da2      	ldr	r5, [pc, #648]	@ (8011048 <_dtoa_r+0x5c0>)
 8010dc0:	b954      	cbnz	r4, 8010dd8 <_dtoa_r+0x350>
 8010dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dca:	f7ef fd77 	bl	80008bc <__aeabi_ddiv>
 8010dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010dd2:	e028      	b.n	8010e26 <_dtoa_r+0x39e>
 8010dd4:	2602      	movs	r6, #2
 8010dd6:	e7f2      	b.n	8010dbe <_dtoa_r+0x336>
 8010dd8:	07e1      	lsls	r1, r4, #31
 8010dda:	d508      	bpl.n	8010dee <_dtoa_r+0x366>
 8010ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010de0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010de4:	f7ef fc40 	bl	8000668 <__aeabi_dmul>
 8010de8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010dec:	3601      	adds	r6, #1
 8010dee:	1064      	asrs	r4, r4, #1
 8010df0:	3508      	adds	r5, #8
 8010df2:	e7e5      	b.n	8010dc0 <_dtoa_r+0x338>
 8010df4:	f000 80d2 	beq.w	8010f9c <_dtoa_r+0x514>
 8010df8:	427c      	negs	r4, r7
 8010dfa:	4b92      	ldr	r3, [pc, #584]	@ (8011044 <_dtoa_r+0x5bc>)
 8010dfc:	4d92      	ldr	r5, [pc, #584]	@ (8011048 <_dtoa_r+0x5c0>)
 8010dfe:	f004 020f 	and.w	r2, r4, #15
 8010e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e0e:	f7ef fc2b 	bl	8000668 <__aeabi_dmul>
 8010e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e16:	1124      	asrs	r4, r4, #4
 8010e18:	2300      	movs	r3, #0
 8010e1a:	2602      	movs	r6, #2
 8010e1c:	2c00      	cmp	r4, #0
 8010e1e:	f040 80b2 	bne.w	8010f86 <_dtoa_r+0x4fe>
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1d3      	bne.n	8010dce <_dtoa_r+0x346>
 8010e26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010e28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	f000 80b7 	beq.w	8010fa0 <_dtoa_r+0x518>
 8010e32:	4b86      	ldr	r3, [pc, #536]	@ (801104c <_dtoa_r+0x5c4>)
 8010e34:	2200      	movs	r2, #0
 8010e36:	4620      	mov	r0, r4
 8010e38:	4629      	mov	r1, r5
 8010e3a:	f7ef fe87 	bl	8000b4c <__aeabi_dcmplt>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	f000 80ae 	beq.w	8010fa0 <_dtoa_r+0x518>
 8010e44:	9b07      	ldr	r3, [sp, #28]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f000 80aa 	beq.w	8010fa0 <_dtoa_r+0x518>
 8010e4c:	9b00      	ldr	r3, [sp, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	dd37      	ble.n	8010ec2 <_dtoa_r+0x43a>
 8010e52:	1e7b      	subs	r3, r7, #1
 8010e54:	9304      	str	r3, [sp, #16]
 8010e56:	4620      	mov	r0, r4
 8010e58:	4b7d      	ldr	r3, [pc, #500]	@ (8011050 <_dtoa_r+0x5c8>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	f7ef fc03 	bl	8000668 <__aeabi_dmul>
 8010e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e66:	9c00      	ldr	r4, [sp, #0]
 8010e68:	3601      	adds	r6, #1
 8010e6a:	4630      	mov	r0, r6
 8010e6c:	f7ef fb92 	bl	8000594 <__aeabi_i2d>
 8010e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e74:	f7ef fbf8 	bl	8000668 <__aeabi_dmul>
 8010e78:	4b76      	ldr	r3, [pc, #472]	@ (8011054 <_dtoa_r+0x5cc>)
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f7ef fa3e 	bl	80002fc <__adddf3>
 8010e80:	4605      	mov	r5, r0
 8010e82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010e86:	2c00      	cmp	r4, #0
 8010e88:	f040 808d 	bne.w	8010fa6 <_dtoa_r+0x51e>
 8010e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e90:	4b71      	ldr	r3, [pc, #452]	@ (8011058 <_dtoa_r+0x5d0>)
 8010e92:	2200      	movs	r2, #0
 8010e94:	f7ef fa30 	bl	80002f8 <__aeabi_dsub>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ea0:	462a      	mov	r2, r5
 8010ea2:	4633      	mov	r3, r6
 8010ea4:	f7ef fe70 	bl	8000b88 <__aeabi_dcmpgt>
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	f040 828b 	bne.w	80113c4 <_dtoa_r+0x93c>
 8010eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010eb2:	462a      	mov	r2, r5
 8010eb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010eb8:	f7ef fe48 	bl	8000b4c <__aeabi_dcmplt>
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	f040 8128 	bne.w	8011112 <_dtoa_r+0x68a>
 8010ec2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010ec6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010eca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f2c0 815a 	blt.w	8011186 <_dtoa_r+0x6fe>
 8010ed2:	2f0e      	cmp	r7, #14
 8010ed4:	f300 8157 	bgt.w	8011186 <_dtoa_r+0x6fe>
 8010ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8011044 <_dtoa_r+0x5bc>)
 8010eda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010ede:	ed93 7b00 	vldr	d7, [r3]
 8010ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	ed8d 7b00 	vstr	d7, [sp]
 8010eea:	da03      	bge.n	8010ef4 <_dtoa_r+0x46c>
 8010eec:	9b07      	ldr	r3, [sp, #28]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f340 8101 	ble.w	80110f6 <_dtoa_r+0x66e>
 8010ef4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010ef8:	4656      	mov	r6, sl
 8010efa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010efe:	4620      	mov	r0, r4
 8010f00:	4629      	mov	r1, r5
 8010f02:	f7ef fcdb 	bl	80008bc <__aeabi_ddiv>
 8010f06:	f7ef fe5f 	bl	8000bc8 <__aeabi_d2iz>
 8010f0a:	4680      	mov	r8, r0
 8010f0c:	f7ef fb42 	bl	8000594 <__aeabi_i2d>
 8010f10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f14:	f7ef fba8 	bl	8000668 <__aeabi_dmul>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	4629      	mov	r1, r5
 8010f20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010f24:	f7ef f9e8 	bl	80002f8 <__aeabi_dsub>
 8010f28:	f806 4b01 	strb.w	r4, [r6], #1
 8010f2c:	9d07      	ldr	r5, [sp, #28]
 8010f2e:	eba6 040a 	sub.w	r4, r6, sl
 8010f32:	42a5      	cmp	r5, r4
 8010f34:	4602      	mov	r2, r0
 8010f36:	460b      	mov	r3, r1
 8010f38:	f040 8117 	bne.w	801116a <_dtoa_r+0x6e2>
 8010f3c:	f7ef f9de 	bl	80002fc <__adddf3>
 8010f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f44:	4604      	mov	r4, r0
 8010f46:	460d      	mov	r5, r1
 8010f48:	f7ef fe1e 	bl	8000b88 <__aeabi_dcmpgt>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	f040 80f9 	bne.w	8011144 <_dtoa_r+0x6bc>
 8010f52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f56:	4620      	mov	r0, r4
 8010f58:	4629      	mov	r1, r5
 8010f5a:	f7ef fded 	bl	8000b38 <__aeabi_dcmpeq>
 8010f5e:	b118      	cbz	r0, 8010f68 <_dtoa_r+0x4e0>
 8010f60:	f018 0f01 	tst.w	r8, #1
 8010f64:	f040 80ee 	bne.w	8011144 <_dtoa_r+0x6bc>
 8010f68:	4649      	mov	r1, r9
 8010f6a:	4658      	mov	r0, fp
 8010f6c:	f000 fc90 	bl	8011890 <_Bfree>
 8010f70:	2300      	movs	r3, #0
 8010f72:	7033      	strb	r3, [r6, #0]
 8010f74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010f76:	3701      	adds	r7, #1
 8010f78:	601f      	str	r7, [r3, #0]
 8010f7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	f000 831d 	beq.w	80115bc <_dtoa_r+0xb34>
 8010f82:	601e      	str	r6, [r3, #0]
 8010f84:	e31a      	b.n	80115bc <_dtoa_r+0xb34>
 8010f86:	07e2      	lsls	r2, r4, #31
 8010f88:	d505      	bpl.n	8010f96 <_dtoa_r+0x50e>
 8010f8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010f8e:	f7ef fb6b 	bl	8000668 <__aeabi_dmul>
 8010f92:	3601      	adds	r6, #1
 8010f94:	2301      	movs	r3, #1
 8010f96:	1064      	asrs	r4, r4, #1
 8010f98:	3508      	adds	r5, #8
 8010f9a:	e73f      	b.n	8010e1c <_dtoa_r+0x394>
 8010f9c:	2602      	movs	r6, #2
 8010f9e:	e742      	b.n	8010e26 <_dtoa_r+0x39e>
 8010fa0:	9c07      	ldr	r4, [sp, #28]
 8010fa2:	9704      	str	r7, [sp, #16]
 8010fa4:	e761      	b.n	8010e6a <_dtoa_r+0x3e2>
 8010fa6:	4b27      	ldr	r3, [pc, #156]	@ (8011044 <_dtoa_r+0x5bc>)
 8010fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010faa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010fae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010fb2:	4454      	add	r4, sl
 8010fb4:	2900      	cmp	r1, #0
 8010fb6:	d053      	beq.n	8011060 <_dtoa_r+0x5d8>
 8010fb8:	4928      	ldr	r1, [pc, #160]	@ (801105c <_dtoa_r+0x5d4>)
 8010fba:	2000      	movs	r0, #0
 8010fbc:	f7ef fc7e 	bl	80008bc <__aeabi_ddiv>
 8010fc0:	4633      	mov	r3, r6
 8010fc2:	462a      	mov	r2, r5
 8010fc4:	f7ef f998 	bl	80002f8 <__aeabi_dsub>
 8010fc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010fcc:	4656      	mov	r6, sl
 8010fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fd2:	f7ef fdf9 	bl	8000bc8 <__aeabi_d2iz>
 8010fd6:	4605      	mov	r5, r0
 8010fd8:	f7ef fadc 	bl	8000594 <__aeabi_i2d>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fe4:	f7ef f988 	bl	80002f8 <__aeabi_dsub>
 8010fe8:	3530      	adds	r5, #48	@ 0x30
 8010fea:	4602      	mov	r2, r0
 8010fec:	460b      	mov	r3, r1
 8010fee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ff2:	f806 5b01 	strb.w	r5, [r6], #1
 8010ff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010ffa:	f7ef fda7 	bl	8000b4c <__aeabi_dcmplt>
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d171      	bne.n	80110e6 <_dtoa_r+0x65e>
 8011002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011006:	4911      	ldr	r1, [pc, #68]	@ (801104c <_dtoa_r+0x5c4>)
 8011008:	2000      	movs	r0, #0
 801100a:	f7ef f975 	bl	80002f8 <__aeabi_dsub>
 801100e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011012:	f7ef fd9b 	bl	8000b4c <__aeabi_dcmplt>
 8011016:	2800      	cmp	r0, #0
 8011018:	f040 8095 	bne.w	8011146 <_dtoa_r+0x6be>
 801101c:	42a6      	cmp	r6, r4
 801101e:	f43f af50 	beq.w	8010ec2 <_dtoa_r+0x43a>
 8011022:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011026:	4b0a      	ldr	r3, [pc, #40]	@ (8011050 <_dtoa_r+0x5c8>)
 8011028:	2200      	movs	r2, #0
 801102a:	f7ef fb1d 	bl	8000668 <__aeabi_dmul>
 801102e:	4b08      	ldr	r3, [pc, #32]	@ (8011050 <_dtoa_r+0x5c8>)
 8011030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011034:	2200      	movs	r2, #0
 8011036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801103a:	f7ef fb15 	bl	8000668 <__aeabi_dmul>
 801103e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011042:	e7c4      	b.n	8010fce <_dtoa_r+0x546>
 8011044:	08014900 	.word	0x08014900
 8011048:	080148d8 	.word	0x080148d8
 801104c:	3ff00000 	.word	0x3ff00000
 8011050:	40240000 	.word	0x40240000
 8011054:	401c0000 	.word	0x401c0000
 8011058:	40140000 	.word	0x40140000
 801105c:	3fe00000 	.word	0x3fe00000
 8011060:	4631      	mov	r1, r6
 8011062:	4628      	mov	r0, r5
 8011064:	f7ef fb00 	bl	8000668 <__aeabi_dmul>
 8011068:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801106c:	9415      	str	r4, [sp, #84]	@ 0x54
 801106e:	4656      	mov	r6, sl
 8011070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011074:	f7ef fda8 	bl	8000bc8 <__aeabi_d2iz>
 8011078:	4605      	mov	r5, r0
 801107a:	f7ef fa8b 	bl	8000594 <__aeabi_i2d>
 801107e:	4602      	mov	r2, r0
 8011080:	460b      	mov	r3, r1
 8011082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011086:	f7ef f937 	bl	80002f8 <__aeabi_dsub>
 801108a:	3530      	adds	r5, #48	@ 0x30
 801108c:	f806 5b01 	strb.w	r5, [r6], #1
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	42a6      	cmp	r6, r4
 8011096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801109a:	f04f 0200 	mov.w	r2, #0
 801109e:	d124      	bne.n	80110ea <_dtoa_r+0x662>
 80110a0:	4bac      	ldr	r3, [pc, #688]	@ (8011354 <_dtoa_r+0x8cc>)
 80110a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80110a6:	f7ef f929 	bl	80002fc <__adddf3>
 80110aa:	4602      	mov	r2, r0
 80110ac:	460b      	mov	r3, r1
 80110ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110b2:	f7ef fd69 	bl	8000b88 <__aeabi_dcmpgt>
 80110b6:	2800      	cmp	r0, #0
 80110b8:	d145      	bne.n	8011146 <_dtoa_r+0x6be>
 80110ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80110be:	49a5      	ldr	r1, [pc, #660]	@ (8011354 <_dtoa_r+0x8cc>)
 80110c0:	2000      	movs	r0, #0
 80110c2:	f7ef f919 	bl	80002f8 <__aeabi_dsub>
 80110c6:	4602      	mov	r2, r0
 80110c8:	460b      	mov	r3, r1
 80110ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110ce:	f7ef fd3d 	bl	8000b4c <__aeabi_dcmplt>
 80110d2:	2800      	cmp	r0, #0
 80110d4:	f43f aef5 	beq.w	8010ec2 <_dtoa_r+0x43a>
 80110d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80110da:	1e73      	subs	r3, r6, #1
 80110dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80110de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80110e2:	2b30      	cmp	r3, #48	@ 0x30
 80110e4:	d0f8      	beq.n	80110d8 <_dtoa_r+0x650>
 80110e6:	9f04      	ldr	r7, [sp, #16]
 80110e8:	e73e      	b.n	8010f68 <_dtoa_r+0x4e0>
 80110ea:	4b9b      	ldr	r3, [pc, #620]	@ (8011358 <_dtoa_r+0x8d0>)
 80110ec:	f7ef fabc 	bl	8000668 <__aeabi_dmul>
 80110f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110f4:	e7bc      	b.n	8011070 <_dtoa_r+0x5e8>
 80110f6:	d10c      	bne.n	8011112 <_dtoa_r+0x68a>
 80110f8:	4b98      	ldr	r3, [pc, #608]	@ (801135c <_dtoa_r+0x8d4>)
 80110fa:	2200      	movs	r2, #0
 80110fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011100:	f7ef fab2 	bl	8000668 <__aeabi_dmul>
 8011104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011108:	f7ef fd34 	bl	8000b74 <__aeabi_dcmpge>
 801110c:	2800      	cmp	r0, #0
 801110e:	f000 8157 	beq.w	80113c0 <_dtoa_r+0x938>
 8011112:	2400      	movs	r4, #0
 8011114:	4625      	mov	r5, r4
 8011116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011118:	43db      	mvns	r3, r3
 801111a:	9304      	str	r3, [sp, #16]
 801111c:	4656      	mov	r6, sl
 801111e:	2700      	movs	r7, #0
 8011120:	4621      	mov	r1, r4
 8011122:	4658      	mov	r0, fp
 8011124:	f000 fbb4 	bl	8011890 <_Bfree>
 8011128:	2d00      	cmp	r5, #0
 801112a:	d0dc      	beq.n	80110e6 <_dtoa_r+0x65e>
 801112c:	b12f      	cbz	r7, 801113a <_dtoa_r+0x6b2>
 801112e:	42af      	cmp	r7, r5
 8011130:	d003      	beq.n	801113a <_dtoa_r+0x6b2>
 8011132:	4639      	mov	r1, r7
 8011134:	4658      	mov	r0, fp
 8011136:	f000 fbab 	bl	8011890 <_Bfree>
 801113a:	4629      	mov	r1, r5
 801113c:	4658      	mov	r0, fp
 801113e:	f000 fba7 	bl	8011890 <_Bfree>
 8011142:	e7d0      	b.n	80110e6 <_dtoa_r+0x65e>
 8011144:	9704      	str	r7, [sp, #16]
 8011146:	4633      	mov	r3, r6
 8011148:	461e      	mov	r6, r3
 801114a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801114e:	2a39      	cmp	r2, #57	@ 0x39
 8011150:	d107      	bne.n	8011162 <_dtoa_r+0x6da>
 8011152:	459a      	cmp	sl, r3
 8011154:	d1f8      	bne.n	8011148 <_dtoa_r+0x6c0>
 8011156:	9a04      	ldr	r2, [sp, #16]
 8011158:	3201      	adds	r2, #1
 801115a:	9204      	str	r2, [sp, #16]
 801115c:	2230      	movs	r2, #48	@ 0x30
 801115e:	f88a 2000 	strb.w	r2, [sl]
 8011162:	781a      	ldrb	r2, [r3, #0]
 8011164:	3201      	adds	r2, #1
 8011166:	701a      	strb	r2, [r3, #0]
 8011168:	e7bd      	b.n	80110e6 <_dtoa_r+0x65e>
 801116a:	4b7b      	ldr	r3, [pc, #492]	@ (8011358 <_dtoa_r+0x8d0>)
 801116c:	2200      	movs	r2, #0
 801116e:	f7ef fa7b 	bl	8000668 <__aeabi_dmul>
 8011172:	2200      	movs	r2, #0
 8011174:	2300      	movs	r3, #0
 8011176:	4604      	mov	r4, r0
 8011178:	460d      	mov	r5, r1
 801117a:	f7ef fcdd 	bl	8000b38 <__aeabi_dcmpeq>
 801117e:	2800      	cmp	r0, #0
 8011180:	f43f aebb 	beq.w	8010efa <_dtoa_r+0x472>
 8011184:	e6f0      	b.n	8010f68 <_dtoa_r+0x4e0>
 8011186:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011188:	2a00      	cmp	r2, #0
 801118a:	f000 80db 	beq.w	8011344 <_dtoa_r+0x8bc>
 801118e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011190:	2a01      	cmp	r2, #1
 8011192:	f300 80bf 	bgt.w	8011314 <_dtoa_r+0x88c>
 8011196:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011198:	2a00      	cmp	r2, #0
 801119a:	f000 80b7 	beq.w	801130c <_dtoa_r+0x884>
 801119e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80111a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80111a4:	4646      	mov	r6, r8
 80111a6:	9a08      	ldr	r2, [sp, #32]
 80111a8:	2101      	movs	r1, #1
 80111aa:	441a      	add	r2, r3
 80111ac:	4658      	mov	r0, fp
 80111ae:	4498      	add	r8, r3
 80111b0:	9208      	str	r2, [sp, #32]
 80111b2:	f000 fc6b 	bl	8011a8c <__i2b>
 80111b6:	4605      	mov	r5, r0
 80111b8:	b15e      	cbz	r6, 80111d2 <_dtoa_r+0x74a>
 80111ba:	9b08      	ldr	r3, [sp, #32]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	dd08      	ble.n	80111d2 <_dtoa_r+0x74a>
 80111c0:	42b3      	cmp	r3, r6
 80111c2:	9a08      	ldr	r2, [sp, #32]
 80111c4:	bfa8      	it	ge
 80111c6:	4633      	movge	r3, r6
 80111c8:	eba8 0803 	sub.w	r8, r8, r3
 80111cc:	1af6      	subs	r6, r6, r3
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	9308      	str	r3, [sp, #32]
 80111d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111d4:	b1f3      	cbz	r3, 8011214 <_dtoa_r+0x78c>
 80111d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111d8:	2b00      	cmp	r3, #0
 80111da:	f000 80b7 	beq.w	801134c <_dtoa_r+0x8c4>
 80111de:	b18c      	cbz	r4, 8011204 <_dtoa_r+0x77c>
 80111e0:	4629      	mov	r1, r5
 80111e2:	4622      	mov	r2, r4
 80111e4:	4658      	mov	r0, fp
 80111e6:	f000 fd11 	bl	8011c0c <__pow5mult>
 80111ea:	464a      	mov	r2, r9
 80111ec:	4601      	mov	r1, r0
 80111ee:	4605      	mov	r5, r0
 80111f0:	4658      	mov	r0, fp
 80111f2:	f000 fc61 	bl	8011ab8 <__multiply>
 80111f6:	4649      	mov	r1, r9
 80111f8:	9004      	str	r0, [sp, #16]
 80111fa:	4658      	mov	r0, fp
 80111fc:	f000 fb48 	bl	8011890 <_Bfree>
 8011200:	9b04      	ldr	r3, [sp, #16]
 8011202:	4699      	mov	r9, r3
 8011204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011206:	1b1a      	subs	r2, r3, r4
 8011208:	d004      	beq.n	8011214 <_dtoa_r+0x78c>
 801120a:	4649      	mov	r1, r9
 801120c:	4658      	mov	r0, fp
 801120e:	f000 fcfd 	bl	8011c0c <__pow5mult>
 8011212:	4681      	mov	r9, r0
 8011214:	2101      	movs	r1, #1
 8011216:	4658      	mov	r0, fp
 8011218:	f000 fc38 	bl	8011a8c <__i2b>
 801121c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801121e:	4604      	mov	r4, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	f000 81cf 	beq.w	80115c4 <_dtoa_r+0xb3c>
 8011226:	461a      	mov	r2, r3
 8011228:	4601      	mov	r1, r0
 801122a:	4658      	mov	r0, fp
 801122c:	f000 fcee 	bl	8011c0c <__pow5mult>
 8011230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011232:	2b01      	cmp	r3, #1
 8011234:	4604      	mov	r4, r0
 8011236:	f300 8095 	bgt.w	8011364 <_dtoa_r+0x8dc>
 801123a:	9b02      	ldr	r3, [sp, #8]
 801123c:	2b00      	cmp	r3, #0
 801123e:	f040 8087 	bne.w	8011350 <_dtoa_r+0x8c8>
 8011242:	9b03      	ldr	r3, [sp, #12]
 8011244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011248:	2b00      	cmp	r3, #0
 801124a:	f040 8089 	bne.w	8011360 <_dtoa_r+0x8d8>
 801124e:	9b03      	ldr	r3, [sp, #12]
 8011250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011254:	0d1b      	lsrs	r3, r3, #20
 8011256:	051b      	lsls	r3, r3, #20
 8011258:	b12b      	cbz	r3, 8011266 <_dtoa_r+0x7de>
 801125a:	9b08      	ldr	r3, [sp, #32]
 801125c:	3301      	adds	r3, #1
 801125e:	9308      	str	r3, [sp, #32]
 8011260:	f108 0801 	add.w	r8, r8, #1
 8011264:	2301      	movs	r3, #1
 8011266:	930a      	str	r3, [sp, #40]	@ 0x28
 8011268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801126a:	2b00      	cmp	r3, #0
 801126c:	f000 81b0 	beq.w	80115d0 <_dtoa_r+0xb48>
 8011270:	6923      	ldr	r3, [r4, #16]
 8011272:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011276:	6918      	ldr	r0, [r3, #16]
 8011278:	f000 fbbc 	bl	80119f4 <__hi0bits>
 801127c:	f1c0 0020 	rsb	r0, r0, #32
 8011280:	9b08      	ldr	r3, [sp, #32]
 8011282:	4418      	add	r0, r3
 8011284:	f010 001f 	ands.w	r0, r0, #31
 8011288:	d077      	beq.n	801137a <_dtoa_r+0x8f2>
 801128a:	f1c0 0320 	rsb	r3, r0, #32
 801128e:	2b04      	cmp	r3, #4
 8011290:	dd6b      	ble.n	801136a <_dtoa_r+0x8e2>
 8011292:	9b08      	ldr	r3, [sp, #32]
 8011294:	f1c0 001c 	rsb	r0, r0, #28
 8011298:	4403      	add	r3, r0
 801129a:	4480      	add	r8, r0
 801129c:	4406      	add	r6, r0
 801129e:	9308      	str	r3, [sp, #32]
 80112a0:	f1b8 0f00 	cmp.w	r8, #0
 80112a4:	dd05      	ble.n	80112b2 <_dtoa_r+0x82a>
 80112a6:	4649      	mov	r1, r9
 80112a8:	4642      	mov	r2, r8
 80112aa:	4658      	mov	r0, fp
 80112ac:	f000 fd08 	bl	8011cc0 <__lshift>
 80112b0:	4681      	mov	r9, r0
 80112b2:	9b08      	ldr	r3, [sp, #32]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	dd05      	ble.n	80112c4 <_dtoa_r+0x83c>
 80112b8:	4621      	mov	r1, r4
 80112ba:	461a      	mov	r2, r3
 80112bc:	4658      	mov	r0, fp
 80112be:	f000 fcff 	bl	8011cc0 <__lshift>
 80112c2:	4604      	mov	r4, r0
 80112c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d059      	beq.n	801137e <_dtoa_r+0x8f6>
 80112ca:	4621      	mov	r1, r4
 80112cc:	4648      	mov	r0, r9
 80112ce:	f000 fd63 	bl	8011d98 <__mcmp>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	da53      	bge.n	801137e <_dtoa_r+0x8f6>
 80112d6:	1e7b      	subs	r3, r7, #1
 80112d8:	9304      	str	r3, [sp, #16]
 80112da:	4649      	mov	r1, r9
 80112dc:	2300      	movs	r3, #0
 80112de:	220a      	movs	r2, #10
 80112e0:	4658      	mov	r0, fp
 80112e2:	f000 faf7 	bl	80118d4 <__multadd>
 80112e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112e8:	4681      	mov	r9, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	f000 8172 	beq.w	80115d4 <_dtoa_r+0xb4c>
 80112f0:	2300      	movs	r3, #0
 80112f2:	4629      	mov	r1, r5
 80112f4:	220a      	movs	r2, #10
 80112f6:	4658      	mov	r0, fp
 80112f8:	f000 faec 	bl	80118d4 <__multadd>
 80112fc:	9b00      	ldr	r3, [sp, #0]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	4605      	mov	r5, r0
 8011302:	dc67      	bgt.n	80113d4 <_dtoa_r+0x94c>
 8011304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011306:	2b02      	cmp	r3, #2
 8011308:	dc41      	bgt.n	801138e <_dtoa_r+0x906>
 801130a:	e063      	b.n	80113d4 <_dtoa_r+0x94c>
 801130c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801130e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011312:	e746      	b.n	80111a2 <_dtoa_r+0x71a>
 8011314:	9b07      	ldr	r3, [sp, #28]
 8011316:	1e5c      	subs	r4, r3, #1
 8011318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801131a:	42a3      	cmp	r3, r4
 801131c:	bfbf      	itttt	lt
 801131e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011320:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011322:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011324:	1ae3      	sublt	r3, r4, r3
 8011326:	bfb4      	ite	lt
 8011328:	18d2      	addlt	r2, r2, r3
 801132a:	1b1c      	subge	r4, r3, r4
 801132c:	9b07      	ldr	r3, [sp, #28]
 801132e:	bfbc      	itt	lt
 8011330:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011332:	2400      	movlt	r4, #0
 8011334:	2b00      	cmp	r3, #0
 8011336:	bfb5      	itete	lt
 8011338:	eba8 0603 	sublt.w	r6, r8, r3
 801133c:	9b07      	ldrge	r3, [sp, #28]
 801133e:	2300      	movlt	r3, #0
 8011340:	4646      	movge	r6, r8
 8011342:	e730      	b.n	80111a6 <_dtoa_r+0x71e>
 8011344:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011346:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011348:	4646      	mov	r6, r8
 801134a:	e735      	b.n	80111b8 <_dtoa_r+0x730>
 801134c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801134e:	e75c      	b.n	801120a <_dtoa_r+0x782>
 8011350:	2300      	movs	r3, #0
 8011352:	e788      	b.n	8011266 <_dtoa_r+0x7de>
 8011354:	3fe00000 	.word	0x3fe00000
 8011358:	40240000 	.word	0x40240000
 801135c:	40140000 	.word	0x40140000
 8011360:	9b02      	ldr	r3, [sp, #8]
 8011362:	e780      	b.n	8011266 <_dtoa_r+0x7de>
 8011364:	2300      	movs	r3, #0
 8011366:	930a      	str	r3, [sp, #40]	@ 0x28
 8011368:	e782      	b.n	8011270 <_dtoa_r+0x7e8>
 801136a:	d099      	beq.n	80112a0 <_dtoa_r+0x818>
 801136c:	9a08      	ldr	r2, [sp, #32]
 801136e:	331c      	adds	r3, #28
 8011370:	441a      	add	r2, r3
 8011372:	4498      	add	r8, r3
 8011374:	441e      	add	r6, r3
 8011376:	9208      	str	r2, [sp, #32]
 8011378:	e792      	b.n	80112a0 <_dtoa_r+0x818>
 801137a:	4603      	mov	r3, r0
 801137c:	e7f6      	b.n	801136c <_dtoa_r+0x8e4>
 801137e:	9b07      	ldr	r3, [sp, #28]
 8011380:	9704      	str	r7, [sp, #16]
 8011382:	2b00      	cmp	r3, #0
 8011384:	dc20      	bgt.n	80113c8 <_dtoa_r+0x940>
 8011386:	9300      	str	r3, [sp, #0]
 8011388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801138a:	2b02      	cmp	r3, #2
 801138c:	dd1e      	ble.n	80113cc <_dtoa_r+0x944>
 801138e:	9b00      	ldr	r3, [sp, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	f47f aec0 	bne.w	8011116 <_dtoa_r+0x68e>
 8011396:	4621      	mov	r1, r4
 8011398:	2205      	movs	r2, #5
 801139a:	4658      	mov	r0, fp
 801139c:	f000 fa9a 	bl	80118d4 <__multadd>
 80113a0:	4601      	mov	r1, r0
 80113a2:	4604      	mov	r4, r0
 80113a4:	4648      	mov	r0, r9
 80113a6:	f000 fcf7 	bl	8011d98 <__mcmp>
 80113aa:	2800      	cmp	r0, #0
 80113ac:	f77f aeb3 	ble.w	8011116 <_dtoa_r+0x68e>
 80113b0:	4656      	mov	r6, sl
 80113b2:	2331      	movs	r3, #49	@ 0x31
 80113b4:	f806 3b01 	strb.w	r3, [r6], #1
 80113b8:	9b04      	ldr	r3, [sp, #16]
 80113ba:	3301      	adds	r3, #1
 80113bc:	9304      	str	r3, [sp, #16]
 80113be:	e6ae      	b.n	801111e <_dtoa_r+0x696>
 80113c0:	9c07      	ldr	r4, [sp, #28]
 80113c2:	9704      	str	r7, [sp, #16]
 80113c4:	4625      	mov	r5, r4
 80113c6:	e7f3      	b.n	80113b0 <_dtoa_r+0x928>
 80113c8:	9b07      	ldr	r3, [sp, #28]
 80113ca:	9300      	str	r3, [sp, #0]
 80113cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	f000 8104 	beq.w	80115dc <_dtoa_r+0xb54>
 80113d4:	2e00      	cmp	r6, #0
 80113d6:	dd05      	ble.n	80113e4 <_dtoa_r+0x95c>
 80113d8:	4629      	mov	r1, r5
 80113da:	4632      	mov	r2, r6
 80113dc:	4658      	mov	r0, fp
 80113de:	f000 fc6f 	bl	8011cc0 <__lshift>
 80113e2:	4605      	mov	r5, r0
 80113e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d05a      	beq.n	80114a0 <_dtoa_r+0xa18>
 80113ea:	6869      	ldr	r1, [r5, #4]
 80113ec:	4658      	mov	r0, fp
 80113ee:	f000 fa0f 	bl	8011810 <_Balloc>
 80113f2:	4606      	mov	r6, r0
 80113f4:	b928      	cbnz	r0, 8011402 <_dtoa_r+0x97a>
 80113f6:	4b84      	ldr	r3, [pc, #528]	@ (8011608 <_dtoa_r+0xb80>)
 80113f8:	4602      	mov	r2, r0
 80113fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80113fe:	f7ff bb5a 	b.w	8010ab6 <_dtoa_r+0x2e>
 8011402:	692a      	ldr	r2, [r5, #16]
 8011404:	3202      	adds	r2, #2
 8011406:	0092      	lsls	r2, r2, #2
 8011408:	f105 010c 	add.w	r1, r5, #12
 801140c:	300c      	adds	r0, #12
 801140e:	f7ff fa80 	bl	8010912 <memcpy>
 8011412:	2201      	movs	r2, #1
 8011414:	4631      	mov	r1, r6
 8011416:	4658      	mov	r0, fp
 8011418:	f000 fc52 	bl	8011cc0 <__lshift>
 801141c:	f10a 0301 	add.w	r3, sl, #1
 8011420:	9307      	str	r3, [sp, #28]
 8011422:	9b00      	ldr	r3, [sp, #0]
 8011424:	4453      	add	r3, sl
 8011426:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011428:	9b02      	ldr	r3, [sp, #8]
 801142a:	f003 0301 	and.w	r3, r3, #1
 801142e:	462f      	mov	r7, r5
 8011430:	930a      	str	r3, [sp, #40]	@ 0x28
 8011432:	4605      	mov	r5, r0
 8011434:	9b07      	ldr	r3, [sp, #28]
 8011436:	4621      	mov	r1, r4
 8011438:	3b01      	subs	r3, #1
 801143a:	4648      	mov	r0, r9
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	f7ff fa9b 	bl	8010978 <quorem>
 8011442:	4639      	mov	r1, r7
 8011444:	9002      	str	r0, [sp, #8]
 8011446:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801144a:	4648      	mov	r0, r9
 801144c:	f000 fca4 	bl	8011d98 <__mcmp>
 8011450:	462a      	mov	r2, r5
 8011452:	9008      	str	r0, [sp, #32]
 8011454:	4621      	mov	r1, r4
 8011456:	4658      	mov	r0, fp
 8011458:	f000 fcba 	bl	8011dd0 <__mdiff>
 801145c:	68c2      	ldr	r2, [r0, #12]
 801145e:	4606      	mov	r6, r0
 8011460:	bb02      	cbnz	r2, 80114a4 <_dtoa_r+0xa1c>
 8011462:	4601      	mov	r1, r0
 8011464:	4648      	mov	r0, r9
 8011466:	f000 fc97 	bl	8011d98 <__mcmp>
 801146a:	4602      	mov	r2, r0
 801146c:	4631      	mov	r1, r6
 801146e:	4658      	mov	r0, fp
 8011470:	920e      	str	r2, [sp, #56]	@ 0x38
 8011472:	f000 fa0d 	bl	8011890 <_Bfree>
 8011476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011478:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801147a:	9e07      	ldr	r6, [sp, #28]
 801147c:	ea43 0102 	orr.w	r1, r3, r2
 8011480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011482:	4319      	orrs	r1, r3
 8011484:	d110      	bne.n	80114a8 <_dtoa_r+0xa20>
 8011486:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801148a:	d029      	beq.n	80114e0 <_dtoa_r+0xa58>
 801148c:	9b08      	ldr	r3, [sp, #32]
 801148e:	2b00      	cmp	r3, #0
 8011490:	dd02      	ble.n	8011498 <_dtoa_r+0xa10>
 8011492:	9b02      	ldr	r3, [sp, #8]
 8011494:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011498:	9b00      	ldr	r3, [sp, #0]
 801149a:	f883 8000 	strb.w	r8, [r3]
 801149e:	e63f      	b.n	8011120 <_dtoa_r+0x698>
 80114a0:	4628      	mov	r0, r5
 80114a2:	e7bb      	b.n	801141c <_dtoa_r+0x994>
 80114a4:	2201      	movs	r2, #1
 80114a6:	e7e1      	b.n	801146c <_dtoa_r+0x9e4>
 80114a8:	9b08      	ldr	r3, [sp, #32]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	db04      	blt.n	80114b8 <_dtoa_r+0xa30>
 80114ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80114b0:	430b      	orrs	r3, r1
 80114b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80114b4:	430b      	orrs	r3, r1
 80114b6:	d120      	bne.n	80114fa <_dtoa_r+0xa72>
 80114b8:	2a00      	cmp	r2, #0
 80114ba:	dded      	ble.n	8011498 <_dtoa_r+0xa10>
 80114bc:	4649      	mov	r1, r9
 80114be:	2201      	movs	r2, #1
 80114c0:	4658      	mov	r0, fp
 80114c2:	f000 fbfd 	bl	8011cc0 <__lshift>
 80114c6:	4621      	mov	r1, r4
 80114c8:	4681      	mov	r9, r0
 80114ca:	f000 fc65 	bl	8011d98 <__mcmp>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	dc03      	bgt.n	80114da <_dtoa_r+0xa52>
 80114d2:	d1e1      	bne.n	8011498 <_dtoa_r+0xa10>
 80114d4:	f018 0f01 	tst.w	r8, #1
 80114d8:	d0de      	beq.n	8011498 <_dtoa_r+0xa10>
 80114da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80114de:	d1d8      	bne.n	8011492 <_dtoa_r+0xa0a>
 80114e0:	9a00      	ldr	r2, [sp, #0]
 80114e2:	2339      	movs	r3, #57	@ 0x39
 80114e4:	7013      	strb	r3, [r2, #0]
 80114e6:	4633      	mov	r3, r6
 80114e8:	461e      	mov	r6, r3
 80114ea:	3b01      	subs	r3, #1
 80114ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80114f0:	2a39      	cmp	r2, #57	@ 0x39
 80114f2:	d052      	beq.n	801159a <_dtoa_r+0xb12>
 80114f4:	3201      	adds	r2, #1
 80114f6:	701a      	strb	r2, [r3, #0]
 80114f8:	e612      	b.n	8011120 <_dtoa_r+0x698>
 80114fa:	2a00      	cmp	r2, #0
 80114fc:	dd07      	ble.n	801150e <_dtoa_r+0xa86>
 80114fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011502:	d0ed      	beq.n	80114e0 <_dtoa_r+0xa58>
 8011504:	9a00      	ldr	r2, [sp, #0]
 8011506:	f108 0301 	add.w	r3, r8, #1
 801150a:	7013      	strb	r3, [r2, #0]
 801150c:	e608      	b.n	8011120 <_dtoa_r+0x698>
 801150e:	9b07      	ldr	r3, [sp, #28]
 8011510:	9a07      	ldr	r2, [sp, #28]
 8011512:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011518:	4293      	cmp	r3, r2
 801151a:	d028      	beq.n	801156e <_dtoa_r+0xae6>
 801151c:	4649      	mov	r1, r9
 801151e:	2300      	movs	r3, #0
 8011520:	220a      	movs	r2, #10
 8011522:	4658      	mov	r0, fp
 8011524:	f000 f9d6 	bl	80118d4 <__multadd>
 8011528:	42af      	cmp	r7, r5
 801152a:	4681      	mov	r9, r0
 801152c:	f04f 0300 	mov.w	r3, #0
 8011530:	f04f 020a 	mov.w	r2, #10
 8011534:	4639      	mov	r1, r7
 8011536:	4658      	mov	r0, fp
 8011538:	d107      	bne.n	801154a <_dtoa_r+0xac2>
 801153a:	f000 f9cb 	bl	80118d4 <__multadd>
 801153e:	4607      	mov	r7, r0
 8011540:	4605      	mov	r5, r0
 8011542:	9b07      	ldr	r3, [sp, #28]
 8011544:	3301      	adds	r3, #1
 8011546:	9307      	str	r3, [sp, #28]
 8011548:	e774      	b.n	8011434 <_dtoa_r+0x9ac>
 801154a:	f000 f9c3 	bl	80118d4 <__multadd>
 801154e:	4629      	mov	r1, r5
 8011550:	4607      	mov	r7, r0
 8011552:	2300      	movs	r3, #0
 8011554:	220a      	movs	r2, #10
 8011556:	4658      	mov	r0, fp
 8011558:	f000 f9bc 	bl	80118d4 <__multadd>
 801155c:	4605      	mov	r5, r0
 801155e:	e7f0      	b.n	8011542 <_dtoa_r+0xaba>
 8011560:	9b00      	ldr	r3, [sp, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	bfcc      	ite	gt
 8011566:	461e      	movgt	r6, r3
 8011568:	2601      	movle	r6, #1
 801156a:	4456      	add	r6, sl
 801156c:	2700      	movs	r7, #0
 801156e:	4649      	mov	r1, r9
 8011570:	2201      	movs	r2, #1
 8011572:	4658      	mov	r0, fp
 8011574:	f000 fba4 	bl	8011cc0 <__lshift>
 8011578:	4621      	mov	r1, r4
 801157a:	4681      	mov	r9, r0
 801157c:	f000 fc0c 	bl	8011d98 <__mcmp>
 8011580:	2800      	cmp	r0, #0
 8011582:	dcb0      	bgt.n	80114e6 <_dtoa_r+0xa5e>
 8011584:	d102      	bne.n	801158c <_dtoa_r+0xb04>
 8011586:	f018 0f01 	tst.w	r8, #1
 801158a:	d1ac      	bne.n	80114e6 <_dtoa_r+0xa5e>
 801158c:	4633      	mov	r3, r6
 801158e:	461e      	mov	r6, r3
 8011590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011594:	2a30      	cmp	r2, #48	@ 0x30
 8011596:	d0fa      	beq.n	801158e <_dtoa_r+0xb06>
 8011598:	e5c2      	b.n	8011120 <_dtoa_r+0x698>
 801159a:	459a      	cmp	sl, r3
 801159c:	d1a4      	bne.n	80114e8 <_dtoa_r+0xa60>
 801159e:	9b04      	ldr	r3, [sp, #16]
 80115a0:	3301      	adds	r3, #1
 80115a2:	9304      	str	r3, [sp, #16]
 80115a4:	2331      	movs	r3, #49	@ 0x31
 80115a6:	f88a 3000 	strb.w	r3, [sl]
 80115aa:	e5b9      	b.n	8011120 <_dtoa_r+0x698>
 80115ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80115ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801160c <_dtoa_r+0xb84>
 80115b2:	b11b      	cbz	r3, 80115bc <_dtoa_r+0xb34>
 80115b4:	f10a 0308 	add.w	r3, sl, #8
 80115b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80115ba:	6013      	str	r3, [r2, #0]
 80115bc:	4650      	mov	r0, sl
 80115be:	b019      	add	sp, #100	@ 0x64
 80115c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	f77f ae37 	ble.w	801123a <_dtoa_r+0x7b2>
 80115cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80115d0:	2001      	movs	r0, #1
 80115d2:	e655      	b.n	8011280 <_dtoa_r+0x7f8>
 80115d4:	9b00      	ldr	r3, [sp, #0]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	f77f aed6 	ble.w	8011388 <_dtoa_r+0x900>
 80115dc:	4656      	mov	r6, sl
 80115de:	4621      	mov	r1, r4
 80115e0:	4648      	mov	r0, r9
 80115e2:	f7ff f9c9 	bl	8010978 <quorem>
 80115e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80115ea:	f806 8b01 	strb.w	r8, [r6], #1
 80115ee:	9b00      	ldr	r3, [sp, #0]
 80115f0:	eba6 020a 	sub.w	r2, r6, sl
 80115f4:	4293      	cmp	r3, r2
 80115f6:	ddb3      	ble.n	8011560 <_dtoa_r+0xad8>
 80115f8:	4649      	mov	r1, r9
 80115fa:	2300      	movs	r3, #0
 80115fc:	220a      	movs	r2, #10
 80115fe:	4658      	mov	r0, fp
 8011600:	f000 f968 	bl	80118d4 <__multadd>
 8011604:	4681      	mov	r9, r0
 8011606:	e7ea      	b.n	80115de <_dtoa_r+0xb56>
 8011608:	0801485c 	.word	0x0801485c
 801160c:	080147f7 	.word	0x080147f7

08011610 <_free_r>:
 8011610:	b538      	push	{r3, r4, r5, lr}
 8011612:	4605      	mov	r5, r0
 8011614:	2900      	cmp	r1, #0
 8011616:	d041      	beq.n	801169c <_free_r+0x8c>
 8011618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801161c:	1f0c      	subs	r4, r1, #4
 801161e:	2b00      	cmp	r3, #0
 8011620:	bfb8      	it	lt
 8011622:	18e4      	addlt	r4, r4, r3
 8011624:	f000 f8e8 	bl	80117f8 <__malloc_lock>
 8011628:	4a1d      	ldr	r2, [pc, #116]	@ (80116a0 <_free_r+0x90>)
 801162a:	6813      	ldr	r3, [r2, #0]
 801162c:	b933      	cbnz	r3, 801163c <_free_r+0x2c>
 801162e:	6063      	str	r3, [r4, #4]
 8011630:	6014      	str	r4, [r2, #0]
 8011632:	4628      	mov	r0, r5
 8011634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011638:	f000 b8e4 	b.w	8011804 <__malloc_unlock>
 801163c:	42a3      	cmp	r3, r4
 801163e:	d908      	bls.n	8011652 <_free_r+0x42>
 8011640:	6820      	ldr	r0, [r4, #0]
 8011642:	1821      	adds	r1, r4, r0
 8011644:	428b      	cmp	r3, r1
 8011646:	bf01      	itttt	eq
 8011648:	6819      	ldreq	r1, [r3, #0]
 801164a:	685b      	ldreq	r3, [r3, #4]
 801164c:	1809      	addeq	r1, r1, r0
 801164e:	6021      	streq	r1, [r4, #0]
 8011650:	e7ed      	b.n	801162e <_free_r+0x1e>
 8011652:	461a      	mov	r2, r3
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	b10b      	cbz	r3, 801165c <_free_r+0x4c>
 8011658:	42a3      	cmp	r3, r4
 801165a:	d9fa      	bls.n	8011652 <_free_r+0x42>
 801165c:	6811      	ldr	r1, [r2, #0]
 801165e:	1850      	adds	r0, r2, r1
 8011660:	42a0      	cmp	r0, r4
 8011662:	d10b      	bne.n	801167c <_free_r+0x6c>
 8011664:	6820      	ldr	r0, [r4, #0]
 8011666:	4401      	add	r1, r0
 8011668:	1850      	adds	r0, r2, r1
 801166a:	4283      	cmp	r3, r0
 801166c:	6011      	str	r1, [r2, #0]
 801166e:	d1e0      	bne.n	8011632 <_free_r+0x22>
 8011670:	6818      	ldr	r0, [r3, #0]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	6053      	str	r3, [r2, #4]
 8011676:	4408      	add	r0, r1
 8011678:	6010      	str	r0, [r2, #0]
 801167a:	e7da      	b.n	8011632 <_free_r+0x22>
 801167c:	d902      	bls.n	8011684 <_free_r+0x74>
 801167e:	230c      	movs	r3, #12
 8011680:	602b      	str	r3, [r5, #0]
 8011682:	e7d6      	b.n	8011632 <_free_r+0x22>
 8011684:	6820      	ldr	r0, [r4, #0]
 8011686:	1821      	adds	r1, r4, r0
 8011688:	428b      	cmp	r3, r1
 801168a:	bf04      	itt	eq
 801168c:	6819      	ldreq	r1, [r3, #0]
 801168e:	685b      	ldreq	r3, [r3, #4]
 8011690:	6063      	str	r3, [r4, #4]
 8011692:	bf04      	itt	eq
 8011694:	1809      	addeq	r1, r1, r0
 8011696:	6021      	streq	r1, [r4, #0]
 8011698:	6054      	str	r4, [r2, #4]
 801169a:	e7ca      	b.n	8011632 <_free_r+0x22>
 801169c:	bd38      	pop	{r3, r4, r5, pc}
 801169e:	bf00      	nop
 80116a0:	200023ac 	.word	0x200023ac

080116a4 <malloc>:
 80116a4:	4b02      	ldr	r3, [pc, #8]	@ (80116b0 <malloc+0xc>)
 80116a6:	4601      	mov	r1, r0
 80116a8:	6818      	ldr	r0, [r3, #0]
 80116aa:	f000 b825 	b.w	80116f8 <_malloc_r>
 80116ae:	bf00      	nop
 80116b0:	20000248 	.word	0x20000248

080116b4 <sbrk_aligned>:
 80116b4:	b570      	push	{r4, r5, r6, lr}
 80116b6:	4e0f      	ldr	r6, [pc, #60]	@ (80116f4 <sbrk_aligned+0x40>)
 80116b8:	460c      	mov	r4, r1
 80116ba:	6831      	ldr	r1, [r6, #0]
 80116bc:	4605      	mov	r5, r0
 80116be:	b911      	cbnz	r1, 80116c6 <sbrk_aligned+0x12>
 80116c0:	f001 ff78 	bl	80135b4 <_sbrk_r>
 80116c4:	6030      	str	r0, [r6, #0]
 80116c6:	4621      	mov	r1, r4
 80116c8:	4628      	mov	r0, r5
 80116ca:	f001 ff73 	bl	80135b4 <_sbrk_r>
 80116ce:	1c43      	adds	r3, r0, #1
 80116d0:	d103      	bne.n	80116da <sbrk_aligned+0x26>
 80116d2:	f04f 34ff 	mov.w	r4, #4294967295
 80116d6:	4620      	mov	r0, r4
 80116d8:	bd70      	pop	{r4, r5, r6, pc}
 80116da:	1cc4      	adds	r4, r0, #3
 80116dc:	f024 0403 	bic.w	r4, r4, #3
 80116e0:	42a0      	cmp	r0, r4
 80116e2:	d0f8      	beq.n	80116d6 <sbrk_aligned+0x22>
 80116e4:	1a21      	subs	r1, r4, r0
 80116e6:	4628      	mov	r0, r5
 80116e8:	f001 ff64 	bl	80135b4 <_sbrk_r>
 80116ec:	3001      	adds	r0, #1
 80116ee:	d1f2      	bne.n	80116d6 <sbrk_aligned+0x22>
 80116f0:	e7ef      	b.n	80116d2 <sbrk_aligned+0x1e>
 80116f2:	bf00      	nop
 80116f4:	200023a8 	.word	0x200023a8

080116f8 <_malloc_r>:
 80116f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116fc:	1ccd      	adds	r5, r1, #3
 80116fe:	f025 0503 	bic.w	r5, r5, #3
 8011702:	3508      	adds	r5, #8
 8011704:	2d0c      	cmp	r5, #12
 8011706:	bf38      	it	cc
 8011708:	250c      	movcc	r5, #12
 801170a:	2d00      	cmp	r5, #0
 801170c:	4606      	mov	r6, r0
 801170e:	db01      	blt.n	8011714 <_malloc_r+0x1c>
 8011710:	42a9      	cmp	r1, r5
 8011712:	d904      	bls.n	801171e <_malloc_r+0x26>
 8011714:	230c      	movs	r3, #12
 8011716:	6033      	str	r3, [r6, #0]
 8011718:	2000      	movs	r0, #0
 801171a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801171e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80117f4 <_malloc_r+0xfc>
 8011722:	f000 f869 	bl	80117f8 <__malloc_lock>
 8011726:	f8d8 3000 	ldr.w	r3, [r8]
 801172a:	461c      	mov	r4, r3
 801172c:	bb44      	cbnz	r4, 8011780 <_malloc_r+0x88>
 801172e:	4629      	mov	r1, r5
 8011730:	4630      	mov	r0, r6
 8011732:	f7ff ffbf 	bl	80116b4 <sbrk_aligned>
 8011736:	1c43      	adds	r3, r0, #1
 8011738:	4604      	mov	r4, r0
 801173a:	d158      	bne.n	80117ee <_malloc_r+0xf6>
 801173c:	f8d8 4000 	ldr.w	r4, [r8]
 8011740:	4627      	mov	r7, r4
 8011742:	2f00      	cmp	r7, #0
 8011744:	d143      	bne.n	80117ce <_malloc_r+0xd6>
 8011746:	2c00      	cmp	r4, #0
 8011748:	d04b      	beq.n	80117e2 <_malloc_r+0xea>
 801174a:	6823      	ldr	r3, [r4, #0]
 801174c:	4639      	mov	r1, r7
 801174e:	4630      	mov	r0, r6
 8011750:	eb04 0903 	add.w	r9, r4, r3
 8011754:	f001 ff2e 	bl	80135b4 <_sbrk_r>
 8011758:	4581      	cmp	r9, r0
 801175a:	d142      	bne.n	80117e2 <_malloc_r+0xea>
 801175c:	6821      	ldr	r1, [r4, #0]
 801175e:	1a6d      	subs	r5, r5, r1
 8011760:	4629      	mov	r1, r5
 8011762:	4630      	mov	r0, r6
 8011764:	f7ff ffa6 	bl	80116b4 <sbrk_aligned>
 8011768:	3001      	adds	r0, #1
 801176a:	d03a      	beq.n	80117e2 <_malloc_r+0xea>
 801176c:	6823      	ldr	r3, [r4, #0]
 801176e:	442b      	add	r3, r5
 8011770:	6023      	str	r3, [r4, #0]
 8011772:	f8d8 3000 	ldr.w	r3, [r8]
 8011776:	685a      	ldr	r2, [r3, #4]
 8011778:	bb62      	cbnz	r2, 80117d4 <_malloc_r+0xdc>
 801177a:	f8c8 7000 	str.w	r7, [r8]
 801177e:	e00f      	b.n	80117a0 <_malloc_r+0xa8>
 8011780:	6822      	ldr	r2, [r4, #0]
 8011782:	1b52      	subs	r2, r2, r5
 8011784:	d420      	bmi.n	80117c8 <_malloc_r+0xd0>
 8011786:	2a0b      	cmp	r2, #11
 8011788:	d917      	bls.n	80117ba <_malloc_r+0xc2>
 801178a:	1961      	adds	r1, r4, r5
 801178c:	42a3      	cmp	r3, r4
 801178e:	6025      	str	r5, [r4, #0]
 8011790:	bf18      	it	ne
 8011792:	6059      	strne	r1, [r3, #4]
 8011794:	6863      	ldr	r3, [r4, #4]
 8011796:	bf08      	it	eq
 8011798:	f8c8 1000 	streq.w	r1, [r8]
 801179c:	5162      	str	r2, [r4, r5]
 801179e:	604b      	str	r3, [r1, #4]
 80117a0:	4630      	mov	r0, r6
 80117a2:	f000 f82f 	bl	8011804 <__malloc_unlock>
 80117a6:	f104 000b 	add.w	r0, r4, #11
 80117aa:	1d23      	adds	r3, r4, #4
 80117ac:	f020 0007 	bic.w	r0, r0, #7
 80117b0:	1ac2      	subs	r2, r0, r3
 80117b2:	bf1c      	itt	ne
 80117b4:	1a1b      	subne	r3, r3, r0
 80117b6:	50a3      	strne	r3, [r4, r2]
 80117b8:	e7af      	b.n	801171a <_malloc_r+0x22>
 80117ba:	6862      	ldr	r2, [r4, #4]
 80117bc:	42a3      	cmp	r3, r4
 80117be:	bf0c      	ite	eq
 80117c0:	f8c8 2000 	streq.w	r2, [r8]
 80117c4:	605a      	strne	r2, [r3, #4]
 80117c6:	e7eb      	b.n	80117a0 <_malloc_r+0xa8>
 80117c8:	4623      	mov	r3, r4
 80117ca:	6864      	ldr	r4, [r4, #4]
 80117cc:	e7ae      	b.n	801172c <_malloc_r+0x34>
 80117ce:	463c      	mov	r4, r7
 80117d0:	687f      	ldr	r7, [r7, #4]
 80117d2:	e7b6      	b.n	8011742 <_malloc_r+0x4a>
 80117d4:	461a      	mov	r2, r3
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	42a3      	cmp	r3, r4
 80117da:	d1fb      	bne.n	80117d4 <_malloc_r+0xdc>
 80117dc:	2300      	movs	r3, #0
 80117de:	6053      	str	r3, [r2, #4]
 80117e0:	e7de      	b.n	80117a0 <_malloc_r+0xa8>
 80117e2:	230c      	movs	r3, #12
 80117e4:	6033      	str	r3, [r6, #0]
 80117e6:	4630      	mov	r0, r6
 80117e8:	f000 f80c 	bl	8011804 <__malloc_unlock>
 80117ec:	e794      	b.n	8011718 <_malloc_r+0x20>
 80117ee:	6005      	str	r5, [r0, #0]
 80117f0:	e7d6      	b.n	80117a0 <_malloc_r+0xa8>
 80117f2:	bf00      	nop
 80117f4:	200023ac 	.word	0x200023ac

080117f8 <__malloc_lock>:
 80117f8:	4801      	ldr	r0, [pc, #4]	@ (8011800 <__malloc_lock+0x8>)
 80117fa:	f7ff b880 	b.w	80108fe <__retarget_lock_acquire_recursive>
 80117fe:	bf00      	nop
 8011800:	200023a4 	.word	0x200023a4

08011804 <__malloc_unlock>:
 8011804:	4801      	ldr	r0, [pc, #4]	@ (801180c <__malloc_unlock+0x8>)
 8011806:	f7ff b87b 	b.w	8010900 <__retarget_lock_release_recursive>
 801180a:	bf00      	nop
 801180c:	200023a4 	.word	0x200023a4

08011810 <_Balloc>:
 8011810:	b570      	push	{r4, r5, r6, lr}
 8011812:	69c6      	ldr	r6, [r0, #28]
 8011814:	4604      	mov	r4, r0
 8011816:	460d      	mov	r5, r1
 8011818:	b976      	cbnz	r6, 8011838 <_Balloc+0x28>
 801181a:	2010      	movs	r0, #16
 801181c:	f7ff ff42 	bl	80116a4 <malloc>
 8011820:	4602      	mov	r2, r0
 8011822:	61e0      	str	r0, [r4, #28]
 8011824:	b920      	cbnz	r0, 8011830 <_Balloc+0x20>
 8011826:	4b18      	ldr	r3, [pc, #96]	@ (8011888 <_Balloc+0x78>)
 8011828:	4818      	ldr	r0, [pc, #96]	@ (801188c <_Balloc+0x7c>)
 801182a:	216b      	movs	r1, #107	@ 0x6b
 801182c:	f7ff f886 	bl	801093c <__assert_func>
 8011830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011834:	6006      	str	r6, [r0, #0]
 8011836:	60c6      	str	r6, [r0, #12]
 8011838:	69e6      	ldr	r6, [r4, #28]
 801183a:	68f3      	ldr	r3, [r6, #12]
 801183c:	b183      	cbz	r3, 8011860 <_Balloc+0x50>
 801183e:	69e3      	ldr	r3, [r4, #28]
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011846:	b9b8      	cbnz	r0, 8011878 <_Balloc+0x68>
 8011848:	2101      	movs	r1, #1
 801184a:	fa01 f605 	lsl.w	r6, r1, r5
 801184e:	1d72      	adds	r2, r6, #5
 8011850:	0092      	lsls	r2, r2, #2
 8011852:	4620      	mov	r0, r4
 8011854:	f001 fecf 	bl	80135f6 <_calloc_r>
 8011858:	b160      	cbz	r0, 8011874 <_Balloc+0x64>
 801185a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801185e:	e00e      	b.n	801187e <_Balloc+0x6e>
 8011860:	2221      	movs	r2, #33	@ 0x21
 8011862:	2104      	movs	r1, #4
 8011864:	4620      	mov	r0, r4
 8011866:	f001 fec6 	bl	80135f6 <_calloc_r>
 801186a:	69e3      	ldr	r3, [r4, #28]
 801186c:	60f0      	str	r0, [r6, #12]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d1e4      	bne.n	801183e <_Balloc+0x2e>
 8011874:	2000      	movs	r0, #0
 8011876:	bd70      	pop	{r4, r5, r6, pc}
 8011878:	6802      	ldr	r2, [r0, #0]
 801187a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801187e:	2300      	movs	r3, #0
 8011880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011884:	e7f7      	b.n	8011876 <_Balloc+0x66>
 8011886:	bf00      	nop
 8011888:	0801474a 	.word	0x0801474a
 801188c:	0801486d 	.word	0x0801486d

08011890 <_Bfree>:
 8011890:	b570      	push	{r4, r5, r6, lr}
 8011892:	69c6      	ldr	r6, [r0, #28]
 8011894:	4605      	mov	r5, r0
 8011896:	460c      	mov	r4, r1
 8011898:	b976      	cbnz	r6, 80118b8 <_Bfree+0x28>
 801189a:	2010      	movs	r0, #16
 801189c:	f7ff ff02 	bl	80116a4 <malloc>
 80118a0:	4602      	mov	r2, r0
 80118a2:	61e8      	str	r0, [r5, #28]
 80118a4:	b920      	cbnz	r0, 80118b0 <_Bfree+0x20>
 80118a6:	4b09      	ldr	r3, [pc, #36]	@ (80118cc <_Bfree+0x3c>)
 80118a8:	4809      	ldr	r0, [pc, #36]	@ (80118d0 <_Bfree+0x40>)
 80118aa:	218f      	movs	r1, #143	@ 0x8f
 80118ac:	f7ff f846 	bl	801093c <__assert_func>
 80118b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118b4:	6006      	str	r6, [r0, #0]
 80118b6:	60c6      	str	r6, [r0, #12]
 80118b8:	b13c      	cbz	r4, 80118ca <_Bfree+0x3a>
 80118ba:	69eb      	ldr	r3, [r5, #28]
 80118bc:	6862      	ldr	r2, [r4, #4]
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80118c4:	6021      	str	r1, [r4, #0]
 80118c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80118ca:	bd70      	pop	{r4, r5, r6, pc}
 80118cc:	0801474a 	.word	0x0801474a
 80118d0:	0801486d 	.word	0x0801486d

080118d4 <__multadd>:
 80118d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118d8:	690d      	ldr	r5, [r1, #16]
 80118da:	4607      	mov	r7, r0
 80118dc:	460c      	mov	r4, r1
 80118de:	461e      	mov	r6, r3
 80118e0:	f101 0c14 	add.w	ip, r1, #20
 80118e4:	2000      	movs	r0, #0
 80118e6:	f8dc 3000 	ldr.w	r3, [ip]
 80118ea:	b299      	uxth	r1, r3
 80118ec:	fb02 6101 	mla	r1, r2, r1, r6
 80118f0:	0c1e      	lsrs	r6, r3, #16
 80118f2:	0c0b      	lsrs	r3, r1, #16
 80118f4:	fb02 3306 	mla	r3, r2, r6, r3
 80118f8:	b289      	uxth	r1, r1
 80118fa:	3001      	adds	r0, #1
 80118fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011900:	4285      	cmp	r5, r0
 8011902:	f84c 1b04 	str.w	r1, [ip], #4
 8011906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801190a:	dcec      	bgt.n	80118e6 <__multadd+0x12>
 801190c:	b30e      	cbz	r6, 8011952 <__multadd+0x7e>
 801190e:	68a3      	ldr	r3, [r4, #8]
 8011910:	42ab      	cmp	r3, r5
 8011912:	dc19      	bgt.n	8011948 <__multadd+0x74>
 8011914:	6861      	ldr	r1, [r4, #4]
 8011916:	4638      	mov	r0, r7
 8011918:	3101      	adds	r1, #1
 801191a:	f7ff ff79 	bl	8011810 <_Balloc>
 801191e:	4680      	mov	r8, r0
 8011920:	b928      	cbnz	r0, 801192e <__multadd+0x5a>
 8011922:	4602      	mov	r2, r0
 8011924:	4b0c      	ldr	r3, [pc, #48]	@ (8011958 <__multadd+0x84>)
 8011926:	480d      	ldr	r0, [pc, #52]	@ (801195c <__multadd+0x88>)
 8011928:	21ba      	movs	r1, #186	@ 0xba
 801192a:	f7ff f807 	bl	801093c <__assert_func>
 801192e:	6922      	ldr	r2, [r4, #16]
 8011930:	3202      	adds	r2, #2
 8011932:	f104 010c 	add.w	r1, r4, #12
 8011936:	0092      	lsls	r2, r2, #2
 8011938:	300c      	adds	r0, #12
 801193a:	f7fe ffea 	bl	8010912 <memcpy>
 801193e:	4621      	mov	r1, r4
 8011940:	4638      	mov	r0, r7
 8011942:	f7ff ffa5 	bl	8011890 <_Bfree>
 8011946:	4644      	mov	r4, r8
 8011948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801194c:	3501      	adds	r5, #1
 801194e:	615e      	str	r6, [r3, #20]
 8011950:	6125      	str	r5, [r4, #16]
 8011952:	4620      	mov	r0, r4
 8011954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011958:	0801485c 	.word	0x0801485c
 801195c:	0801486d 	.word	0x0801486d

08011960 <__s2b>:
 8011960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011964:	460c      	mov	r4, r1
 8011966:	4615      	mov	r5, r2
 8011968:	461f      	mov	r7, r3
 801196a:	2209      	movs	r2, #9
 801196c:	3308      	adds	r3, #8
 801196e:	4606      	mov	r6, r0
 8011970:	fb93 f3f2 	sdiv	r3, r3, r2
 8011974:	2100      	movs	r1, #0
 8011976:	2201      	movs	r2, #1
 8011978:	429a      	cmp	r2, r3
 801197a:	db09      	blt.n	8011990 <__s2b+0x30>
 801197c:	4630      	mov	r0, r6
 801197e:	f7ff ff47 	bl	8011810 <_Balloc>
 8011982:	b940      	cbnz	r0, 8011996 <__s2b+0x36>
 8011984:	4602      	mov	r2, r0
 8011986:	4b19      	ldr	r3, [pc, #100]	@ (80119ec <__s2b+0x8c>)
 8011988:	4819      	ldr	r0, [pc, #100]	@ (80119f0 <__s2b+0x90>)
 801198a:	21d3      	movs	r1, #211	@ 0xd3
 801198c:	f7fe ffd6 	bl	801093c <__assert_func>
 8011990:	0052      	lsls	r2, r2, #1
 8011992:	3101      	adds	r1, #1
 8011994:	e7f0      	b.n	8011978 <__s2b+0x18>
 8011996:	9b08      	ldr	r3, [sp, #32]
 8011998:	6143      	str	r3, [r0, #20]
 801199a:	2d09      	cmp	r5, #9
 801199c:	f04f 0301 	mov.w	r3, #1
 80119a0:	6103      	str	r3, [r0, #16]
 80119a2:	dd16      	ble.n	80119d2 <__s2b+0x72>
 80119a4:	f104 0909 	add.w	r9, r4, #9
 80119a8:	46c8      	mov	r8, r9
 80119aa:	442c      	add	r4, r5
 80119ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80119b0:	4601      	mov	r1, r0
 80119b2:	3b30      	subs	r3, #48	@ 0x30
 80119b4:	220a      	movs	r2, #10
 80119b6:	4630      	mov	r0, r6
 80119b8:	f7ff ff8c 	bl	80118d4 <__multadd>
 80119bc:	45a0      	cmp	r8, r4
 80119be:	d1f5      	bne.n	80119ac <__s2b+0x4c>
 80119c0:	f1a5 0408 	sub.w	r4, r5, #8
 80119c4:	444c      	add	r4, r9
 80119c6:	1b2d      	subs	r5, r5, r4
 80119c8:	1963      	adds	r3, r4, r5
 80119ca:	42bb      	cmp	r3, r7
 80119cc:	db04      	blt.n	80119d8 <__s2b+0x78>
 80119ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119d2:	340a      	adds	r4, #10
 80119d4:	2509      	movs	r5, #9
 80119d6:	e7f6      	b.n	80119c6 <__s2b+0x66>
 80119d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80119dc:	4601      	mov	r1, r0
 80119de:	3b30      	subs	r3, #48	@ 0x30
 80119e0:	220a      	movs	r2, #10
 80119e2:	4630      	mov	r0, r6
 80119e4:	f7ff ff76 	bl	80118d4 <__multadd>
 80119e8:	e7ee      	b.n	80119c8 <__s2b+0x68>
 80119ea:	bf00      	nop
 80119ec:	0801485c 	.word	0x0801485c
 80119f0:	0801486d 	.word	0x0801486d

080119f4 <__hi0bits>:
 80119f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80119f8:	4603      	mov	r3, r0
 80119fa:	bf36      	itet	cc
 80119fc:	0403      	lslcc	r3, r0, #16
 80119fe:	2000      	movcs	r0, #0
 8011a00:	2010      	movcc	r0, #16
 8011a02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011a06:	bf3c      	itt	cc
 8011a08:	021b      	lslcc	r3, r3, #8
 8011a0a:	3008      	addcc	r0, #8
 8011a0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011a10:	bf3c      	itt	cc
 8011a12:	011b      	lslcc	r3, r3, #4
 8011a14:	3004      	addcc	r0, #4
 8011a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a1a:	bf3c      	itt	cc
 8011a1c:	009b      	lslcc	r3, r3, #2
 8011a1e:	3002      	addcc	r0, #2
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	db05      	blt.n	8011a30 <__hi0bits+0x3c>
 8011a24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011a28:	f100 0001 	add.w	r0, r0, #1
 8011a2c:	bf08      	it	eq
 8011a2e:	2020      	moveq	r0, #32
 8011a30:	4770      	bx	lr

08011a32 <__lo0bits>:
 8011a32:	6803      	ldr	r3, [r0, #0]
 8011a34:	4602      	mov	r2, r0
 8011a36:	f013 0007 	ands.w	r0, r3, #7
 8011a3a:	d00b      	beq.n	8011a54 <__lo0bits+0x22>
 8011a3c:	07d9      	lsls	r1, r3, #31
 8011a3e:	d421      	bmi.n	8011a84 <__lo0bits+0x52>
 8011a40:	0798      	lsls	r0, r3, #30
 8011a42:	bf49      	itett	mi
 8011a44:	085b      	lsrmi	r3, r3, #1
 8011a46:	089b      	lsrpl	r3, r3, #2
 8011a48:	2001      	movmi	r0, #1
 8011a4a:	6013      	strmi	r3, [r2, #0]
 8011a4c:	bf5c      	itt	pl
 8011a4e:	6013      	strpl	r3, [r2, #0]
 8011a50:	2002      	movpl	r0, #2
 8011a52:	4770      	bx	lr
 8011a54:	b299      	uxth	r1, r3
 8011a56:	b909      	cbnz	r1, 8011a5c <__lo0bits+0x2a>
 8011a58:	0c1b      	lsrs	r3, r3, #16
 8011a5a:	2010      	movs	r0, #16
 8011a5c:	b2d9      	uxtb	r1, r3
 8011a5e:	b909      	cbnz	r1, 8011a64 <__lo0bits+0x32>
 8011a60:	3008      	adds	r0, #8
 8011a62:	0a1b      	lsrs	r3, r3, #8
 8011a64:	0719      	lsls	r1, r3, #28
 8011a66:	bf04      	itt	eq
 8011a68:	091b      	lsreq	r3, r3, #4
 8011a6a:	3004      	addeq	r0, #4
 8011a6c:	0799      	lsls	r1, r3, #30
 8011a6e:	bf04      	itt	eq
 8011a70:	089b      	lsreq	r3, r3, #2
 8011a72:	3002      	addeq	r0, #2
 8011a74:	07d9      	lsls	r1, r3, #31
 8011a76:	d403      	bmi.n	8011a80 <__lo0bits+0x4e>
 8011a78:	085b      	lsrs	r3, r3, #1
 8011a7a:	f100 0001 	add.w	r0, r0, #1
 8011a7e:	d003      	beq.n	8011a88 <__lo0bits+0x56>
 8011a80:	6013      	str	r3, [r2, #0]
 8011a82:	4770      	bx	lr
 8011a84:	2000      	movs	r0, #0
 8011a86:	4770      	bx	lr
 8011a88:	2020      	movs	r0, #32
 8011a8a:	4770      	bx	lr

08011a8c <__i2b>:
 8011a8c:	b510      	push	{r4, lr}
 8011a8e:	460c      	mov	r4, r1
 8011a90:	2101      	movs	r1, #1
 8011a92:	f7ff febd 	bl	8011810 <_Balloc>
 8011a96:	4602      	mov	r2, r0
 8011a98:	b928      	cbnz	r0, 8011aa6 <__i2b+0x1a>
 8011a9a:	4b05      	ldr	r3, [pc, #20]	@ (8011ab0 <__i2b+0x24>)
 8011a9c:	4805      	ldr	r0, [pc, #20]	@ (8011ab4 <__i2b+0x28>)
 8011a9e:	f240 1145 	movw	r1, #325	@ 0x145
 8011aa2:	f7fe ff4b 	bl	801093c <__assert_func>
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	6144      	str	r4, [r0, #20]
 8011aaa:	6103      	str	r3, [r0, #16]
 8011aac:	bd10      	pop	{r4, pc}
 8011aae:	bf00      	nop
 8011ab0:	0801485c 	.word	0x0801485c
 8011ab4:	0801486d 	.word	0x0801486d

08011ab8 <__multiply>:
 8011ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011abc:	4614      	mov	r4, r2
 8011abe:	690a      	ldr	r2, [r1, #16]
 8011ac0:	6923      	ldr	r3, [r4, #16]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	bfa8      	it	ge
 8011ac6:	4623      	movge	r3, r4
 8011ac8:	460f      	mov	r7, r1
 8011aca:	bfa4      	itt	ge
 8011acc:	460c      	movge	r4, r1
 8011ace:	461f      	movge	r7, r3
 8011ad0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011ad4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011ad8:	68a3      	ldr	r3, [r4, #8]
 8011ada:	6861      	ldr	r1, [r4, #4]
 8011adc:	eb0a 0609 	add.w	r6, sl, r9
 8011ae0:	42b3      	cmp	r3, r6
 8011ae2:	b085      	sub	sp, #20
 8011ae4:	bfb8      	it	lt
 8011ae6:	3101      	addlt	r1, #1
 8011ae8:	f7ff fe92 	bl	8011810 <_Balloc>
 8011aec:	b930      	cbnz	r0, 8011afc <__multiply+0x44>
 8011aee:	4602      	mov	r2, r0
 8011af0:	4b44      	ldr	r3, [pc, #272]	@ (8011c04 <__multiply+0x14c>)
 8011af2:	4845      	ldr	r0, [pc, #276]	@ (8011c08 <__multiply+0x150>)
 8011af4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011af8:	f7fe ff20 	bl	801093c <__assert_func>
 8011afc:	f100 0514 	add.w	r5, r0, #20
 8011b00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b04:	462b      	mov	r3, r5
 8011b06:	2200      	movs	r2, #0
 8011b08:	4543      	cmp	r3, r8
 8011b0a:	d321      	bcc.n	8011b50 <__multiply+0x98>
 8011b0c:	f107 0114 	add.w	r1, r7, #20
 8011b10:	f104 0214 	add.w	r2, r4, #20
 8011b14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011b18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011b1c:	9302      	str	r3, [sp, #8]
 8011b1e:	1b13      	subs	r3, r2, r4
 8011b20:	3b15      	subs	r3, #21
 8011b22:	f023 0303 	bic.w	r3, r3, #3
 8011b26:	3304      	adds	r3, #4
 8011b28:	f104 0715 	add.w	r7, r4, #21
 8011b2c:	42ba      	cmp	r2, r7
 8011b2e:	bf38      	it	cc
 8011b30:	2304      	movcc	r3, #4
 8011b32:	9301      	str	r3, [sp, #4]
 8011b34:	9b02      	ldr	r3, [sp, #8]
 8011b36:	9103      	str	r1, [sp, #12]
 8011b38:	428b      	cmp	r3, r1
 8011b3a:	d80c      	bhi.n	8011b56 <__multiply+0x9e>
 8011b3c:	2e00      	cmp	r6, #0
 8011b3e:	dd03      	ble.n	8011b48 <__multiply+0x90>
 8011b40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d05b      	beq.n	8011c00 <__multiply+0x148>
 8011b48:	6106      	str	r6, [r0, #16]
 8011b4a:	b005      	add	sp, #20
 8011b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b50:	f843 2b04 	str.w	r2, [r3], #4
 8011b54:	e7d8      	b.n	8011b08 <__multiply+0x50>
 8011b56:	f8b1 a000 	ldrh.w	sl, [r1]
 8011b5a:	f1ba 0f00 	cmp.w	sl, #0
 8011b5e:	d024      	beq.n	8011baa <__multiply+0xf2>
 8011b60:	f104 0e14 	add.w	lr, r4, #20
 8011b64:	46a9      	mov	r9, r5
 8011b66:	f04f 0c00 	mov.w	ip, #0
 8011b6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011b6e:	f8d9 3000 	ldr.w	r3, [r9]
 8011b72:	fa1f fb87 	uxth.w	fp, r7
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	fb0a 330b 	mla	r3, sl, fp, r3
 8011b7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011b80:	f8d9 7000 	ldr.w	r7, [r9]
 8011b84:	4463      	add	r3, ip
 8011b86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011b8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8011b8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011b98:	4572      	cmp	r2, lr
 8011b9a:	f849 3b04 	str.w	r3, [r9], #4
 8011b9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011ba2:	d8e2      	bhi.n	8011b6a <__multiply+0xb2>
 8011ba4:	9b01      	ldr	r3, [sp, #4]
 8011ba6:	f845 c003 	str.w	ip, [r5, r3]
 8011baa:	9b03      	ldr	r3, [sp, #12]
 8011bac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011bb0:	3104      	adds	r1, #4
 8011bb2:	f1b9 0f00 	cmp.w	r9, #0
 8011bb6:	d021      	beq.n	8011bfc <__multiply+0x144>
 8011bb8:	682b      	ldr	r3, [r5, #0]
 8011bba:	f104 0c14 	add.w	ip, r4, #20
 8011bbe:	46ae      	mov	lr, r5
 8011bc0:	f04f 0a00 	mov.w	sl, #0
 8011bc4:	f8bc b000 	ldrh.w	fp, [ip]
 8011bc8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011bcc:	fb09 770b 	mla	r7, r9, fp, r7
 8011bd0:	4457      	add	r7, sl
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011bd8:	f84e 3b04 	str.w	r3, [lr], #4
 8011bdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011be0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011be4:	f8be 3000 	ldrh.w	r3, [lr]
 8011be8:	fb09 330a 	mla	r3, r9, sl, r3
 8011bec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011bf0:	4562      	cmp	r2, ip
 8011bf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011bf6:	d8e5      	bhi.n	8011bc4 <__multiply+0x10c>
 8011bf8:	9f01      	ldr	r7, [sp, #4]
 8011bfa:	51eb      	str	r3, [r5, r7]
 8011bfc:	3504      	adds	r5, #4
 8011bfe:	e799      	b.n	8011b34 <__multiply+0x7c>
 8011c00:	3e01      	subs	r6, #1
 8011c02:	e79b      	b.n	8011b3c <__multiply+0x84>
 8011c04:	0801485c 	.word	0x0801485c
 8011c08:	0801486d 	.word	0x0801486d

08011c0c <__pow5mult>:
 8011c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c10:	4615      	mov	r5, r2
 8011c12:	f012 0203 	ands.w	r2, r2, #3
 8011c16:	4607      	mov	r7, r0
 8011c18:	460e      	mov	r6, r1
 8011c1a:	d007      	beq.n	8011c2c <__pow5mult+0x20>
 8011c1c:	4c25      	ldr	r4, [pc, #148]	@ (8011cb4 <__pow5mult+0xa8>)
 8011c1e:	3a01      	subs	r2, #1
 8011c20:	2300      	movs	r3, #0
 8011c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c26:	f7ff fe55 	bl	80118d4 <__multadd>
 8011c2a:	4606      	mov	r6, r0
 8011c2c:	10ad      	asrs	r5, r5, #2
 8011c2e:	d03d      	beq.n	8011cac <__pow5mult+0xa0>
 8011c30:	69fc      	ldr	r4, [r7, #28]
 8011c32:	b97c      	cbnz	r4, 8011c54 <__pow5mult+0x48>
 8011c34:	2010      	movs	r0, #16
 8011c36:	f7ff fd35 	bl	80116a4 <malloc>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	61f8      	str	r0, [r7, #28]
 8011c3e:	b928      	cbnz	r0, 8011c4c <__pow5mult+0x40>
 8011c40:	4b1d      	ldr	r3, [pc, #116]	@ (8011cb8 <__pow5mult+0xac>)
 8011c42:	481e      	ldr	r0, [pc, #120]	@ (8011cbc <__pow5mult+0xb0>)
 8011c44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011c48:	f7fe fe78 	bl	801093c <__assert_func>
 8011c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c50:	6004      	str	r4, [r0, #0]
 8011c52:	60c4      	str	r4, [r0, #12]
 8011c54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c5c:	b94c      	cbnz	r4, 8011c72 <__pow5mult+0x66>
 8011c5e:	f240 2171 	movw	r1, #625	@ 0x271
 8011c62:	4638      	mov	r0, r7
 8011c64:	f7ff ff12 	bl	8011a8c <__i2b>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c6e:	4604      	mov	r4, r0
 8011c70:	6003      	str	r3, [r0, #0]
 8011c72:	f04f 0900 	mov.w	r9, #0
 8011c76:	07eb      	lsls	r3, r5, #31
 8011c78:	d50a      	bpl.n	8011c90 <__pow5mult+0x84>
 8011c7a:	4631      	mov	r1, r6
 8011c7c:	4622      	mov	r2, r4
 8011c7e:	4638      	mov	r0, r7
 8011c80:	f7ff ff1a 	bl	8011ab8 <__multiply>
 8011c84:	4631      	mov	r1, r6
 8011c86:	4680      	mov	r8, r0
 8011c88:	4638      	mov	r0, r7
 8011c8a:	f7ff fe01 	bl	8011890 <_Bfree>
 8011c8e:	4646      	mov	r6, r8
 8011c90:	106d      	asrs	r5, r5, #1
 8011c92:	d00b      	beq.n	8011cac <__pow5mult+0xa0>
 8011c94:	6820      	ldr	r0, [r4, #0]
 8011c96:	b938      	cbnz	r0, 8011ca8 <__pow5mult+0x9c>
 8011c98:	4622      	mov	r2, r4
 8011c9a:	4621      	mov	r1, r4
 8011c9c:	4638      	mov	r0, r7
 8011c9e:	f7ff ff0b 	bl	8011ab8 <__multiply>
 8011ca2:	6020      	str	r0, [r4, #0]
 8011ca4:	f8c0 9000 	str.w	r9, [r0]
 8011ca8:	4604      	mov	r4, r0
 8011caa:	e7e4      	b.n	8011c76 <__pow5mult+0x6a>
 8011cac:	4630      	mov	r0, r6
 8011cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cb2:	bf00      	nop
 8011cb4:	080148c8 	.word	0x080148c8
 8011cb8:	0801474a 	.word	0x0801474a
 8011cbc:	0801486d 	.word	0x0801486d

08011cc0 <__lshift>:
 8011cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cc4:	460c      	mov	r4, r1
 8011cc6:	6849      	ldr	r1, [r1, #4]
 8011cc8:	6923      	ldr	r3, [r4, #16]
 8011cca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011cce:	68a3      	ldr	r3, [r4, #8]
 8011cd0:	4607      	mov	r7, r0
 8011cd2:	4691      	mov	r9, r2
 8011cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011cd8:	f108 0601 	add.w	r6, r8, #1
 8011cdc:	42b3      	cmp	r3, r6
 8011cde:	db0b      	blt.n	8011cf8 <__lshift+0x38>
 8011ce0:	4638      	mov	r0, r7
 8011ce2:	f7ff fd95 	bl	8011810 <_Balloc>
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	b948      	cbnz	r0, 8011cfe <__lshift+0x3e>
 8011cea:	4602      	mov	r2, r0
 8011cec:	4b28      	ldr	r3, [pc, #160]	@ (8011d90 <__lshift+0xd0>)
 8011cee:	4829      	ldr	r0, [pc, #164]	@ (8011d94 <__lshift+0xd4>)
 8011cf0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011cf4:	f7fe fe22 	bl	801093c <__assert_func>
 8011cf8:	3101      	adds	r1, #1
 8011cfa:	005b      	lsls	r3, r3, #1
 8011cfc:	e7ee      	b.n	8011cdc <__lshift+0x1c>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	f100 0114 	add.w	r1, r0, #20
 8011d04:	f100 0210 	add.w	r2, r0, #16
 8011d08:	4618      	mov	r0, r3
 8011d0a:	4553      	cmp	r3, sl
 8011d0c:	db33      	blt.n	8011d76 <__lshift+0xb6>
 8011d0e:	6920      	ldr	r0, [r4, #16]
 8011d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d14:	f104 0314 	add.w	r3, r4, #20
 8011d18:	f019 091f 	ands.w	r9, r9, #31
 8011d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011d24:	d02b      	beq.n	8011d7e <__lshift+0xbe>
 8011d26:	f1c9 0e20 	rsb	lr, r9, #32
 8011d2a:	468a      	mov	sl, r1
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	6818      	ldr	r0, [r3, #0]
 8011d30:	fa00 f009 	lsl.w	r0, r0, r9
 8011d34:	4310      	orrs	r0, r2
 8011d36:	f84a 0b04 	str.w	r0, [sl], #4
 8011d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d3e:	459c      	cmp	ip, r3
 8011d40:	fa22 f20e 	lsr.w	r2, r2, lr
 8011d44:	d8f3      	bhi.n	8011d2e <__lshift+0x6e>
 8011d46:	ebac 0304 	sub.w	r3, ip, r4
 8011d4a:	3b15      	subs	r3, #21
 8011d4c:	f023 0303 	bic.w	r3, r3, #3
 8011d50:	3304      	adds	r3, #4
 8011d52:	f104 0015 	add.w	r0, r4, #21
 8011d56:	4584      	cmp	ip, r0
 8011d58:	bf38      	it	cc
 8011d5a:	2304      	movcc	r3, #4
 8011d5c:	50ca      	str	r2, [r1, r3]
 8011d5e:	b10a      	cbz	r2, 8011d64 <__lshift+0xa4>
 8011d60:	f108 0602 	add.w	r6, r8, #2
 8011d64:	3e01      	subs	r6, #1
 8011d66:	4638      	mov	r0, r7
 8011d68:	612e      	str	r6, [r5, #16]
 8011d6a:	4621      	mov	r1, r4
 8011d6c:	f7ff fd90 	bl	8011890 <_Bfree>
 8011d70:	4628      	mov	r0, r5
 8011d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	e7c5      	b.n	8011d0a <__lshift+0x4a>
 8011d7e:	3904      	subs	r1, #4
 8011d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d84:	f841 2f04 	str.w	r2, [r1, #4]!
 8011d88:	459c      	cmp	ip, r3
 8011d8a:	d8f9      	bhi.n	8011d80 <__lshift+0xc0>
 8011d8c:	e7ea      	b.n	8011d64 <__lshift+0xa4>
 8011d8e:	bf00      	nop
 8011d90:	0801485c 	.word	0x0801485c
 8011d94:	0801486d 	.word	0x0801486d

08011d98 <__mcmp>:
 8011d98:	690a      	ldr	r2, [r1, #16]
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	6900      	ldr	r0, [r0, #16]
 8011d9e:	1a80      	subs	r0, r0, r2
 8011da0:	b530      	push	{r4, r5, lr}
 8011da2:	d10e      	bne.n	8011dc2 <__mcmp+0x2a>
 8011da4:	3314      	adds	r3, #20
 8011da6:	3114      	adds	r1, #20
 8011da8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011dac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011db0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011db4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011db8:	4295      	cmp	r5, r2
 8011dba:	d003      	beq.n	8011dc4 <__mcmp+0x2c>
 8011dbc:	d205      	bcs.n	8011dca <__mcmp+0x32>
 8011dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011dc2:	bd30      	pop	{r4, r5, pc}
 8011dc4:	42a3      	cmp	r3, r4
 8011dc6:	d3f3      	bcc.n	8011db0 <__mcmp+0x18>
 8011dc8:	e7fb      	b.n	8011dc2 <__mcmp+0x2a>
 8011dca:	2001      	movs	r0, #1
 8011dcc:	e7f9      	b.n	8011dc2 <__mcmp+0x2a>
	...

08011dd0 <__mdiff>:
 8011dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd4:	4689      	mov	r9, r1
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	4611      	mov	r1, r2
 8011dda:	4648      	mov	r0, r9
 8011ddc:	4614      	mov	r4, r2
 8011dde:	f7ff ffdb 	bl	8011d98 <__mcmp>
 8011de2:	1e05      	subs	r5, r0, #0
 8011de4:	d112      	bne.n	8011e0c <__mdiff+0x3c>
 8011de6:	4629      	mov	r1, r5
 8011de8:	4630      	mov	r0, r6
 8011dea:	f7ff fd11 	bl	8011810 <_Balloc>
 8011dee:	4602      	mov	r2, r0
 8011df0:	b928      	cbnz	r0, 8011dfe <__mdiff+0x2e>
 8011df2:	4b3f      	ldr	r3, [pc, #252]	@ (8011ef0 <__mdiff+0x120>)
 8011df4:	f240 2137 	movw	r1, #567	@ 0x237
 8011df8:	483e      	ldr	r0, [pc, #248]	@ (8011ef4 <__mdiff+0x124>)
 8011dfa:	f7fe fd9f 	bl	801093c <__assert_func>
 8011dfe:	2301      	movs	r3, #1
 8011e00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e04:	4610      	mov	r0, r2
 8011e06:	b003      	add	sp, #12
 8011e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e0c:	bfbc      	itt	lt
 8011e0e:	464b      	movlt	r3, r9
 8011e10:	46a1      	movlt	r9, r4
 8011e12:	4630      	mov	r0, r6
 8011e14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011e18:	bfba      	itte	lt
 8011e1a:	461c      	movlt	r4, r3
 8011e1c:	2501      	movlt	r5, #1
 8011e1e:	2500      	movge	r5, #0
 8011e20:	f7ff fcf6 	bl	8011810 <_Balloc>
 8011e24:	4602      	mov	r2, r0
 8011e26:	b918      	cbnz	r0, 8011e30 <__mdiff+0x60>
 8011e28:	4b31      	ldr	r3, [pc, #196]	@ (8011ef0 <__mdiff+0x120>)
 8011e2a:	f240 2145 	movw	r1, #581	@ 0x245
 8011e2e:	e7e3      	b.n	8011df8 <__mdiff+0x28>
 8011e30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011e34:	6926      	ldr	r6, [r4, #16]
 8011e36:	60c5      	str	r5, [r0, #12]
 8011e38:	f109 0310 	add.w	r3, r9, #16
 8011e3c:	f109 0514 	add.w	r5, r9, #20
 8011e40:	f104 0e14 	add.w	lr, r4, #20
 8011e44:	f100 0b14 	add.w	fp, r0, #20
 8011e48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011e4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011e50:	9301      	str	r3, [sp, #4]
 8011e52:	46d9      	mov	r9, fp
 8011e54:	f04f 0c00 	mov.w	ip, #0
 8011e58:	9b01      	ldr	r3, [sp, #4]
 8011e5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011e5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011e62:	9301      	str	r3, [sp, #4]
 8011e64:	fa1f f38a 	uxth.w	r3, sl
 8011e68:	4619      	mov	r1, r3
 8011e6a:	b283      	uxth	r3, r0
 8011e6c:	1acb      	subs	r3, r1, r3
 8011e6e:	0c00      	lsrs	r0, r0, #16
 8011e70:	4463      	add	r3, ip
 8011e72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011e76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011e7a:	b29b      	uxth	r3, r3
 8011e7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011e80:	4576      	cmp	r6, lr
 8011e82:	f849 3b04 	str.w	r3, [r9], #4
 8011e86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011e8a:	d8e5      	bhi.n	8011e58 <__mdiff+0x88>
 8011e8c:	1b33      	subs	r3, r6, r4
 8011e8e:	3b15      	subs	r3, #21
 8011e90:	f023 0303 	bic.w	r3, r3, #3
 8011e94:	3415      	adds	r4, #21
 8011e96:	3304      	adds	r3, #4
 8011e98:	42a6      	cmp	r6, r4
 8011e9a:	bf38      	it	cc
 8011e9c:	2304      	movcc	r3, #4
 8011e9e:	441d      	add	r5, r3
 8011ea0:	445b      	add	r3, fp
 8011ea2:	461e      	mov	r6, r3
 8011ea4:	462c      	mov	r4, r5
 8011ea6:	4544      	cmp	r4, r8
 8011ea8:	d30e      	bcc.n	8011ec8 <__mdiff+0xf8>
 8011eaa:	f108 0103 	add.w	r1, r8, #3
 8011eae:	1b49      	subs	r1, r1, r5
 8011eb0:	f021 0103 	bic.w	r1, r1, #3
 8011eb4:	3d03      	subs	r5, #3
 8011eb6:	45a8      	cmp	r8, r5
 8011eb8:	bf38      	it	cc
 8011eba:	2100      	movcc	r1, #0
 8011ebc:	440b      	add	r3, r1
 8011ebe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ec2:	b191      	cbz	r1, 8011eea <__mdiff+0x11a>
 8011ec4:	6117      	str	r7, [r2, #16]
 8011ec6:	e79d      	b.n	8011e04 <__mdiff+0x34>
 8011ec8:	f854 1b04 	ldr.w	r1, [r4], #4
 8011ecc:	46e6      	mov	lr, ip
 8011ece:	0c08      	lsrs	r0, r1, #16
 8011ed0:	fa1c fc81 	uxtah	ip, ip, r1
 8011ed4:	4471      	add	r1, lr
 8011ed6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011eda:	b289      	uxth	r1, r1
 8011edc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011ee0:	f846 1b04 	str.w	r1, [r6], #4
 8011ee4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ee8:	e7dd      	b.n	8011ea6 <__mdiff+0xd6>
 8011eea:	3f01      	subs	r7, #1
 8011eec:	e7e7      	b.n	8011ebe <__mdiff+0xee>
 8011eee:	bf00      	nop
 8011ef0:	0801485c 	.word	0x0801485c
 8011ef4:	0801486d 	.word	0x0801486d

08011ef8 <__ulp>:
 8011ef8:	b082      	sub	sp, #8
 8011efa:	ed8d 0b00 	vstr	d0, [sp]
 8011efe:	9a01      	ldr	r2, [sp, #4]
 8011f00:	4b0f      	ldr	r3, [pc, #60]	@ (8011f40 <__ulp+0x48>)
 8011f02:	4013      	ands	r3, r2
 8011f04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	dc08      	bgt.n	8011f1e <__ulp+0x26>
 8011f0c:	425b      	negs	r3, r3
 8011f0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011f12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011f16:	da04      	bge.n	8011f22 <__ulp+0x2a>
 8011f18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011f1c:	4113      	asrs	r3, r2
 8011f1e:	2200      	movs	r2, #0
 8011f20:	e008      	b.n	8011f34 <__ulp+0x3c>
 8011f22:	f1a2 0314 	sub.w	r3, r2, #20
 8011f26:	2b1e      	cmp	r3, #30
 8011f28:	bfda      	itte	le
 8011f2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011f2e:	40da      	lsrle	r2, r3
 8011f30:	2201      	movgt	r2, #1
 8011f32:	2300      	movs	r3, #0
 8011f34:	4619      	mov	r1, r3
 8011f36:	4610      	mov	r0, r2
 8011f38:	ec41 0b10 	vmov	d0, r0, r1
 8011f3c:	b002      	add	sp, #8
 8011f3e:	4770      	bx	lr
 8011f40:	7ff00000 	.word	0x7ff00000

08011f44 <__b2d>:
 8011f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f48:	6906      	ldr	r6, [r0, #16]
 8011f4a:	f100 0814 	add.w	r8, r0, #20
 8011f4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011f52:	1f37      	subs	r7, r6, #4
 8011f54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011f58:	4610      	mov	r0, r2
 8011f5a:	f7ff fd4b 	bl	80119f4 <__hi0bits>
 8011f5e:	f1c0 0320 	rsb	r3, r0, #32
 8011f62:	280a      	cmp	r0, #10
 8011f64:	600b      	str	r3, [r1, #0]
 8011f66:	491b      	ldr	r1, [pc, #108]	@ (8011fd4 <__b2d+0x90>)
 8011f68:	dc15      	bgt.n	8011f96 <__b2d+0x52>
 8011f6a:	f1c0 0c0b 	rsb	ip, r0, #11
 8011f6e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011f72:	45b8      	cmp	r8, r7
 8011f74:	ea43 0501 	orr.w	r5, r3, r1
 8011f78:	bf34      	ite	cc
 8011f7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011f7e:	2300      	movcs	r3, #0
 8011f80:	3015      	adds	r0, #21
 8011f82:	fa02 f000 	lsl.w	r0, r2, r0
 8011f86:	fa23 f30c 	lsr.w	r3, r3, ip
 8011f8a:	4303      	orrs	r3, r0
 8011f8c:	461c      	mov	r4, r3
 8011f8e:	ec45 4b10 	vmov	d0, r4, r5
 8011f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f96:	45b8      	cmp	r8, r7
 8011f98:	bf3a      	itte	cc
 8011f9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011f9e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011fa2:	2300      	movcs	r3, #0
 8011fa4:	380b      	subs	r0, #11
 8011fa6:	d012      	beq.n	8011fce <__b2d+0x8a>
 8011fa8:	f1c0 0120 	rsb	r1, r0, #32
 8011fac:	fa23 f401 	lsr.w	r4, r3, r1
 8011fb0:	4082      	lsls	r2, r0
 8011fb2:	4322      	orrs	r2, r4
 8011fb4:	4547      	cmp	r7, r8
 8011fb6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011fba:	bf8c      	ite	hi
 8011fbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011fc0:	2200      	movls	r2, #0
 8011fc2:	4083      	lsls	r3, r0
 8011fc4:	40ca      	lsrs	r2, r1
 8011fc6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	e7de      	b.n	8011f8c <__b2d+0x48>
 8011fce:	ea42 0501 	orr.w	r5, r2, r1
 8011fd2:	e7db      	b.n	8011f8c <__b2d+0x48>
 8011fd4:	3ff00000 	.word	0x3ff00000

08011fd8 <__d2b>:
 8011fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011fdc:	460f      	mov	r7, r1
 8011fde:	2101      	movs	r1, #1
 8011fe0:	ec59 8b10 	vmov	r8, r9, d0
 8011fe4:	4616      	mov	r6, r2
 8011fe6:	f7ff fc13 	bl	8011810 <_Balloc>
 8011fea:	4604      	mov	r4, r0
 8011fec:	b930      	cbnz	r0, 8011ffc <__d2b+0x24>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	4b23      	ldr	r3, [pc, #140]	@ (8012080 <__d2b+0xa8>)
 8011ff2:	4824      	ldr	r0, [pc, #144]	@ (8012084 <__d2b+0xac>)
 8011ff4:	f240 310f 	movw	r1, #783	@ 0x30f
 8011ff8:	f7fe fca0 	bl	801093c <__assert_func>
 8011ffc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012004:	b10d      	cbz	r5, 801200a <__d2b+0x32>
 8012006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801200a:	9301      	str	r3, [sp, #4]
 801200c:	f1b8 0300 	subs.w	r3, r8, #0
 8012010:	d023      	beq.n	801205a <__d2b+0x82>
 8012012:	4668      	mov	r0, sp
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	f7ff fd0c 	bl	8011a32 <__lo0bits>
 801201a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801201e:	b1d0      	cbz	r0, 8012056 <__d2b+0x7e>
 8012020:	f1c0 0320 	rsb	r3, r0, #32
 8012024:	fa02 f303 	lsl.w	r3, r2, r3
 8012028:	430b      	orrs	r3, r1
 801202a:	40c2      	lsrs	r2, r0
 801202c:	6163      	str	r3, [r4, #20]
 801202e:	9201      	str	r2, [sp, #4]
 8012030:	9b01      	ldr	r3, [sp, #4]
 8012032:	61a3      	str	r3, [r4, #24]
 8012034:	2b00      	cmp	r3, #0
 8012036:	bf0c      	ite	eq
 8012038:	2201      	moveq	r2, #1
 801203a:	2202      	movne	r2, #2
 801203c:	6122      	str	r2, [r4, #16]
 801203e:	b1a5      	cbz	r5, 801206a <__d2b+0x92>
 8012040:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012044:	4405      	add	r5, r0
 8012046:	603d      	str	r5, [r7, #0]
 8012048:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801204c:	6030      	str	r0, [r6, #0]
 801204e:	4620      	mov	r0, r4
 8012050:	b003      	add	sp, #12
 8012052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012056:	6161      	str	r1, [r4, #20]
 8012058:	e7ea      	b.n	8012030 <__d2b+0x58>
 801205a:	a801      	add	r0, sp, #4
 801205c:	f7ff fce9 	bl	8011a32 <__lo0bits>
 8012060:	9b01      	ldr	r3, [sp, #4]
 8012062:	6163      	str	r3, [r4, #20]
 8012064:	3020      	adds	r0, #32
 8012066:	2201      	movs	r2, #1
 8012068:	e7e8      	b.n	801203c <__d2b+0x64>
 801206a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801206e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012072:	6038      	str	r0, [r7, #0]
 8012074:	6918      	ldr	r0, [r3, #16]
 8012076:	f7ff fcbd 	bl	80119f4 <__hi0bits>
 801207a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801207e:	e7e5      	b.n	801204c <__d2b+0x74>
 8012080:	0801485c 	.word	0x0801485c
 8012084:	0801486d 	.word	0x0801486d

08012088 <__ratio>:
 8012088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801208c:	b085      	sub	sp, #20
 801208e:	e9cd 1000 	strd	r1, r0, [sp]
 8012092:	a902      	add	r1, sp, #8
 8012094:	f7ff ff56 	bl	8011f44 <__b2d>
 8012098:	9800      	ldr	r0, [sp, #0]
 801209a:	a903      	add	r1, sp, #12
 801209c:	ec55 4b10 	vmov	r4, r5, d0
 80120a0:	f7ff ff50 	bl	8011f44 <__b2d>
 80120a4:	9b01      	ldr	r3, [sp, #4]
 80120a6:	6919      	ldr	r1, [r3, #16]
 80120a8:	9b00      	ldr	r3, [sp, #0]
 80120aa:	691b      	ldr	r3, [r3, #16]
 80120ac:	1ac9      	subs	r1, r1, r3
 80120ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80120b2:	1a9b      	subs	r3, r3, r2
 80120b4:	ec5b ab10 	vmov	sl, fp, d0
 80120b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80120bc:	2b00      	cmp	r3, #0
 80120be:	bfce      	itee	gt
 80120c0:	462a      	movgt	r2, r5
 80120c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80120c6:	465a      	movle	r2, fp
 80120c8:	462f      	mov	r7, r5
 80120ca:	46d9      	mov	r9, fp
 80120cc:	bfcc      	ite	gt
 80120ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80120d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80120d6:	464b      	mov	r3, r9
 80120d8:	4652      	mov	r2, sl
 80120da:	4620      	mov	r0, r4
 80120dc:	4639      	mov	r1, r7
 80120de:	f7ee fbed 	bl	80008bc <__aeabi_ddiv>
 80120e2:	ec41 0b10 	vmov	d0, r0, r1
 80120e6:	b005      	add	sp, #20
 80120e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080120ec <__copybits>:
 80120ec:	3901      	subs	r1, #1
 80120ee:	b570      	push	{r4, r5, r6, lr}
 80120f0:	1149      	asrs	r1, r1, #5
 80120f2:	6914      	ldr	r4, [r2, #16]
 80120f4:	3101      	adds	r1, #1
 80120f6:	f102 0314 	add.w	r3, r2, #20
 80120fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80120fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012102:	1f05      	subs	r5, r0, #4
 8012104:	42a3      	cmp	r3, r4
 8012106:	d30c      	bcc.n	8012122 <__copybits+0x36>
 8012108:	1aa3      	subs	r3, r4, r2
 801210a:	3b11      	subs	r3, #17
 801210c:	f023 0303 	bic.w	r3, r3, #3
 8012110:	3211      	adds	r2, #17
 8012112:	42a2      	cmp	r2, r4
 8012114:	bf88      	it	hi
 8012116:	2300      	movhi	r3, #0
 8012118:	4418      	add	r0, r3
 801211a:	2300      	movs	r3, #0
 801211c:	4288      	cmp	r0, r1
 801211e:	d305      	bcc.n	801212c <__copybits+0x40>
 8012120:	bd70      	pop	{r4, r5, r6, pc}
 8012122:	f853 6b04 	ldr.w	r6, [r3], #4
 8012126:	f845 6f04 	str.w	r6, [r5, #4]!
 801212a:	e7eb      	b.n	8012104 <__copybits+0x18>
 801212c:	f840 3b04 	str.w	r3, [r0], #4
 8012130:	e7f4      	b.n	801211c <__copybits+0x30>

08012132 <__any_on>:
 8012132:	f100 0214 	add.w	r2, r0, #20
 8012136:	6900      	ldr	r0, [r0, #16]
 8012138:	114b      	asrs	r3, r1, #5
 801213a:	4298      	cmp	r0, r3
 801213c:	b510      	push	{r4, lr}
 801213e:	db11      	blt.n	8012164 <__any_on+0x32>
 8012140:	dd0a      	ble.n	8012158 <__any_on+0x26>
 8012142:	f011 011f 	ands.w	r1, r1, #31
 8012146:	d007      	beq.n	8012158 <__any_on+0x26>
 8012148:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801214c:	fa24 f001 	lsr.w	r0, r4, r1
 8012150:	fa00 f101 	lsl.w	r1, r0, r1
 8012154:	428c      	cmp	r4, r1
 8012156:	d10b      	bne.n	8012170 <__any_on+0x3e>
 8012158:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801215c:	4293      	cmp	r3, r2
 801215e:	d803      	bhi.n	8012168 <__any_on+0x36>
 8012160:	2000      	movs	r0, #0
 8012162:	bd10      	pop	{r4, pc}
 8012164:	4603      	mov	r3, r0
 8012166:	e7f7      	b.n	8012158 <__any_on+0x26>
 8012168:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801216c:	2900      	cmp	r1, #0
 801216e:	d0f5      	beq.n	801215c <__any_on+0x2a>
 8012170:	2001      	movs	r0, #1
 8012172:	e7f6      	b.n	8012162 <__any_on+0x30>

08012174 <sulp>:
 8012174:	b570      	push	{r4, r5, r6, lr}
 8012176:	4604      	mov	r4, r0
 8012178:	460d      	mov	r5, r1
 801217a:	ec45 4b10 	vmov	d0, r4, r5
 801217e:	4616      	mov	r6, r2
 8012180:	f7ff feba 	bl	8011ef8 <__ulp>
 8012184:	ec51 0b10 	vmov	r0, r1, d0
 8012188:	b17e      	cbz	r6, 80121aa <sulp+0x36>
 801218a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801218e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012192:	2b00      	cmp	r3, #0
 8012194:	dd09      	ble.n	80121aa <sulp+0x36>
 8012196:	051b      	lsls	r3, r3, #20
 8012198:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801219c:	2400      	movs	r4, #0
 801219e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80121a2:	4622      	mov	r2, r4
 80121a4:	462b      	mov	r3, r5
 80121a6:	f7ee fa5f 	bl	8000668 <__aeabi_dmul>
 80121aa:	ec41 0b10 	vmov	d0, r0, r1
 80121ae:	bd70      	pop	{r4, r5, r6, pc}

080121b0 <_strtod_l>:
 80121b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b4:	b09f      	sub	sp, #124	@ 0x7c
 80121b6:	460c      	mov	r4, r1
 80121b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80121ba:	2200      	movs	r2, #0
 80121bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80121be:	9005      	str	r0, [sp, #20]
 80121c0:	f04f 0a00 	mov.w	sl, #0
 80121c4:	f04f 0b00 	mov.w	fp, #0
 80121c8:	460a      	mov	r2, r1
 80121ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80121cc:	7811      	ldrb	r1, [r2, #0]
 80121ce:	292b      	cmp	r1, #43	@ 0x2b
 80121d0:	d04a      	beq.n	8012268 <_strtod_l+0xb8>
 80121d2:	d838      	bhi.n	8012246 <_strtod_l+0x96>
 80121d4:	290d      	cmp	r1, #13
 80121d6:	d832      	bhi.n	801223e <_strtod_l+0x8e>
 80121d8:	2908      	cmp	r1, #8
 80121da:	d832      	bhi.n	8012242 <_strtod_l+0x92>
 80121dc:	2900      	cmp	r1, #0
 80121de:	d03b      	beq.n	8012258 <_strtod_l+0xa8>
 80121e0:	2200      	movs	r2, #0
 80121e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80121e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80121e6:	782a      	ldrb	r2, [r5, #0]
 80121e8:	2a30      	cmp	r2, #48	@ 0x30
 80121ea:	f040 80b3 	bne.w	8012354 <_strtod_l+0x1a4>
 80121ee:	786a      	ldrb	r2, [r5, #1]
 80121f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80121f4:	2a58      	cmp	r2, #88	@ 0x58
 80121f6:	d16e      	bne.n	80122d6 <_strtod_l+0x126>
 80121f8:	9302      	str	r3, [sp, #8]
 80121fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121fc:	9301      	str	r3, [sp, #4]
 80121fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8012200:	9300      	str	r3, [sp, #0]
 8012202:	4a8e      	ldr	r2, [pc, #568]	@ (801243c <_strtod_l+0x28c>)
 8012204:	9805      	ldr	r0, [sp, #20]
 8012206:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012208:	a919      	add	r1, sp, #100	@ 0x64
 801220a:	f001 fa6f 	bl	80136ec <__gethex>
 801220e:	f010 060f 	ands.w	r6, r0, #15
 8012212:	4604      	mov	r4, r0
 8012214:	d005      	beq.n	8012222 <_strtod_l+0x72>
 8012216:	2e06      	cmp	r6, #6
 8012218:	d128      	bne.n	801226c <_strtod_l+0xbc>
 801221a:	3501      	adds	r5, #1
 801221c:	2300      	movs	r3, #0
 801221e:	9519      	str	r5, [sp, #100]	@ 0x64
 8012220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012224:	2b00      	cmp	r3, #0
 8012226:	f040 858e 	bne.w	8012d46 <_strtod_l+0xb96>
 801222a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801222c:	b1cb      	cbz	r3, 8012262 <_strtod_l+0xb2>
 801222e:	4652      	mov	r2, sl
 8012230:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012234:	ec43 2b10 	vmov	d0, r2, r3
 8012238:	b01f      	add	sp, #124	@ 0x7c
 801223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801223e:	2920      	cmp	r1, #32
 8012240:	d1ce      	bne.n	80121e0 <_strtod_l+0x30>
 8012242:	3201      	adds	r2, #1
 8012244:	e7c1      	b.n	80121ca <_strtod_l+0x1a>
 8012246:	292d      	cmp	r1, #45	@ 0x2d
 8012248:	d1ca      	bne.n	80121e0 <_strtod_l+0x30>
 801224a:	2101      	movs	r1, #1
 801224c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801224e:	1c51      	adds	r1, r2, #1
 8012250:	9119      	str	r1, [sp, #100]	@ 0x64
 8012252:	7852      	ldrb	r2, [r2, #1]
 8012254:	2a00      	cmp	r2, #0
 8012256:	d1c5      	bne.n	80121e4 <_strtod_l+0x34>
 8012258:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801225a:	9419      	str	r4, [sp, #100]	@ 0x64
 801225c:	2b00      	cmp	r3, #0
 801225e:	f040 8570 	bne.w	8012d42 <_strtod_l+0xb92>
 8012262:	4652      	mov	r2, sl
 8012264:	465b      	mov	r3, fp
 8012266:	e7e5      	b.n	8012234 <_strtod_l+0x84>
 8012268:	2100      	movs	r1, #0
 801226a:	e7ef      	b.n	801224c <_strtod_l+0x9c>
 801226c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801226e:	b13a      	cbz	r2, 8012280 <_strtod_l+0xd0>
 8012270:	2135      	movs	r1, #53	@ 0x35
 8012272:	a81c      	add	r0, sp, #112	@ 0x70
 8012274:	f7ff ff3a 	bl	80120ec <__copybits>
 8012278:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801227a:	9805      	ldr	r0, [sp, #20]
 801227c:	f7ff fb08 	bl	8011890 <_Bfree>
 8012280:	3e01      	subs	r6, #1
 8012282:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012284:	2e04      	cmp	r6, #4
 8012286:	d806      	bhi.n	8012296 <_strtod_l+0xe6>
 8012288:	e8df f006 	tbb	[pc, r6]
 801228c:	201d0314 	.word	0x201d0314
 8012290:	14          	.byte	0x14
 8012291:	00          	.byte	0x00
 8012292:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8012296:	05e1      	lsls	r1, r4, #23
 8012298:	bf48      	it	mi
 801229a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801229e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80122a2:	0d1b      	lsrs	r3, r3, #20
 80122a4:	051b      	lsls	r3, r3, #20
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d1bb      	bne.n	8012222 <_strtod_l+0x72>
 80122aa:	f7fe fafd 	bl	80108a8 <__errno>
 80122ae:	2322      	movs	r3, #34	@ 0x22
 80122b0:	6003      	str	r3, [r0, #0]
 80122b2:	e7b6      	b.n	8012222 <_strtod_l+0x72>
 80122b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80122b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80122bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80122c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80122c4:	e7e7      	b.n	8012296 <_strtod_l+0xe6>
 80122c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8012444 <_strtod_l+0x294>
 80122ca:	e7e4      	b.n	8012296 <_strtod_l+0xe6>
 80122cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80122d0:	f04f 3aff 	mov.w	sl, #4294967295
 80122d4:	e7df      	b.n	8012296 <_strtod_l+0xe6>
 80122d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80122d8:	1c5a      	adds	r2, r3, #1
 80122da:	9219      	str	r2, [sp, #100]	@ 0x64
 80122dc:	785b      	ldrb	r3, [r3, #1]
 80122de:	2b30      	cmp	r3, #48	@ 0x30
 80122e0:	d0f9      	beq.n	80122d6 <_strtod_l+0x126>
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d09d      	beq.n	8012222 <_strtod_l+0x72>
 80122e6:	2301      	movs	r3, #1
 80122e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80122ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80122ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80122ee:	2300      	movs	r3, #0
 80122f0:	9308      	str	r3, [sp, #32]
 80122f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80122f4:	461f      	mov	r7, r3
 80122f6:	220a      	movs	r2, #10
 80122f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80122fa:	7805      	ldrb	r5, [r0, #0]
 80122fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012300:	b2d9      	uxtb	r1, r3
 8012302:	2909      	cmp	r1, #9
 8012304:	d928      	bls.n	8012358 <_strtod_l+0x1a8>
 8012306:	494e      	ldr	r1, [pc, #312]	@ (8012440 <_strtod_l+0x290>)
 8012308:	2201      	movs	r2, #1
 801230a:	f001 f941 	bl	8013590 <strncmp>
 801230e:	2800      	cmp	r0, #0
 8012310:	d032      	beq.n	8012378 <_strtod_l+0x1c8>
 8012312:	2000      	movs	r0, #0
 8012314:	462a      	mov	r2, r5
 8012316:	4681      	mov	r9, r0
 8012318:	463d      	mov	r5, r7
 801231a:	4603      	mov	r3, r0
 801231c:	2a65      	cmp	r2, #101	@ 0x65
 801231e:	d001      	beq.n	8012324 <_strtod_l+0x174>
 8012320:	2a45      	cmp	r2, #69	@ 0x45
 8012322:	d114      	bne.n	801234e <_strtod_l+0x19e>
 8012324:	b91d      	cbnz	r5, 801232e <_strtod_l+0x17e>
 8012326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012328:	4302      	orrs	r2, r0
 801232a:	d095      	beq.n	8012258 <_strtod_l+0xa8>
 801232c:	2500      	movs	r5, #0
 801232e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012330:	1c62      	adds	r2, r4, #1
 8012332:	9219      	str	r2, [sp, #100]	@ 0x64
 8012334:	7862      	ldrb	r2, [r4, #1]
 8012336:	2a2b      	cmp	r2, #43	@ 0x2b
 8012338:	d077      	beq.n	801242a <_strtod_l+0x27a>
 801233a:	2a2d      	cmp	r2, #45	@ 0x2d
 801233c:	d07b      	beq.n	8012436 <_strtod_l+0x286>
 801233e:	f04f 0c00 	mov.w	ip, #0
 8012342:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012346:	2909      	cmp	r1, #9
 8012348:	f240 8082 	bls.w	8012450 <_strtod_l+0x2a0>
 801234c:	9419      	str	r4, [sp, #100]	@ 0x64
 801234e:	f04f 0800 	mov.w	r8, #0
 8012352:	e0a2      	b.n	801249a <_strtod_l+0x2ea>
 8012354:	2300      	movs	r3, #0
 8012356:	e7c7      	b.n	80122e8 <_strtod_l+0x138>
 8012358:	2f08      	cmp	r7, #8
 801235a:	bfd5      	itete	le
 801235c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801235e:	9908      	ldrgt	r1, [sp, #32]
 8012360:	fb02 3301 	mlale	r3, r2, r1, r3
 8012364:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012368:	f100 0001 	add.w	r0, r0, #1
 801236c:	bfd4      	ite	le
 801236e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8012370:	9308      	strgt	r3, [sp, #32]
 8012372:	3701      	adds	r7, #1
 8012374:	9019      	str	r0, [sp, #100]	@ 0x64
 8012376:	e7bf      	b.n	80122f8 <_strtod_l+0x148>
 8012378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801237a:	1c5a      	adds	r2, r3, #1
 801237c:	9219      	str	r2, [sp, #100]	@ 0x64
 801237e:	785a      	ldrb	r2, [r3, #1]
 8012380:	b37f      	cbz	r7, 80123e2 <_strtod_l+0x232>
 8012382:	4681      	mov	r9, r0
 8012384:	463d      	mov	r5, r7
 8012386:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801238a:	2b09      	cmp	r3, #9
 801238c:	d912      	bls.n	80123b4 <_strtod_l+0x204>
 801238e:	2301      	movs	r3, #1
 8012390:	e7c4      	b.n	801231c <_strtod_l+0x16c>
 8012392:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012394:	1c5a      	adds	r2, r3, #1
 8012396:	9219      	str	r2, [sp, #100]	@ 0x64
 8012398:	785a      	ldrb	r2, [r3, #1]
 801239a:	3001      	adds	r0, #1
 801239c:	2a30      	cmp	r2, #48	@ 0x30
 801239e:	d0f8      	beq.n	8012392 <_strtod_l+0x1e2>
 80123a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80123a4:	2b08      	cmp	r3, #8
 80123a6:	f200 84d3 	bhi.w	8012d50 <_strtod_l+0xba0>
 80123aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80123ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80123ae:	4681      	mov	r9, r0
 80123b0:	2000      	movs	r0, #0
 80123b2:	4605      	mov	r5, r0
 80123b4:	3a30      	subs	r2, #48	@ 0x30
 80123b6:	f100 0301 	add.w	r3, r0, #1
 80123ba:	d02a      	beq.n	8012412 <_strtod_l+0x262>
 80123bc:	4499      	add	r9, r3
 80123be:	eb00 0c05 	add.w	ip, r0, r5
 80123c2:	462b      	mov	r3, r5
 80123c4:	210a      	movs	r1, #10
 80123c6:	4563      	cmp	r3, ip
 80123c8:	d10d      	bne.n	80123e6 <_strtod_l+0x236>
 80123ca:	1c69      	adds	r1, r5, #1
 80123cc:	4401      	add	r1, r0
 80123ce:	4428      	add	r0, r5
 80123d0:	2808      	cmp	r0, #8
 80123d2:	dc16      	bgt.n	8012402 <_strtod_l+0x252>
 80123d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80123d6:	230a      	movs	r3, #10
 80123d8:	fb03 2300 	mla	r3, r3, r0, r2
 80123dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80123de:	2300      	movs	r3, #0
 80123e0:	e018      	b.n	8012414 <_strtod_l+0x264>
 80123e2:	4638      	mov	r0, r7
 80123e4:	e7da      	b.n	801239c <_strtod_l+0x1ec>
 80123e6:	2b08      	cmp	r3, #8
 80123e8:	f103 0301 	add.w	r3, r3, #1
 80123ec:	dc03      	bgt.n	80123f6 <_strtod_l+0x246>
 80123ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80123f0:	434e      	muls	r6, r1
 80123f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80123f4:	e7e7      	b.n	80123c6 <_strtod_l+0x216>
 80123f6:	2b10      	cmp	r3, #16
 80123f8:	bfde      	ittt	le
 80123fa:	9e08      	ldrle	r6, [sp, #32]
 80123fc:	434e      	mulle	r6, r1
 80123fe:	9608      	strle	r6, [sp, #32]
 8012400:	e7e1      	b.n	80123c6 <_strtod_l+0x216>
 8012402:	280f      	cmp	r0, #15
 8012404:	dceb      	bgt.n	80123de <_strtod_l+0x22e>
 8012406:	9808      	ldr	r0, [sp, #32]
 8012408:	230a      	movs	r3, #10
 801240a:	fb03 2300 	mla	r3, r3, r0, r2
 801240e:	9308      	str	r3, [sp, #32]
 8012410:	e7e5      	b.n	80123de <_strtod_l+0x22e>
 8012412:	4629      	mov	r1, r5
 8012414:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012416:	1c50      	adds	r0, r2, #1
 8012418:	9019      	str	r0, [sp, #100]	@ 0x64
 801241a:	7852      	ldrb	r2, [r2, #1]
 801241c:	4618      	mov	r0, r3
 801241e:	460d      	mov	r5, r1
 8012420:	e7b1      	b.n	8012386 <_strtod_l+0x1d6>
 8012422:	f04f 0900 	mov.w	r9, #0
 8012426:	2301      	movs	r3, #1
 8012428:	e77d      	b.n	8012326 <_strtod_l+0x176>
 801242a:	f04f 0c00 	mov.w	ip, #0
 801242e:	1ca2      	adds	r2, r4, #2
 8012430:	9219      	str	r2, [sp, #100]	@ 0x64
 8012432:	78a2      	ldrb	r2, [r4, #2]
 8012434:	e785      	b.n	8012342 <_strtod_l+0x192>
 8012436:	f04f 0c01 	mov.w	ip, #1
 801243a:	e7f8      	b.n	801242e <_strtod_l+0x27e>
 801243c:	080149e0 	.word	0x080149e0
 8012440:	080149c8 	.word	0x080149c8
 8012444:	7ff00000 	.word	0x7ff00000
 8012448:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801244a:	1c51      	adds	r1, r2, #1
 801244c:	9119      	str	r1, [sp, #100]	@ 0x64
 801244e:	7852      	ldrb	r2, [r2, #1]
 8012450:	2a30      	cmp	r2, #48	@ 0x30
 8012452:	d0f9      	beq.n	8012448 <_strtod_l+0x298>
 8012454:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012458:	2908      	cmp	r1, #8
 801245a:	f63f af78 	bhi.w	801234e <_strtod_l+0x19e>
 801245e:	3a30      	subs	r2, #48	@ 0x30
 8012460:	920e      	str	r2, [sp, #56]	@ 0x38
 8012462:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012464:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012466:	f04f 080a 	mov.w	r8, #10
 801246a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801246c:	1c56      	adds	r6, r2, #1
 801246e:	9619      	str	r6, [sp, #100]	@ 0x64
 8012470:	7852      	ldrb	r2, [r2, #1]
 8012472:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012476:	f1be 0f09 	cmp.w	lr, #9
 801247a:	d939      	bls.n	80124f0 <_strtod_l+0x340>
 801247c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801247e:	1a76      	subs	r6, r6, r1
 8012480:	2e08      	cmp	r6, #8
 8012482:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8012486:	dc03      	bgt.n	8012490 <_strtod_l+0x2e0>
 8012488:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801248a:	4588      	cmp	r8, r1
 801248c:	bfa8      	it	ge
 801248e:	4688      	movge	r8, r1
 8012490:	f1bc 0f00 	cmp.w	ip, #0
 8012494:	d001      	beq.n	801249a <_strtod_l+0x2ea>
 8012496:	f1c8 0800 	rsb	r8, r8, #0
 801249a:	2d00      	cmp	r5, #0
 801249c:	d14e      	bne.n	801253c <_strtod_l+0x38c>
 801249e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80124a0:	4308      	orrs	r0, r1
 80124a2:	f47f aebe 	bne.w	8012222 <_strtod_l+0x72>
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	f47f aed6 	bne.w	8012258 <_strtod_l+0xa8>
 80124ac:	2a69      	cmp	r2, #105	@ 0x69
 80124ae:	d028      	beq.n	8012502 <_strtod_l+0x352>
 80124b0:	dc25      	bgt.n	80124fe <_strtod_l+0x34e>
 80124b2:	2a49      	cmp	r2, #73	@ 0x49
 80124b4:	d025      	beq.n	8012502 <_strtod_l+0x352>
 80124b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80124b8:	f47f aece 	bne.w	8012258 <_strtod_l+0xa8>
 80124bc:	499b      	ldr	r1, [pc, #620]	@ (801272c <_strtod_l+0x57c>)
 80124be:	a819      	add	r0, sp, #100	@ 0x64
 80124c0:	f001 fb36 	bl	8013b30 <__match>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	f43f aec7 	beq.w	8012258 <_strtod_l+0xa8>
 80124ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	2b28      	cmp	r3, #40	@ 0x28
 80124d0:	d12e      	bne.n	8012530 <_strtod_l+0x380>
 80124d2:	4997      	ldr	r1, [pc, #604]	@ (8012730 <_strtod_l+0x580>)
 80124d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80124d6:	a819      	add	r0, sp, #100	@ 0x64
 80124d8:	f001 fb3e 	bl	8013b58 <__hexnan>
 80124dc:	2805      	cmp	r0, #5
 80124de:	d127      	bne.n	8012530 <_strtod_l+0x380>
 80124e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80124e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80124e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80124ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80124ee:	e698      	b.n	8012222 <_strtod_l+0x72>
 80124f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80124f2:	fb08 2101 	mla	r1, r8, r1, r2
 80124f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80124fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80124fc:	e7b5      	b.n	801246a <_strtod_l+0x2ba>
 80124fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8012500:	e7da      	b.n	80124b8 <_strtod_l+0x308>
 8012502:	498c      	ldr	r1, [pc, #560]	@ (8012734 <_strtod_l+0x584>)
 8012504:	a819      	add	r0, sp, #100	@ 0x64
 8012506:	f001 fb13 	bl	8013b30 <__match>
 801250a:	2800      	cmp	r0, #0
 801250c:	f43f aea4 	beq.w	8012258 <_strtod_l+0xa8>
 8012510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012512:	4989      	ldr	r1, [pc, #548]	@ (8012738 <_strtod_l+0x588>)
 8012514:	3b01      	subs	r3, #1
 8012516:	a819      	add	r0, sp, #100	@ 0x64
 8012518:	9319      	str	r3, [sp, #100]	@ 0x64
 801251a:	f001 fb09 	bl	8013b30 <__match>
 801251e:	b910      	cbnz	r0, 8012526 <_strtod_l+0x376>
 8012520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012522:	3301      	adds	r3, #1
 8012524:	9319      	str	r3, [sp, #100]	@ 0x64
 8012526:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8012748 <_strtod_l+0x598>
 801252a:	f04f 0a00 	mov.w	sl, #0
 801252e:	e678      	b.n	8012222 <_strtod_l+0x72>
 8012530:	4882      	ldr	r0, [pc, #520]	@ (801273c <_strtod_l+0x58c>)
 8012532:	f001 f851 	bl	80135d8 <nan>
 8012536:	ec5b ab10 	vmov	sl, fp, d0
 801253a:	e672      	b.n	8012222 <_strtod_l+0x72>
 801253c:	eba8 0309 	sub.w	r3, r8, r9
 8012540:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012542:	9309      	str	r3, [sp, #36]	@ 0x24
 8012544:	2f00      	cmp	r7, #0
 8012546:	bf08      	it	eq
 8012548:	462f      	moveq	r7, r5
 801254a:	2d10      	cmp	r5, #16
 801254c:	462c      	mov	r4, r5
 801254e:	bfa8      	it	ge
 8012550:	2410      	movge	r4, #16
 8012552:	f7ee f80f 	bl	8000574 <__aeabi_ui2d>
 8012556:	2d09      	cmp	r5, #9
 8012558:	4682      	mov	sl, r0
 801255a:	468b      	mov	fp, r1
 801255c:	dc13      	bgt.n	8012586 <_strtod_l+0x3d6>
 801255e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012560:	2b00      	cmp	r3, #0
 8012562:	f43f ae5e 	beq.w	8012222 <_strtod_l+0x72>
 8012566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012568:	dd78      	ble.n	801265c <_strtod_l+0x4ac>
 801256a:	2b16      	cmp	r3, #22
 801256c:	dc5f      	bgt.n	801262e <_strtod_l+0x47e>
 801256e:	4974      	ldr	r1, [pc, #464]	@ (8012740 <_strtod_l+0x590>)
 8012570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012578:	4652      	mov	r2, sl
 801257a:	465b      	mov	r3, fp
 801257c:	f7ee f874 	bl	8000668 <__aeabi_dmul>
 8012580:	4682      	mov	sl, r0
 8012582:	468b      	mov	fp, r1
 8012584:	e64d      	b.n	8012222 <_strtod_l+0x72>
 8012586:	4b6e      	ldr	r3, [pc, #440]	@ (8012740 <_strtod_l+0x590>)
 8012588:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801258c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012590:	f7ee f86a 	bl	8000668 <__aeabi_dmul>
 8012594:	4682      	mov	sl, r0
 8012596:	9808      	ldr	r0, [sp, #32]
 8012598:	468b      	mov	fp, r1
 801259a:	f7ed ffeb 	bl	8000574 <__aeabi_ui2d>
 801259e:	4602      	mov	r2, r0
 80125a0:	460b      	mov	r3, r1
 80125a2:	4650      	mov	r0, sl
 80125a4:	4659      	mov	r1, fp
 80125a6:	f7ed fea9 	bl	80002fc <__adddf3>
 80125aa:	2d0f      	cmp	r5, #15
 80125ac:	4682      	mov	sl, r0
 80125ae:	468b      	mov	fp, r1
 80125b0:	ddd5      	ble.n	801255e <_strtod_l+0x3ae>
 80125b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125b4:	1b2c      	subs	r4, r5, r4
 80125b6:	441c      	add	r4, r3
 80125b8:	2c00      	cmp	r4, #0
 80125ba:	f340 8096 	ble.w	80126ea <_strtod_l+0x53a>
 80125be:	f014 030f 	ands.w	r3, r4, #15
 80125c2:	d00a      	beq.n	80125da <_strtod_l+0x42a>
 80125c4:	495e      	ldr	r1, [pc, #376]	@ (8012740 <_strtod_l+0x590>)
 80125c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80125ca:	4652      	mov	r2, sl
 80125cc:	465b      	mov	r3, fp
 80125ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125d2:	f7ee f849 	bl	8000668 <__aeabi_dmul>
 80125d6:	4682      	mov	sl, r0
 80125d8:	468b      	mov	fp, r1
 80125da:	f034 040f 	bics.w	r4, r4, #15
 80125de:	d073      	beq.n	80126c8 <_strtod_l+0x518>
 80125e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80125e4:	dd48      	ble.n	8012678 <_strtod_l+0x4c8>
 80125e6:	2400      	movs	r4, #0
 80125e8:	46a0      	mov	r8, r4
 80125ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80125ec:	46a1      	mov	r9, r4
 80125ee:	9a05      	ldr	r2, [sp, #20]
 80125f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012748 <_strtod_l+0x598>
 80125f4:	2322      	movs	r3, #34	@ 0x22
 80125f6:	6013      	str	r3, [r2, #0]
 80125f8:	f04f 0a00 	mov.w	sl, #0
 80125fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f43f ae0f 	beq.w	8012222 <_strtod_l+0x72>
 8012604:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012606:	9805      	ldr	r0, [sp, #20]
 8012608:	f7ff f942 	bl	8011890 <_Bfree>
 801260c:	9805      	ldr	r0, [sp, #20]
 801260e:	4649      	mov	r1, r9
 8012610:	f7ff f93e 	bl	8011890 <_Bfree>
 8012614:	9805      	ldr	r0, [sp, #20]
 8012616:	4641      	mov	r1, r8
 8012618:	f7ff f93a 	bl	8011890 <_Bfree>
 801261c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801261e:	9805      	ldr	r0, [sp, #20]
 8012620:	f7ff f936 	bl	8011890 <_Bfree>
 8012624:	9805      	ldr	r0, [sp, #20]
 8012626:	4621      	mov	r1, r4
 8012628:	f7ff f932 	bl	8011890 <_Bfree>
 801262c:	e5f9      	b.n	8012222 <_strtod_l+0x72>
 801262e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012630:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8012634:	4293      	cmp	r3, r2
 8012636:	dbbc      	blt.n	80125b2 <_strtod_l+0x402>
 8012638:	4c41      	ldr	r4, [pc, #260]	@ (8012740 <_strtod_l+0x590>)
 801263a:	f1c5 050f 	rsb	r5, r5, #15
 801263e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012642:	4652      	mov	r2, sl
 8012644:	465b      	mov	r3, fp
 8012646:	e9d1 0100 	ldrd	r0, r1, [r1]
 801264a:	f7ee f80d 	bl	8000668 <__aeabi_dmul>
 801264e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012650:	1b5d      	subs	r5, r3, r5
 8012652:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012656:	e9d4 2300 	ldrd	r2, r3, [r4]
 801265a:	e78f      	b.n	801257c <_strtod_l+0x3cc>
 801265c:	3316      	adds	r3, #22
 801265e:	dba8      	blt.n	80125b2 <_strtod_l+0x402>
 8012660:	4b37      	ldr	r3, [pc, #220]	@ (8012740 <_strtod_l+0x590>)
 8012662:	eba9 0808 	sub.w	r8, r9, r8
 8012666:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801266a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801266e:	4650      	mov	r0, sl
 8012670:	4659      	mov	r1, fp
 8012672:	f7ee f923 	bl	80008bc <__aeabi_ddiv>
 8012676:	e783      	b.n	8012580 <_strtod_l+0x3d0>
 8012678:	4b32      	ldr	r3, [pc, #200]	@ (8012744 <_strtod_l+0x594>)
 801267a:	9308      	str	r3, [sp, #32]
 801267c:	2300      	movs	r3, #0
 801267e:	1124      	asrs	r4, r4, #4
 8012680:	4650      	mov	r0, sl
 8012682:	4659      	mov	r1, fp
 8012684:	461e      	mov	r6, r3
 8012686:	2c01      	cmp	r4, #1
 8012688:	dc21      	bgt.n	80126ce <_strtod_l+0x51e>
 801268a:	b10b      	cbz	r3, 8012690 <_strtod_l+0x4e0>
 801268c:	4682      	mov	sl, r0
 801268e:	468b      	mov	fp, r1
 8012690:	492c      	ldr	r1, [pc, #176]	@ (8012744 <_strtod_l+0x594>)
 8012692:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012696:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801269a:	4652      	mov	r2, sl
 801269c:	465b      	mov	r3, fp
 801269e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126a2:	f7ed ffe1 	bl	8000668 <__aeabi_dmul>
 80126a6:	4b28      	ldr	r3, [pc, #160]	@ (8012748 <_strtod_l+0x598>)
 80126a8:	460a      	mov	r2, r1
 80126aa:	400b      	ands	r3, r1
 80126ac:	4927      	ldr	r1, [pc, #156]	@ (801274c <_strtod_l+0x59c>)
 80126ae:	428b      	cmp	r3, r1
 80126b0:	4682      	mov	sl, r0
 80126b2:	d898      	bhi.n	80125e6 <_strtod_l+0x436>
 80126b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80126b8:	428b      	cmp	r3, r1
 80126ba:	bf86      	itte	hi
 80126bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8012750 <_strtod_l+0x5a0>
 80126c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80126c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80126c8:	2300      	movs	r3, #0
 80126ca:	9308      	str	r3, [sp, #32]
 80126cc:	e07a      	b.n	80127c4 <_strtod_l+0x614>
 80126ce:	07e2      	lsls	r2, r4, #31
 80126d0:	d505      	bpl.n	80126de <_strtod_l+0x52e>
 80126d2:	9b08      	ldr	r3, [sp, #32]
 80126d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d8:	f7ed ffc6 	bl	8000668 <__aeabi_dmul>
 80126dc:	2301      	movs	r3, #1
 80126de:	9a08      	ldr	r2, [sp, #32]
 80126e0:	3208      	adds	r2, #8
 80126e2:	3601      	adds	r6, #1
 80126e4:	1064      	asrs	r4, r4, #1
 80126e6:	9208      	str	r2, [sp, #32]
 80126e8:	e7cd      	b.n	8012686 <_strtod_l+0x4d6>
 80126ea:	d0ed      	beq.n	80126c8 <_strtod_l+0x518>
 80126ec:	4264      	negs	r4, r4
 80126ee:	f014 020f 	ands.w	r2, r4, #15
 80126f2:	d00a      	beq.n	801270a <_strtod_l+0x55a>
 80126f4:	4b12      	ldr	r3, [pc, #72]	@ (8012740 <_strtod_l+0x590>)
 80126f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126fa:	4650      	mov	r0, sl
 80126fc:	4659      	mov	r1, fp
 80126fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012702:	f7ee f8db 	bl	80008bc <__aeabi_ddiv>
 8012706:	4682      	mov	sl, r0
 8012708:	468b      	mov	fp, r1
 801270a:	1124      	asrs	r4, r4, #4
 801270c:	d0dc      	beq.n	80126c8 <_strtod_l+0x518>
 801270e:	2c1f      	cmp	r4, #31
 8012710:	dd20      	ble.n	8012754 <_strtod_l+0x5a4>
 8012712:	2400      	movs	r4, #0
 8012714:	46a0      	mov	r8, r4
 8012716:	940a      	str	r4, [sp, #40]	@ 0x28
 8012718:	46a1      	mov	r9, r4
 801271a:	9a05      	ldr	r2, [sp, #20]
 801271c:	2322      	movs	r3, #34	@ 0x22
 801271e:	f04f 0a00 	mov.w	sl, #0
 8012722:	f04f 0b00 	mov.w	fp, #0
 8012726:	6013      	str	r3, [r2, #0]
 8012728:	e768      	b.n	80125fc <_strtod_l+0x44c>
 801272a:	bf00      	nop
 801272c:	0801471e 	.word	0x0801471e
 8012730:	080149cc 	.word	0x080149cc
 8012734:	08014716 	.word	0x08014716
 8012738:	080147fa 	.word	0x080147fa
 801273c:	080147f6 	.word	0x080147f6
 8012740:	08014900 	.word	0x08014900
 8012744:	080148d8 	.word	0x080148d8
 8012748:	7ff00000 	.word	0x7ff00000
 801274c:	7ca00000 	.word	0x7ca00000
 8012750:	7fefffff 	.word	0x7fefffff
 8012754:	f014 0310 	ands.w	r3, r4, #16
 8012758:	bf18      	it	ne
 801275a:	236a      	movne	r3, #106	@ 0x6a
 801275c:	4ea9      	ldr	r6, [pc, #676]	@ (8012a04 <_strtod_l+0x854>)
 801275e:	9308      	str	r3, [sp, #32]
 8012760:	4650      	mov	r0, sl
 8012762:	4659      	mov	r1, fp
 8012764:	2300      	movs	r3, #0
 8012766:	07e2      	lsls	r2, r4, #31
 8012768:	d504      	bpl.n	8012774 <_strtod_l+0x5c4>
 801276a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801276e:	f7ed ff7b 	bl	8000668 <__aeabi_dmul>
 8012772:	2301      	movs	r3, #1
 8012774:	1064      	asrs	r4, r4, #1
 8012776:	f106 0608 	add.w	r6, r6, #8
 801277a:	d1f4      	bne.n	8012766 <_strtod_l+0x5b6>
 801277c:	b10b      	cbz	r3, 8012782 <_strtod_l+0x5d2>
 801277e:	4682      	mov	sl, r0
 8012780:	468b      	mov	fp, r1
 8012782:	9b08      	ldr	r3, [sp, #32]
 8012784:	b1b3      	cbz	r3, 80127b4 <_strtod_l+0x604>
 8012786:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801278a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801278e:	2b00      	cmp	r3, #0
 8012790:	4659      	mov	r1, fp
 8012792:	dd0f      	ble.n	80127b4 <_strtod_l+0x604>
 8012794:	2b1f      	cmp	r3, #31
 8012796:	dd55      	ble.n	8012844 <_strtod_l+0x694>
 8012798:	2b34      	cmp	r3, #52	@ 0x34
 801279a:	bfde      	ittt	le
 801279c:	f04f 33ff 	movle.w	r3, #4294967295
 80127a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80127a4:	4093      	lslle	r3, r2
 80127a6:	f04f 0a00 	mov.w	sl, #0
 80127aa:	bfcc      	ite	gt
 80127ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80127b0:	ea03 0b01 	andle.w	fp, r3, r1
 80127b4:	2200      	movs	r2, #0
 80127b6:	2300      	movs	r3, #0
 80127b8:	4650      	mov	r0, sl
 80127ba:	4659      	mov	r1, fp
 80127bc:	f7ee f9bc 	bl	8000b38 <__aeabi_dcmpeq>
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d1a6      	bne.n	8012712 <_strtod_l+0x562>
 80127c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127c6:	9300      	str	r3, [sp, #0]
 80127c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80127ca:	9805      	ldr	r0, [sp, #20]
 80127cc:	462b      	mov	r3, r5
 80127ce:	463a      	mov	r2, r7
 80127d0:	f7ff f8c6 	bl	8011960 <__s2b>
 80127d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80127d6:	2800      	cmp	r0, #0
 80127d8:	f43f af05 	beq.w	80125e6 <_strtod_l+0x436>
 80127dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127de:	2a00      	cmp	r2, #0
 80127e0:	eba9 0308 	sub.w	r3, r9, r8
 80127e4:	bfa8      	it	ge
 80127e6:	2300      	movge	r3, #0
 80127e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80127ea:	2400      	movs	r4, #0
 80127ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80127f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80127f2:	46a0      	mov	r8, r4
 80127f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127f6:	9805      	ldr	r0, [sp, #20]
 80127f8:	6859      	ldr	r1, [r3, #4]
 80127fa:	f7ff f809 	bl	8011810 <_Balloc>
 80127fe:	4681      	mov	r9, r0
 8012800:	2800      	cmp	r0, #0
 8012802:	f43f aef4 	beq.w	80125ee <_strtod_l+0x43e>
 8012806:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012808:	691a      	ldr	r2, [r3, #16]
 801280a:	3202      	adds	r2, #2
 801280c:	f103 010c 	add.w	r1, r3, #12
 8012810:	0092      	lsls	r2, r2, #2
 8012812:	300c      	adds	r0, #12
 8012814:	f7fe f87d 	bl	8010912 <memcpy>
 8012818:	ec4b ab10 	vmov	d0, sl, fp
 801281c:	9805      	ldr	r0, [sp, #20]
 801281e:	aa1c      	add	r2, sp, #112	@ 0x70
 8012820:	a91b      	add	r1, sp, #108	@ 0x6c
 8012822:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012826:	f7ff fbd7 	bl	8011fd8 <__d2b>
 801282a:	901a      	str	r0, [sp, #104]	@ 0x68
 801282c:	2800      	cmp	r0, #0
 801282e:	f43f aede 	beq.w	80125ee <_strtod_l+0x43e>
 8012832:	9805      	ldr	r0, [sp, #20]
 8012834:	2101      	movs	r1, #1
 8012836:	f7ff f929 	bl	8011a8c <__i2b>
 801283a:	4680      	mov	r8, r0
 801283c:	b948      	cbnz	r0, 8012852 <_strtod_l+0x6a2>
 801283e:	f04f 0800 	mov.w	r8, #0
 8012842:	e6d4      	b.n	80125ee <_strtod_l+0x43e>
 8012844:	f04f 32ff 	mov.w	r2, #4294967295
 8012848:	fa02 f303 	lsl.w	r3, r2, r3
 801284c:	ea03 0a0a 	and.w	sl, r3, sl
 8012850:	e7b0      	b.n	80127b4 <_strtod_l+0x604>
 8012852:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012854:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012856:	2d00      	cmp	r5, #0
 8012858:	bfab      	itete	ge
 801285a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801285c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801285e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012860:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012862:	bfac      	ite	ge
 8012864:	18ef      	addge	r7, r5, r3
 8012866:	1b5e      	sublt	r6, r3, r5
 8012868:	9b08      	ldr	r3, [sp, #32]
 801286a:	1aed      	subs	r5, r5, r3
 801286c:	4415      	add	r5, r2
 801286e:	4b66      	ldr	r3, [pc, #408]	@ (8012a08 <_strtod_l+0x858>)
 8012870:	3d01      	subs	r5, #1
 8012872:	429d      	cmp	r5, r3
 8012874:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012878:	da50      	bge.n	801291c <_strtod_l+0x76c>
 801287a:	1b5b      	subs	r3, r3, r5
 801287c:	2b1f      	cmp	r3, #31
 801287e:	eba2 0203 	sub.w	r2, r2, r3
 8012882:	f04f 0101 	mov.w	r1, #1
 8012886:	dc3d      	bgt.n	8012904 <_strtod_l+0x754>
 8012888:	fa01 f303 	lsl.w	r3, r1, r3
 801288c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801288e:	2300      	movs	r3, #0
 8012890:	9310      	str	r3, [sp, #64]	@ 0x40
 8012892:	18bd      	adds	r5, r7, r2
 8012894:	9b08      	ldr	r3, [sp, #32]
 8012896:	42af      	cmp	r7, r5
 8012898:	4416      	add	r6, r2
 801289a:	441e      	add	r6, r3
 801289c:	463b      	mov	r3, r7
 801289e:	bfa8      	it	ge
 80128a0:	462b      	movge	r3, r5
 80128a2:	42b3      	cmp	r3, r6
 80128a4:	bfa8      	it	ge
 80128a6:	4633      	movge	r3, r6
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	bfc2      	ittt	gt
 80128ac:	1aed      	subgt	r5, r5, r3
 80128ae:	1af6      	subgt	r6, r6, r3
 80128b0:	1aff      	subgt	r7, r7, r3
 80128b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	dd16      	ble.n	80128e6 <_strtod_l+0x736>
 80128b8:	4641      	mov	r1, r8
 80128ba:	9805      	ldr	r0, [sp, #20]
 80128bc:	461a      	mov	r2, r3
 80128be:	f7ff f9a5 	bl	8011c0c <__pow5mult>
 80128c2:	4680      	mov	r8, r0
 80128c4:	2800      	cmp	r0, #0
 80128c6:	d0ba      	beq.n	801283e <_strtod_l+0x68e>
 80128c8:	4601      	mov	r1, r0
 80128ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80128cc:	9805      	ldr	r0, [sp, #20]
 80128ce:	f7ff f8f3 	bl	8011ab8 <__multiply>
 80128d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80128d4:	2800      	cmp	r0, #0
 80128d6:	f43f ae8a 	beq.w	80125ee <_strtod_l+0x43e>
 80128da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80128dc:	9805      	ldr	r0, [sp, #20]
 80128de:	f7fe ffd7 	bl	8011890 <_Bfree>
 80128e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80128e6:	2d00      	cmp	r5, #0
 80128e8:	dc1d      	bgt.n	8012926 <_strtod_l+0x776>
 80128ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	dd23      	ble.n	8012938 <_strtod_l+0x788>
 80128f0:	4649      	mov	r1, r9
 80128f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80128f4:	9805      	ldr	r0, [sp, #20]
 80128f6:	f7ff f989 	bl	8011c0c <__pow5mult>
 80128fa:	4681      	mov	r9, r0
 80128fc:	b9e0      	cbnz	r0, 8012938 <_strtod_l+0x788>
 80128fe:	f04f 0900 	mov.w	r9, #0
 8012902:	e674      	b.n	80125ee <_strtod_l+0x43e>
 8012904:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012908:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801290c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012910:	35e2      	adds	r5, #226	@ 0xe2
 8012912:	fa01 f305 	lsl.w	r3, r1, r5
 8012916:	9310      	str	r3, [sp, #64]	@ 0x40
 8012918:	9113      	str	r1, [sp, #76]	@ 0x4c
 801291a:	e7ba      	b.n	8012892 <_strtod_l+0x6e2>
 801291c:	2300      	movs	r3, #0
 801291e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012920:	2301      	movs	r3, #1
 8012922:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012924:	e7b5      	b.n	8012892 <_strtod_l+0x6e2>
 8012926:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012928:	9805      	ldr	r0, [sp, #20]
 801292a:	462a      	mov	r2, r5
 801292c:	f7ff f9c8 	bl	8011cc0 <__lshift>
 8012930:	901a      	str	r0, [sp, #104]	@ 0x68
 8012932:	2800      	cmp	r0, #0
 8012934:	d1d9      	bne.n	80128ea <_strtod_l+0x73a>
 8012936:	e65a      	b.n	80125ee <_strtod_l+0x43e>
 8012938:	2e00      	cmp	r6, #0
 801293a:	dd07      	ble.n	801294c <_strtod_l+0x79c>
 801293c:	4649      	mov	r1, r9
 801293e:	9805      	ldr	r0, [sp, #20]
 8012940:	4632      	mov	r2, r6
 8012942:	f7ff f9bd 	bl	8011cc0 <__lshift>
 8012946:	4681      	mov	r9, r0
 8012948:	2800      	cmp	r0, #0
 801294a:	d0d8      	beq.n	80128fe <_strtod_l+0x74e>
 801294c:	2f00      	cmp	r7, #0
 801294e:	dd08      	ble.n	8012962 <_strtod_l+0x7b2>
 8012950:	4641      	mov	r1, r8
 8012952:	9805      	ldr	r0, [sp, #20]
 8012954:	463a      	mov	r2, r7
 8012956:	f7ff f9b3 	bl	8011cc0 <__lshift>
 801295a:	4680      	mov	r8, r0
 801295c:	2800      	cmp	r0, #0
 801295e:	f43f ae46 	beq.w	80125ee <_strtod_l+0x43e>
 8012962:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012964:	9805      	ldr	r0, [sp, #20]
 8012966:	464a      	mov	r2, r9
 8012968:	f7ff fa32 	bl	8011dd0 <__mdiff>
 801296c:	4604      	mov	r4, r0
 801296e:	2800      	cmp	r0, #0
 8012970:	f43f ae3d 	beq.w	80125ee <_strtod_l+0x43e>
 8012974:	68c3      	ldr	r3, [r0, #12]
 8012976:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012978:	2300      	movs	r3, #0
 801297a:	60c3      	str	r3, [r0, #12]
 801297c:	4641      	mov	r1, r8
 801297e:	f7ff fa0b 	bl	8011d98 <__mcmp>
 8012982:	2800      	cmp	r0, #0
 8012984:	da46      	bge.n	8012a14 <_strtod_l+0x864>
 8012986:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012988:	ea53 030a 	orrs.w	r3, r3, sl
 801298c:	d16c      	bne.n	8012a68 <_strtod_l+0x8b8>
 801298e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012992:	2b00      	cmp	r3, #0
 8012994:	d168      	bne.n	8012a68 <_strtod_l+0x8b8>
 8012996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801299a:	0d1b      	lsrs	r3, r3, #20
 801299c:	051b      	lsls	r3, r3, #20
 801299e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80129a2:	d961      	bls.n	8012a68 <_strtod_l+0x8b8>
 80129a4:	6963      	ldr	r3, [r4, #20]
 80129a6:	b913      	cbnz	r3, 80129ae <_strtod_l+0x7fe>
 80129a8:	6923      	ldr	r3, [r4, #16]
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	dd5c      	ble.n	8012a68 <_strtod_l+0x8b8>
 80129ae:	4621      	mov	r1, r4
 80129b0:	2201      	movs	r2, #1
 80129b2:	9805      	ldr	r0, [sp, #20]
 80129b4:	f7ff f984 	bl	8011cc0 <__lshift>
 80129b8:	4641      	mov	r1, r8
 80129ba:	4604      	mov	r4, r0
 80129bc:	f7ff f9ec 	bl	8011d98 <__mcmp>
 80129c0:	2800      	cmp	r0, #0
 80129c2:	dd51      	ble.n	8012a68 <_strtod_l+0x8b8>
 80129c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80129c8:	9a08      	ldr	r2, [sp, #32]
 80129ca:	0d1b      	lsrs	r3, r3, #20
 80129cc:	051b      	lsls	r3, r3, #20
 80129ce:	2a00      	cmp	r2, #0
 80129d0:	d06b      	beq.n	8012aaa <_strtod_l+0x8fa>
 80129d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80129d6:	d868      	bhi.n	8012aaa <_strtod_l+0x8fa>
 80129d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80129dc:	f67f ae9d 	bls.w	801271a <_strtod_l+0x56a>
 80129e0:	4b0a      	ldr	r3, [pc, #40]	@ (8012a0c <_strtod_l+0x85c>)
 80129e2:	4650      	mov	r0, sl
 80129e4:	4659      	mov	r1, fp
 80129e6:	2200      	movs	r2, #0
 80129e8:	f7ed fe3e 	bl	8000668 <__aeabi_dmul>
 80129ec:	4b08      	ldr	r3, [pc, #32]	@ (8012a10 <_strtod_l+0x860>)
 80129ee:	400b      	ands	r3, r1
 80129f0:	4682      	mov	sl, r0
 80129f2:	468b      	mov	fp, r1
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	f47f ae05 	bne.w	8012604 <_strtod_l+0x454>
 80129fa:	9a05      	ldr	r2, [sp, #20]
 80129fc:	2322      	movs	r3, #34	@ 0x22
 80129fe:	6013      	str	r3, [r2, #0]
 8012a00:	e600      	b.n	8012604 <_strtod_l+0x454>
 8012a02:	bf00      	nop
 8012a04:	080149f8 	.word	0x080149f8
 8012a08:	fffffc02 	.word	0xfffffc02
 8012a0c:	39500000 	.word	0x39500000
 8012a10:	7ff00000 	.word	0x7ff00000
 8012a14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012a18:	d165      	bne.n	8012ae6 <_strtod_l+0x936>
 8012a1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012a1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a20:	b35a      	cbz	r2, 8012a7a <_strtod_l+0x8ca>
 8012a22:	4a9f      	ldr	r2, [pc, #636]	@ (8012ca0 <_strtod_l+0xaf0>)
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d12b      	bne.n	8012a80 <_strtod_l+0x8d0>
 8012a28:	9b08      	ldr	r3, [sp, #32]
 8012a2a:	4651      	mov	r1, sl
 8012a2c:	b303      	cbz	r3, 8012a70 <_strtod_l+0x8c0>
 8012a2e:	4b9d      	ldr	r3, [pc, #628]	@ (8012ca4 <_strtod_l+0xaf4>)
 8012a30:	465a      	mov	r2, fp
 8012a32:	4013      	ands	r3, r2
 8012a34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012a38:	f04f 32ff 	mov.w	r2, #4294967295
 8012a3c:	d81b      	bhi.n	8012a76 <_strtod_l+0x8c6>
 8012a3e:	0d1b      	lsrs	r3, r3, #20
 8012a40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012a44:	fa02 f303 	lsl.w	r3, r2, r3
 8012a48:	4299      	cmp	r1, r3
 8012a4a:	d119      	bne.n	8012a80 <_strtod_l+0x8d0>
 8012a4c:	4b96      	ldr	r3, [pc, #600]	@ (8012ca8 <_strtod_l+0xaf8>)
 8012a4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d102      	bne.n	8012a5a <_strtod_l+0x8aa>
 8012a54:	3101      	adds	r1, #1
 8012a56:	f43f adca 	beq.w	80125ee <_strtod_l+0x43e>
 8012a5a:	4b92      	ldr	r3, [pc, #584]	@ (8012ca4 <_strtod_l+0xaf4>)
 8012a5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a5e:	401a      	ands	r2, r3
 8012a60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012a64:	f04f 0a00 	mov.w	sl, #0
 8012a68:	9b08      	ldr	r3, [sp, #32]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d1b8      	bne.n	80129e0 <_strtod_l+0x830>
 8012a6e:	e5c9      	b.n	8012604 <_strtod_l+0x454>
 8012a70:	f04f 33ff 	mov.w	r3, #4294967295
 8012a74:	e7e8      	b.n	8012a48 <_strtod_l+0x898>
 8012a76:	4613      	mov	r3, r2
 8012a78:	e7e6      	b.n	8012a48 <_strtod_l+0x898>
 8012a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8012a7e:	d0a1      	beq.n	80129c4 <_strtod_l+0x814>
 8012a80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012a82:	b1db      	cbz	r3, 8012abc <_strtod_l+0x90c>
 8012a84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a86:	4213      	tst	r3, r2
 8012a88:	d0ee      	beq.n	8012a68 <_strtod_l+0x8b8>
 8012a8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a8c:	9a08      	ldr	r2, [sp, #32]
 8012a8e:	4650      	mov	r0, sl
 8012a90:	4659      	mov	r1, fp
 8012a92:	b1bb      	cbz	r3, 8012ac4 <_strtod_l+0x914>
 8012a94:	f7ff fb6e 	bl	8012174 <sulp>
 8012a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012a9c:	ec53 2b10 	vmov	r2, r3, d0
 8012aa0:	f7ed fc2c 	bl	80002fc <__adddf3>
 8012aa4:	4682      	mov	sl, r0
 8012aa6:	468b      	mov	fp, r1
 8012aa8:	e7de      	b.n	8012a68 <_strtod_l+0x8b8>
 8012aaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012aae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012ab2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012ab6:	f04f 3aff 	mov.w	sl, #4294967295
 8012aba:	e7d5      	b.n	8012a68 <_strtod_l+0x8b8>
 8012abc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012abe:	ea13 0f0a 	tst.w	r3, sl
 8012ac2:	e7e1      	b.n	8012a88 <_strtod_l+0x8d8>
 8012ac4:	f7ff fb56 	bl	8012174 <sulp>
 8012ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012acc:	ec53 2b10 	vmov	r2, r3, d0
 8012ad0:	f7ed fc12 	bl	80002f8 <__aeabi_dsub>
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	4682      	mov	sl, r0
 8012ada:	468b      	mov	fp, r1
 8012adc:	f7ee f82c 	bl	8000b38 <__aeabi_dcmpeq>
 8012ae0:	2800      	cmp	r0, #0
 8012ae2:	d0c1      	beq.n	8012a68 <_strtod_l+0x8b8>
 8012ae4:	e619      	b.n	801271a <_strtod_l+0x56a>
 8012ae6:	4641      	mov	r1, r8
 8012ae8:	4620      	mov	r0, r4
 8012aea:	f7ff facd 	bl	8012088 <__ratio>
 8012aee:	ec57 6b10 	vmov	r6, r7, d0
 8012af2:	2200      	movs	r2, #0
 8012af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012af8:	4630      	mov	r0, r6
 8012afa:	4639      	mov	r1, r7
 8012afc:	f7ee f830 	bl	8000b60 <__aeabi_dcmple>
 8012b00:	2800      	cmp	r0, #0
 8012b02:	d06f      	beq.n	8012be4 <_strtod_l+0xa34>
 8012b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d17a      	bne.n	8012c00 <_strtod_l+0xa50>
 8012b0a:	f1ba 0f00 	cmp.w	sl, #0
 8012b0e:	d158      	bne.n	8012bc2 <_strtod_l+0xa12>
 8012b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d15a      	bne.n	8012bd0 <_strtod_l+0xa20>
 8012b1a:	4b64      	ldr	r3, [pc, #400]	@ (8012cac <_strtod_l+0xafc>)
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	4630      	mov	r0, r6
 8012b20:	4639      	mov	r1, r7
 8012b22:	f7ee f813 	bl	8000b4c <__aeabi_dcmplt>
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d159      	bne.n	8012bde <_strtod_l+0xa2e>
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	4639      	mov	r1, r7
 8012b2e:	4b60      	ldr	r3, [pc, #384]	@ (8012cb0 <_strtod_l+0xb00>)
 8012b30:	2200      	movs	r2, #0
 8012b32:	f7ed fd99 	bl	8000668 <__aeabi_dmul>
 8012b36:	4606      	mov	r6, r0
 8012b38:	460f      	mov	r7, r1
 8012b3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012b3e:	9606      	str	r6, [sp, #24]
 8012b40:	9307      	str	r3, [sp, #28]
 8012b42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b46:	4d57      	ldr	r5, [pc, #348]	@ (8012ca4 <_strtod_l+0xaf4>)
 8012b48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b4e:	401d      	ands	r5, r3
 8012b50:	4b58      	ldr	r3, [pc, #352]	@ (8012cb4 <_strtod_l+0xb04>)
 8012b52:	429d      	cmp	r5, r3
 8012b54:	f040 80b2 	bne.w	8012cbc <_strtod_l+0xb0c>
 8012b58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012b5e:	ec4b ab10 	vmov	d0, sl, fp
 8012b62:	f7ff f9c9 	bl	8011ef8 <__ulp>
 8012b66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b6a:	ec51 0b10 	vmov	r0, r1, d0
 8012b6e:	f7ed fd7b 	bl	8000668 <__aeabi_dmul>
 8012b72:	4652      	mov	r2, sl
 8012b74:	465b      	mov	r3, fp
 8012b76:	f7ed fbc1 	bl	80002fc <__adddf3>
 8012b7a:	460b      	mov	r3, r1
 8012b7c:	4949      	ldr	r1, [pc, #292]	@ (8012ca4 <_strtod_l+0xaf4>)
 8012b7e:	4a4e      	ldr	r2, [pc, #312]	@ (8012cb8 <_strtod_l+0xb08>)
 8012b80:	4019      	ands	r1, r3
 8012b82:	4291      	cmp	r1, r2
 8012b84:	4682      	mov	sl, r0
 8012b86:	d942      	bls.n	8012c0e <_strtod_l+0xa5e>
 8012b88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b8a:	4b47      	ldr	r3, [pc, #284]	@ (8012ca8 <_strtod_l+0xaf8>)
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d103      	bne.n	8012b98 <_strtod_l+0x9e8>
 8012b90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b92:	3301      	adds	r3, #1
 8012b94:	f43f ad2b 	beq.w	80125ee <_strtod_l+0x43e>
 8012b98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012ca8 <_strtod_l+0xaf8>
 8012b9c:	f04f 3aff 	mov.w	sl, #4294967295
 8012ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012ba2:	9805      	ldr	r0, [sp, #20]
 8012ba4:	f7fe fe74 	bl	8011890 <_Bfree>
 8012ba8:	9805      	ldr	r0, [sp, #20]
 8012baa:	4649      	mov	r1, r9
 8012bac:	f7fe fe70 	bl	8011890 <_Bfree>
 8012bb0:	9805      	ldr	r0, [sp, #20]
 8012bb2:	4641      	mov	r1, r8
 8012bb4:	f7fe fe6c 	bl	8011890 <_Bfree>
 8012bb8:	9805      	ldr	r0, [sp, #20]
 8012bba:	4621      	mov	r1, r4
 8012bbc:	f7fe fe68 	bl	8011890 <_Bfree>
 8012bc0:	e618      	b.n	80127f4 <_strtod_l+0x644>
 8012bc2:	f1ba 0f01 	cmp.w	sl, #1
 8012bc6:	d103      	bne.n	8012bd0 <_strtod_l+0xa20>
 8012bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	f43f ada5 	beq.w	801271a <_strtod_l+0x56a>
 8012bd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012c80 <_strtod_l+0xad0>
 8012bd4:	4f35      	ldr	r7, [pc, #212]	@ (8012cac <_strtod_l+0xafc>)
 8012bd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012bda:	2600      	movs	r6, #0
 8012bdc:	e7b1      	b.n	8012b42 <_strtod_l+0x992>
 8012bde:	4f34      	ldr	r7, [pc, #208]	@ (8012cb0 <_strtod_l+0xb00>)
 8012be0:	2600      	movs	r6, #0
 8012be2:	e7aa      	b.n	8012b3a <_strtod_l+0x98a>
 8012be4:	4b32      	ldr	r3, [pc, #200]	@ (8012cb0 <_strtod_l+0xb00>)
 8012be6:	4630      	mov	r0, r6
 8012be8:	4639      	mov	r1, r7
 8012bea:	2200      	movs	r2, #0
 8012bec:	f7ed fd3c 	bl	8000668 <__aeabi_dmul>
 8012bf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012bf2:	4606      	mov	r6, r0
 8012bf4:	460f      	mov	r7, r1
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d09f      	beq.n	8012b3a <_strtod_l+0x98a>
 8012bfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012bfe:	e7a0      	b.n	8012b42 <_strtod_l+0x992>
 8012c00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012c88 <_strtod_l+0xad8>
 8012c04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012c08:	ec57 6b17 	vmov	r6, r7, d7
 8012c0c:	e799      	b.n	8012b42 <_strtod_l+0x992>
 8012c0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012c12:	9b08      	ldr	r3, [sp, #32]
 8012c14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d1c1      	bne.n	8012ba0 <_strtod_l+0x9f0>
 8012c1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012c20:	0d1b      	lsrs	r3, r3, #20
 8012c22:	051b      	lsls	r3, r3, #20
 8012c24:	429d      	cmp	r5, r3
 8012c26:	d1bb      	bne.n	8012ba0 <_strtod_l+0x9f0>
 8012c28:	4630      	mov	r0, r6
 8012c2a:	4639      	mov	r1, r7
 8012c2c:	f7ee f87c 	bl	8000d28 <__aeabi_d2lz>
 8012c30:	f7ed fcec 	bl	800060c <__aeabi_l2d>
 8012c34:	4602      	mov	r2, r0
 8012c36:	460b      	mov	r3, r1
 8012c38:	4630      	mov	r0, r6
 8012c3a:	4639      	mov	r1, r7
 8012c3c:	f7ed fb5c 	bl	80002f8 <__aeabi_dsub>
 8012c40:	460b      	mov	r3, r1
 8012c42:	4602      	mov	r2, r0
 8012c44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012c48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c4e:	ea46 060a 	orr.w	r6, r6, sl
 8012c52:	431e      	orrs	r6, r3
 8012c54:	d06f      	beq.n	8012d36 <_strtod_l+0xb86>
 8012c56:	a30e      	add	r3, pc, #56	@ (adr r3, 8012c90 <_strtod_l+0xae0>)
 8012c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5c:	f7ed ff76 	bl	8000b4c <__aeabi_dcmplt>
 8012c60:	2800      	cmp	r0, #0
 8012c62:	f47f accf 	bne.w	8012604 <_strtod_l+0x454>
 8012c66:	a30c      	add	r3, pc, #48	@ (adr r3, 8012c98 <_strtod_l+0xae8>)
 8012c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012c70:	f7ed ff8a 	bl	8000b88 <__aeabi_dcmpgt>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d093      	beq.n	8012ba0 <_strtod_l+0x9f0>
 8012c78:	e4c4      	b.n	8012604 <_strtod_l+0x454>
 8012c7a:	bf00      	nop
 8012c7c:	f3af 8000 	nop.w
 8012c80:	00000000 	.word	0x00000000
 8012c84:	bff00000 	.word	0xbff00000
 8012c88:	00000000 	.word	0x00000000
 8012c8c:	3ff00000 	.word	0x3ff00000
 8012c90:	94a03595 	.word	0x94a03595
 8012c94:	3fdfffff 	.word	0x3fdfffff
 8012c98:	35afe535 	.word	0x35afe535
 8012c9c:	3fe00000 	.word	0x3fe00000
 8012ca0:	000fffff 	.word	0x000fffff
 8012ca4:	7ff00000 	.word	0x7ff00000
 8012ca8:	7fefffff 	.word	0x7fefffff
 8012cac:	3ff00000 	.word	0x3ff00000
 8012cb0:	3fe00000 	.word	0x3fe00000
 8012cb4:	7fe00000 	.word	0x7fe00000
 8012cb8:	7c9fffff 	.word	0x7c9fffff
 8012cbc:	9b08      	ldr	r3, [sp, #32]
 8012cbe:	b323      	cbz	r3, 8012d0a <_strtod_l+0xb5a>
 8012cc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012cc4:	d821      	bhi.n	8012d0a <_strtod_l+0xb5a>
 8012cc6:	a328      	add	r3, pc, #160	@ (adr r3, 8012d68 <_strtod_l+0xbb8>)
 8012cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ccc:	4630      	mov	r0, r6
 8012cce:	4639      	mov	r1, r7
 8012cd0:	f7ed ff46 	bl	8000b60 <__aeabi_dcmple>
 8012cd4:	b1a0      	cbz	r0, 8012d00 <_strtod_l+0xb50>
 8012cd6:	4639      	mov	r1, r7
 8012cd8:	4630      	mov	r0, r6
 8012cda:	f7ed ff9d 	bl	8000c18 <__aeabi_d2uiz>
 8012cde:	2801      	cmp	r0, #1
 8012ce0:	bf38      	it	cc
 8012ce2:	2001      	movcc	r0, #1
 8012ce4:	f7ed fc46 	bl	8000574 <__aeabi_ui2d>
 8012ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cea:	4606      	mov	r6, r0
 8012cec:	460f      	mov	r7, r1
 8012cee:	b9fb      	cbnz	r3, 8012d30 <_strtod_l+0xb80>
 8012cf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012cf4:	9014      	str	r0, [sp, #80]	@ 0x50
 8012cf6:	9315      	str	r3, [sp, #84]	@ 0x54
 8012cf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012cfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012d00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012d02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012d06:	1b5b      	subs	r3, r3, r5
 8012d08:	9311      	str	r3, [sp, #68]	@ 0x44
 8012d0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012d0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012d12:	f7ff f8f1 	bl	8011ef8 <__ulp>
 8012d16:	4650      	mov	r0, sl
 8012d18:	ec53 2b10 	vmov	r2, r3, d0
 8012d1c:	4659      	mov	r1, fp
 8012d1e:	f7ed fca3 	bl	8000668 <__aeabi_dmul>
 8012d22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012d26:	f7ed fae9 	bl	80002fc <__adddf3>
 8012d2a:	4682      	mov	sl, r0
 8012d2c:	468b      	mov	fp, r1
 8012d2e:	e770      	b.n	8012c12 <_strtod_l+0xa62>
 8012d30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012d34:	e7e0      	b.n	8012cf8 <_strtod_l+0xb48>
 8012d36:	a30e      	add	r3, pc, #56	@ (adr r3, 8012d70 <_strtod_l+0xbc0>)
 8012d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d3c:	f7ed ff06 	bl	8000b4c <__aeabi_dcmplt>
 8012d40:	e798      	b.n	8012c74 <_strtod_l+0xac4>
 8012d42:	2300      	movs	r3, #0
 8012d44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012d48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012d4a:	6013      	str	r3, [r2, #0]
 8012d4c:	f7ff ba6d 	b.w	801222a <_strtod_l+0x7a>
 8012d50:	2a65      	cmp	r2, #101	@ 0x65
 8012d52:	f43f ab66 	beq.w	8012422 <_strtod_l+0x272>
 8012d56:	2a45      	cmp	r2, #69	@ 0x45
 8012d58:	f43f ab63 	beq.w	8012422 <_strtod_l+0x272>
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	f7ff bb9e 	b.w	801249e <_strtod_l+0x2ee>
 8012d62:	bf00      	nop
 8012d64:	f3af 8000 	nop.w
 8012d68:	ffc00000 	.word	0xffc00000
 8012d6c:	41dfffff 	.word	0x41dfffff
 8012d70:	94a03595 	.word	0x94a03595
 8012d74:	3fcfffff 	.word	0x3fcfffff

08012d78 <_strtod_r>:
 8012d78:	4b01      	ldr	r3, [pc, #4]	@ (8012d80 <_strtod_r+0x8>)
 8012d7a:	f7ff ba19 	b.w	80121b0 <_strtod_l>
 8012d7e:	bf00      	nop
 8012d80:	20000298 	.word	0x20000298

08012d84 <__ssputs_r>:
 8012d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d88:	688e      	ldr	r6, [r1, #8]
 8012d8a:	461f      	mov	r7, r3
 8012d8c:	42be      	cmp	r6, r7
 8012d8e:	680b      	ldr	r3, [r1, #0]
 8012d90:	4682      	mov	sl, r0
 8012d92:	460c      	mov	r4, r1
 8012d94:	4690      	mov	r8, r2
 8012d96:	d82d      	bhi.n	8012df4 <__ssputs_r+0x70>
 8012d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012da0:	d026      	beq.n	8012df0 <__ssputs_r+0x6c>
 8012da2:	6965      	ldr	r5, [r4, #20]
 8012da4:	6909      	ldr	r1, [r1, #16]
 8012da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012daa:	eba3 0901 	sub.w	r9, r3, r1
 8012dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012db2:	1c7b      	adds	r3, r7, #1
 8012db4:	444b      	add	r3, r9
 8012db6:	106d      	asrs	r5, r5, #1
 8012db8:	429d      	cmp	r5, r3
 8012dba:	bf38      	it	cc
 8012dbc:	461d      	movcc	r5, r3
 8012dbe:	0553      	lsls	r3, r2, #21
 8012dc0:	d527      	bpl.n	8012e12 <__ssputs_r+0x8e>
 8012dc2:	4629      	mov	r1, r5
 8012dc4:	f7fe fc98 	bl	80116f8 <_malloc_r>
 8012dc8:	4606      	mov	r6, r0
 8012dca:	b360      	cbz	r0, 8012e26 <__ssputs_r+0xa2>
 8012dcc:	6921      	ldr	r1, [r4, #16]
 8012dce:	464a      	mov	r2, r9
 8012dd0:	f7fd fd9f 	bl	8010912 <memcpy>
 8012dd4:	89a3      	ldrh	r3, [r4, #12]
 8012dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012dde:	81a3      	strh	r3, [r4, #12]
 8012de0:	6126      	str	r6, [r4, #16]
 8012de2:	6165      	str	r5, [r4, #20]
 8012de4:	444e      	add	r6, r9
 8012de6:	eba5 0509 	sub.w	r5, r5, r9
 8012dea:	6026      	str	r6, [r4, #0]
 8012dec:	60a5      	str	r5, [r4, #8]
 8012dee:	463e      	mov	r6, r7
 8012df0:	42be      	cmp	r6, r7
 8012df2:	d900      	bls.n	8012df6 <__ssputs_r+0x72>
 8012df4:	463e      	mov	r6, r7
 8012df6:	6820      	ldr	r0, [r4, #0]
 8012df8:	4632      	mov	r2, r6
 8012dfa:	4641      	mov	r1, r8
 8012dfc:	f000 fbae 	bl	801355c <memmove>
 8012e00:	68a3      	ldr	r3, [r4, #8]
 8012e02:	1b9b      	subs	r3, r3, r6
 8012e04:	60a3      	str	r3, [r4, #8]
 8012e06:	6823      	ldr	r3, [r4, #0]
 8012e08:	4433      	add	r3, r6
 8012e0a:	6023      	str	r3, [r4, #0]
 8012e0c:	2000      	movs	r0, #0
 8012e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e12:	462a      	mov	r2, r5
 8012e14:	f000 ff4d 	bl	8013cb2 <_realloc_r>
 8012e18:	4606      	mov	r6, r0
 8012e1a:	2800      	cmp	r0, #0
 8012e1c:	d1e0      	bne.n	8012de0 <__ssputs_r+0x5c>
 8012e1e:	6921      	ldr	r1, [r4, #16]
 8012e20:	4650      	mov	r0, sl
 8012e22:	f7fe fbf5 	bl	8011610 <_free_r>
 8012e26:	230c      	movs	r3, #12
 8012e28:	f8ca 3000 	str.w	r3, [sl]
 8012e2c:	89a3      	ldrh	r3, [r4, #12]
 8012e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e32:	81a3      	strh	r3, [r4, #12]
 8012e34:	f04f 30ff 	mov.w	r0, #4294967295
 8012e38:	e7e9      	b.n	8012e0e <__ssputs_r+0x8a>
	...

08012e3c <_svfiprintf_r>:
 8012e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e40:	4698      	mov	r8, r3
 8012e42:	898b      	ldrh	r3, [r1, #12]
 8012e44:	061b      	lsls	r3, r3, #24
 8012e46:	b09d      	sub	sp, #116	@ 0x74
 8012e48:	4607      	mov	r7, r0
 8012e4a:	460d      	mov	r5, r1
 8012e4c:	4614      	mov	r4, r2
 8012e4e:	d510      	bpl.n	8012e72 <_svfiprintf_r+0x36>
 8012e50:	690b      	ldr	r3, [r1, #16]
 8012e52:	b973      	cbnz	r3, 8012e72 <_svfiprintf_r+0x36>
 8012e54:	2140      	movs	r1, #64	@ 0x40
 8012e56:	f7fe fc4f 	bl	80116f8 <_malloc_r>
 8012e5a:	6028      	str	r0, [r5, #0]
 8012e5c:	6128      	str	r0, [r5, #16]
 8012e5e:	b930      	cbnz	r0, 8012e6e <_svfiprintf_r+0x32>
 8012e60:	230c      	movs	r3, #12
 8012e62:	603b      	str	r3, [r7, #0]
 8012e64:	f04f 30ff 	mov.w	r0, #4294967295
 8012e68:	b01d      	add	sp, #116	@ 0x74
 8012e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6e:	2340      	movs	r3, #64	@ 0x40
 8012e70:	616b      	str	r3, [r5, #20]
 8012e72:	2300      	movs	r3, #0
 8012e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e76:	2320      	movs	r3, #32
 8012e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e80:	2330      	movs	r3, #48	@ 0x30
 8012e82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013020 <_svfiprintf_r+0x1e4>
 8012e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e8a:	f04f 0901 	mov.w	r9, #1
 8012e8e:	4623      	mov	r3, r4
 8012e90:	469a      	mov	sl, r3
 8012e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e96:	b10a      	cbz	r2, 8012e9c <_svfiprintf_r+0x60>
 8012e98:	2a25      	cmp	r2, #37	@ 0x25
 8012e9a:	d1f9      	bne.n	8012e90 <_svfiprintf_r+0x54>
 8012e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8012ea0:	d00b      	beq.n	8012eba <_svfiprintf_r+0x7e>
 8012ea2:	465b      	mov	r3, fp
 8012ea4:	4622      	mov	r2, r4
 8012ea6:	4629      	mov	r1, r5
 8012ea8:	4638      	mov	r0, r7
 8012eaa:	f7ff ff6b 	bl	8012d84 <__ssputs_r>
 8012eae:	3001      	adds	r0, #1
 8012eb0:	f000 80a7 	beq.w	8013002 <_svfiprintf_r+0x1c6>
 8012eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012eb6:	445a      	add	r2, fp
 8012eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012eba:	f89a 3000 	ldrb.w	r3, [sl]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f000 809f 	beq.w	8013002 <_svfiprintf_r+0x1c6>
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8012eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ece:	f10a 0a01 	add.w	sl, sl, #1
 8012ed2:	9304      	str	r3, [sp, #16]
 8012ed4:	9307      	str	r3, [sp, #28]
 8012ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8012edc:	4654      	mov	r4, sl
 8012ede:	2205      	movs	r2, #5
 8012ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ee4:	484e      	ldr	r0, [pc, #312]	@ (8013020 <_svfiprintf_r+0x1e4>)
 8012ee6:	f7ed f9ab 	bl	8000240 <memchr>
 8012eea:	9a04      	ldr	r2, [sp, #16]
 8012eec:	b9d8      	cbnz	r0, 8012f26 <_svfiprintf_r+0xea>
 8012eee:	06d0      	lsls	r0, r2, #27
 8012ef0:	bf44      	itt	mi
 8012ef2:	2320      	movmi	r3, #32
 8012ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ef8:	0711      	lsls	r1, r2, #28
 8012efa:	bf44      	itt	mi
 8012efc:	232b      	movmi	r3, #43	@ 0x2b
 8012efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f02:	f89a 3000 	ldrb.w	r3, [sl]
 8012f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f08:	d015      	beq.n	8012f36 <_svfiprintf_r+0xfa>
 8012f0a:	9a07      	ldr	r2, [sp, #28]
 8012f0c:	4654      	mov	r4, sl
 8012f0e:	2000      	movs	r0, #0
 8012f10:	f04f 0c0a 	mov.w	ip, #10
 8012f14:	4621      	mov	r1, r4
 8012f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f1a:	3b30      	subs	r3, #48	@ 0x30
 8012f1c:	2b09      	cmp	r3, #9
 8012f1e:	d94b      	bls.n	8012fb8 <_svfiprintf_r+0x17c>
 8012f20:	b1b0      	cbz	r0, 8012f50 <_svfiprintf_r+0x114>
 8012f22:	9207      	str	r2, [sp, #28]
 8012f24:	e014      	b.n	8012f50 <_svfiprintf_r+0x114>
 8012f26:	eba0 0308 	sub.w	r3, r0, r8
 8012f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8012f2e:	4313      	orrs	r3, r2
 8012f30:	9304      	str	r3, [sp, #16]
 8012f32:	46a2      	mov	sl, r4
 8012f34:	e7d2      	b.n	8012edc <_svfiprintf_r+0xa0>
 8012f36:	9b03      	ldr	r3, [sp, #12]
 8012f38:	1d19      	adds	r1, r3, #4
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	9103      	str	r1, [sp, #12]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	bfbb      	ittet	lt
 8012f42:	425b      	neglt	r3, r3
 8012f44:	f042 0202 	orrlt.w	r2, r2, #2
 8012f48:	9307      	strge	r3, [sp, #28]
 8012f4a:	9307      	strlt	r3, [sp, #28]
 8012f4c:	bfb8      	it	lt
 8012f4e:	9204      	strlt	r2, [sp, #16]
 8012f50:	7823      	ldrb	r3, [r4, #0]
 8012f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f54:	d10a      	bne.n	8012f6c <_svfiprintf_r+0x130>
 8012f56:	7863      	ldrb	r3, [r4, #1]
 8012f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f5a:	d132      	bne.n	8012fc2 <_svfiprintf_r+0x186>
 8012f5c:	9b03      	ldr	r3, [sp, #12]
 8012f5e:	1d1a      	adds	r2, r3, #4
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	9203      	str	r2, [sp, #12]
 8012f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f68:	3402      	adds	r4, #2
 8012f6a:	9305      	str	r3, [sp, #20]
 8012f6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013030 <_svfiprintf_r+0x1f4>
 8012f70:	7821      	ldrb	r1, [r4, #0]
 8012f72:	2203      	movs	r2, #3
 8012f74:	4650      	mov	r0, sl
 8012f76:	f7ed f963 	bl	8000240 <memchr>
 8012f7a:	b138      	cbz	r0, 8012f8c <_svfiprintf_r+0x150>
 8012f7c:	9b04      	ldr	r3, [sp, #16]
 8012f7e:	eba0 000a 	sub.w	r0, r0, sl
 8012f82:	2240      	movs	r2, #64	@ 0x40
 8012f84:	4082      	lsls	r2, r0
 8012f86:	4313      	orrs	r3, r2
 8012f88:	3401      	adds	r4, #1
 8012f8a:	9304      	str	r3, [sp, #16]
 8012f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f90:	4824      	ldr	r0, [pc, #144]	@ (8013024 <_svfiprintf_r+0x1e8>)
 8012f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f96:	2206      	movs	r2, #6
 8012f98:	f7ed f952 	bl	8000240 <memchr>
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	d036      	beq.n	801300e <_svfiprintf_r+0x1d2>
 8012fa0:	4b21      	ldr	r3, [pc, #132]	@ (8013028 <_svfiprintf_r+0x1ec>)
 8012fa2:	bb1b      	cbnz	r3, 8012fec <_svfiprintf_r+0x1b0>
 8012fa4:	9b03      	ldr	r3, [sp, #12]
 8012fa6:	3307      	adds	r3, #7
 8012fa8:	f023 0307 	bic.w	r3, r3, #7
 8012fac:	3308      	adds	r3, #8
 8012fae:	9303      	str	r3, [sp, #12]
 8012fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fb2:	4433      	add	r3, r6
 8012fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fb6:	e76a      	b.n	8012e8e <_svfiprintf_r+0x52>
 8012fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fbc:	460c      	mov	r4, r1
 8012fbe:	2001      	movs	r0, #1
 8012fc0:	e7a8      	b.n	8012f14 <_svfiprintf_r+0xd8>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	3401      	adds	r4, #1
 8012fc6:	9305      	str	r3, [sp, #20]
 8012fc8:	4619      	mov	r1, r3
 8012fca:	f04f 0c0a 	mov.w	ip, #10
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fd4:	3a30      	subs	r2, #48	@ 0x30
 8012fd6:	2a09      	cmp	r2, #9
 8012fd8:	d903      	bls.n	8012fe2 <_svfiprintf_r+0x1a6>
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d0c6      	beq.n	8012f6c <_svfiprintf_r+0x130>
 8012fde:	9105      	str	r1, [sp, #20]
 8012fe0:	e7c4      	b.n	8012f6c <_svfiprintf_r+0x130>
 8012fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	2301      	movs	r3, #1
 8012fea:	e7f0      	b.n	8012fce <_svfiprintf_r+0x192>
 8012fec:	ab03      	add	r3, sp, #12
 8012fee:	9300      	str	r3, [sp, #0]
 8012ff0:	462a      	mov	r2, r5
 8012ff2:	4b0e      	ldr	r3, [pc, #56]	@ (801302c <_svfiprintf_r+0x1f0>)
 8012ff4:	a904      	add	r1, sp, #16
 8012ff6:	4638      	mov	r0, r7
 8012ff8:	f7fc fc68 	bl	800f8cc <_printf_float>
 8012ffc:	1c42      	adds	r2, r0, #1
 8012ffe:	4606      	mov	r6, r0
 8013000:	d1d6      	bne.n	8012fb0 <_svfiprintf_r+0x174>
 8013002:	89ab      	ldrh	r3, [r5, #12]
 8013004:	065b      	lsls	r3, r3, #25
 8013006:	f53f af2d 	bmi.w	8012e64 <_svfiprintf_r+0x28>
 801300a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801300c:	e72c      	b.n	8012e68 <_svfiprintf_r+0x2c>
 801300e:	ab03      	add	r3, sp, #12
 8013010:	9300      	str	r3, [sp, #0]
 8013012:	462a      	mov	r2, r5
 8013014:	4b05      	ldr	r3, [pc, #20]	@ (801302c <_svfiprintf_r+0x1f0>)
 8013016:	a904      	add	r1, sp, #16
 8013018:	4638      	mov	r0, r7
 801301a:	f7fc feef 	bl	800fdfc <_printf_i>
 801301e:	e7ed      	b.n	8012ffc <_svfiprintf_r+0x1c0>
 8013020:	08014a20 	.word	0x08014a20
 8013024:	08014a2a 	.word	0x08014a2a
 8013028:	0800f8cd 	.word	0x0800f8cd
 801302c:	08012d85 	.word	0x08012d85
 8013030:	08014a26 	.word	0x08014a26

08013034 <__sfputc_r>:
 8013034:	6893      	ldr	r3, [r2, #8]
 8013036:	3b01      	subs	r3, #1
 8013038:	2b00      	cmp	r3, #0
 801303a:	b410      	push	{r4}
 801303c:	6093      	str	r3, [r2, #8]
 801303e:	da08      	bge.n	8013052 <__sfputc_r+0x1e>
 8013040:	6994      	ldr	r4, [r2, #24]
 8013042:	42a3      	cmp	r3, r4
 8013044:	db01      	blt.n	801304a <__sfputc_r+0x16>
 8013046:	290a      	cmp	r1, #10
 8013048:	d103      	bne.n	8013052 <__sfputc_r+0x1e>
 801304a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801304e:	f000 b9f1 	b.w	8013434 <__swbuf_r>
 8013052:	6813      	ldr	r3, [r2, #0]
 8013054:	1c58      	adds	r0, r3, #1
 8013056:	6010      	str	r0, [r2, #0]
 8013058:	7019      	strb	r1, [r3, #0]
 801305a:	4608      	mov	r0, r1
 801305c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013060:	4770      	bx	lr

08013062 <__sfputs_r>:
 8013062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013064:	4606      	mov	r6, r0
 8013066:	460f      	mov	r7, r1
 8013068:	4614      	mov	r4, r2
 801306a:	18d5      	adds	r5, r2, r3
 801306c:	42ac      	cmp	r4, r5
 801306e:	d101      	bne.n	8013074 <__sfputs_r+0x12>
 8013070:	2000      	movs	r0, #0
 8013072:	e007      	b.n	8013084 <__sfputs_r+0x22>
 8013074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013078:	463a      	mov	r2, r7
 801307a:	4630      	mov	r0, r6
 801307c:	f7ff ffda 	bl	8013034 <__sfputc_r>
 8013080:	1c43      	adds	r3, r0, #1
 8013082:	d1f3      	bne.n	801306c <__sfputs_r+0xa>
 8013084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013088 <_vfiprintf_r>:
 8013088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801308c:	460d      	mov	r5, r1
 801308e:	b09d      	sub	sp, #116	@ 0x74
 8013090:	4614      	mov	r4, r2
 8013092:	4698      	mov	r8, r3
 8013094:	4606      	mov	r6, r0
 8013096:	b118      	cbz	r0, 80130a0 <_vfiprintf_r+0x18>
 8013098:	6a03      	ldr	r3, [r0, #32]
 801309a:	b90b      	cbnz	r3, 80130a0 <_vfiprintf_r+0x18>
 801309c:	f7fd fa6e 	bl	801057c <__sinit>
 80130a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130a2:	07d9      	lsls	r1, r3, #31
 80130a4:	d405      	bmi.n	80130b2 <_vfiprintf_r+0x2a>
 80130a6:	89ab      	ldrh	r3, [r5, #12]
 80130a8:	059a      	lsls	r2, r3, #22
 80130aa:	d402      	bmi.n	80130b2 <_vfiprintf_r+0x2a>
 80130ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130ae:	f7fd fc26 	bl	80108fe <__retarget_lock_acquire_recursive>
 80130b2:	89ab      	ldrh	r3, [r5, #12]
 80130b4:	071b      	lsls	r3, r3, #28
 80130b6:	d501      	bpl.n	80130bc <_vfiprintf_r+0x34>
 80130b8:	692b      	ldr	r3, [r5, #16]
 80130ba:	b99b      	cbnz	r3, 80130e4 <_vfiprintf_r+0x5c>
 80130bc:	4629      	mov	r1, r5
 80130be:	4630      	mov	r0, r6
 80130c0:	f000 f9f6 	bl	80134b0 <__swsetup_r>
 80130c4:	b170      	cbz	r0, 80130e4 <_vfiprintf_r+0x5c>
 80130c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130c8:	07dc      	lsls	r4, r3, #31
 80130ca:	d504      	bpl.n	80130d6 <_vfiprintf_r+0x4e>
 80130cc:	f04f 30ff 	mov.w	r0, #4294967295
 80130d0:	b01d      	add	sp, #116	@ 0x74
 80130d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d6:	89ab      	ldrh	r3, [r5, #12]
 80130d8:	0598      	lsls	r0, r3, #22
 80130da:	d4f7      	bmi.n	80130cc <_vfiprintf_r+0x44>
 80130dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130de:	f7fd fc0f 	bl	8010900 <__retarget_lock_release_recursive>
 80130e2:	e7f3      	b.n	80130cc <_vfiprintf_r+0x44>
 80130e4:	2300      	movs	r3, #0
 80130e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80130e8:	2320      	movs	r3, #32
 80130ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80130ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80130f2:	2330      	movs	r3, #48	@ 0x30
 80130f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80132a4 <_vfiprintf_r+0x21c>
 80130f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80130fc:	f04f 0901 	mov.w	r9, #1
 8013100:	4623      	mov	r3, r4
 8013102:	469a      	mov	sl, r3
 8013104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013108:	b10a      	cbz	r2, 801310e <_vfiprintf_r+0x86>
 801310a:	2a25      	cmp	r2, #37	@ 0x25
 801310c:	d1f9      	bne.n	8013102 <_vfiprintf_r+0x7a>
 801310e:	ebba 0b04 	subs.w	fp, sl, r4
 8013112:	d00b      	beq.n	801312c <_vfiprintf_r+0xa4>
 8013114:	465b      	mov	r3, fp
 8013116:	4622      	mov	r2, r4
 8013118:	4629      	mov	r1, r5
 801311a:	4630      	mov	r0, r6
 801311c:	f7ff ffa1 	bl	8013062 <__sfputs_r>
 8013120:	3001      	adds	r0, #1
 8013122:	f000 80a7 	beq.w	8013274 <_vfiprintf_r+0x1ec>
 8013126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013128:	445a      	add	r2, fp
 801312a:	9209      	str	r2, [sp, #36]	@ 0x24
 801312c:	f89a 3000 	ldrb.w	r3, [sl]
 8013130:	2b00      	cmp	r3, #0
 8013132:	f000 809f 	beq.w	8013274 <_vfiprintf_r+0x1ec>
 8013136:	2300      	movs	r3, #0
 8013138:	f04f 32ff 	mov.w	r2, #4294967295
 801313c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013140:	f10a 0a01 	add.w	sl, sl, #1
 8013144:	9304      	str	r3, [sp, #16]
 8013146:	9307      	str	r3, [sp, #28]
 8013148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801314c:	931a      	str	r3, [sp, #104]	@ 0x68
 801314e:	4654      	mov	r4, sl
 8013150:	2205      	movs	r2, #5
 8013152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013156:	4853      	ldr	r0, [pc, #332]	@ (80132a4 <_vfiprintf_r+0x21c>)
 8013158:	f7ed f872 	bl	8000240 <memchr>
 801315c:	9a04      	ldr	r2, [sp, #16]
 801315e:	b9d8      	cbnz	r0, 8013198 <_vfiprintf_r+0x110>
 8013160:	06d1      	lsls	r1, r2, #27
 8013162:	bf44      	itt	mi
 8013164:	2320      	movmi	r3, #32
 8013166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801316a:	0713      	lsls	r3, r2, #28
 801316c:	bf44      	itt	mi
 801316e:	232b      	movmi	r3, #43	@ 0x2b
 8013170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013174:	f89a 3000 	ldrb.w	r3, [sl]
 8013178:	2b2a      	cmp	r3, #42	@ 0x2a
 801317a:	d015      	beq.n	80131a8 <_vfiprintf_r+0x120>
 801317c:	9a07      	ldr	r2, [sp, #28]
 801317e:	4654      	mov	r4, sl
 8013180:	2000      	movs	r0, #0
 8013182:	f04f 0c0a 	mov.w	ip, #10
 8013186:	4621      	mov	r1, r4
 8013188:	f811 3b01 	ldrb.w	r3, [r1], #1
 801318c:	3b30      	subs	r3, #48	@ 0x30
 801318e:	2b09      	cmp	r3, #9
 8013190:	d94b      	bls.n	801322a <_vfiprintf_r+0x1a2>
 8013192:	b1b0      	cbz	r0, 80131c2 <_vfiprintf_r+0x13a>
 8013194:	9207      	str	r2, [sp, #28]
 8013196:	e014      	b.n	80131c2 <_vfiprintf_r+0x13a>
 8013198:	eba0 0308 	sub.w	r3, r0, r8
 801319c:	fa09 f303 	lsl.w	r3, r9, r3
 80131a0:	4313      	orrs	r3, r2
 80131a2:	9304      	str	r3, [sp, #16]
 80131a4:	46a2      	mov	sl, r4
 80131a6:	e7d2      	b.n	801314e <_vfiprintf_r+0xc6>
 80131a8:	9b03      	ldr	r3, [sp, #12]
 80131aa:	1d19      	adds	r1, r3, #4
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	9103      	str	r1, [sp, #12]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	bfbb      	ittet	lt
 80131b4:	425b      	neglt	r3, r3
 80131b6:	f042 0202 	orrlt.w	r2, r2, #2
 80131ba:	9307      	strge	r3, [sp, #28]
 80131bc:	9307      	strlt	r3, [sp, #28]
 80131be:	bfb8      	it	lt
 80131c0:	9204      	strlt	r2, [sp, #16]
 80131c2:	7823      	ldrb	r3, [r4, #0]
 80131c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80131c6:	d10a      	bne.n	80131de <_vfiprintf_r+0x156>
 80131c8:	7863      	ldrb	r3, [r4, #1]
 80131ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80131cc:	d132      	bne.n	8013234 <_vfiprintf_r+0x1ac>
 80131ce:	9b03      	ldr	r3, [sp, #12]
 80131d0:	1d1a      	adds	r2, r3, #4
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	9203      	str	r2, [sp, #12]
 80131d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80131da:	3402      	adds	r4, #2
 80131dc:	9305      	str	r3, [sp, #20]
 80131de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80132b4 <_vfiprintf_r+0x22c>
 80131e2:	7821      	ldrb	r1, [r4, #0]
 80131e4:	2203      	movs	r2, #3
 80131e6:	4650      	mov	r0, sl
 80131e8:	f7ed f82a 	bl	8000240 <memchr>
 80131ec:	b138      	cbz	r0, 80131fe <_vfiprintf_r+0x176>
 80131ee:	9b04      	ldr	r3, [sp, #16]
 80131f0:	eba0 000a 	sub.w	r0, r0, sl
 80131f4:	2240      	movs	r2, #64	@ 0x40
 80131f6:	4082      	lsls	r2, r0
 80131f8:	4313      	orrs	r3, r2
 80131fa:	3401      	adds	r4, #1
 80131fc:	9304      	str	r3, [sp, #16]
 80131fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013202:	4829      	ldr	r0, [pc, #164]	@ (80132a8 <_vfiprintf_r+0x220>)
 8013204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013208:	2206      	movs	r2, #6
 801320a:	f7ed f819 	bl	8000240 <memchr>
 801320e:	2800      	cmp	r0, #0
 8013210:	d03f      	beq.n	8013292 <_vfiprintf_r+0x20a>
 8013212:	4b26      	ldr	r3, [pc, #152]	@ (80132ac <_vfiprintf_r+0x224>)
 8013214:	bb1b      	cbnz	r3, 801325e <_vfiprintf_r+0x1d6>
 8013216:	9b03      	ldr	r3, [sp, #12]
 8013218:	3307      	adds	r3, #7
 801321a:	f023 0307 	bic.w	r3, r3, #7
 801321e:	3308      	adds	r3, #8
 8013220:	9303      	str	r3, [sp, #12]
 8013222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013224:	443b      	add	r3, r7
 8013226:	9309      	str	r3, [sp, #36]	@ 0x24
 8013228:	e76a      	b.n	8013100 <_vfiprintf_r+0x78>
 801322a:	fb0c 3202 	mla	r2, ip, r2, r3
 801322e:	460c      	mov	r4, r1
 8013230:	2001      	movs	r0, #1
 8013232:	e7a8      	b.n	8013186 <_vfiprintf_r+0xfe>
 8013234:	2300      	movs	r3, #0
 8013236:	3401      	adds	r4, #1
 8013238:	9305      	str	r3, [sp, #20]
 801323a:	4619      	mov	r1, r3
 801323c:	f04f 0c0a 	mov.w	ip, #10
 8013240:	4620      	mov	r0, r4
 8013242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013246:	3a30      	subs	r2, #48	@ 0x30
 8013248:	2a09      	cmp	r2, #9
 801324a:	d903      	bls.n	8013254 <_vfiprintf_r+0x1cc>
 801324c:	2b00      	cmp	r3, #0
 801324e:	d0c6      	beq.n	80131de <_vfiprintf_r+0x156>
 8013250:	9105      	str	r1, [sp, #20]
 8013252:	e7c4      	b.n	80131de <_vfiprintf_r+0x156>
 8013254:	fb0c 2101 	mla	r1, ip, r1, r2
 8013258:	4604      	mov	r4, r0
 801325a:	2301      	movs	r3, #1
 801325c:	e7f0      	b.n	8013240 <_vfiprintf_r+0x1b8>
 801325e:	ab03      	add	r3, sp, #12
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	462a      	mov	r2, r5
 8013264:	4b12      	ldr	r3, [pc, #72]	@ (80132b0 <_vfiprintf_r+0x228>)
 8013266:	a904      	add	r1, sp, #16
 8013268:	4630      	mov	r0, r6
 801326a:	f7fc fb2f 	bl	800f8cc <_printf_float>
 801326e:	4607      	mov	r7, r0
 8013270:	1c78      	adds	r0, r7, #1
 8013272:	d1d6      	bne.n	8013222 <_vfiprintf_r+0x19a>
 8013274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013276:	07d9      	lsls	r1, r3, #31
 8013278:	d405      	bmi.n	8013286 <_vfiprintf_r+0x1fe>
 801327a:	89ab      	ldrh	r3, [r5, #12]
 801327c:	059a      	lsls	r2, r3, #22
 801327e:	d402      	bmi.n	8013286 <_vfiprintf_r+0x1fe>
 8013280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013282:	f7fd fb3d 	bl	8010900 <__retarget_lock_release_recursive>
 8013286:	89ab      	ldrh	r3, [r5, #12]
 8013288:	065b      	lsls	r3, r3, #25
 801328a:	f53f af1f 	bmi.w	80130cc <_vfiprintf_r+0x44>
 801328e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013290:	e71e      	b.n	80130d0 <_vfiprintf_r+0x48>
 8013292:	ab03      	add	r3, sp, #12
 8013294:	9300      	str	r3, [sp, #0]
 8013296:	462a      	mov	r2, r5
 8013298:	4b05      	ldr	r3, [pc, #20]	@ (80132b0 <_vfiprintf_r+0x228>)
 801329a:	a904      	add	r1, sp, #16
 801329c:	4630      	mov	r0, r6
 801329e:	f7fc fdad 	bl	800fdfc <_printf_i>
 80132a2:	e7e4      	b.n	801326e <_vfiprintf_r+0x1e6>
 80132a4:	08014a20 	.word	0x08014a20
 80132a8:	08014a2a 	.word	0x08014a2a
 80132ac:	0800f8cd 	.word	0x0800f8cd
 80132b0:	08013063 	.word	0x08013063
 80132b4:	08014a26 	.word	0x08014a26

080132b8 <__sflush_r>:
 80132b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80132bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132c0:	0716      	lsls	r6, r2, #28
 80132c2:	4605      	mov	r5, r0
 80132c4:	460c      	mov	r4, r1
 80132c6:	d454      	bmi.n	8013372 <__sflush_r+0xba>
 80132c8:	684b      	ldr	r3, [r1, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	dc02      	bgt.n	80132d4 <__sflush_r+0x1c>
 80132ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	dd48      	ble.n	8013366 <__sflush_r+0xae>
 80132d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80132d6:	2e00      	cmp	r6, #0
 80132d8:	d045      	beq.n	8013366 <__sflush_r+0xae>
 80132da:	2300      	movs	r3, #0
 80132dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80132e0:	682f      	ldr	r7, [r5, #0]
 80132e2:	6a21      	ldr	r1, [r4, #32]
 80132e4:	602b      	str	r3, [r5, #0]
 80132e6:	d030      	beq.n	801334a <__sflush_r+0x92>
 80132e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80132ea:	89a3      	ldrh	r3, [r4, #12]
 80132ec:	0759      	lsls	r1, r3, #29
 80132ee:	d505      	bpl.n	80132fc <__sflush_r+0x44>
 80132f0:	6863      	ldr	r3, [r4, #4]
 80132f2:	1ad2      	subs	r2, r2, r3
 80132f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80132f6:	b10b      	cbz	r3, 80132fc <__sflush_r+0x44>
 80132f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80132fa:	1ad2      	subs	r2, r2, r3
 80132fc:	2300      	movs	r3, #0
 80132fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013300:	6a21      	ldr	r1, [r4, #32]
 8013302:	4628      	mov	r0, r5
 8013304:	47b0      	blx	r6
 8013306:	1c43      	adds	r3, r0, #1
 8013308:	89a3      	ldrh	r3, [r4, #12]
 801330a:	d106      	bne.n	801331a <__sflush_r+0x62>
 801330c:	6829      	ldr	r1, [r5, #0]
 801330e:	291d      	cmp	r1, #29
 8013310:	d82b      	bhi.n	801336a <__sflush_r+0xb2>
 8013312:	4a2a      	ldr	r2, [pc, #168]	@ (80133bc <__sflush_r+0x104>)
 8013314:	410a      	asrs	r2, r1
 8013316:	07d6      	lsls	r6, r2, #31
 8013318:	d427      	bmi.n	801336a <__sflush_r+0xb2>
 801331a:	2200      	movs	r2, #0
 801331c:	6062      	str	r2, [r4, #4]
 801331e:	04d9      	lsls	r1, r3, #19
 8013320:	6922      	ldr	r2, [r4, #16]
 8013322:	6022      	str	r2, [r4, #0]
 8013324:	d504      	bpl.n	8013330 <__sflush_r+0x78>
 8013326:	1c42      	adds	r2, r0, #1
 8013328:	d101      	bne.n	801332e <__sflush_r+0x76>
 801332a:	682b      	ldr	r3, [r5, #0]
 801332c:	b903      	cbnz	r3, 8013330 <__sflush_r+0x78>
 801332e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013332:	602f      	str	r7, [r5, #0]
 8013334:	b1b9      	cbz	r1, 8013366 <__sflush_r+0xae>
 8013336:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801333a:	4299      	cmp	r1, r3
 801333c:	d002      	beq.n	8013344 <__sflush_r+0x8c>
 801333e:	4628      	mov	r0, r5
 8013340:	f7fe f966 	bl	8011610 <_free_r>
 8013344:	2300      	movs	r3, #0
 8013346:	6363      	str	r3, [r4, #52]	@ 0x34
 8013348:	e00d      	b.n	8013366 <__sflush_r+0xae>
 801334a:	2301      	movs	r3, #1
 801334c:	4628      	mov	r0, r5
 801334e:	47b0      	blx	r6
 8013350:	4602      	mov	r2, r0
 8013352:	1c50      	adds	r0, r2, #1
 8013354:	d1c9      	bne.n	80132ea <__sflush_r+0x32>
 8013356:	682b      	ldr	r3, [r5, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d0c6      	beq.n	80132ea <__sflush_r+0x32>
 801335c:	2b1d      	cmp	r3, #29
 801335e:	d001      	beq.n	8013364 <__sflush_r+0xac>
 8013360:	2b16      	cmp	r3, #22
 8013362:	d11e      	bne.n	80133a2 <__sflush_r+0xea>
 8013364:	602f      	str	r7, [r5, #0]
 8013366:	2000      	movs	r0, #0
 8013368:	e022      	b.n	80133b0 <__sflush_r+0xf8>
 801336a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801336e:	b21b      	sxth	r3, r3
 8013370:	e01b      	b.n	80133aa <__sflush_r+0xf2>
 8013372:	690f      	ldr	r7, [r1, #16]
 8013374:	2f00      	cmp	r7, #0
 8013376:	d0f6      	beq.n	8013366 <__sflush_r+0xae>
 8013378:	0793      	lsls	r3, r2, #30
 801337a:	680e      	ldr	r6, [r1, #0]
 801337c:	bf08      	it	eq
 801337e:	694b      	ldreq	r3, [r1, #20]
 8013380:	600f      	str	r7, [r1, #0]
 8013382:	bf18      	it	ne
 8013384:	2300      	movne	r3, #0
 8013386:	eba6 0807 	sub.w	r8, r6, r7
 801338a:	608b      	str	r3, [r1, #8]
 801338c:	f1b8 0f00 	cmp.w	r8, #0
 8013390:	dde9      	ble.n	8013366 <__sflush_r+0xae>
 8013392:	6a21      	ldr	r1, [r4, #32]
 8013394:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013396:	4643      	mov	r3, r8
 8013398:	463a      	mov	r2, r7
 801339a:	4628      	mov	r0, r5
 801339c:	47b0      	blx	r6
 801339e:	2800      	cmp	r0, #0
 80133a0:	dc08      	bgt.n	80133b4 <__sflush_r+0xfc>
 80133a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80133aa:	81a3      	strh	r3, [r4, #12]
 80133ac:	f04f 30ff 	mov.w	r0, #4294967295
 80133b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b4:	4407      	add	r7, r0
 80133b6:	eba8 0800 	sub.w	r8, r8, r0
 80133ba:	e7e7      	b.n	801338c <__sflush_r+0xd4>
 80133bc:	dfbffffe 	.word	0xdfbffffe

080133c0 <_fflush_r>:
 80133c0:	b538      	push	{r3, r4, r5, lr}
 80133c2:	690b      	ldr	r3, [r1, #16]
 80133c4:	4605      	mov	r5, r0
 80133c6:	460c      	mov	r4, r1
 80133c8:	b913      	cbnz	r3, 80133d0 <_fflush_r+0x10>
 80133ca:	2500      	movs	r5, #0
 80133cc:	4628      	mov	r0, r5
 80133ce:	bd38      	pop	{r3, r4, r5, pc}
 80133d0:	b118      	cbz	r0, 80133da <_fflush_r+0x1a>
 80133d2:	6a03      	ldr	r3, [r0, #32]
 80133d4:	b90b      	cbnz	r3, 80133da <_fflush_r+0x1a>
 80133d6:	f7fd f8d1 	bl	801057c <__sinit>
 80133da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d0f3      	beq.n	80133ca <_fflush_r+0xa>
 80133e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80133e4:	07d0      	lsls	r0, r2, #31
 80133e6:	d404      	bmi.n	80133f2 <_fflush_r+0x32>
 80133e8:	0599      	lsls	r1, r3, #22
 80133ea:	d402      	bmi.n	80133f2 <_fflush_r+0x32>
 80133ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80133ee:	f7fd fa86 	bl	80108fe <__retarget_lock_acquire_recursive>
 80133f2:	4628      	mov	r0, r5
 80133f4:	4621      	mov	r1, r4
 80133f6:	f7ff ff5f 	bl	80132b8 <__sflush_r>
 80133fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80133fc:	07da      	lsls	r2, r3, #31
 80133fe:	4605      	mov	r5, r0
 8013400:	d4e4      	bmi.n	80133cc <_fflush_r+0xc>
 8013402:	89a3      	ldrh	r3, [r4, #12]
 8013404:	059b      	lsls	r3, r3, #22
 8013406:	d4e1      	bmi.n	80133cc <_fflush_r+0xc>
 8013408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801340a:	f7fd fa79 	bl	8010900 <__retarget_lock_release_recursive>
 801340e:	e7dd      	b.n	80133cc <_fflush_r+0xc>

08013410 <fiprintf>:
 8013410:	b40e      	push	{r1, r2, r3}
 8013412:	b503      	push	{r0, r1, lr}
 8013414:	4601      	mov	r1, r0
 8013416:	ab03      	add	r3, sp, #12
 8013418:	4805      	ldr	r0, [pc, #20]	@ (8013430 <fiprintf+0x20>)
 801341a:	f853 2b04 	ldr.w	r2, [r3], #4
 801341e:	6800      	ldr	r0, [r0, #0]
 8013420:	9301      	str	r3, [sp, #4]
 8013422:	f7ff fe31 	bl	8013088 <_vfiprintf_r>
 8013426:	b002      	add	sp, #8
 8013428:	f85d eb04 	ldr.w	lr, [sp], #4
 801342c:	b003      	add	sp, #12
 801342e:	4770      	bx	lr
 8013430:	20000248 	.word	0x20000248

08013434 <__swbuf_r>:
 8013434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013436:	460e      	mov	r6, r1
 8013438:	4614      	mov	r4, r2
 801343a:	4605      	mov	r5, r0
 801343c:	b118      	cbz	r0, 8013446 <__swbuf_r+0x12>
 801343e:	6a03      	ldr	r3, [r0, #32]
 8013440:	b90b      	cbnz	r3, 8013446 <__swbuf_r+0x12>
 8013442:	f7fd f89b 	bl	801057c <__sinit>
 8013446:	69a3      	ldr	r3, [r4, #24]
 8013448:	60a3      	str	r3, [r4, #8]
 801344a:	89a3      	ldrh	r3, [r4, #12]
 801344c:	071a      	lsls	r2, r3, #28
 801344e:	d501      	bpl.n	8013454 <__swbuf_r+0x20>
 8013450:	6923      	ldr	r3, [r4, #16]
 8013452:	b943      	cbnz	r3, 8013466 <__swbuf_r+0x32>
 8013454:	4621      	mov	r1, r4
 8013456:	4628      	mov	r0, r5
 8013458:	f000 f82a 	bl	80134b0 <__swsetup_r>
 801345c:	b118      	cbz	r0, 8013466 <__swbuf_r+0x32>
 801345e:	f04f 37ff 	mov.w	r7, #4294967295
 8013462:	4638      	mov	r0, r7
 8013464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013466:	6823      	ldr	r3, [r4, #0]
 8013468:	6922      	ldr	r2, [r4, #16]
 801346a:	1a98      	subs	r0, r3, r2
 801346c:	6963      	ldr	r3, [r4, #20]
 801346e:	b2f6      	uxtb	r6, r6
 8013470:	4283      	cmp	r3, r0
 8013472:	4637      	mov	r7, r6
 8013474:	dc05      	bgt.n	8013482 <__swbuf_r+0x4e>
 8013476:	4621      	mov	r1, r4
 8013478:	4628      	mov	r0, r5
 801347a:	f7ff ffa1 	bl	80133c0 <_fflush_r>
 801347e:	2800      	cmp	r0, #0
 8013480:	d1ed      	bne.n	801345e <__swbuf_r+0x2a>
 8013482:	68a3      	ldr	r3, [r4, #8]
 8013484:	3b01      	subs	r3, #1
 8013486:	60a3      	str	r3, [r4, #8]
 8013488:	6823      	ldr	r3, [r4, #0]
 801348a:	1c5a      	adds	r2, r3, #1
 801348c:	6022      	str	r2, [r4, #0]
 801348e:	701e      	strb	r6, [r3, #0]
 8013490:	6962      	ldr	r2, [r4, #20]
 8013492:	1c43      	adds	r3, r0, #1
 8013494:	429a      	cmp	r2, r3
 8013496:	d004      	beq.n	80134a2 <__swbuf_r+0x6e>
 8013498:	89a3      	ldrh	r3, [r4, #12]
 801349a:	07db      	lsls	r3, r3, #31
 801349c:	d5e1      	bpl.n	8013462 <__swbuf_r+0x2e>
 801349e:	2e0a      	cmp	r6, #10
 80134a0:	d1df      	bne.n	8013462 <__swbuf_r+0x2e>
 80134a2:	4621      	mov	r1, r4
 80134a4:	4628      	mov	r0, r5
 80134a6:	f7ff ff8b 	bl	80133c0 <_fflush_r>
 80134aa:	2800      	cmp	r0, #0
 80134ac:	d0d9      	beq.n	8013462 <__swbuf_r+0x2e>
 80134ae:	e7d6      	b.n	801345e <__swbuf_r+0x2a>

080134b0 <__swsetup_r>:
 80134b0:	b538      	push	{r3, r4, r5, lr}
 80134b2:	4b29      	ldr	r3, [pc, #164]	@ (8013558 <__swsetup_r+0xa8>)
 80134b4:	4605      	mov	r5, r0
 80134b6:	6818      	ldr	r0, [r3, #0]
 80134b8:	460c      	mov	r4, r1
 80134ba:	b118      	cbz	r0, 80134c4 <__swsetup_r+0x14>
 80134bc:	6a03      	ldr	r3, [r0, #32]
 80134be:	b90b      	cbnz	r3, 80134c4 <__swsetup_r+0x14>
 80134c0:	f7fd f85c 	bl	801057c <__sinit>
 80134c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134c8:	0719      	lsls	r1, r3, #28
 80134ca:	d422      	bmi.n	8013512 <__swsetup_r+0x62>
 80134cc:	06da      	lsls	r2, r3, #27
 80134ce:	d407      	bmi.n	80134e0 <__swsetup_r+0x30>
 80134d0:	2209      	movs	r2, #9
 80134d2:	602a      	str	r2, [r5, #0]
 80134d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134d8:	81a3      	strh	r3, [r4, #12]
 80134da:	f04f 30ff 	mov.w	r0, #4294967295
 80134de:	e033      	b.n	8013548 <__swsetup_r+0x98>
 80134e0:	0758      	lsls	r0, r3, #29
 80134e2:	d512      	bpl.n	801350a <__swsetup_r+0x5a>
 80134e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80134e6:	b141      	cbz	r1, 80134fa <__swsetup_r+0x4a>
 80134e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80134ec:	4299      	cmp	r1, r3
 80134ee:	d002      	beq.n	80134f6 <__swsetup_r+0x46>
 80134f0:	4628      	mov	r0, r5
 80134f2:	f7fe f88d 	bl	8011610 <_free_r>
 80134f6:	2300      	movs	r3, #0
 80134f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80134fa:	89a3      	ldrh	r3, [r4, #12]
 80134fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013500:	81a3      	strh	r3, [r4, #12]
 8013502:	2300      	movs	r3, #0
 8013504:	6063      	str	r3, [r4, #4]
 8013506:	6923      	ldr	r3, [r4, #16]
 8013508:	6023      	str	r3, [r4, #0]
 801350a:	89a3      	ldrh	r3, [r4, #12]
 801350c:	f043 0308 	orr.w	r3, r3, #8
 8013510:	81a3      	strh	r3, [r4, #12]
 8013512:	6923      	ldr	r3, [r4, #16]
 8013514:	b94b      	cbnz	r3, 801352a <__swsetup_r+0x7a>
 8013516:	89a3      	ldrh	r3, [r4, #12]
 8013518:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801351c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013520:	d003      	beq.n	801352a <__swsetup_r+0x7a>
 8013522:	4621      	mov	r1, r4
 8013524:	4628      	mov	r0, r5
 8013526:	f000 fc25 	bl	8013d74 <__smakebuf_r>
 801352a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801352e:	f013 0201 	ands.w	r2, r3, #1
 8013532:	d00a      	beq.n	801354a <__swsetup_r+0x9a>
 8013534:	2200      	movs	r2, #0
 8013536:	60a2      	str	r2, [r4, #8]
 8013538:	6962      	ldr	r2, [r4, #20]
 801353a:	4252      	negs	r2, r2
 801353c:	61a2      	str	r2, [r4, #24]
 801353e:	6922      	ldr	r2, [r4, #16]
 8013540:	b942      	cbnz	r2, 8013554 <__swsetup_r+0xa4>
 8013542:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013546:	d1c5      	bne.n	80134d4 <__swsetup_r+0x24>
 8013548:	bd38      	pop	{r3, r4, r5, pc}
 801354a:	0799      	lsls	r1, r3, #30
 801354c:	bf58      	it	pl
 801354e:	6962      	ldrpl	r2, [r4, #20]
 8013550:	60a2      	str	r2, [r4, #8]
 8013552:	e7f4      	b.n	801353e <__swsetup_r+0x8e>
 8013554:	2000      	movs	r0, #0
 8013556:	e7f7      	b.n	8013548 <__swsetup_r+0x98>
 8013558:	20000248 	.word	0x20000248

0801355c <memmove>:
 801355c:	4288      	cmp	r0, r1
 801355e:	b510      	push	{r4, lr}
 8013560:	eb01 0402 	add.w	r4, r1, r2
 8013564:	d902      	bls.n	801356c <memmove+0x10>
 8013566:	4284      	cmp	r4, r0
 8013568:	4623      	mov	r3, r4
 801356a:	d807      	bhi.n	801357c <memmove+0x20>
 801356c:	1e43      	subs	r3, r0, #1
 801356e:	42a1      	cmp	r1, r4
 8013570:	d008      	beq.n	8013584 <memmove+0x28>
 8013572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013576:	f803 2f01 	strb.w	r2, [r3, #1]!
 801357a:	e7f8      	b.n	801356e <memmove+0x12>
 801357c:	4402      	add	r2, r0
 801357e:	4601      	mov	r1, r0
 8013580:	428a      	cmp	r2, r1
 8013582:	d100      	bne.n	8013586 <memmove+0x2a>
 8013584:	bd10      	pop	{r4, pc}
 8013586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801358a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801358e:	e7f7      	b.n	8013580 <memmove+0x24>

08013590 <strncmp>:
 8013590:	b510      	push	{r4, lr}
 8013592:	b16a      	cbz	r2, 80135b0 <strncmp+0x20>
 8013594:	3901      	subs	r1, #1
 8013596:	1884      	adds	r4, r0, r2
 8013598:	f810 2b01 	ldrb.w	r2, [r0], #1
 801359c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d103      	bne.n	80135ac <strncmp+0x1c>
 80135a4:	42a0      	cmp	r0, r4
 80135a6:	d001      	beq.n	80135ac <strncmp+0x1c>
 80135a8:	2a00      	cmp	r2, #0
 80135aa:	d1f5      	bne.n	8013598 <strncmp+0x8>
 80135ac:	1ad0      	subs	r0, r2, r3
 80135ae:	bd10      	pop	{r4, pc}
 80135b0:	4610      	mov	r0, r2
 80135b2:	e7fc      	b.n	80135ae <strncmp+0x1e>

080135b4 <_sbrk_r>:
 80135b4:	b538      	push	{r3, r4, r5, lr}
 80135b6:	4d06      	ldr	r5, [pc, #24]	@ (80135d0 <_sbrk_r+0x1c>)
 80135b8:	2300      	movs	r3, #0
 80135ba:	4604      	mov	r4, r0
 80135bc:	4608      	mov	r0, r1
 80135be:	602b      	str	r3, [r5, #0]
 80135c0:	f7ee f86e 	bl	80016a0 <_sbrk>
 80135c4:	1c43      	adds	r3, r0, #1
 80135c6:	d102      	bne.n	80135ce <_sbrk_r+0x1a>
 80135c8:	682b      	ldr	r3, [r5, #0]
 80135ca:	b103      	cbz	r3, 80135ce <_sbrk_r+0x1a>
 80135cc:	6023      	str	r3, [r4, #0]
 80135ce:	bd38      	pop	{r3, r4, r5, pc}
 80135d0:	200023a0 	.word	0x200023a0
 80135d4:	00000000 	.word	0x00000000

080135d8 <nan>:
 80135d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80135e0 <nan+0x8>
 80135dc:	4770      	bx	lr
 80135de:	bf00      	nop
 80135e0:	00000000 	.word	0x00000000
 80135e4:	7ff80000 	.word	0x7ff80000

080135e8 <abort>:
 80135e8:	b508      	push	{r3, lr}
 80135ea:	2006      	movs	r0, #6
 80135ec:	f000 fc26 	bl	8013e3c <raise>
 80135f0:	2001      	movs	r0, #1
 80135f2:	f7ed fff9 	bl	80015e8 <_exit>

080135f6 <_calloc_r>:
 80135f6:	b570      	push	{r4, r5, r6, lr}
 80135f8:	fba1 5402 	umull	r5, r4, r1, r2
 80135fc:	b93c      	cbnz	r4, 801360e <_calloc_r+0x18>
 80135fe:	4629      	mov	r1, r5
 8013600:	f7fe f87a 	bl	80116f8 <_malloc_r>
 8013604:	4606      	mov	r6, r0
 8013606:	b928      	cbnz	r0, 8013614 <_calloc_r+0x1e>
 8013608:	2600      	movs	r6, #0
 801360a:	4630      	mov	r0, r6
 801360c:	bd70      	pop	{r4, r5, r6, pc}
 801360e:	220c      	movs	r2, #12
 8013610:	6002      	str	r2, [r0, #0]
 8013612:	e7f9      	b.n	8013608 <_calloc_r+0x12>
 8013614:	462a      	mov	r2, r5
 8013616:	4621      	mov	r1, r4
 8013618:	f7fd f882 	bl	8010720 <memset>
 801361c:	e7f5      	b.n	801360a <_calloc_r+0x14>

0801361e <rshift>:
 801361e:	6903      	ldr	r3, [r0, #16]
 8013620:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013628:	ea4f 1261 	mov.w	r2, r1, asr #5
 801362c:	f100 0414 	add.w	r4, r0, #20
 8013630:	dd45      	ble.n	80136be <rshift+0xa0>
 8013632:	f011 011f 	ands.w	r1, r1, #31
 8013636:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801363a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801363e:	d10c      	bne.n	801365a <rshift+0x3c>
 8013640:	f100 0710 	add.w	r7, r0, #16
 8013644:	4629      	mov	r1, r5
 8013646:	42b1      	cmp	r1, r6
 8013648:	d334      	bcc.n	80136b4 <rshift+0x96>
 801364a:	1a9b      	subs	r3, r3, r2
 801364c:	009b      	lsls	r3, r3, #2
 801364e:	1eea      	subs	r2, r5, #3
 8013650:	4296      	cmp	r6, r2
 8013652:	bf38      	it	cc
 8013654:	2300      	movcc	r3, #0
 8013656:	4423      	add	r3, r4
 8013658:	e015      	b.n	8013686 <rshift+0x68>
 801365a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801365e:	f1c1 0820 	rsb	r8, r1, #32
 8013662:	40cf      	lsrs	r7, r1
 8013664:	f105 0e04 	add.w	lr, r5, #4
 8013668:	46a1      	mov	r9, r4
 801366a:	4576      	cmp	r6, lr
 801366c:	46f4      	mov	ip, lr
 801366e:	d815      	bhi.n	801369c <rshift+0x7e>
 8013670:	1a9a      	subs	r2, r3, r2
 8013672:	0092      	lsls	r2, r2, #2
 8013674:	3a04      	subs	r2, #4
 8013676:	3501      	adds	r5, #1
 8013678:	42ae      	cmp	r6, r5
 801367a:	bf38      	it	cc
 801367c:	2200      	movcc	r2, #0
 801367e:	18a3      	adds	r3, r4, r2
 8013680:	50a7      	str	r7, [r4, r2]
 8013682:	b107      	cbz	r7, 8013686 <rshift+0x68>
 8013684:	3304      	adds	r3, #4
 8013686:	1b1a      	subs	r2, r3, r4
 8013688:	42a3      	cmp	r3, r4
 801368a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801368e:	bf08      	it	eq
 8013690:	2300      	moveq	r3, #0
 8013692:	6102      	str	r2, [r0, #16]
 8013694:	bf08      	it	eq
 8013696:	6143      	streq	r3, [r0, #20]
 8013698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801369c:	f8dc c000 	ldr.w	ip, [ip]
 80136a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80136a4:	ea4c 0707 	orr.w	r7, ip, r7
 80136a8:	f849 7b04 	str.w	r7, [r9], #4
 80136ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80136b0:	40cf      	lsrs	r7, r1
 80136b2:	e7da      	b.n	801366a <rshift+0x4c>
 80136b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80136b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80136bc:	e7c3      	b.n	8013646 <rshift+0x28>
 80136be:	4623      	mov	r3, r4
 80136c0:	e7e1      	b.n	8013686 <rshift+0x68>

080136c2 <__hexdig_fun>:
 80136c2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80136c6:	2b09      	cmp	r3, #9
 80136c8:	d802      	bhi.n	80136d0 <__hexdig_fun+0xe>
 80136ca:	3820      	subs	r0, #32
 80136cc:	b2c0      	uxtb	r0, r0
 80136ce:	4770      	bx	lr
 80136d0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80136d4:	2b05      	cmp	r3, #5
 80136d6:	d801      	bhi.n	80136dc <__hexdig_fun+0x1a>
 80136d8:	3847      	subs	r0, #71	@ 0x47
 80136da:	e7f7      	b.n	80136cc <__hexdig_fun+0xa>
 80136dc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80136e0:	2b05      	cmp	r3, #5
 80136e2:	d801      	bhi.n	80136e8 <__hexdig_fun+0x26>
 80136e4:	3827      	subs	r0, #39	@ 0x27
 80136e6:	e7f1      	b.n	80136cc <__hexdig_fun+0xa>
 80136e8:	2000      	movs	r0, #0
 80136ea:	4770      	bx	lr

080136ec <__gethex>:
 80136ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f0:	b085      	sub	sp, #20
 80136f2:	468a      	mov	sl, r1
 80136f4:	9302      	str	r3, [sp, #8]
 80136f6:	680b      	ldr	r3, [r1, #0]
 80136f8:	9001      	str	r0, [sp, #4]
 80136fa:	4690      	mov	r8, r2
 80136fc:	1c9c      	adds	r4, r3, #2
 80136fe:	46a1      	mov	r9, r4
 8013700:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013704:	2830      	cmp	r0, #48	@ 0x30
 8013706:	d0fa      	beq.n	80136fe <__gethex+0x12>
 8013708:	eba9 0303 	sub.w	r3, r9, r3
 801370c:	f1a3 0b02 	sub.w	fp, r3, #2
 8013710:	f7ff ffd7 	bl	80136c2 <__hexdig_fun>
 8013714:	4605      	mov	r5, r0
 8013716:	2800      	cmp	r0, #0
 8013718:	d168      	bne.n	80137ec <__gethex+0x100>
 801371a:	49a0      	ldr	r1, [pc, #640]	@ (801399c <__gethex+0x2b0>)
 801371c:	2201      	movs	r2, #1
 801371e:	4648      	mov	r0, r9
 8013720:	f7ff ff36 	bl	8013590 <strncmp>
 8013724:	4607      	mov	r7, r0
 8013726:	2800      	cmp	r0, #0
 8013728:	d167      	bne.n	80137fa <__gethex+0x10e>
 801372a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801372e:	4626      	mov	r6, r4
 8013730:	f7ff ffc7 	bl	80136c2 <__hexdig_fun>
 8013734:	2800      	cmp	r0, #0
 8013736:	d062      	beq.n	80137fe <__gethex+0x112>
 8013738:	4623      	mov	r3, r4
 801373a:	7818      	ldrb	r0, [r3, #0]
 801373c:	2830      	cmp	r0, #48	@ 0x30
 801373e:	4699      	mov	r9, r3
 8013740:	f103 0301 	add.w	r3, r3, #1
 8013744:	d0f9      	beq.n	801373a <__gethex+0x4e>
 8013746:	f7ff ffbc 	bl	80136c2 <__hexdig_fun>
 801374a:	fab0 f580 	clz	r5, r0
 801374e:	096d      	lsrs	r5, r5, #5
 8013750:	f04f 0b01 	mov.w	fp, #1
 8013754:	464a      	mov	r2, r9
 8013756:	4616      	mov	r6, r2
 8013758:	3201      	adds	r2, #1
 801375a:	7830      	ldrb	r0, [r6, #0]
 801375c:	f7ff ffb1 	bl	80136c2 <__hexdig_fun>
 8013760:	2800      	cmp	r0, #0
 8013762:	d1f8      	bne.n	8013756 <__gethex+0x6a>
 8013764:	498d      	ldr	r1, [pc, #564]	@ (801399c <__gethex+0x2b0>)
 8013766:	2201      	movs	r2, #1
 8013768:	4630      	mov	r0, r6
 801376a:	f7ff ff11 	bl	8013590 <strncmp>
 801376e:	2800      	cmp	r0, #0
 8013770:	d13f      	bne.n	80137f2 <__gethex+0x106>
 8013772:	b944      	cbnz	r4, 8013786 <__gethex+0x9a>
 8013774:	1c74      	adds	r4, r6, #1
 8013776:	4622      	mov	r2, r4
 8013778:	4616      	mov	r6, r2
 801377a:	3201      	adds	r2, #1
 801377c:	7830      	ldrb	r0, [r6, #0]
 801377e:	f7ff ffa0 	bl	80136c2 <__hexdig_fun>
 8013782:	2800      	cmp	r0, #0
 8013784:	d1f8      	bne.n	8013778 <__gethex+0x8c>
 8013786:	1ba4      	subs	r4, r4, r6
 8013788:	00a7      	lsls	r7, r4, #2
 801378a:	7833      	ldrb	r3, [r6, #0]
 801378c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013790:	2b50      	cmp	r3, #80	@ 0x50
 8013792:	d13e      	bne.n	8013812 <__gethex+0x126>
 8013794:	7873      	ldrb	r3, [r6, #1]
 8013796:	2b2b      	cmp	r3, #43	@ 0x2b
 8013798:	d033      	beq.n	8013802 <__gethex+0x116>
 801379a:	2b2d      	cmp	r3, #45	@ 0x2d
 801379c:	d034      	beq.n	8013808 <__gethex+0x11c>
 801379e:	1c71      	adds	r1, r6, #1
 80137a0:	2400      	movs	r4, #0
 80137a2:	7808      	ldrb	r0, [r1, #0]
 80137a4:	f7ff ff8d 	bl	80136c2 <__hexdig_fun>
 80137a8:	1e43      	subs	r3, r0, #1
 80137aa:	b2db      	uxtb	r3, r3
 80137ac:	2b18      	cmp	r3, #24
 80137ae:	d830      	bhi.n	8013812 <__gethex+0x126>
 80137b0:	f1a0 0210 	sub.w	r2, r0, #16
 80137b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80137b8:	f7ff ff83 	bl	80136c2 <__hexdig_fun>
 80137bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80137c0:	fa5f fc8c 	uxtb.w	ip, ip
 80137c4:	f1bc 0f18 	cmp.w	ip, #24
 80137c8:	f04f 030a 	mov.w	r3, #10
 80137cc:	d91e      	bls.n	801380c <__gethex+0x120>
 80137ce:	b104      	cbz	r4, 80137d2 <__gethex+0xe6>
 80137d0:	4252      	negs	r2, r2
 80137d2:	4417      	add	r7, r2
 80137d4:	f8ca 1000 	str.w	r1, [sl]
 80137d8:	b1ed      	cbz	r5, 8013816 <__gethex+0x12a>
 80137da:	f1bb 0f00 	cmp.w	fp, #0
 80137de:	bf0c      	ite	eq
 80137e0:	2506      	moveq	r5, #6
 80137e2:	2500      	movne	r5, #0
 80137e4:	4628      	mov	r0, r5
 80137e6:	b005      	add	sp, #20
 80137e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ec:	2500      	movs	r5, #0
 80137ee:	462c      	mov	r4, r5
 80137f0:	e7b0      	b.n	8013754 <__gethex+0x68>
 80137f2:	2c00      	cmp	r4, #0
 80137f4:	d1c7      	bne.n	8013786 <__gethex+0x9a>
 80137f6:	4627      	mov	r7, r4
 80137f8:	e7c7      	b.n	801378a <__gethex+0x9e>
 80137fa:	464e      	mov	r6, r9
 80137fc:	462f      	mov	r7, r5
 80137fe:	2501      	movs	r5, #1
 8013800:	e7c3      	b.n	801378a <__gethex+0x9e>
 8013802:	2400      	movs	r4, #0
 8013804:	1cb1      	adds	r1, r6, #2
 8013806:	e7cc      	b.n	80137a2 <__gethex+0xb6>
 8013808:	2401      	movs	r4, #1
 801380a:	e7fb      	b.n	8013804 <__gethex+0x118>
 801380c:	fb03 0002 	mla	r0, r3, r2, r0
 8013810:	e7ce      	b.n	80137b0 <__gethex+0xc4>
 8013812:	4631      	mov	r1, r6
 8013814:	e7de      	b.n	80137d4 <__gethex+0xe8>
 8013816:	eba6 0309 	sub.w	r3, r6, r9
 801381a:	3b01      	subs	r3, #1
 801381c:	4629      	mov	r1, r5
 801381e:	2b07      	cmp	r3, #7
 8013820:	dc0a      	bgt.n	8013838 <__gethex+0x14c>
 8013822:	9801      	ldr	r0, [sp, #4]
 8013824:	f7fd fff4 	bl	8011810 <_Balloc>
 8013828:	4604      	mov	r4, r0
 801382a:	b940      	cbnz	r0, 801383e <__gethex+0x152>
 801382c:	4b5c      	ldr	r3, [pc, #368]	@ (80139a0 <__gethex+0x2b4>)
 801382e:	4602      	mov	r2, r0
 8013830:	21e4      	movs	r1, #228	@ 0xe4
 8013832:	485c      	ldr	r0, [pc, #368]	@ (80139a4 <__gethex+0x2b8>)
 8013834:	f7fd f882 	bl	801093c <__assert_func>
 8013838:	3101      	adds	r1, #1
 801383a:	105b      	asrs	r3, r3, #1
 801383c:	e7ef      	b.n	801381e <__gethex+0x132>
 801383e:	f100 0a14 	add.w	sl, r0, #20
 8013842:	2300      	movs	r3, #0
 8013844:	4655      	mov	r5, sl
 8013846:	469b      	mov	fp, r3
 8013848:	45b1      	cmp	r9, r6
 801384a:	d337      	bcc.n	80138bc <__gethex+0x1d0>
 801384c:	f845 bb04 	str.w	fp, [r5], #4
 8013850:	eba5 050a 	sub.w	r5, r5, sl
 8013854:	10ad      	asrs	r5, r5, #2
 8013856:	6125      	str	r5, [r4, #16]
 8013858:	4658      	mov	r0, fp
 801385a:	f7fe f8cb 	bl	80119f4 <__hi0bits>
 801385e:	016d      	lsls	r5, r5, #5
 8013860:	f8d8 6000 	ldr.w	r6, [r8]
 8013864:	1a2d      	subs	r5, r5, r0
 8013866:	42b5      	cmp	r5, r6
 8013868:	dd54      	ble.n	8013914 <__gethex+0x228>
 801386a:	1bad      	subs	r5, r5, r6
 801386c:	4629      	mov	r1, r5
 801386e:	4620      	mov	r0, r4
 8013870:	f7fe fc5f 	bl	8012132 <__any_on>
 8013874:	4681      	mov	r9, r0
 8013876:	b178      	cbz	r0, 8013898 <__gethex+0x1ac>
 8013878:	1e6b      	subs	r3, r5, #1
 801387a:	1159      	asrs	r1, r3, #5
 801387c:	f003 021f 	and.w	r2, r3, #31
 8013880:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013884:	f04f 0901 	mov.w	r9, #1
 8013888:	fa09 f202 	lsl.w	r2, r9, r2
 801388c:	420a      	tst	r2, r1
 801388e:	d003      	beq.n	8013898 <__gethex+0x1ac>
 8013890:	454b      	cmp	r3, r9
 8013892:	dc36      	bgt.n	8013902 <__gethex+0x216>
 8013894:	f04f 0902 	mov.w	r9, #2
 8013898:	4629      	mov	r1, r5
 801389a:	4620      	mov	r0, r4
 801389c:	f7ff febf 	bl	801361e <rshift>
 80138a0:	442f      	add	r7, r5
 80138a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80138a6:	42bb      	cmp	r3, r7
 80138a8:	da42      	bge.n	8013930 <__gethex+0x244>
 80138aa:	9801      	ldr	r0, [sp, #4]
 80138ac:	4621      	mov	r1, r4
 80138ae:	f7fd ffef 	bl	8011890 <_Bfree>
 80138b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138b4:	2300      	movs	r3, #0
 80138b6:	6013      	str	r3, [r2, #0]
 80138b8:	25a3      	movs	r5, #163	@ 0xa3
 80138ba:	e793      	b.n	80137e4 <__gethex+0xf8>
 80138bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80138c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80138c2:	d012      	beq.n	80138ea <__gethex+0x1fe>
 80138c4:	2b20      	cmp	r3, #32
 80138c6:	d104      	bne.n	80138d2 <__gethex+0x1e6>
 80138c8:	f845 bb04 	str.w	fp, [r5], #4
 80138cc:	f04f 0b00 	mov.w	fp, #0
 80138d0:	465b      	mov	r3, fp
 80138d2:	7830      	ldrb	r0, [r6, #0]
 80138d4:	9303      	str	r3, [sp, #12]
 80138d6:	f7ff fef4 	bl	80136c2 <__hexdig_fun>
 80138da:	9b03      	ldr	r3, [sp, #12]
 80138dc:	f000 000f 	and.w	r0, r0, #15
 80138e0:	4098      	lsls	r0, r3
 80138e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80138e6:	3304      	adds	r3, #4
 80138e8:	e7ae      	b.n	8013848 <__gethex+0x15c>
 80138ea:	45b1      	cmp	r9, r6
 80138ec:	d8ea      	bhi.n	80138c4 <__gethex+0x1d8>
 80138ee:	492b      	ldr	r1, [pc, #172]	@ (801399c <__gethex+0x2b0>)
 80138f0:	9303      	str	r3, [sp, #12]
 80138f2:	2201      	movs	r2, #1
 80138f4:	4630      	mov	r0, r6
 80138f6:	f7ff fe4b 	bl	8013590 <strncmp>
 80138fa:	9b03      	ldr	r3, [sp, #12]
 80138fc:	2800      	cmp	r0, #0
 80138fe:	d1e1      	bne.n	80138c4 <__gethex+0x1d8>
 8013900:	e7a2      	b.n	8013848 <__gethex+0x15c>
 8013902:	1ea9      	subs	r1, r5, #2
 8013904:	4620      	mov	r0, r4
 8013906:	f7fe fc14 	bl	8012132 <__any_on>
 801390a:	2800      	cmp	r0, #0
 801390c:	d0c2      	beq.n	8013894 <__gethex+0x1a8>
 801390e:	f04f 0903 	mov.w	r9, #3
 8013912:	e7c1      	b.n	8013898 <__gethex+0x1ac>
 8013914:	da09      	bge.n	801392a <__gethex+0x23e>
 8013916:	1b75      	subs	r5, r6, r5
 8013918:	4621      	mov	r1, r4
 801391a:	9801      	ldr	r0, [sp, #4]
 801391c:	462a      	mov	r2, r5
 801391e:	f7fe f9cf 	bl	8011cc0 <__lshift>
 8013922:	1b7f      	subs	r7, r7, r5
 8013924:	4604      	mov	r4, r0
 8013926:	f100 0a14 	add.w	sl, r0, #20
 801392a:	f04f 0900 	mov.w	r9, #0
 801392e:	e7b8      	b.n	80138a2 <__gethex+0x1b6>
 8013930:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013934:	42bd      	cmp	r5, r7
 8013936:	dd6f      	ble.n	8013a18 <__gethex+0x32c>
 8013938:	1bed      	subs	r5, r5, r7
 801393a:	42ae      	cmp	r6, r5
 801393c:	dc34      	bgt.n	80139a8 <__gethex+0x2bc>
 801393e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013942:	2b02      	cmp	r3, #2
 8013944:	d022      	beq.n	801398c <__gethex+0x2a0>
 8013946:	2b03      	cmp	r3, #3
 8013948:	d024      	beq.n	8013994 <__gethex+0x2a8>
 801394a:	2b01      	cmp	r3, #1
 801394c:	d115      	bne.n	801397a <__gethex+0x28e>
 801394e:	42ae      	cmp	r6, r5
 8013950:	d113      	bne.n	801397a <__gethex+0x28e>
 8013952:	2e01      	cmp	r6, #1
 8013954:	d10b      	bne.n	801396e <__gethex+0x282>
 8013956:	9a02      	ldr	r2, [sp, #8]
 8013958:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801395c:	6013      	str	r3, [r2, #0]
 801395e:	2301      	movs	r3, #1
 8013960:	6123      	str	r3, [r4, #16]
 8013962:	f8ca 3000 	str.w	r3, [sl]
 8013966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013968:	2562      	movs	r5, #98	@ 0x62
 801396a:	601c      	str	r4, [r3, #0]
 801396c:	e73a      	b.n	80137e4 <__gethex+0xf8>
 801396e:	1e71      	subs	r1, r6, #1
 8013970:	4620      	mov	r0, r4
 8013972:	f7fe fbde 	bl	8012132 <__any_on>
 8013976:	2800      	cmp	r0, #0
 8013978:	d1ed      	bne.n	8013956 <__gethex+0x26a>
 801397a:	9801      	ldr	r0, [sp, #4]
 801397c:	4621      	mov	r1, r4
 801397e:	f7fd ff87 	bl	8011890 <_Bfree>
 8013982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013984:	2300      	movs	r3, #0
 8013986:	6013      	str	r3, [r2, #0]
 8013988:	2550      	movs	r5, #80	@ 0x50
 801398a:	e72b      	b.n	80137e4 <__gethex+0xf8>
 801398c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801398e:	2b00      	cmp	r3, #0
 8013990:	d1f3      	bne.n	801397a <__gethex+0x28e>
 8013992:	e7e0      	b.n	8013956 <__gethex+0x26a>
 8013994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013996:	2b00      	cmp	r3, #0
 8013998:	d1dd      	bne.n	8013956 <__gethex+0x26a>
 801399a:	e7ee      	b.n	801397a <__gethex+0x28e>
 801399c:	080149c8 	.word	0x080149c8
 80139a0:	0801485c 	.word	0x0801485c
 80139a4:	08014a39 	.word	0x08014a39
 80139a8:	1e6f      	subs	r7, r5, #1
 80139aa:	f1b9 0f00 	cmp.w	r9, #0
 80139ae:	d130      	bne.n	8013a12 <__gethex+0x326>
 80139b0:	b127      	cbz	r7, 80139bc <__gethex+0x2d0>
 80139b2:	4639      	mov	r1, r7
 80139b4:	4620      	mov	r0, r4
 80139b6:	f7fe fbbc 	bl	8012132 <__any_on>
 80139ba:	4681      	mov	r9, r0
 80139bc:	117a      	asrs	r2, r7, #5
 80139be:	2301      	movs	r3, #1
 80139c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80139c4:	f007 071f 	and.w	r7, r7, #31
 80139c8:	40bb      	lsls	r3, r7
 80139ca:	4213      	tst	r3, r2
 80139cc:	4629      	mov	r1, r5
 80139ce:	4620      	mov	r0, r4
 80139d0:	bf18      	it	ne
 80139d2:	f049 0902 	orrne.w	r9, r9, #2
 80139d6:	f7ff fe22 	bl	801361e <rshift>
 80139da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80139de:	1b76      	subs	r6, r6, r5
 80139e0:	2502      	movs	r5, #2
 80139e2:	f1b9 0f00 	cmp.w	r9, #0
 80139e6:	d047      	beq.n	8013a78 <__gethex+0x38c>
 80139e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80139ec:	2b02      	cmp	r3, #2
 80139ee:	d015      	beq.n	8013a1c <__gethex+0x330>
 80139f0:	2b03      	cmp	r3, #3
 80139f2:	d017      	beq.n	8013a24 <__gethex+0x338>
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d109      	bne.n	8013a0c <__gethex+0x320>
 80139f8:	f019 0f02 	tst.w	r9, #2
 80139fc:	d006      	beq.n	8013a0c <__gethex+0x320>
 80139fe:	f8da 3000 	ldr.w	r3, [sl]
 8013a02:	ea49 0903 	orr.w	r9, r9, r3
 8013a06:	f019 0f01 	tst.w	r9, #1
 8013a0a:	d10e      	bne.n	8013a2a <__gethex+0x33e>
 8013a0c:	f045 0510 	orr.w	r5, r5, #16
 8013a10:	e032      	b.n	8013a78 <__gethex+0x38c>
 8013a12:	f04f 0901 	mov.w	r9, #1
 8013a16:	e7d1      	b.n	80139bc <__gethex+0x2d0>
 8013a18:	2501      	movs	r5, #1
 8013a1a:	e7e2      	b.n	80139e2 <__gethex+0x2f6>
 8013a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a1e:	f1c3 0301 	rsb	r3, r3, #1
 8013a22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d0f0      	beq.n	8013a0c <__gethex+0x320>
 8013a2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013a2e:	f104 0314 	add.w	r3, r4, #20
 8013a32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013a36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013a3a:	f04f 0c00 	mov.w	ip, #0
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013a48:	d01b      	beq.n	8013a82 <__gethex+0x396>
 8013a4a:	3201      	adds	r2, #1
 8013a4c:	6002      	str	r2, [r0, #0]
 8013a4e:	2d02      	cmp	r5, #2
 8013a50:	f104 0314 	add.w	r3, r4, #20
 8013a54:	d13c      	bne.n	8013ad0 <__gethex+0x3e4>
 8013a56:	f8d8 2000 	ldr.w	r2, [r8]
 8013a5a:	3a01      	subs	r2, #1
 8013a5c:	42b2      	cmp	r2, r6
 8013a5e:	d109      	bne.n	8013a74 <__gethex+0x388>
 8013a60:	1171      	asrs	r1, r6, #5
 8013a62:	2201      	movs	r2, #1
 8013a64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a68:	f006 061f 	and.w	r6, r6, #31
 8013a6c:	fa02 f606 	lsl.w	r6, r2, r6
 8013a70:	421e      	tst	r6, r3
 8013a72:	d13a      	bne.n	8013aea <__gethex+0x3fe>
 8013a74:	f045 0520 	orr.w	r5, r5, #32
 8013a78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a7a:	601c      	str	r4, [r3, #0]
 8013a7c:	9b02      	ldr	r3, [sp, #8]
 8013a7e:	601f      	str	r7, [r3, #0]
 8013a80:	e6b0      	b.n	80137e4 <__gethex+0xf8>
 8013a82:	4299      	cmp	r1, r3
 8013a84:	f843 cc04 	str.w	ip, [r3, #-4]
 8013a88:	d8d9      	bhi.n	8013a3e <__gethex+0x352>
 8013a8a:	68a3      	ldr	r3, [r4, #8]
 8013a8c:	459b      	cmp	fp, r3
 8013a8e:	db17      	blt.n	8013ac0 <__gethex+0x3d4>
 8013a90:	6861      	ldr	r1, [r4, #4]
 8013a92:	9801      	ldr	r0, [sp, #4]
 8013a94:	3101      	adds	r1, #1
 8013a96:	f7fd febb 	bl	8011810 <_Balloc>
 8013a9a:	4681      	mov	r9, r0
 8013a9c:	b918      	cbnz	r0, 8013aa6 <__gethex+0x3ba>
 8013a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8013b08 <__gethex+0x41c>)
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	2184      	movs	r1, #132	@ 0x84
 8013aa4:	e6c5      	b.n	8013832 <__gethex+0x146>
 8013aa6:	6922      	ldr	r2, [r4, #16]
 8013aa8:	3202      	adds	r2, #2
 8013aaa:	f104 010c 	add.w	r1, r4, #12
 8013aae:	0092      	lsls	r2, r2, #2
 8013ab0:	300c      	adds	r0, #12
 8013ab2:	f7fc ff2e 	bl	8010912 <memcpy>
 8013ab6:	4621      	mov	r1, r4
 8013ab8:	9801      	ldr	r0, [sp, #4]
 8013aba:	f7fd fee9 	bl	8011890 <_Bfree>
 8013abe:	464c      	mov	r4, r9
 8013ac0:	6923      	ldr	r3, [r4, #16]
 8013ac2:	1c5a      	adds	r2, r3, #1
 8013ac4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013ac8:	6122      	str	r2, [r4, #16]
 8013aca:	2201      	movs	r2, #1
 8013acc:	615a      	str	r2, [r3, #20]
 8013ace:	e7be      	b.n	8013a4e <__gethex+0x362>
 8013ad0:	6922      	ldr	r2, [r4, #16]
 8013ad2:	455a      	cmp	r2, fp
 8013ad4:	dd0b      	ble.n	8013aee <__gethex+0x402>
 8013ad6:	2101      	movs	r1, #1
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f7ff fda0 	bl	801361e <rshift>
 8013ade:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013ae2:	3701      	adds	r7, #1
 8013ae4:	42bb      	cmp	r3, r7
 8013ae6:	f6ff aee0 	blt.w	80138aa <__gethex+0x1be>
 8013aea:	2501      	movs	r5, #1
 8013aec:	e7c2      	b.n	8013a74 <__gethex+0x388>
 8013aee:	f016 061f 	ands.w	r6, r6, #31
 8013af2:	d0fa      	beq.n	8013aea <__gethex+0x3fe>
 8013af4:	4453      	add	r3, sl
 8013af6:	f1c6 0620 	rsb	r6, r6, #32
 8013afa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013afe:	f7fd ff79 	bl	80119f4 <__hi0bits>
 8013b02:	42b0      	cmp	r0, r6
 8013b04:	dbe7      	blt.n	8013ad6 <__gethex+0x3ea>
 8013b06:	e7f0      	b.n	8013aea <__gethex+0x3fe>
 8013b08:	0801485c 	.word	0x0801485c

08013b0c <L_shift>:
 8013b0c:	f1c2 0208 	rsb	r2, r2, #8
 8013b10:	0092      	lsls	r2, r2, #2
 8013b12:	b570      	push	{r4, r5, r6, lr}
 8013b14:	f1c2 0620 	rsb	r6, r2, #32
 8013b18:	6843      	ldr	r3, [r0, #4]
 8013b1a:	6804      	ldr	r4, [r0, #0]
 8013b1c:	fa03 f506 	lsl.w	r5, r3, r6
 8013b20:	432c      	orrs	r4, r5
 8013b22:	40d3      	lsrs	r3, r2
 8013b24:	6004      	str	r4, [r0, #0]
 8013b26:	f840 3f04 	str.w	r3, [r0, #4]!
 8013b2a:	4288      	cmp	r0, r1
 8013b2c:	d3f4      	bcc.n	8013b18 <L_shift+0xc>
 8013b2e:	bd70      	pop	{r4, r5, r6, pc}

08013b30 <__match>:
 8013b30:	b530      	push	{r4, r5, lr}
 8013b32:	6803      	ldr	r3, [r0, #0]
 8013b34:	3301      	adds	r3, #1
 8013b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b3a:	b914      	cbnz	r4, 8013b42 <__match+0x12>
 8013b3c:	6003      	str	r3, [r0, #0]
 8013b3e:	2001      	movs	r0, #1
 8013b40:	bd30      	pop	{r4, r5, pc}
 8013b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013b4a:	2d19      	cmp	r5, #25
 8013b4c:	bf98      	it	ls
 8013b4e:	3220      	addls	r2, #32
 8013b50:	42a2      	cmp	r2, r4
 8013b52:	d0f0      	beq.n	8013b36 <__match+0x6>
 8013b54:	2000      	movs	r0, #0
 8013b56:	e7f3      	b.n	8013b40 <__match+0x10>

08013b58 <__hexnan>:
 8013b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b5c:	680b      	ldr	r3, [r1, #0]
 8013b5e:	6801      	ldr	r1, [r0, #0]
 8013b60:	115e      	asrs	r6, r3, #5
 8013b62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013b66:	f013 031f 	ands.w	r3, r3, #31
 8013b6a:	b087      	sub	sp, #28
 8013b6c:	bf18      	it	ne
 8013b6e:	3604      	addne	r6, #4
 8013b70:	2500      	movs	r5, #0
 8013b72:	1f37      	subs	r7, r6, #4
 8013b74:	4682      	mov	sl, r0
 8013b76:	4690      	mov	r8, r2
 8013b78:	9301      	str	r3, [sp, #4]
 8013b7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8013b7e:	46b9      	mov	r9, r7
 8013b80:	463c      	mov	r4, r7
 8013b82:	9502      	str	r5, [sp, #8]
 8013b84:	46ab      	mov	fp, r5
 8013b86:	784a      	ldrb	r2, [r1, #1]
 8013b88:	1c4b      	adds	r3, r1, #1
 8013b8a:	9303      	str	r3, [sp, #12]
 8013b8c:	b342      	cbz	r2, 8013be0 <__hexnan+0x88>
 8013b8e:	4610      	mov	r0, r2
 8013b90:	9105      	str	r1, [sp, #20]
 8013b92:	9204      	str	r2, [sp, #16]
 8013b94:	f7ff fd95 	bl	80136c2 <__hexdig_fun>
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	d151      	bne.n	8013c40 <__hexnan+0xe8>
 8013b9c:	9a04      	ldr	r2, [sp, #16]
 8013b9e:	9905      	ldr	r1, [sp, #20]
 8013ba0:	2a20      	cmp	r2, #32
 8013ba2:	d818      	bhi.n	8013bd6 <__hexnan+0x7e>
 8013ba4:	9b02      	ldr	r3, [sp, #8]
 8013ba6:	459b      	cmp	fp, r3
 8013ba8:	dd13      	ble.n	8013bd2 <__hexnan+0x7a>
 8013baa:	454c      	cmp	r4, r9
 8013bac:	d206      	bcs.n	8013bbc <__hexnan+0x64>
 8013bae:	2d07      	cmp	r5, #7
 8013bb0:	dc04      	bgt.n	8013bbc <__hexnan+0x64>
 8013bb2:	462a      	mov	r2, r5
 8013bb4:	4649      	mov	r1, r9
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	f7ff ffa8 	bl	8013b0c <L_shift>
 8013bbc:	4544      	cmp	r4, r8
 8013bbe:	d952      	bls.n	8013c66 <__hexnan+0x10e>
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	f1a4 0904 	sub.w	r9, r4, #4
 8013bc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8013bca:	f8cd b008 	str.w	fp, [sp, #8]
 8013bce:	464c      	mov	r4, r9
 8013bd0:	461d      	mov	r5, r3
 8013bd2:	9903      	ldr	r1, [sp, #12]
 8013bd4:	e7d7      	b.n	8013b86 <__hexnan+0x2e>
 8013bd6:	2a29      	cmp	r2, #41	@ 0x29
 8013bd8:	d157      	bne.n	8013c8a <__hexnan+0x132>
 8013bda:	3102      	adds	r1, #2
 8013bdc:	f8ca 1000 	str.w	r1, [sl]
 8013be0:	f1bb 0f00 	cmp.w	fp, #0
 8013be4:	d051      	beq.n	8013c8a <__hexnan+0x132>
 8013be6:	454c      	cmp	r4, r9
 8013be8:	d206      	bcs.n	8013bf8 <__hexnan+0xa0>
 8013bea:	2d07      	cmp	r5, #7
 8013bec:	dc04      	bgt.n	8013bf8 <__hexnan+0xa0>
 8013bee:	462a      	mov	r2, r5
 8013bf0:	4649      	mov	r1, r9
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	f7ff ff8a 	bl	8013b0c <L_shift>
 8013bf8:	4544      	cmp	r4, r8
 8013bfa:	d936      	bls.n	8013c6a <__hexnan+0x112>
 8013bfc:	f1a8 0204 	sub.w	r2, r8, #4
 8013c00:	4623      	mov	r3, r4
 8013c02:	f853 1b04 	ldr.w	r1, [r3], #4
 8013c06:	f842 1f04 	str.w	r1, [r2, #4]!
 8013c0a:	429f      	cmp	r7, r3
 8013c0c:	d2f9      	bcs.n	8013c02 <__hexnan+0xaa>
 8013c0e:	1b3b      	subs	r3, r7, r4
 8013c10:	f023 0303 	bic.w	r3, r3, #3
 8013c14:	3304      	adds	r3, #4
 8013c16:	3401      	adds	r4, #1
 8013c18:	3e03      	subs	r6, #3
 8013c1a:	42b4      	cmp	r4, r6
 8013c1c:	bf88      	it	hi
 8013c1e:	2304      	movhi	r3, #4
 8013c20:	4443      	add	r3, r8
 8013c22:	2200      	movs	r2, #0
 8013c24:	f843 2b04 	str.w	r2, [r3], #4
 8013c28:	429f      	cmp	r7, r3
 8013c2a:	d2fb      	bcs.n	8013c24 <__hexnan+0xcc>
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	b91b      	cbnz	r3, 8013c38 <__hexnan+0xe0>
 8013c30:	4547      	cmp	r7, r8
 8013c32:	d128      	bne.n	8013c86 <__hexnan+0x12e>
 8013c34:	2301      	movs	r3, #1
 8013c36:	603b      	str	r3, [r7, #0]
 8013c38:	2005      	movs	r0, #5
 8013c3a:	b007      	add	sp, #28
 8013c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c40:	3501      	adds	r5, #1
 8013c42:	2d08      	cmp	r5, #8
 8013c44:	f10b 0b01 	add.w	fp, fp, #1
 8013c48:	dd06      	ble.n	8013c58 <__hexnan+0x100>
 8013c4a:	4544      	cmp	r4, r8
 8013c4c:	d9c1      	bls.n	8013bd2 <__hexnan+0x7a>
 8013c4e:	2300      	movs	r3, #0
 8013c50:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c54:	2501      	movs	r5, #1
 8013c56:	3c04      	subs	r4, #4
 8013c58:	6822      	ldr	r2, [r4, #0]
 8013c5a:	f000 000f 	and.w	r0, r0, #15
 8013c5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013c62:	6020      	str	r0, [r4, #0]
 8013c64:	e7b5      	b.n	8013bd2 <__hexnan+0x7a>
 8013c66:	2508      	movs	r5, #8
 8013c68:	e7b3      	b.n	8013bd2 <__hexnan+0x7a>
 8013c6a:	9b01      	ldr	r3, [sp, #4]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d0dd      	beq.n	8013c2c <__hexnan+0xd4>
 8013c70:	f1c3 0320 	rsb	r3, r3, #32
 8013c74:	f04f 32ff 	mov.w	r2, #4294967295
 8013c78:	40da      	lsrs	r2, r3
 8013c7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013c7e:	4013      	ands	r3, r2
 8013c80:	f846 3c04 	str.w	r3, [r6, #-4]
 8013c84:	e7d2      	b.n	8013c2c <__hexnan+0xd4>
 8013c86:	3f04      	subs	r7, #4
 8013c88:	e7d0      	b.n	8013c2c <__hexnan+0xd4>
 8013c8a:	2004      	movs	r0, #4
 8013c8c:	e7d5      	b.n	8013c3a <__hexnan+0xe2>

08013c8e <__ascii_mbtowc>:
 8013c8e:	b082      	sub	sp, #8
 8013c90:	b901      	cbnz	r1, 8013c94 <__ascii_mbtowc+0x6>
 8013c92:	a901      	add	r1, sp, #4
 8013c94:	b142      	cbz	r2, 8013ca8 <__ascii_mbtowc+0x1a>
 8013c96:	b14b      	cbz	r3, 8013cac <__ascii_mbtowc+0x1e>
 8013c98:	7813      	ldrb	r3, [r2, #0]
 8013c9a:	600b      	str	r3, [r1, #0]
 8013c9c:	7812      	ldrb	r2, [r2, #0]
 8013c9e:	1e10      	subs	r0, r2, #0
 8013ca0:	bf18      	it	ne
 8013ca2:	2001      	movne	r0, #1
 8013ca4:	b002      	add	sp, #8
 8013ca6:	4770      	bx	lr
 8013ca8:	4610      	mov	r0, r2
 8013caa:	e7fb      	b.n	8013ca4 <__ascii_mbtowc+0x16>
 8013cac:	f06f 0001 	mvn.w	r0, #1
 8013cb0:	e7f8      	b.n	8013ca4 <__ascii_mbtowc+0x16>

08013cb2 <_realloc_r>:
 8013cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb6:	4680      	mov	r8, r0
 8013cb8:	4615      	mov	r5, r2
 8013cba:	460c      	mov	r4, r1
 8013cbc:	b921      	cbnz	r1, 8013cc8 <_realloc_r+0x16>
 8013cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cc2:	4611      	mov	r1, r2
 8013cc4:	f7fd bd18 	b.w	80116f8 <_malloc_r>
 8013cc8:	b92a      	cbnz	r2, 8013cd6 <_realloc_r+0x24>
 8013cca:	f7fd fca1 	bl	8011610 <_free_r>
 8013cce:	2400      	movs	r4, #0
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd6:	f000 f8ef 	bl	8013eb8 <_malloc_usable_size_r>
 8013cda:	4285      	cmp	r5, r0
 8013cdc:	4606      	mov	r6, r0
 8013cde:	d802      	bhi.n	8013ce6 <_realloc_r+0x34>
 8013ce0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013ce4:	d8f4      	bhi.n	8013cd0 <_realloc_r+0x1e>
 8013ce6:	4629      	mov	r1, r5
 8013ce8:	4640      	mov	r0, r8
 8013cea:	f7fd fd05 	bl	80116f8 <_malloc_r>
 8013cee:	4607      	mov	r7, r0
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d0ec      	beq.n	8013cce <_realloc_r+0x1c>
 8013cf4:	42b5      	cmp	r5, r6
 8013cf6:	462a      	mov	r2, r5
 8013cf8:	4621      	mov	r1, r4
 8013cfa:	bf28      	it	cs
 8013cfc:	4632      	movcs	r2, r6
 8013cfe:	f7fc fe08 	bl	8010912 <memcpy>
 8013d02:	4621      	mov	r1, r4
 8013d04:	4640      	mov	r0, r8
 8013d06:	f7fd fc83 	bl	8011610 <_free_r>
 8013d0a:	463c      	mov	r4, r7
 8013d0c:	e7e0      	b.n	8013cd0 <_realloc_r+0x1e>

08013d0e <__ascii_wctomb>:
 8013d0e:	4603      	mov	r3, r0
 8013d10:	4608      	mov	r0, r1
 8013d12:	b141      	cbz	r1, 8013d26 <__ascii_wctomb+0x18>
 8013d14:	2aff      	cmp	r2, #255	@ 0xff
 8013d16:	d904      	bls.n	8013d22 <__ascii_wctomb+0x14>
 8013d18:	228a      	movs	r2, #138	@ 0x8a
 8013d1a:	601a      	str	r2, [r3, #0]
 8013d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d20:	4770      	bx	lr
 8013d22:	700a      	strb	r2, [r1, #0]
 8013d24:	2001      	movs	r0, #1
 8013d26:	4770      	bx	lr

08013d28 <__swhatbuf_r>:
 8013d28:	b570      	push	{r4, r5, r6, lr}
 8013d2a:	460c      	mov	r4, r1
 8013d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d30:	2900      	cmp	r1, #0
 8013d32:	b096      	sub	sp, #88	@ 0x58
 8013d34:	4615      	mov	r5, r2
 8013d36:	461e      	mov	r6, r3
 8013d38:	da0d      	bge.n	8013d56 <__swhatbuf_r+0x2e>
 8013d3a:	89a3      	ldrh	r3, [r4, #12]
 8013d3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013d40:	f04f 0100 	mov.w	r1, #0
 8013d44:	bf14      	ite	ne
 8013d46:	2340      	movne	r3, #64	@ 0x40
 8013d48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	6031      	str	r1, [r6, #0]
 8013d50:	602b      	str	r3, [r5, #0]
 8013d52:	b016      	add	sp, #88	@ 0x58
 8013d54:	bd70      	pop	{r4, r5, r6, pc}
 8013d56:	466a      	mov	r2, sp
 8013d58:	f000 f878 	bl	8013e4c <_fstat_r>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	dbec      	blt.n	8013d3a <__swhatbuf_r+0x12>
 8013d60:	9901      	ldr	r1, [sp, #4]
 8013d62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013d66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013d6a:	4259      	negs	r1, r3
 8013d6c:	4159      	adcs	r1, r3
 8013d6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013d72:	e7eb      	b.n	8013d4c <__swhatbuf_r+0x24>

08013d74 <__smakebuf_r>:
 8013d74:	898b      	ldrh	r3, [r1, #12]
 8013d76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d78:	079d      	lsls	r5, r3, #30
 8013d7a:	4606      	mov	r6, r0
 8013d7c:	460c      	mov	r4, r1
 8013d7e:	d507      	bpl.n	8013d90 <__smakebuf_r+0x1c>
 8013d80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013d84:	6023      	str	r3, [r4, #0]
 8013d86:	6123      	str	r3, [r4, #16]
 8013d88:	2301      	movs	r3, #1
 8013d8a:	6163      	str	r3, [r4, #20]
 8013d8c:	b003      	add	sp, #12
 8013d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d90:	ab01      	add	r3, sp, #4
 8013d92:	466a      	mov	r2, sp
 8013d94:	f7ff ffc8 	bl	8013d28 <__swhatbuf_r>
 8013d98:	9f00      	ldr	r7, [sp, #0]
 8013d9a:	4605      	mov	r5, r0
 8013d9c:	4639      	mov	r1, r7
 8013d9e:	4630      	mov	r0, r6
 8013da0:	f7fd fcaa 	bl	80116f8 <_malloc_r>
 8013da4:	b948      	cbnz	r0, 8013dba <__smakebuf_r+0x46>
 8013da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013daa:	059a      	lsls	r2, r3, #22
 8013dac:	d4ee      	bmi.n	8013d8c <__smakebuf_r+0x18>
 8013dae:	f023 0303 	bic.w	r3, r3, #3
 8013db2:	f043 0302 	orr.w	r3, r3, #2
 8013db6:	81a3      	strh	r3, [r4, #12]
 8013db8:	e7e2      	b.n	8013d80 <__smakebuf_r+0xc>
 8013dba:	89a3      	ldrh	r3, [r4, #12]
 8013dbc:	6020      	str	r0, [r4, #0]
 8013dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013dc2:	81a3      	strh	r3, [r4, #12]
 8013dc4:	9b01      	ldr	r3, [sp, #4]
 8013dc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013dca:	b15b      	cbz	r3, 8013de4 <__smakebuf_r+0x70>
 8013dcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	f000 f84d 	bl	8013e70 <_isatty_r>
 8013dd6:	b128      	cbz	r0, 8013de4 <__smakebuf_r+0x70>
 8013dd8:	89a3      	ldrh	r3, [r4, #12]
 8013dda:	f023 0303 	bic.w	r3, r3, #3
 8013dde:	f043 0301 	orr.w	r3, r3, #1
 8013de2:	81a3      	strh	r3, [r4, #12]
 8013de4:	89a3      	ldrh	r3, [r4, #12]
 8013de6:	431d      	orrs	r5, r3
 8013de8:	81a5      	strh	r5, [r4, #12]
 8013dea:	e7cf      	b.n	8013d8c <__smakebuf_r+0x18>

08013dec <_raise_r>:
 8013dec:	291f      	cmp	r1, #31
 8013dee:	b538      	push	{r3, r4, r5, lr}
 8013df0:	4605      	mov	r5, r0
 8013df2:	460c      	mov	r4, r1
 8013df4:	d904      	bls.n	8013e00 <_raise_r+0x14>
 8013df6:	2316      	movs	r3, #22
 8013df8:	6003      	str	r3, [r0, #0]
 8013dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8013dfe:	bd38      	pop	{r3, r4, r5, pc}
 8013e00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013e02:	b112      	cbz	r2, 8013e0a <_raise_r+0x1e>
 8013e04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013e08:	b94b      	cbnz	r3, 8013e1e <_raise_r+0x32>
 8013e0a:	4628      	mov	r0, r5
 8013e0c:	f000 f852 	bl	8013eb4 <_getpid_r>
 8013e10:	4622      	mov	r2, r4
 8013e12:	4601      	mov	r1, r0
 8013e14:	4628      	mov	r0, r5
 8013e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e1a:	f000 b839 	b.w	8013e90 <_kill_r>
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d00a      	beq.n	8013e38 <_raise_r+0x4c>
 8013e22:	1c59      	adds	r1, r3, #1
 8013e24:	d103      	bne.n	8013e2e <_raise_r+0x42>
 8013e26:	2316      	movs	r3, #22
 8013e28:	6003      	str	r3, [r0, #0]
 8013e2a:	2001      	movs	r0, #1
 8013e2c:	e7e7      	b.n	8013dfe <_raise_r+0x12>
 8013e2e:	2100      	movs	r1, #0
 8013e30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013e34:	4620      	mov	r0, r4
 8013e36:	4798      	blx	r3
 8013e38:	2000      	movs	r0, #0
 8013e3a:	e7e0      	b.n	8013dfe <_raise_r+0x12>

08013e3c <raise>:
 8013e3c:	4b02      	ldr	r3, [pc, #8]	@ (8013e48 <raise+0xc>)
 8013e3e:	4601      	mov	r1, r0
 8013e40:	6818      	ldr	r0, [r3, #0]
 8013e42:	f7ff bfd3 	b.w	8013dec <_raise_r>
 8013e46:	bf00      	nop
 8013e48:	20000248 	.word	0x20000248

08013e4c <_fstat_r>:
 8013e4c:	b538      	push	{r3, r4, r5, lr}
 8013e4e:	4d07      	ldr	r5, [pc, #28]	@ (8013e6c <_fstat_r+0x20>)
 8013e50:	2300      	movs	r3, #0
 8013e52:	4604      	mov	r4, r0
 8013e54:	4608      	mov	r0, r1
 8013e56:	4611      	mov	r1, r2
 8013e58:	602b      	str	r3, [r5, #0]
 8013e5a:	f7ed fbf9 	bl	8001650 <_fstat>
 8013e5e:	1c43      	adds	r3, r0, #1
 8013e60:	d102      	bne.n	8013e68 <_fstat_r+0x1c>
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	b103      	cbz	r3, 8013e68 <_fstat_r+0x1c>
 8013e66:	6023      	str	r3, [r4, #0]
 8013e68:	bd38      	pop	{r3, r4, r5, pc}
 8013e6a:	bf00      	nop
 8013e6c:	200023a0 	.word	0x200023a0

08013e70 <_isatty_r>:
 8013e70:	b538      	push	{r3, r4, r5, lr}
 8013e72:	4d06      	ldr	r5, [pc, #24]	@ (8013e8c <_isatty_r+0x1c>)
 8013e74:	2300      	movs	r3, #0
 8013e76:	4604      	mov	r4, r0
 8013e78:	4608      	mov	r0, r1
 8013e7a:	602b      	str	r3, [r5, #0]
 8013e7c:	f7ed fbf8 	bl	8001670 <_isatty>
 8013e80:	1c43      	adds	r3, r0, #1
 8013e82:	d102      	bne.n	8013e8a <_isatty_r+0x1a>
 8013e84:	682b      	ldr	r3, [r5, #0]
 8013e86:	b103      	cbz	r3, 8013e8a <_isatty_r+0x1a>
 8013e88:	6023      	str	r3, [r4, #0]
 8013e8a:	bd38      	pop	{r3, r4, r5, pc}
 8013e8c:	200023a0 	.word	0x200023a0

08013e90 <_kill_r>:
 8013e90:	b538      	push	{r3, r4, r5, lr}
 8013e92:	4d07      	ldr	r5, [pc, #28]	@ (8013eb0 <_kill_r+0x20>)
 8013e94:	2300      	movs	r3, #0
 8013e96:	4604      	mov	r4, r0
 8013e98:	4608      	mov	r0, r1
 8013e9a:	4611      	mov	r1, r2
 8013e9c:	602b      	str	r3, [r5, #0]
 8013e9e:	f7ed fb93 	bl	80015c8 <_kill>
 8013ea2:	1c43      	adds	r3, r0, #1
 8013ea4:	d102      	bne.n	8013eac <_kill_r+0x1c>
 8013ea6:	682b      	ldr	r3, [r5, #0]
 8013ea8:	b103      	cbz	r3, 8013eac <_kill_r+0x1c>
 8013eaa:	6023      	str	r3, [r4, #0]
 8013eac:	bd38      	pop	{r3, r4, r5, pc}
 8013eae:	bf00      	nop
 8013eb0:	200023a0 	.word	0x200023a0

08013eb4 <_getpid_r>:
 8013eb4:	f7ed bb80 	b.w	80015b8 <_getpid>

08013eb8 <_malloc_usable_size_r>:
 8013eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ebc:	1f18      	subs	r0, r3, #4
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	bfbc      	itt	lt
 8013ec2:	580b      	ldrlt	r3, [r1, r0]
 8013ec4:	18c0      	addlt	r0, r0, r3
 8013ec6:	4770      	bx	lr

08013ec8 <atan2>:
 8013ec8:	f000 b802 	b.w	8013ed0 <__ieee754_atan2>
 8013ecc:	0000      	movs	r0, r0
	...

08013ed0 <__ieee754_atan2>:
 8013ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ed4:	ec57 6b11 	vmov	r6, r7, d1
 8013ed8:	4273      	negs	r3, r6
 8013eda:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8014058 <__ieee754_atan2+0x188>
 8013ede:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8013ee2:	4333      	orrs	r3, r6
 8013ee4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013ee8:	4543      	cmp	r3, r8
 8013eea:	ec51 0b10 	vmov	r0, r1, d0
 8013eee:	4635      	mov	r5, r6
 8013ef0:	d809      	bhi.n	8013f06 <__ieee754_atan2+0x36>
 8013ef2:	4244      	negs	r4, r0
 8013ef4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013ef8:	4304      	orrs	r4, r0
 8013efa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013efe:	4544      	cmp	r4, r8
 8013f00:	468e      	mov	lr, r1
 8013f02:	4681      	mov	r9, r0
 8013f04:	d907      	bls.n	8013f16 <__ieee754_atan2+0x46>
 8013f06:	4632      	mov	r2, r6
 8013f08:	463b      	mov	r3, r7
 8013f0a:	f7ec f9f7 	bl	80002fc <__adddf3>
 8013f0e:	ec41 0b10 	vmov	d0, r0, r1
 8013f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f16:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8013f1a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8013f1e:	4334      	orrs	r4, r6
 8013f20:	d103      	bne.n	8013f2a <__ieee754_atan2+0x5a>
 8013f22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f26:	f000 b89b 	b.w	8014060 <atan>
 8013f2a:	17bc      	asrs	r4, r7, #30
 8013f2c:	f004 0402 	and.w	r4, r4, #2
 8013f30:	ea53 0909 	orrs.w	r9, r3, r9
 8013f34:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013f38:	d107      	bne.n	8013f4a <__ieee754_atan2+0x7a>
 8013f3a:	2c02      	cmp	r4, #2
 8013f3c:	d05f      	beq.n	8013ffe <__ieee754_atan2+0x12e>
 8013f3e:	2c03      	cmp	r4, #3
 8013f40:	d1e5      	bne.n	8013f0e <__ieee754_atan2+0x3e>
 8013f42:	a141      	add	r1, pc, #260	@ (adr r1, 8014048 <__ieee754_atan2+0x178>)
 8013f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f48:	e7e1      	b.n	8013f0e <__ieee754_atan2+0x3e>
 8013f4a:	4315      	orrs	r5, r2
 8013f4c:	d106      	bne.n	8013f5c <__ieee754_atan2+0x8c>
 8013f4e:	f1be 0f00 	cmp.w	lr, #0
 8013f52:	da5f      	bge.n	8014014 <__ieee754_atan2+0x144>
 8013f54:	a13e      	add	r1, pc, #248	@ (adr r1, 8014050 <__ieee754_atan2+0x180>)
 8013f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f5a:	e7d8      	b.n	8013f0e <__ieee754_atan2+0x3e>
 8013f5c:	4542      	cmp	r2, r8
 8013f5e:	d10f      	bne.n	8013f80 <__ieee754_atan2+0xb0>
 8013f60:	4293      	cmp	r3, r2
 8013f62:	f104 34ff 	add.w	r4, r4, #4294967295
 8013f66:	d107      	bne.n	8013f78 <__ieee754_atan2+0xa8>
 8013f68:	2c02      	cmp	r4, #2
 8013f6a:	d84c      	bhi.n	8014006 <__ieee754_atan2+0x136>
 8013f6c:	4b34      	ldr	r3, [pc, #208]	@ (8014040 <__ieee754_atan2+0x170>)
 8013f6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013f72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f76:	e7ca      	b.n	8013f0e <__ieee754_atan2+0x3e>
 8013f78:	2c02      	cmp	r4, #2
 8013f7a:	d848      	bhi.n	801400e <__ieee754_atan2+0x13e>
 8013f7c:	4b31      	ldr	r3, [pc, #196]	@ (8014044 <__ieee754_atan2+0x174>)
 8013f7e:	e7f6      	b.n	8013f6e <__ieee754_atan2+0x9e>
 8013f80:	4543      	cmp	r3, r8
 8013f82:	d0e4      	beq.n	8013f4e <__ieee754_atan2+0x7e>
 8013f84:	1a9b      	subs	r3, r3, r2
 8013f86:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8013f8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013f8e:	da1e      	bge.n	8013fce <__ieee754_atan2+0xfe>
 8013f90:	2f00      	cmp	r7, #0
 8013f92:	da01      	bge.n	8013f98 <__ieee754_atan2+0xc8>
 8013f94:	323c      	adds	r2, #60	@ 0x3c
 8013f96:	db1e      	blt.n	8013fd6 <__ieee754_atan2+0x106>
 8013f98:	4632      	mov	r2, r6
 8013f9a:	463b      	mov	r3, r7
 8013f9c:	f7ec fc8e 	bl	80008bc <__aeabi_ddiv>
 8013fa0:	ec41 0b10 	vmov	d0, r0, r1
 8013fa4:	f000 f9f4 	bl	8014390 <fabs>
 8013fa8:	f000 f85a 	bl	8014060 <atan>
 8013fac:	ec51 0b10 	vmov	r0, r1, d0
 8013fb0:	2c01      	cmp	r4, #1
 8013fb2:	d013      	beq.n	8013fdc <__ieee754_atan2+0x10c>
 8013fb4:	2c02      	cmp	r4, #2
 8013fb6:	d015      	beq.n	8013fe4 <__ieee754_atan2+0x114>
 8013fb8:	2c00      	cmp	r4, #0
 8013fba:	d0a8      	beq.n	8013f0e <__ieee754_atan2+0x3e>
 8013fbc:	a318      	add	r3, pc, #96	@ (adr r3, 8014020 <__ieee754_atan2+0x150>)
 8013fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc2:	f7ec f999 	bl	80002f8 <__aeabi_dsub>
 8013fc6:	a318      	add	r3, pc, #96	@ (adr r3, 8014028 <__ieee754_atan2+0x158>)
 8013fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fcc:	e014      	b.n	8013ff8 <__ieee754_atan2+0x128>
 8013fce:	a118      	add	r1, pc, #96	@ (adr r1, 8014030 <__ieee754_atan2+0x160>)
 8013fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fd4:	e7ec      	b.n	8013fb0 <__ieee754_atan2+0xe0>
 8013fd6:	2000      	movs	r0, #0
 8013fd8:	2100      	movs	r1, #0
 8013fda:	e7e9      	b.n	8013fb0 <__ieee754_atan2+0xe0>
 8013fdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	e794      	b.n	8013f0e <__ieee754_atan2+0x3e>
 8013fe4:	a30e      	add	r3, pc, #56	@ (adr r3, 8014020 <__ieee754_atan2+0x150>)
 8013fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fea:	f7ec f985 	bl	80002f8 <__aeabi_dsub>
 8013fee:	4602      	mov	r2, r0
 8013ff0:	460b      	mov	r3, r1
 8013ff2:	a10d      	add	r1, pc, #52	@ (adr r1, 8014028 <__ieee754_atan2+0x158>)
 8013ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ff8:	f7ec f97e 	bl	80002f8 <__aeabi_dsub>
 8013ffc:	e787      	b.n	8013f0e <__ieee754_atan2+0x3e>
 8013ffe:	a10a      	add	r1, pc, #40	@ (adr r1, 8014028 <__ieee754_atan2+0x158>)
 8014000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014004:	e783      	b.n	8013f0e <__ieee754_atan2+0x3e>
 8014006:	a10c      	add	r1, pc, #48	@ (adr r1, 8014038 <__ieee754_atan2+0x168>)
 8014008:	e9d1 0100 	ldrd	r0, r1, [r1]
 801400c:	e77f      	b.n	8013f0e <__ieee754_atan2+0x3e>
 801400e:	2000      	movs	r0, #0
 8014010:	2100      	movs	r1, #0
 8014012:	e77c      	b.n	8013f0e <__ieee754_atan2+0x3e>
 8014014:	a106      	add	r1, pc, #24	@ (adr r1, 8014030 <__ieee754_atan2+0x160>)
 8014016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801401a:	e778      	b.n	8013f0e <__ieee754_atan2+0x3e>
 801401c:	f3af 8000 	nop.w
 8014020:	33145c07 	.word	0x33145c07
 8014024:	3ca1a626 	.word	0x3ca1a626
 8014028:	54442d18 	.word	0x54442d18
 801402c:	400921fb 	.word	0x400921fb
 8014030:	54442d18 	.word	0x54442d18
 8014034:	3ff921fb 	.word	0x3ff921fb
 8014038:	54442d18 	.word	0x54442d18
 801403c:	3fe921fb 	.word	0x3fe921fb
 8014040:	08014ab8 	.word	0x08014ab8
 8014044:	08014aa0 	.word	0x08014aa0
 8014048:	54442d18 	.word	0x54442d18
 801404c:	c00921fb 	.word	0xc00921fb
 8014050:	54442d18 	.word	0x54442d18
 8014054:	bff921fb 	.word	0xbff921fb
 8014058:	7ff00000 	.word	0x7ff00000
 801405c:	00000000 	.word	0x00000000

08014060 <atan>:
 8014060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014064:	ec55 4b10 	vmov	r4, r5, d0
 8014068:	4bbf      	ldr	r3, [pc, #764]	@ (8014368 <atan+0x308>)
 801406a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801406e:	429e      	cmp	r6, r3
 8014070:	46ab      	mov	fp, r5
 8014072:	d918      	bls.n	80140a6 <atan+0x46>
 8014074:	4bbd      	ldr	r3, [pc, #756]	@ (801436c <atan+0x30c>)
 8014076:	429e      	cmp	r6, r3
 8014078:	d801      	bhi.n	801407e <atan+0x1e>
 801407a:	d109      	bne.n	8014090 <atan+0x30>
 801407c:	b144      	cbz	r4, 8014090 <atan+0x30>
 801407e:	4622      	mov	r2, r4
 8014080:	462b      	mov	r3, r5
 8014082:	4620      	mov	r0, r4
 8014084:	4629      	mov	r1, r5
 8014086:	f7ec f939 	bl	80002fc <__adddf3>
 801408a:	4604      	mov	r4, r0
 801408c:	460d      	mov	r5, r1
 801408e:	e006      	b.n	801409e <atan+0x3e>
 8014090:	f1bb 0f00 	cmp.w	fp, #0
 8014094:	f340 812b 	ble.w	80142ee <atan+0x28e>
 8014098:	a597      	add	r5, pc, #604	@ (adr r5, 80142f8 <atan+0x298>)
 801409a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801409e:	ec45 4b10 	vmov	d0, r4, r5
 80140a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a6:	4bb2      	ldr	r3, [pc, #712]	@ (8014370 <atan+0x310>)
 80140a8:	429e      	cmp	r6, r3
 80140aa:	d813      	bhi.n	80140d4 <atan+0x74>
 80140ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80140b0:	429e      	cmp	r6, r3
 80140b2:	d80c      	bhi.n	80140ce <atan+0x6e>
 80140b4:	a392      	add	r3, pc, #584	@ (adr r3, 8014300 <atan+0x2a0>)
 80140b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ba:	4620      	mov	r0, r4
 80140bc:	4629      	mov	r1, r5
 80140be:	f7ec f91d 	bl	80002fc <__adddf3>
 80140c2:	4bac      	ldr	r3, [pc, #688]	@ (8014374 <atan+0x314>)
 80140c4:	2200      	movs	r2, #0
 80140c6:	f7ec fd5f 	bl	8000b88 <__aeabi_dcmpgt>
 80140ca:	2800      	cmp	r0, #0
 80140cc:	d1e7      	bne.n	801409e <atan+0x3e>
 80140ce:	f04f 3aff 	mov.w	sl, #4294967295
 80140d2:	e029      	b.n	8014128 <atan+0xc8>
 80140d4:	f000 f95c 	bl	8014390 <fabs>
 80140d8:	4ba7      	ldr	r3, [pc, #668]	@ (8014378 <atan+0x318>)
 80140da:	429e      	cmp	r6, r3
 80140dc:	ec55 4b10 	vmov	r4, r5, d0
 80140e0:	f200 80bc 	bhi.w	801425c <atan+0x1fc>
 80140e4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80140e8:	429e      	cmp	r6, r3
 80140ea:	f200 809e 	bhi.w	801422a <atan+0x1ca>
 80140ee:	4622      	mov	r2, r4
 80140f0:	462b      	mov	r3, r5
 80140f2:	4620      	mov	r0, r4
 80140f4:	4629      	mov	r1, r5
 80140f6:	f7ec f901 	bl	80002fc <__adddf3>
 80140fa:	4b9e      	ldr	r3, [pc, #632]	@ (8014374 <atan+0x314>)
 80140fc:	2200      	movs	r2, #0
 80140fe:	f7ec f8fb 	bl	80002f8 <__aeabi_dsub>
 8014102:	2200      	movs	r2, #0
 8014104:	4606      	mov	r6, r0
 8014106:	460f      	mov	r7, r1
 8014108:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801410c:	4620      	mov	r0, r4
 801410e:	4629      	mov	r1, r5
 8014110:	f7ec f8f4 	bl	80002fc <__adddf3>
 8014114:	4602      	mov	r2, r0
 8014116:	460b      	mov	r3, r1
 8014118:	4630      	mov	r0, r6
 801411a:	4639      	mov	r1, r7
 801411c:	f7ec fbce 	bl	80008bc <__aeabi_ddiv>
 8014120:	f04f 0a00 	mov.w	sl, #0
 8014124:	4604      	mov	r4, r0
 8014126:	460d      	mov	r5, r1
 8014128:	4622      	mov	r2, r4
 801412a:	462b      	mov	r3, r5
 801412c:	4620      	mov	r0, r4
 801412e:	4629      	mov	r1, r5
 8014130:	f7ec fa9a 	bl	8000668 <__aeabi_dmul>
 8014134:	4602      	mov	r2, r0
 8014136:	460b      	mov	r3, r1
 8014138:	4680      	mov	r8, r0
 801413a:	4689      	mov	r9, r1
 801413c:	f7ec fa94 	bl	8000668 <__aeabi_dmul>
 8014140:	a371      	add	r3, pc, #452	@ (adr r3, 8014308 <atan+0x2a8>)
 8014142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014146:	4606      	mov	r6, r0
 8014148:	460f      	mov	r7, r1
 801414a:	f7ec fa8d 	bl	8000668 <__aeabi_dmul>
 801414e:	a370      	add	r3, pc, #448	@ (adr r3, 8014310 <atan+0x2b0>)
 8014150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014154:	f7ec f8d2 	bl	80002fc <__adddf3>
 8014158:	4632      	mov	r2, r6
 801415a:	463b      	mov	r3, r7
 801415c:	f7ec fa84 	bl	8000668 <__aeabi_dmul>
 8014160:	a36d      	add	r3, pc, #436	@ (adr r3, 8014318 <atan+0x2b8>)
 8014162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014166:	f7ec f8c9 	bl	80002fc <__adddf3>
 801416a:	4632      	mov	r2, r6
 801416c:	463b      	mov	r3, r7
 801416e:	f7ec fa7b 	bl	8000668 <__aeabi_dmul>
 8014172:	a36b      	add	r3, pc, #428	@ (adr r3, 8014320 <atan+0x2c0>)
 8014174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014178:	f7ec f8c0 	bl	80002fc <__adddf3>
 801417c:	4632      	mov	r2, r6
 801417e:	463b      	mov	r3, r7
 8014180:	f7ec fa72 	bl	8000668 <__aeabi_dmul>
 8014184:	a368      	add	r3, pc, #416	@ (adr r3, 8014328 <atan+0x2c8>)
 8014186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418a:	f7ec f8b7 	bl	80002fc <__adddf3>
 801418e:	4632      	mov	r2, r6
 8014190:	463b      	mov	r3, r7
 8014192:	f7ec fa69 	bl	8000668 <__aeabi_dmul>
 8014196:	a366      	add	r3, pc, #408	@ (adr r3, 8014330 <atan+0x2d0>)
 8014198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419c:	f7ec f8ae 	bl	80002fc <__adddf3>
 80141a0:	4642      	mov	r2, r8
 80141a2:	464b      	mov	r3, r9
 80141a4:	f7ec fa60 	bl	8000668 <__aeabi_dmul>
 80141a8:	a363      	add	r3, pc, #396	@ (adr r3, 8014338 <atan+0x2d8>)
 80141aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ae:	4680      	mov	r8, r0
 80141b0:	4689      	mov	r9, r1
 80141b2:	4630      	mov	r0, r6
 80141b4:	4639      	mov	r1, r7
 80141b6:	f7ec fa57 	bl	8000668 <__aeabi_dmul>
 80141ba:	a361      	add	r3, pc, #388	@ (adr r3, 8014340 <atan+0x2e0>)
 80141bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c0:	f7ec f89a 	bl	80002f8 <__aeabi_dsub>
 80141c4:	4632      	mov	r2, r6
 80141c6:	463b      	mov	r3, r7
 80141c8:	f7ec fa4e 	bl	8000668 <__aeabi_dmul>
 80141cc:	a35e      	add	r3, pc, #376	@ (adr r3, 8014348 <atan+0x2e8>)
 80141ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d2:	f7ec f891 	bl	80002f8 <__aeabi_dsub>
 80141d6:	4632      	mov	r2, r6
 80141d8:	463b      	mov	r3, r7
 80141da:	f7ec fa45 	bl	8000668 <__aeabi_dmul>
 80141de:	a35c      	add	r3, pc, #368	@ (adr r3, 8014350 <atan+0x2f0>)
 80141e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e4:	f7ec f888 	bl	80002f8 <__aeabi_dsub>
 80141e8:	4632      	mov	r2, r6
 80141ea:	463b      	mov	r3, r7
 80141ec:	f7ec fa3c 	bl	8000668 <__aeabi_dmul>
 80141f0:	a359      	add	r3, pc, #356	@ (adr r3, 8014358 <atan+0x2f8>)
 80141f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f6:	f7ec f87f 	bl	80002f8 <__aeabi_dsub>
 80141fa:	4632      	mov	r2, r6
 80141fc:	463b      	mov	r3, r7
 80141fe:	f7ec fa33 	bl	8000668 <__aeabi_dmul>
 8014202:	4602      	mov	r2, r0
 8014204:	460b      	mov	r3, r1
 8014206:	4640      	mov	r0, r8
 8014208:	4649      	mov	r1, r9
 801420a:	f7ec f877 	bl	80002fc <__adddf3>
 801420e:	4622      	mov	r2, r4
 8014210:	462b      	mov	r3, r5
 8014212:	f7ec fa29 	bl	8000668 <__aeabi_dmul>
 8014216:	f1ba 3fff 	cmp.w	sl, #4294967295
 801421a:	4602      	mov	r2, r0
 801421c:	460b      	mov	r3, r1
 801421e:	d148      	bne.n	80142b2 <atan+0x252>
 8014220:	4620      	mov	r0, r4
 8014222:	4629      	mov	r1, r5
 8014224:	f7ec f868 	bl	80002f8 <__aeabi_dsub>
 8014228:	e72f      	b.n	801408a <atan+0x2a>
 801422a:	4b52      	ldr	r3, [pc, #328]	@ (8014374 <atan+0x314>)
 801422c:	2200      	movs	r2, #0
 801422e:	4620      	mov	r0, r4
 8014230:	4629      	mov	r1, r5
 8014232:	f7ec f861 	bl	80002f8 <__aeabi_dsub>
 8014236:	4b4f      	ldr	r3, [pc, #316]	@ (8014374 <atan+0x314>)
 8014238:	4606      	mov	r6, r0
 801423a:	460f      	mov	r7, r1
 801423c:	2200      	movs	r2, #0
 801423e:	4620      	mov	r0, r4
 8014240:	4629      	mov	r1, r5
 8014242:	f7ec f85b 	bl	80002fc <__adddf3>
 8014246:	4602      	mov	r2, r0
 8014248:	460b      	mov	r3, r1
 801424a:	4630      	mov	r0, r6
 801424c:	4639      	mov	r1, r7
 801424e:	f7ec fb35 	bl	80008bc <__aeabi_ddiv>
 8014252:	f04f 0a01 	mov.w	sl, #1
 8014256:	4604      	mov	r4, r0
 8014258:	460d      	mov	r5, r1
 801425a:	e765      	b.n	8014128 <atan+0xc8>
 801425c:	4b47      	ldr	r3, [pc, #284]	@ (801437c <atan+0x31c>)
 801425e:	429e      	cmp	r6, r3
 8014260:	d21c      	bcs.n	801429c <atan+0x23c>
 8014262:	4b47      	ldr	r3, [pc, #284]	@ (8014380 <atan+0x320>)
 8014264:	2200      	movs	r2, #0
 8014266:	4620      	mov	r0, r4
 8014268:	4629      	mov	r1, r5
 801426a:	f7ec f845 	bl	80002f8 <__aeabi_dsub>
 801426e:	4b44      	ldr	r3, [pc, #272]	@ (8014380 <atan+0x320>)
 8014270:	4606      	mov	r6, r0
 8014272:	460f      	mov	r7, r1
 8014274:	2200      	movs	r2, #0
 8014276:	4620      	mov	r0, r4
 8014278:	4629      	mov	r1, r5
 801427a:	f7ec f9f5 	bl	8000668 <__aeabi_dmul>
 801427e:	4b3d      	ldr	r3, [pc, #244]	@ (8014374 <atan+0x314>)
 8014280:	2200      	movs	r2, #0
 8014282:	f7ec f83b 	bl	80002fc <__adddf3>
 8014286:	4602      	mov	r2, r0
 8014288:	460b      	mov	r3, r1
 801428a:	4630      	mov	r0, r6
 801428c:	4639      	mov	r1, r7
 801428e:	f7ec fb15 	bl	80008bc <__aeabi_ddiv>
 8014292:	f04f 0a02 	mov.w	sl, #2
 8014296:	4604      	mov	r4, r0
 8014298:	460d      	mov	r5, r1
 801429a:	e745      	b.n	8014128 <atan+0xc8>
 801429c:	4622      	mov	r2, r4
 801429e:	462b      	mov	r3, r5
 80142a0:	4938      	ldr	r1, [pc, #224]	@ (8014384 <atan+0x324>)
 80142a2:	2000      	movs	r0, #0
 80142a4:	f7ec fb0a 	bl	80008bc <__aeabi_ddiv>
 80142a8:	f04f 0a03 	mov.w	sl, #3
 80142ac:	4604      	mov	r4, r0
 80142ae:	460d      	mov	r5, r1
 80142b0:	e73a      	b.n	8014128 <atan+0xc8>
 80142b2:	4b35      	ldr	r3, [pc, #212]	@ (8014388 <atan+0x328>)
 80142b4:	4e35      	ldr	r6, [pc, #212]	@ (801438c <atan+0x32c>)
 80142b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80142ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142be:	f7ec f81b 	bl	80002f8 <__aeabi_dsub>
 80142c2:	4622      	mov	r2, r4
 80142c4:	462b      	mov	r3, r5
 80142c6:	f7ec f817 	bl	80002f8 <__aeabi_dsub>
 80142ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80142ce:	4602      	mov	r2, r0
 80142d0:	460b      	mov	r3, r1
 80142d2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80142d6:	f7ec f80f 	bl	80002f8 <__aeabi_dsub>
 80142da:	f1bb 0f00 	cmp.w	fp, #0
 80142de:	4604      	mov	r4, r0
 80142e0:	460d      	mov	r5, r1
 80142e2:	f6bf aedc 	bge.w	801409e <atan+0x3e>
 80142e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80142ea:	461d      	mov	r5, r3
 80142ec:	e6d7      	b.n	801409e <atan+0x3e>
 80142ee:	a51c      	add	r5, pc, #112	@ (adr r5, 8014360 <atan+0x300>)
 80142f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80142f4:	e6d3      	b.n	801409e <atan+0x3e>
 80142f6:	bf00      	nop
 80142f8:	54442d18 	.word	0x54442d18
 80142fc:	3ff921fb 	.word	0x3ff921fb
 8014300:	8800759c 	.word	0x8800759c
 8014304:	7e37e43c 	.word	0x7e37e43c
 8014308:	e322da11 	.word	0xe322da11
 801430c:	3f90ad3a 	.word	0x3f90ad3a
 8014310:	24760deb 	.word	0x24760deb
 8014314:	3fa97b4b 	.word	0x3fa97b4b
 8014318:	a0d03d51 	.word	0xa0d03d51
 801431c:	3fb10d66 	.word	0x3fb10d66
 8014320:	c54c206e 	.word	0xc54c206e
 8014324:	3fb745cd 	.word	0x3fb745cd
 8014328:	920083ff 	.word	0x920083ff
 801432c:	3fc24924 	.word	0x3fc24924
 8014330:	5555550d 	.word	0x5555550d
 8014334:	3fd55555 	.word	0x3fd55555
 8014338:	2c6a6c2f 	.word	0x2c6a6c2f
 801433c:	bfa2b444 	.word	0xbfa2b444
 8014340:	52defd9a 	.word	0x52defd9a
 8014344:	3fadde2d 	.word	0x3fadde2d
 8014348:	af749a6d 	.word	0xaf749a6d
 801434c:	3fb3b0f2 	.word	0x3fb3b0f2
 8014350:	fe231671 	.word	0xfe231671
 8014354:	3fbc71c6 	.word	0x3fbc71c6
 8014358:	9998ebc4 	.word	0x9998ebc4
 801435c:	3fc99999 	.word	0x3fc99999
 8014360:	54442d18 	.word	0x54442d18
 8014364:	bff921fb 	.word	0xbff921fb
 8014368:	440fffff 	.word	0x440fffff
 801436c:	7ff00000 	.word	0x7ff00000
 8014370:	3fdbffff 	.word	0x3fdbffff
 8014374:	3ff00000 	.word	0x3ff00000
 8014378:	3ff2ffff 	.word	0x3ff2ffff
 801437c:	40038000 	.word	0x40038000
 8014380:	3ff80000 	.word	0x3ff80000
 8014384:	bff00000 	.word	0xbff00000
 8014388:	08014ad0 	.word	0x08014ad0
 801438c:	08014af0 	.word	0x08014af0

08014390 <fabs>:
 8014390:	ec51 0b10 	vmov	r0, r1, d0
 8014394:	4602      	mov	r2, r0
 8014396:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801439a:	ec43 2b10 	vmov	d0, r2, r3
 801439e:	4770      	bx	lr

080143a0 <_init>:
 80143a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a2:	bf00      	nop
 80143a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143a6:	bc08      	pop	{r3}
 80143a8:	469e      	mov	lr, r3
 80143aa:	4770      	bx	lr

080143ac <_fini>:
 80143ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ae:	bf00      	nop
 80143b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143b2:	bc08      	pop	{r3}
 80143b4:	469e      	mov	lr, r3
 80143b6:	4770      	bx	lr
