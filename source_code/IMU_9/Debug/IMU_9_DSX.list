
IMU_9_DSX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013aec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  08013cd0  08013cd0  00023cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143a4  080143a4  000303f8  2**0
                  CONTENTS
  4 .ARM          00000008  080143a4  080143a4  000243a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143ac  080143ac  000303f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080143ac  080143ac  000243ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080143b0  080143b0  000243b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  080143b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa0  200003f8  080147ac  000303f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20002398  080147ac  00032398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027044  00000000  00000000  0003046b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006358  00000000  00000000  000574af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f38  00000000  00000000  0005d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e6  00000000  00000000  0005f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bd4  00000000  00000000  00060f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d344  00000000  00000000  00086afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d25bd  00000000  00000000  000b3e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000095f4  00000000  00000000  001863fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0018f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003f8 	.word	0x200003f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013cb4 	.word	0x08013cb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003fc 	.word	0x200003fc
 800021c:	08013cb4 	.word	0x08013cb4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a6 	b.w	800105c <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9e08      	ldr	r6, [sp, #32]
 8000d9a:	460d      	mov	r5, r1
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	460f      	mov	r7, r1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d14a      	bne.n	8000e3a <__udivmoddi4+0xa6>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4694      	mov	ip, r2
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0xe2>
 8000daa:	fab2 f382 	clz	r3, r2
 8000dae:	b143      	cbz	r3, 8000dc2 <__udivmoddi4+0x2e>
 8000db0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db4:	f1c3 0220 	rsb	r2, r3, #32
 8000db8:	409f      	lsls	r7, r3
 8000dba:	fa20 f202 	lsr.w	r2, r0, r2
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	409c      	lsls	r4, r3
 8000dc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dc6:	fa1f f58c 	uxth.w	r5, ip
 8000dca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dce:	0c22      	lsrs	r2, r4, #16
 8000dd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dd8:	fb01 f005 	mul.w	r0, r1, r5
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x62>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000de8:	f080 811c 	bcs.w	8001024 <__udivmoddi4+0x290>
 8000dec:	4290      	cmp	r0, r2
 8000dee:	f240 8119 	bls.w	8001024 <__udivmoddi4+0x290>
 8000df2:	3902      	subs	r1, #2
 8000df4:	4462      	add	r2, ip
 8000df6:	1a12      	subs	r2, r2, r0
 8000df8:	b2a4      	uxth	r4, r4
 8000dfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e06:	fb00 f505 	mul.w	r5, r0, r5
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	d90a      	bls.n	8000e24 <__udivmoddi4+0x90>
 8000e0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e16:	f080 8107 	bcs.w	8001028 <__udivmoddi4+0x294>
 8000e1a:	42a5      	cmp	r5, r4
 8000e1c:	f240 8104 	bls.w	8001028 <__udivmoddi4+0x294>
 8000e20:	4464      	add	r4, ip
 8000e22:	3802      	subs	r0, #2
 8000e24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	b11e      	cbz	r6, 8000e36 <__udivmoddi4+0xa2>
 8000e2e:	40dc      	lsrs	r4, r3
 8000e30:	2300      	movs	r3, #0
 8000e32:	e9c6 4300 	strd	r4, r3, [r6]
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0xbc>
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	f000 80ed 	beq.w	800101e <__udivmoddi4+0x28a>
 8000e44:	2100      	movs	r1, #0
 8000e46:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e50:	fab3 f183 	clz	r1, r3
 8000e54:	2900      	cmp	r1, #0
 8000e56:	d149      	bne.n	8000eec <__udivmoddi4+0x158>
 8000e58:	42ab      	cmp	r3, r5
 8000e5a:	d302      	bcc.n	8000e62 <__udivmoddi4+0xce>
 8000e5c:	4282      	cmp	r2, r0
 8000e5e:	f200 80f8 	bhi.w	8001052 <__udivmoddi4+0x2be>
 8000e62:	1a84      	subs	r4, r0, r2
 8000e64:	eb65 0203 	sbc.w	r2, r5, r3
 8000e68:	2001      	movs	r0, #1
 8000e6a:	4617      	mov	r7, r2
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d0e2      	beq.n	8000e36 <__udivmoddi4+0xa2>
 8000e70:	e9c6 4700 	strd	r4, r7, [r6]
 8000e74:	e7df      	b.n	8000e36 <__udivmoddi4+0xa2>
 8000e76:	b902      	cbnz	r2, 8000e7a <__udivmoddi4+0xe6>
 8000e78:	deff      	udf	#255	; 0xff
 8000e7a:	fab2 f382 	clz	r3, r2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f040 8090 	bne.w	8000fa4 <__udivmoddi4+0x210>
 8000e84:	1a8a      	subs	r2, r1, r2
 8000e86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8a:	fa1f fe8c 	uxth.w	lr, ip
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e94:	fb07 2015 	mls	r0, r7, r5, r2
 8000e98:	0c22      	lsrs	r2, r4, #16
 8000e9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x124>
 8000ea6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eaa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x122>
 8000eb0:	4290      	cmp	r0, r2
 8000eb2:	f200 80cb 	bhi.w	800104c <__udivmoddi4+0x2b8>
 8000eb6:	4645      	mov	r5, r8
 8000eb8:	1a12      	subs	r2, r2, r0
 8000eba:	b2a4      	uxth	r4, r4
 8000ebc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ec8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x14e>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ed8:	d202      	bcs.n	8000ee0 <__udivmoddi4+0x14c>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f200 80bb 	bhi.w	8001056 <__udivmoddi4+0x2c2>
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	eba4 040e 	sub.w	r4, r4, lr
 8000ee6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eea:	e79f      	b.n	8000e2c <__udivmoddi4+0x98>
 8000eec:	f1c1 0720 	rsb	r7, r1, #32
 8000ef0:	408b      	lsls	r3, r1
 8000ef2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ef6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efa:	fa05 f401 	lsl.w	r4, r5, r1
 8000efe:	fa20 f307 	lsr.w	r3, r0, r7
 8000f02:	40fd      	lsrs	r5, r7
 8000f04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f08:	4323      	orrs	r3, r4
 8000f0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f0e:	fa1f fe8c 	uxth.w	lr, ip
 8000f12:	fb09 5518 	mls	r5, r9, r8, r5
 8000f16:	0c1c      	lsrs	r4, r3, #16
 8000f18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f20:	42a5      	cmp	r5, r4
 8000f22:	fa02 f201 	lsl.w	r2, r2, r1
 8000f26:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2a:	d90b      	bls.n	8000f44 <__udivmoddi4+0x1b0>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f34:	f080 8088 	bcs.w	8001048 <__udivmoddi4+0x2b4>
 8000f38:	42a5      	cmp	r5, r4
 8000f3a:	f240 8085 	bls.w	8001048 <__udivmoddi4+0x2b4>
 8000f3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f42:	4464      	add	r4, ip
 8000f44:	1b64      	subs	r4, r4, r5
 8000f46:	b29d      	uxth	r5, r3
 8000f48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x1da>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f64:	d26c      	bcs.n	8001040 <__udivmoddi4+0x2ac>
 8000f66:	45a6      	cmp	lr, r4
 8000f68:	d96a      	bls.n	8001040 <__udivmoddi4+0x2ac>
 8000f6a:	3b02      	subs	r3, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f72:	fba3 9502 	umull	r9, r5, r3, r2
 8000f76:	eba4 040e 	sub.w	r4, r4, lr
 8000f7a:	42ac      	cmp	r4, r5
 8000f7c:	46c8      	mov	r8, r9
 8000f7e:	46ae      	mov	lr, r5
 8000f80:	d356      	bcc.n	8001030 <__udivmoddi4+0x29c>
 8000f82:	d053      	beq.n	800102c <__udivmoddi4+0x298>
 8000f84:	b156      	cbz	r6, 8000f9c <__udivmoddi4+0x208>
 8000f86:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f92:	40ca      	lsrs	r2, r1
 8000f94:	40cc      	lsrs	r4, r1
 8000f96:	4317      	orrs	r7, r2
 8000f98:	e9c6 7400 	strd	r7, r4, [r6]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa4:	f1c3 0120 	rsb	r1, r3, #32
 8000fa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fac:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb4:	409d      	lsls	r5, r3
 8000fb6:	432a      	orrs	r2, r5
 8000fb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fbc:	fa1f fe8c 	uxth.w	lr, ip
 8000fc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fce:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd2:	428d      	cmp	r5, r1
 8000fd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fd8:	d908      	bls.n	8000fec <__udivmoddi4+0x258>
 8000fda:	eb1c 0101 	adds.w	r1, ip, r1
 8000fde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe2:	d22f      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8000fe4:	428d      	cmp	r5, r1
 8000fe6:	d92d      	bls.n	8001044 <__udivmoddi4+0x2b0>
 8000fe8:	3802      	subs	r0, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	1b49      	subs	r1, r1, r5
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ff8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ffc:	fb05 f10e 	mul.w	r1, r5, lr
 8001000:	4291      	cmp	r1, r2
 8001002:	d908      	bls.n	8001016 <__udivmoddi4+0x282>
 8001004:	eb1c 0202 	adds.w	r2, ip, r2
 8001008:	f105 38ff 	add.w	r8, r5, #4294967295
 800100c:	d216      	bcs.n	800103c <__udivmoddi4+0x2a8>
 800100e:	4291      	cmp	r1, r2
 8001010:	d914      	bls.n	800103c <__udivmoddi4+0x2a8>
 8001012:	3d02      	subs	r5, #2
 8001014:	4462      	add	r2, ip
 8001016:	1a52      	subs	r2, r2, r1
 8001018:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800101c:	e738      	b.n	8000e90 <__udivmoddi4+0xfc>
 800101e:	4631      	mov	r1, r6
 8001020:	4630      	mov	r0, r6
 8001022:	e708      	b.n	8000e36 <__udivmoddi4+0xa2>
 8001024:	4639      	mov	r1, r7
 8001026:	e6e6      	b.n	8000df6 <__udivmoddi4+0x62>
 8001028:	4610      	mov	r0, r2
 800102a:	e6fb      	b.n	8000e24 <__udivmoddi4+0x90>
 800102c:	4548      	cmp	r0, r9
 800102e:	d2a9      	bcs.n	8000f84 <__udivmoddi4+0x1f0>
 8001030:	ebb9 0802 	subs.w	r8, r9, r2
 8001034:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001038:	3b01      	subs	r3, #1
 800103a:	e7a3      	b.n	8000f84 <__udivmoddi4+0x1f0>
 800103c:	4645      	mov	r5, r8
 800103e:	e7ea      	b.n	8001016 <__udivmoddi4+0x282>
 8001040:	462b      	mov	r3, r5
 8001042:	e794      	b.n	8000f6e <__udivmoddi4+0x1da>
 8001044:	4640      	mov	r0, r8
 8001046:	e7d1      	b.n	8000fec <__udivmoddi4+0x258>
 8001048:	46d0      	mov	r8, sl
 800104a:	e77b      	b.n	8000f44 <__udivmoddi4+0x1b0>
 800104c:	3d02      	subs	r5, #2
 800104e:	4462      	add	r2, ip
 8001050:	e732      	b.n	8000eb8 <__udivmoddi4+0x124>
 8001052:	4608      	mov	r0, r1
 8001054:	e70a      	b.n	8000e6c <__udivmoddi4+0xd8>
 8001056:	4464      	add	r4, ip
 8001058:	3802      	subs	r0, #2
 800105a:	e742      	b.n	8000ee2 <__udivmoddi4+0x14e>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <MX_GPIO_Init+0xd0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <MX_GPIO_Init+0xd0>)
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_GPIO_Init+0xd0>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_GPIO_Init+0xd0>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <MX_GPIO_Init+0xd0>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <MX_GPIO_Init+0xd0>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_R_Pin|RGB_G_Pin|RGB_B_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2107      	movs	r1, #7
 80010da:	4816      	ldr	r0, [pc, #88]	; (8001134 <MX_GPIO_Init+0xd4>)
 80010dc:	f001 faee 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f001 fae8 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin;
 80010ec:	2307      	movs	r3, #7
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <MX_GPIO_Init+0xd4>)
 8001104:	f001 f958 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f001 f949 	bl	80023b8 <HAL_GPIO_Init>

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	48000800 	.word	0x48000800

08001138 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_I2C1_Init+0x80>)
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <MX_I2C1_Init+0x84>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802172;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001144:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <MX_I2C1_Init+0x88>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_I2C1_Init+0x80>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001150:	2201      	movs	r2, #1
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_I2C1_Init+0x80>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x80>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001172:	4811      	ldr	r0, [pc, #68]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001174:	f001 fad4 	bl	8002720 <HAL_I2C_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117e:	f000 f9a9 	bl	80014d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001186:	f002 f857 	bl	8003238 <HAL_I2CEx_ConfigAnalogFilter>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001190:	f000 f9a0 	bl	80014d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001198:	f002 f899 	bl	80032ce <HAL_I2CEx_ConfigDigitalFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 f997 	bl	80014d4 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_I2C1_Init+0x8c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <MX_I2C1_Init+0x8c>)
 80011ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011b0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000414 	.word	0x20000414
 80011bc:	40005400 	.word	0x40005400
 80011c0:	00802172 	.word	0x00802172
 80011c4:	40010000 	.word	0x40010000

080011c8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_I2C3_Init+0x80>)
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <MX_I2C3_Init+0x84>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00802C78;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <MX_I2C3_Init+0x80>)
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <MX_I2C3_Init+0x88>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_I2C3_Init+0x80>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_I2C3_Init+0x80>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_I2C3_Init+0x80>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_I2C3_Init+0x80>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_I2C3_Init+0x80>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_I2C3_Init+0x80>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C3_Init+0x80>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <MX_I2C3_Init+0x80>)
 8001204:	f001 fa8c 	bl	8002720 <HAL_I2C_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800120e:	f000 f961 	bl	80014d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_I2C3_Init+0x80>)
 8001218:	f002 f80e 	bl	8003238 <HAL_I2CEx_ConfigAnalogFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001222:	f000 f957 	bl	80014d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001226:	2100      	movs	r1, #0
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <MX_I2C3_Init+0x80>)
 800122a:	f002 f850 	bl	80032ce <HAL_I2CEx_ConfigDigitalFilter>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001234:	f000 f94e 	bl	80014d4 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C3);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_I2C3_Init+0x8c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <MX_I2C3_Init+0x8c>)
 800123e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001242:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000468 	.word	0x20000468
 800124c:	40007800 	.word	0x40007800
 8001250:	00802c78 	.word	0x00802c78
 8001254:	40010000 	.word	0x40010000

08001258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09e      	sub	sp, #120	; 0x78
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	2244      	movs	r2, #68	; 0x44
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f00f f867 	bl	801034c <memset>
  if(i2cHandle->Instance==I2C1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <HAL_I2C_MspInit+0x198>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d154      	bne.n	8001332 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001288:	2340      	movs	r3, #64	; 0x40
 800128a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800128c:	2300      	movs	r3, #0
 800128e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f004 fb7d 	bl	8005994 <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012a0:	f000 f918 	bl	80014d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	4a4c      	ldr	r2, [pc, #304]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c8:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 80012d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012da:	2312      	movs	r3, #18
 80012dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e6:	2304      	movs	r3, #4
 80012e8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f001 f860 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fc:	2312      	movs	r3, #18
 80012fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001308:	2304      	movs	r3, #4
 800130a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001310:	4619      	mov	r1, r3
 8001312:	4839      	ldr	r0, [pc, #228]	; (80013f8 <HAL_I2C_MspInit+0x1a0>)
 8001314:	f001 f850 	bl	80023b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 800131e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001322:	6593      	str	r3, [r2, #88]	; 0x58
 8001324:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001330:	e05a      	b.n	80013e8 <HAL_I2C_MspInit+0x190>
  else if(i2cHandle->Instance==I2C3)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a31      	ldr	r2, [pc, #196]	; (80013fc <HAL_I2C_MspInit+0x1a4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d155      	bne.n	80013e8 <HAL_I2C_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800133c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001340:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001342:	2300      	movs	r3, #0
 8001344:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fb22 	bl	8005994 <HAL_RCCEx_PeriphCLKConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_MspInit+0x102>
      Error_Handler();
 8001356:	f000 f8bd 	bl	80014d4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a25      	ldr	r2, [pc, #148]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AG_SDA_Pin;
 800138a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800139c:	2308      	movs	r3, #8
 800139e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(AG_SDA_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013a4:	4619      	mov	r1, r3
 80013a6:	4816      	ldr	r0, [pc, #88]	; (8001400 <HAL_I2C_MspInit+0x1a8>)
 80013a8:	f001 f806 	bl	80023b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AG_SCL_Pin;
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80013be:	2302      	movs	r3, #2
 80013c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(AG_SCL_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f000 fff4 	bl	80023b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80013d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013da:	6593      	str	r3, [r2, #88]	; 0x58
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
}
 80013e8:	bf00      	nop
 80013ea:	3778      	adds	r7, #120	; 0x78
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	40007800 	.word	0x40007800
 8001400:	48000800 	.word	0x48000800

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 faf7 	bl	80019fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f817 	bl	800143e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f7ff fe26 	bl	8001060 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001414:	f7ff fe90 	bl	8001138 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001418:	f7ff fed6 	bl	80011c8 <MX_I2C3_Init>
  MX_TIM2_Init();
 800141c:	f000 f9a4 	bl	8001768 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001420:	f000 fa14 	bl	800184c <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001424:	f00a fb7c 	bl	800bb20 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800142c:	f000 fb56 	bl	8001adc <HAL_Delay>
  user_shell_init();
 8001430:	f00d fb46 	bl	800eac0 <user_shell_init>
  imu_init();
 8001434:	f00d fc68 	bl	800ed08 <imu_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  imu_9_shell_cmd_to_do();
 8001438:	f00d fde0 	bl	800effc <imu_9_shell_cmd_to_do>
 800143c:	e7fc      	b.n	8001438 <main+0x34>

0800143e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b094      	sub	sp, #80	; 0x50
 8001442:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	2238      	movs	r2, #56	; 0x38
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f00e ff7d 	bl	801034c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001460:	2000      	movs	r0, #0
 8001462:	f003 fcb5 	bl	8004dd0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001466:	2321      	movs	r3, #33	; 0x21
 8001468:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800146a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001470:	2301      	movs	r3, #1
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001474:	2302      	movs	r3, #2
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001478:	2303      	movs	r3, #3
 800147a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800147c:	2306      	movs	r3, #6
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001480:	2355      	movs	r3, #85	; 0x55
 8001482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001484:	2302      	movs	r3, #2
 8001486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001488:	2302      	movs	r3, #2
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800148c:	2302      	movs	r3, #2
 800148e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	f107 0318 	add.w	r3, r7, #24
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fd4f 	bl	8004f38 <HAL_RCC_OscConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014a0:	f000 f818 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a4:	230f      	movs	r3, #15
 80014a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a8:	2303      	movs	r3, #3
 80014aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2104      	movs	r1, #4
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 f84d 	bl	800555c <HAL_RCC_ClockConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014c8:	f000 f804 	bl	80014d4 <Error_Handler>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3750      	adds	r7, #80	; 0x50
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x44>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_MspInit+0x44>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6613      	str	r3, [r2, #96]	; 0x60
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x44>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x44>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6593      	str	r3, [r2, #88]	; 0x58
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001516:	f003 fcff 	bl	8004f18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 fa94 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <USB_LP_IRQHandler+0x10>)
 8001582:	f001 ffe0 	bl	8003546 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000127c 	.word	0x2000127c

08001590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM2_IRQHandler+0x10>)
 8001596:	f004 fcaf 	bl	8005ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200004c0 	.word	0x200004c0

080015a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <USART1_IRQHandler+0x10>)
 80015aa:	f005 f967 	bl	800687c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000050c 	.word	0x2000050c

080015b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return 1;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_kill>:

int _kill(int pid, int sig)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015d2:	f00e ff7f 	bl	80104d4 <__errno>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2216      	movs	r2, #22
 80015da:	601a      	str	r2, [r3, #0]
  return -1;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_exit>:

void _exit (int status)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffe7 	bl	80015c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015fa:	e7fe      	b.n	80015fa <_exit+0x12>

080015fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e00a      	b.n	8001624 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800160e:	f3af 8000 	nop.w
 8001612:	4601      	mov	r1, r0
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	b2ca      	uxtb	r2, r1
 800161c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbf0      	blt.n	800160e <_read+0x12>
  }

  return len;
 800162c:	687b      	ldr	r3, [r7, #4]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e009      	b.n	800165c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf1      	blt.n	8001648 <_write+0x12>
  }
  return len;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_close>:

int _close(int file)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001696:	605a      	str	r2, [r3, #4]
  return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_isatty>:

int _isatty(int file)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f00e fee4 	bl	80104d4 <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20008000 	.word	0x20008000
 8001738:	00000800 	.word	0x00000800
 800173c:	200004bc 	.word	0x200004bc
 8001740:	20002398 	.word	0x20002398

08001744 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <SystemInit+0x20>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <SystemInit+0x20>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <MX_TIM2_Init+0x98>)
 8001788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_TIM2_Init+0x98>)
 8001790:	22a9      	movs	r2, #169	; 0xa9
 8001792:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_TIM2_Init+0x98>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_TIM2_Init+0x98>)
 800179c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_TIM2_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_TIM2_Init+0x98>)
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ae:	4814      	ldr	r0, [pc, #80]	; (8001800 <MX_TIM2_Init+0x98>)
 80017b0:	f004 fae0 	bl	8005d74 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017ba:	f7ff fe8b 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4619      	mov	r1, r3
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <MX_TIM2_Init+0x98>)
 80017cc:	f004 fce4 	bl	8006198 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017d6:	f7ff fe7d 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <MX_TIM2_Init+0x98>)
 80017e8:	f004 ff30 	bl	800664c <HAL_TIMEx_MasterConfigSynchronization>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017f2:	f7ff fe6f 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200004c0 	.word	0x200004c0

08001804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d113      	bne.n	800183e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_TIM_Base_MspInit+0x44>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_TIM_Base_MspInit+0x44>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_TIM_Base_MspInit+0x44>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	201c      	movs	r0, #28
 8001834:	f000 fa4f 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001838:	201c      	movs	r0, #28
 800183a:	f000 fa66 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <MX_USART1_UART_Init+0x90>)
 8001852:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <MX_USART1_UART_Init+0x94>)
 8001854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <MX_USART1_UART_Init+0x90>)
 8001858:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <MX_USART1_UART_Init+0x98>)
 800185a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <MX_USART1_UART_Init+0x90>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_USART1_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_USART1_UART_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_USART1_UART_Init+0x90>)
 8001870:	220c      	movs	r2, #12
 8001872:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_USART1_UART_Init+0x90>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_USART1_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_USART1_UART_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_USART1_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_USART1_UART_Init+0x90>)
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001892:	4812      	ldr	r0, [pc, #72]	; (80018dc <MX_USART1_UART_Init+0x90>)
 8001894:	f004 ffa2 	bl	80067dc <HAL_UART_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800189e:	f7ff fe19 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a2:	2100      	movs	r1, #0
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_USART1_UART_Init+0x90>)
 80018a6:	f006 f8b0 	bl	8007a0a <HAL_UARTEx_SetTxFifoThreshold>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80018b0:	f7ff fe10 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b4:	2100      	movs	r1, #0
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <MX_USART1_UART_Init+0x90>)
 80018b8:	f006 f8e5 	bl	8007a86 <HAL_UARTEx_SetRxFifoThreshold>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80018c2:	f7ff fe07 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_USART1_UART_Init+0x90>)
 80018c8:	f006 f866 	bl	8007998 <HAL_UARTEx_DisableFifoMode>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80018d2:	f7ff fdff 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000050c 	.word	0x2000050c
 80018e0:	40013800 	.word	0x40013800
 80018e4:	001e8480 	.word	0x001e8480

080018e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b09a      	sub	sp, #104	; 0x68
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	2244      	movs	r2, #68	; 0x44
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f00e fd1f 	bl	801034c <memset>
  if(uartHandle->Instance==USART1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d13f      	bne.n	8001998 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001918:	2301      	movs	r3, #1
 800191a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4618      	mov	r0, r3
 8001926:	f004 f835 	bl	8005994 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001930:	f7ff fdd0 	bl	80014d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 8001936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001938:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 800193a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193e:	6613      	str	r3, [r2, #96]	; 0x60
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001964:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001968:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001976:	2307      	movs	r3, #7
 8001978:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001984:	f000 fd18 	bl	80023b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2101      	movs	r1, #1
 800198c:	2025      	movs	r0, #37	; 0x25
 800198e:	f000 f9a2 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001992:	2025      	movs	r0, #37	; 0x25
 8001994:	f000 f9b9 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001998:	bf00      	nop
 800199a:	3768      	adds	r7, #104	; 0x68
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40021000 	.word	0x40021000

080019a8 <Reset_Handler>:
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <LoopForever+0x2>)
 80019aa:	4685      	mov	sp, r0
 80019ac:	f7ff feca 	bl	8001744 <SystemInit>
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <LoopForever+0x6>)
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <LoopForever+0xa>)
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <LoopForever+0xe>)
 80019b6:	2300      	movs	r3, #0
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:
 80019ba:	58d4      	ldr	r4, [r2, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:
 80019c0:	18c4      	adds	r4, r0, r3
 80019c2:	428c      	cmp	r4, r1
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LoopForever+0x12>)
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <LoopForever+0x16>)
 80019ca:	2300      	movs	r3, #0
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>
 80019d6:	f00e fd83 	bl	80104e0 <__libc_init_array>
 80019da:	f7ff fd13 	bl	8001404 <main>

080019de <LoopForever>:
 80019de:	e7fe      	b.n	80019de <LoopForever>
 80019e0:	20008000 	.word	0x20008000
 80019e4:	20000000 	.word	0x20000000
 80019e8:	200003f8 	.word	0x200003f8
 80019ec:	080143b4 	.word	0x080143b4
 80019f0:	200003f8 	.word	0x200003f8
 80019f4:	20002398 	.word	0x20002398

080019f8 <ADC1_2_IRQHandler>:
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>

080019fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f95b 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f80e 	bl	8001a2c <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	e001      	b.n	8001a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1c:	f7ff fd60 	bl	80014e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a20:	79fb      	ldrb	r3, [r7, #7]

}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_InitTick+0x68>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d022      	beq.n	8001a86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_InitTick+0x6c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_InitTick+0x68>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f966 	bl	8001d26 <HAL_SYSTICK_Config>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10f      	bne.n	8001a80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	d809      	bhi.n	8001a7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a66:	2200      	movs	r2, #0
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6e:	f000 f932 	bl	8001cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_InitTick+0x70>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e004      	b.n	8001a8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e001      	b.n	8001a8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x1c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_IncTick+0x1c>)
 8001ab0:	6013      	str	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	200005a0 	.word	0x200005a0
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200005a0 	.word	0x200005a0

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d004      	beq.n	8001b00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_Delay+0x40>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b00:	bf00      	nop
 8001b02:	f7ff ffdf 	bl	8001ac4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d8f7      	bhi.n	8001b02 <HAL_Delay+0x26>
  {
  }
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000008 	.word	0x20000008

08001b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <__NVIC_GetPriorityGrouping+0x18>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0307 	and.w	r3, r3, #7
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	db0b      	blt.n	8001bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	4907      	ldr	r1, [pc, #28]	; (8001bbc <__NVIC_EnableIRQ+0x38>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	; (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	; (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff8e 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff29 	bl	8001b20 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff40 	bl	8001b68 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff90 	bl	8001c14 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5f 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff33 	bl	8001b84 <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa4 	bl	8001c7c <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d005      	beq.n	8001d62 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e037      	b.n	8001dd2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 020e 	bic.w	r2, r2, #14
 8001d70:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d80:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f003 021f 	and.w	r2, r3, #31
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f202 	lsl.w	r2, r1, r2
 8001da4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dd0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d00d      	beq.n	8001e24 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e047      	b.n	8001eb4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 020e 	bic.w	r2, r2, #14
 8001e32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f202 	lsl.w	r2, r1, r2
 8001e66:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e70:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00c      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e92:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
    }
  }
  return status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <HAL_FLASH_Program+0xd0>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_FLASH_Program+0x1e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e053      	b.n	8001f86 <HAL_FLASH_Program+0xc6>
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HAL_FLASH_Program+0xd0>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ee8:	f000 f892 	bl	8002010 <FLASH_WaitForLastOperation>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d143      	bne.n	8001f7e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_FLASH_Program+0xd0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_FLASH_Program+0xd4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_FLASH_Program+0xd4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_FLASH_Program+0xd4>)
 8001f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f12:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_FLASH_Program+0xd0>)
 8001f16:	2202      	movs	r2, #2
 8001f18:	771a      	strb	r2, [r3, #28]
 8001f1a:	e002      	b.n	8001f22 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_FLASH_Program+0xd0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d107      	bne.n	8001f38 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f2c:	68b8      	ldr	r0, [r7, #8]
 8001f2e:	f000 f8c3 	bl	80020b8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001f32:	2301      	movs	r3, #1
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	e010      	b.n	8001f5a <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d002      	beq.n	8001f44 <HAL_FLASH_Program+0x84>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d10a      	bne.n	8001f5a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4619      	mov	r1, r3
 8001f48:	68b8      	ldr	r0, [r7, #8]
 8001f4a:	f000 f8db 	bl	8002104 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d102      	bne.n	8001f5a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001f54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f58:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f5e:	f000 f857 	bl	8002010 <FLASH_WaitForLastOperation>
 8001f62:	4603      	mov	r3, r0
 8001f64:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_FLASH_Program+0xd4>)
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <HAL_FLASH_Program+0xd4>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001f7a:	f000 f9d3 	bl	8002324 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <HAL_FLASH_Program+0xd0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000000c 	.word	0x2000000c
 8001f94:	40022000 	.word	0x40022000

08001f98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_FLASH_Unlock+0x38>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	da0b      	bge.n	8001fc2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_FLASH_Unlock+0x38>)
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_FLASH_Unlock+0x3c>)
 8001fae:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_FLASH_Unlock+0x38>)
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_FLASH_Unlock+0x40>)
 8001fb4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_FLASH_Unlock+0x38>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	da01      	bge.n	8001fc2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	45670123 	.word	0x45670123
 8001fd8:	cdef89ab 	.word	0xcdef89ab

08001fdc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_FLASH_Lock+0x30>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_FLASH_Lock+0x30>)
 8001fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ff0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_FLASH_Lock+0x30>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da01      	bge.n	8001ffe <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40022000 	.word	0x40022000

08002010 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff fd54 	bl	8001ac4 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800201e:	e009      	b.n	8002034 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002020:	f7ff fd50 	bl	8001ac4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	d201      	bcs.n	8002034 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e038      	b.n	80020a6 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002034:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <FLASH_WaitForLastOperation+0xa0>)
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002040:	d0ee      	beq.n	8002020 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <FLASH_WaitForLastOperation+0xa0>)
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800204a:	4013      	ands	r3, r2
 800204c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01e      	beq.n	8002092 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <FLASH_WaitForLastOperation+0xa4>)
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
 800205c:	4a15      	ldr	r2, [pc, #84]	; (80020b4 <FLASH_WaitForLastOperation+0xa4>)
 800205e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <FLASH_WaitForLastOperation+0x6a>
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <FLASH_WaitForLastOperation+0xa0>)
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <FLASH_WaitForLastOperation+0xa0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	618b      	str	r3, [r1, #24]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <FLASH_WaitForLastOperation+0x7e>
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <FLASH_WaitForLastOperation+0xa0>)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800208c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e009      	b.n	80020a6 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <FLASH_WaitForLastOperation+0xa0>)
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <FLASH_WaitForLastOperation+0xa0>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000
 80020b4:	2000000c 	.word	0x2000000c

080020b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <FLASH_Program_DoubleWord+0x48>)
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <FLASH_Program_DoubleWord+0x48>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80020d6:	f3bf 8f6f 	isb	sy
}
 80020da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80020dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	000a      	movs	r2, r1
 80020ea:	2300      	movs	r3, #0
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	3104      	adds	r1, #4
 80020f0:	4613      	mov	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40022000 	.word	0x40022000

08002104 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800210e:	2340      	movs	r3, #64	; 0x40
 8002110:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <FLASH_Program_Fast+0x68>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <FLASH_Program_Fast+0x68>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002124:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002126:	f3ef 8310 	mrs	r3, PRIMASK
 800212a:	60fb      	str	r3, [r7, #12]
  return(result);
 800212c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800212e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002130:	b672      	cpsid	i
}
 8002132:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	3304      	adds	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3304      	adds	r3, #4
 8002146:	617b      	str	r3, [r7, #20]
    row_index--;
 8002148:	7ffb      	ldrb	r3, [r7, #31]
 800214a:	3b01      	subs	r3, #1
 800214c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800214e:	7ffb      	ldrb	r3, [r7, #31]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ef      	bne.n	8002134 <FLASH_Program_Fast+0x30>
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f383 8810 	msr	PRIMASK, r3
}
 800215e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002160:	bf00      	nop
 8002162:	3724      	adds	r7, #36	; 0x24
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40022000 	.word	0x40022000

08002170 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_FLASHEx_Erase+0x128>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_FLASHEx_Erase+0x16>
 8002182:	2302      	movs	r3, #2
 8002184:	e083      	b.n	800228e <HAL_FLASHEx_Erase+0x11e>
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_FLASHEx_Erase+0x128>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800218c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002190:	f7ff ff3e 	bl	8002010 <FLASH_WaitForLastOperation>
 8002194:	4603      	mov	r3, r0
 8002196:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d173      	bne.n	8002286 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800219e:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_FLASHEx_Erase+0x128>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80021a4:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d009      	beq.n	80021d0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80021bc:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a36      	ldr	r2, [pc, #216]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 80021c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021c6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_FLASHEx_Erase+0x128>)
 80021ca:	2203      	movs	r2, #3
 80021cc:	771a      	strb	r2, [r3, #28]
 80021ce:	e016      	b.n	80021fe <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_FLASHEx_Erase+0x128>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	771a      	strb	r2, [r3, #28]
 80021d6:	e012      	b.n	80021fe <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2c      	ldr	r2, [pc, #176]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 80021ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ee:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_FLASHEx_Erase+0x128>)
 80021f2:	2202      	movs	r2, #2
 80021f4:	771a      	strb	r2, [r3, #28]
 80021f6:	e002      	b.n	80021fe <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_FLASHEx_Erase+0x128>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d111      	bne.n	800222a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f848 	bl	80022a0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002214:	f7ff fefc 	bl	8002010 <FLASH_WaitForLastOperation>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	4a1e      	ldr	r2, [pc, #120]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 8002222:	f023 0304 	bic.w	r3, r3, #4
 8002226:	6153      	str	r3, [r2, #20]
 8002228:	e02b      	b.n	8002282 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	e01b      	b.n	8002272 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4619      	mov	r1, r3
 8002240:	68b8      	ldr	r0, [r7, #8]
 8002242:	f000 f84b 	bl	80022dc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800224a:	f7ff fee1 	bl	8002010 <FLASH_WaitForLastOperation>
 800224e:	4603      	mov	r3, r0
 8002250:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_FLASHEx_Erase+0x12c>)
 8002258:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 800225c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	601a      	str	r2, [r3, #0]
          break;
 800226a:	e00a      	b.n	8002282 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3301      	adds	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4413      	add	r3, r2
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	d3db      	bcc.n	800223a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002282:	f000 f84f 	bl	8002324 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_FLASHEx_Erase+0x128>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]

  return status;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000000c 	.word	0x2000000c
 800229c:	40022000 	.word	0x40022000

080022a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <FLASH_MassErase+0x38>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <FLASH_MassErase+0x38>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <FLASH_MassErase+0x38>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <FLASH_MassErase+0x38>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6153      	str	r3, [r2, #20]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000

080022dc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <FLASH_PageErase+0x44>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80022f6:	490a      	ldr	r1, [pc, #40]	; (8002320 <FLASH_PageErase+0x44>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <FLASH_PageErase+0x44>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <FLASH_PageErase+0x44>)
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <FLASH_PageErase+0x44>)
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <FLASH_PageErase+0x44>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002312:	6153      	str	r3, [r2, #20]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40022000 	.word	0x40022000

08002324 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <FLASH_FlushCaches+0x8c>)
 800232c:	7f1b      	ldrb	r3, [r3, #28]
 800232e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d002      	beq.n	800233c <FLASH_FlushCaches+0x18>
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d117      	bne.n	800236c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <FLASH_FlushCaches+0x90>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <FLASH_FlushCaches+0x90>)
 8002342:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002346:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <FLASH_FlushCaches+0x90>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <FLASH_FlushCaches+0x90>)
 800234e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <FLASH_FlushCaches+0x90>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <FLASH_FlushCaches+0x90>)
 800235a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800235e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <FLASH_FlushCaches+0x90>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <FLASH_FlushCaches+0x90>)
 8002366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d002      	beq.n	8002378 <FLASH_FlushCaches+0x54>
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d111      	bne.n	800239c <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <FLASH_FlushCaches+0x90>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <FLASH_FlushCaches+0x90>)
 800237e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <FLASH_FlushCaches+0x90>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <FLASH_FlushCaches+0x90>)
 800238a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800238e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <FLASH_FlushCaches+0x90>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <FLASH_FlushCaches+0x90>)
 8002396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <FLASH_FlushCaches+0x8c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	771a      	strb	r2, [r3, #28]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	2000000c 	.word	0x2000000c
 80023b4:	40022000 	.word	0x40022000

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023c6:	e15a      	b.n	800267e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	4013      	ands	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 814c 	beq.w	8002678 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d005      	beq.n	80023f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d130      	bne.n	800245a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800242e:	2201      	movs	r2, #1
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	f003 0201 	and.w	r2, r3, #1
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b03      	cmp	r3, #3
 8002464:	d017      	beq.n	8002496 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d123      	bne.n	80024ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	08da      	lsrs	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3208      	adds	r2, #8
 80024aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	08da      	lsrs	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3208      	adds	r2, #8
 80024e4:	6939      	ldr	r1, [r7, #16]
 80024e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	2203      	movs	r2, #3
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0203 	and.w	r2, r3, #3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80a6 	beq.w	8002678 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252c:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_GPIO_Init+0x2e4>)
 800252e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002530:	4a5a      	ldr	r2, [pc, #360]	; (800269c <HAL_GPIO_Init+0x2e4>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6613      	str	r3, [r2, #96]	; 0x60
 8002538:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_GPIO_Init+0x2e4>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002544:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800256e:	d01f      	beq.n	80025b0 <HAL_GPIO_Init+0x1f8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d019      	beq.n	80025ac <HAL_GPIO_Init+0x1f4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <HAL_GPIO_Init+0x2f0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_GPIO_Init+0x1f0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a4a      	ldr	r2, [pc, #296]	; (80026ac <HAL_GPIO_Init+0x2f4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00d      	beq.n	80025a4 <HAL_GPIO_Init+0x1ec>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a49      	ldr	r2, [pc, #292]	; (80026b0 <HAL_GPIO_Init+0x2f8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <HAL_GPIO_Init+0x1e8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a48      	ldr	r2, [pc, #288]	; (80026b4 <HAL_GPIO_Init+0x2fc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_GPIO_Init+0x1e4>
 8002598:	2305      	movs	r3, #5
 800259a:	e00a      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 800259c:	2306      	movs	r3, #6
 800259e:	e008      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e006      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025b0:	2300      	movs	r3, #0
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c2:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025f4:	4a30      	ldr	r2, [pc, #192]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025fa:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800261e:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <HAL_GPIO_Init+0x300>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_GPIO_Init+0x300>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <HAL_GPIO_Init+0x300>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_GPIO_Init+0x300>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002672:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_GPIO_Init+0x300>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f ae9d 	bne.w	80023c8 <HAL_GPIO_Init+0x10>
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010000 	.word	0x40010000
 80026a4:	48000400 	.word	0x48000400
 80026a8:	48000800 	.word	0x48000800
 80026ac:	48000c00 	.word	0x48000c00
 80026b0:	48001000 	.word	0x48001000
 80026b4:	48001400 	.word	0x48001400
 80026b8:	40010400 	.word	0x40010400

080026bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
 80026c8:	4613      	mov	r3, r2
 80026ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026cc:	787b      	ldrb	r3, [r7, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43d9      	mvns	r1, r3
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	400b      	ands	r3, r1
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e08d      	b.n	800284e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fd86 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	; 0x24
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e006      	b.n	80027a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d108      	bne.n	80027c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	e007      	b.n	80027d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69d9      	ldr	r1, [r3, #28]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	460b      	mov	r3, r1
 800286c:	813b      	strh	r3, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b20      	cmp	r3, #32
 800287c:	f040 80f9 	bne.w	8002a72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_I2C_Mem_Write+0x34>
 8002886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0ed      	b.n	8002a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_I2C_Mem_Write+0x4e>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e0e6      	b.n	8002a74 <HAL_I2C_Mem_Write+0x21c>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028ae:	f7ff f909 	bl	8001ac4 <HAL_GetTick>
 80028b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2319      	movs	r3, #25
 80028ba:	2201      	movs	r2, #1
 80028bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fac3 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d1      	b.n	8002a74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2221      	movs	r2, #33	; 0x21
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2240      	movs	r2, #64	; 0x40
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a3a      	ldr	r2, [r7, #32]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f8:	88f8      	ldrh	r0, [r7, #6]
 80028fa:	893a      	ldrh	r2, [r7, #8]
 80028fc:	8979      	ldrh	r1, [r7, #10]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	4603      	mov	r3, r0
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f9d3 	bl	8002cb4 <I2C_RequestMemoryWrite>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0a9      	b.n	8002a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2bff      	cmp	r3, #255	; 0xff
 8002928:	d90e      	bls.n	8002948 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	22ff      	movs	r2, #255	; 0xff
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	b2da      	uxtb	r2, r3
 8002936:	8979      	ldrh	r1, [r7, #10]
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fc47 	bl	80031d4 <I2C_TransferConfig>
 8002946:	e00f      	b.n	8002968 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	b2da      	uxtb	r2, r3
 8002958:	8979      	ldrh	r1, [r7, #10]
 800295a:	2300      	movs	r3, #0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fc36 	bl	80031d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fac6 	bl	8002efe <I2C_WaitOnTXISFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e07b      	b.n	8002a74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d034      	beq.n	8002a20 <HAL_I2C_Mem_Write+0x1c8>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d130      	bne.n	8002a20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	2200      	movs	r2, #0
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fa3f 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e04d      	b.n	8002a74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2bff      	cmp	r3, #255	; 0xff
 80029e0:	d90e      	bls.n	8002a00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	8979      	ldrh	r1, [r7, #10]
 80029f0:	2300      	movs	r3, #0
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fbeb 	bl	80031d4 <I2C_TransferConfig>
 80029fe:	e00f      	b.n	8002a20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	8979      	ldrh	r1, [r7, #10]
 8002a12:	2300      	movs	r3, #0
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fbda 	bl	80031d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d19e      	bne.n	8002968 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 faac 	bl	8002f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e01a      	b.n	8002a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2220      	movs	r2, #32
 8002a44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_I2C_Mem_Write+0x224>)
 8002a52:	400b      	ands	r3, r1
 8002a54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
  }
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	fe00e800 	.word	0xfe00e800

08002a80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	f040 80fd 	bne.w	8002ca2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x34>
 8002aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0f1      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_Mem_Read+0x4e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e0ea      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x224>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ad6:	f7fe fff5 	bl	8001ac4 <HAL_GetTick>
 8002ada:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2319      	movs	r3, #25
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f9af 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0d5      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2222      	movs	r2, #34	; 0x22
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2240      	movs	r2, #64	; 0x40
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b20:	88f8      	ldrh	r0, [r7, #6]
 8002b22:	893a      	ldrh	r2, [r7, #8]
 8002b24:	8979      	ldrh	r1, [r7, #10]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4603      	mov	r3, r0
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f913 	bl	8002d5c <I2C_RequestMemoryRead>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0ad      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2bff      	cmp	r3, #255	; 0xff
 8002b50:	d90e      	bls.n	8002b70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	22ff      	movs	r2, #255	; 0xff
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	8979      	ldrh	r1, [r7, #10]
 8002b60:	4b52      	ldr	r3, [pc, #328]	; (8002cac <HAL_I2C_Mem_Read+0x22c>)
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fb33 	bl	80031d4 <I2C_TransferConfig>
 8002b6e:	e00f      	b.n	8002b90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <HAL_I2C_Mem_Read+0x22c>)
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fb22 	bl	80031d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	2200      	movs	r2, #0
 8002b98:	2104      	movs	r1, #4
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f956 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07c      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d034      	beq.n	8002c50 <HAL_I2C_Mem_Read+0x1d0>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d130      	bne.n	8002c50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f927 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e04d      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2bff      	cmp	r3, #255	; 0xff
 8002c10:	d90e      	bls.n	8002c30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	22ff      	movs	r2, #255	; 0xff
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	2300      	movs	r3, #0
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fad3 	bl	80031d4 <I2C_TransferConfig>
 8002c2e:	e00f      	b.n	8002c50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	8979      	ldrh	r1, [r7, #10]
 8002c42:	2300      	movs	r3, #0
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fac2 	bl	80031d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d19a      	bne.n	8002b90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f994 	bl	8002f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e01a      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2220      	movs	r2, #32
 8002c74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_I2C_Mem_Read+0x230>)
 8002c82:	400b      	ands	r3, r1
 8002c84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	80002400 	.word	0x80002400
 8002cb0:	fe00e800 	.word	0xfe00e800

08002cb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	817b      	strh	r3, [r7, #10]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	813b      	strh	r3, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <I2C_RequestMemoryWrite+0xa4>)
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fa79 	bl	80031d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	69b9      	ldr	r1, [r7, #24]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f909 	bl	8002efe <I2C_WaitOnTXISFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e02c      	b.n	8002d50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfc:	893b      	ldrh	r3, [r7, #8]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	629a      	str	r2, [r3, #40]	; 0x28
 8002d06:	e015      	b.n	8002d34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d08:	893b      	ldrh	r3, [r7, #8]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	69b9      	ldr	r1, [r7, #24]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f8ef 	bl	8002efe <I2C_WaitOnTXISFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e012      	b.n	8002d50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2a:	893b      	ldrh	r3, [r7, #8]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f884 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	80002000 	.word	0x80002000

08002d5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	4608      	mov	r0, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	817b      	strh	r3, [r7, #10]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	813b      	strh	r3, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	8979      	ldrh	r1, [r7, #10]
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <I2C_RequestMemoryRead+0xa4>)
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	2300      	movs	r3, #0
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fa26 	bl	80031d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	69b9      	ldr	r1, [r7, #24]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f8b6 	bl	8002efe <I2C_WaitOnTXISFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e02c      	b.n	8002df6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28
 8002dac:	e015      	b.n	8002dda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dae:	893b      	ldrh	r3, [r7, #8]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f89c 	bl	8002efe <I2C_WaitOnTXISFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e012      	b.n	8002df6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd0:	893b      	ldrh	r3, [r7, #8]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2200      	movs	r2, #0
 8002de2:	2140      	movs	r1, #64	; 0x40
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f831 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	80002000 	.word	0x80002000

08002e04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d103      	bne.n	8002e22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d007      	beq.n	8002e40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	619a      	str	r2, [r3, #24]
  }
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5c:	e03b      	b.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f8d6 	bl	8003014 <I2C_IsErrorOccurred>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e041      	b.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d02d      	beq.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7fe fe23 	bl	8001ac4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d122      	bne.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d113      	bne.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e00f      	b.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d0b4      	beq.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f0a:	e033      	b.n	8002f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f87f 	bl	8003014 <I2C_IsErrorOccurred>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e031      	b.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d025      	beq.n	8002f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7fe fdcc 	bl	8001ac4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11a      	bne.n	8002f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d013      	beq.n	8002f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d1c4      	bne.n	8002f0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f98:	e02f      	b.n	8002ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f838 	bl	8003014 <I2C_IsErrorOccurred>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e02d      	b.n	800300a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe fd89 	bl	8001ac4 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11a      	bne.n	8002ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d013      	beq.n	8002ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e007      	b.n	800300a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b20      	cmp	r3, #32
 8003006:	d1c8      	bne.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	d068      	beq.n	8003112 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2210      	movs	r2, #16
 8003046:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003048:	e049      	b.n	80030de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d045      	beq.n	80030de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fe fd37 	bl	8001ac4 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <I2C_IsErrorOccurred+0x54>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d13a      	bne.n	80030de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003072:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800307a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308a:	d121      	bne.n	80030d0 <I2C_IsErrorOccurred+0xbc>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003092:	d01d      	beq.n	80030d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	2b20      	cmp	r3, #32
 8003098:	d01a      	beq.n	80030d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030aa:	f7fe fd0b 	bl	8001ac4 <HAL_GetTick>
 80030ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b0:	e00e      	b.n	80030d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030b2:	f7fe fd07 	bl	8001ac4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b19      	cmp	r3, #25
 80030be:	d907      	bls.n	80030d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	f043 0320 	orr.w	r3, r3, #32
 80030c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80030ce:	e006      	b.n	80030de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d1e9      	bne.n	80030b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d003      	beq.n	80030f4 <I2C_IsErrorOccurred+0xe0>
 80030ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0aa      	beq.n	800304a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2220      	movs	r2, #32
 8003102:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003134:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003156:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00b      	beq.n	8003180 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f043 0302 	orr.w	r3, r3, #2
 800316e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01c      	beq.n	80031c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fe3b 	bl	8002e04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <I2C_IsErrorOccurred+0x1bc>)
 800319a:	400b      	ands	r3, r1
 800319c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3728      	adds	r7, #40	; 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	fe00e800 	.word	0xfe00e800

080031d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	4613      	mov	r3, r2
 80031e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031ec:	7a7b      	ldrb	r3, [r7, #9]
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003202:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	0d5b      	lsrs	r3, r3, #21
 800320e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <I2C_TransferConfig+0x60>)
 8003214:	430b      	orrs	r3, r1
 8003216:	43db      	mvns	r3, r3
 8003218:	ea02 0103 	and.w	r1, r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	03ff63ff 	.word	0x03ff63ff

08003238 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b20      	cmp	r3, #32
 800324c:	d138      	bne.n	80032c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003258:	2302      	movs	r3, #2
 800325a:	e032      	b.n	80032c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2224      	movs	r2, #36	; 0x24
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800328a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6819      	ldr	r1, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d139      	bne.n	8003358 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e033      	b.n	800335a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2224      	movs	r2, #36	; 0x24
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003320:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0c0      	b.n	80034fa <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f008 fddb 	bl	800bf48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f004 fc15 	bl	8007bce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e03e      	b.n	8003428 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	3311      	adds	r3, #17
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	3310      	adds	r3, #16
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	3313      	adds	r3, #19
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	440b      	add	r3, r1
 80033f4:	3320      	adds	r3, #32
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	3324      	adds	r3, #36	; 0x24
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	3301      	adds	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	791b      	ldrb	r3, [r3, #4]
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	429a      	cmp	r2, r3
 8003430:	d3bb      	bcc.n	80033aa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e044      	b.n	80034c2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	440b      	add	r3, r1
 8003446:	f203 1351 	addw	r3, r3, #337	; 0x151
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	440b      	add	r3, r1
 800345c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	3301      	adds	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	791b      	ldrb	r3, [r3, #4]
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d3b5      	bcc.n	8003438 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034d8:	f004 fb94 	bl	8007c04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7a9b      	ldrb	r3, [r3, #10]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f001 fc41 	bl	8004d7a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_PCD_Start+0x16>
 8003514:	2302      	movs	r3, #2
 8003516:	e012      	b.n	800353e <HAL_PCD_Start+0x3c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f004 fb3b 	bl	8007ba0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f006 fdfb 	bl	800a12a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f006 fe00 	bl	800a158 <USB_ReadInterrupts>
 8003558:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb04 	bl	8003b72 <PCD_EP_ISR_Handler>

    return;
 800356a:	e110      	b.n	800378e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003572:	2b00      	cmp	r3, #0
 8003574:	d013      	beq.n	800359e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	b292      	uxth	r2, r2
 800358a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f008 fd6b 	bl	800c06a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003594:	2100      	movs	r1, #0
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8fc 	bl	8003794 <HAL_PCD_SetAddress>

    return;
 800359c:	e0f7      	b.n	800378e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00c      	beq.n	80035c2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ba:	b292      	uxth	r2, r2
 80035bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80035c0:	e0e5      	b.n	800378e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035de:	b292      	uxth	r2, r2
 80035e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80035e4:	e0d3      	b.n	800378e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d034      	beq.n	800365a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0204 	bic.w	r2, r2, #4
 8003602:	b292      	uxth	r2, r2
 8003604:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003610:	b29a      	uxth	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0208 	bic.w	r2, r2, #8
 800361a:	b292      	uxth	r2, r2
 800361c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003632:	2100      	movs	r1, #0
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f008 ff0b 	bl	800c450 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f008 fd4e 	bl	800c0dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003652:	b292      	uxth	r2, r2
 8003654:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003658:	e099      	b.n	800378e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003660:	2b00      	cmp	r3, #0
 8003662:	d027      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800366c:	b29a      	uxth	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	b292      	uxth	r2, r2
 8003678:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003684:	b29a      	uxth	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800368e:	b292      	uxth	r2, r2
 8003690:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0204 	orr.w	r2, r2, #4
 80036a6:	b292      	uxth	r2, r2
 80036a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f008 fcfb 	bl	800c0a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80036b2:	e06c      	b.n	800378e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d040      	beq.n	8003740 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d0:	b292      	uxth	r2, r2
 80036d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d12b      	bne.n	8003738 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0204 	orr.w	r2, r2, #4
 80036f2:	b292      	uxth	r2, r2
 80036f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003700:	b29a      	uxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0208 	orr.w	r2, r2, #8
 800370a:	b292      	uxth	r2, r2
 800370c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003720:	b29b      	uxth	r3, r3
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800372e:	2101      	movs	r1, #1
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f008 fe8d 	bl	800c450 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003736:	e02a      	b.n	800378e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f008 fcb5 	bl	800c0a8 <HAL_PCD_SuspendCallback>
    return;
 800373e:	e026      	b.n	800378e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00f      	beq.n	800376a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800375c:	b292      	uxth	r2, r2
 800375e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f008 fc73 	bl	800c04e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003768:	e011      	b.n	800378e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00c      	beq.n	800378e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800377c:	b29a      	uxth	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003786:	b292      	uxth	r2, r2
 8003788:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800378c:	bf00      	nop
  }
}
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_PCD_SetAddress+0x1a>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e012      	b.n	80037d4 <HAL_PCD_SetAddress+0x40>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f006 fc9c 	bl	800a102 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	4608      	mov	r0, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	461a      	mov	r2, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	70fb      	strb	r3, [r7, #3]
 80037ee:	460b      	mov	r3, r1
 80037f0:	803b      	strh	r3, [r7, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da0e      	bge.n	8003820 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 0207 	and.w	r2, r3, #7
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	3310      	adds	r3, #16
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	705a      	strb	r2, [r3, #1]
 800381e:	e00e      	b.n	800383e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	f003 0207 	and.w	r2, r3, #7
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800384a:	883a      	ldrh	r2, [r7, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	78ba      	ldrb	r2, [r7, #2]
 8003854:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003856:	78bb      	ldrb	r3, [r7, #2]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d102      	bne.n	8003862 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_PCD_EP_Open+0x94>
 800386c:	2302      	movs	r3, #2
 800386e:	e00e      	b.n	800388e <HAL_PCD_EP_Open+0xb2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68f9      	ldr	r1, [r7, #12]
 800387e:	4618      	mov	r0, r3
 8003880:	f004 f9de 	bl	8007c40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800388c:	7afb      	ldrb	r3, [r7, #11]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	da0e      	bge.n	80038c8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 0207 	and.w	r2, r3, #7
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	3310      	adds	r3, #16
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	705a      	strb	r2, [r3, #1]
 80038c6:	e00e      	b.n	80038e6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	f003 0207 	and.w	r2, r3, #7
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_PCD_EP_Close+0x6a>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e00e      	b.n	800391e <HAL_PCD_EP_Close+0x88>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68f9      	ldr	r1, [r7, #12]
 800390e:	4618      	mov	r0, r3
 8003910:	f004 fd5a 	bl	80083c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	460b      	mov	r3, r1
 8003934:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003936:	7afb      	ldrb	r3, [r7, #11]
 8003938:	f003 0207 	and.w	r2, r3, #7
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2200      	movs	r2, #0
 8003964:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	b2da      	uxtb	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	4618      	mov	r0, r3
 800397a:	f004 ff12 	bl	80087a2 <USB_EPStartXfer>

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 0207 	and.w	r2, r3, #7
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	440b      	add	r3, r1
 80039a6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	460b      	mov	r3, r1
 80039c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c8:	7afb      	ldrb	r3, [r7, #11]
 80039ca:	f003 0207 	and.w	r2, r3, #7
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	3310      	adds	r3, #16
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2200      	movs	r2, #0
 80039fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2201      	movs	r2, #1
 8003a02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6979      	ldr	r1, [r7, #20]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f004 fec3 	bl	80087a2 <USB_EPStartXfer>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	7912      	ldrb	r2, [r2, #4]
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e03e      	b.n	8003ac2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da0e      	bge.n	8003a6a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 0207 	and.w	r2, r3, #7
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	3310      	adds	r3, #16
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	705a      	strb	r2, [r3, #1]
 8003a68:	e00c      	b.n	8003a84 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_PCD_EP_SetStall+0x7e>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e00e      	b.n	8003ac2 <HAL_PCD_EP_SetStall+0x9c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68f9      	ldr	r1, [r7, #12]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f006 fa26 	bl	8009f04 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	7912      	ldrb	r2, [r2, #4]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e040      	b.n	8003b6a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	da0e      	bge.n	8003b0e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	f003 0207 	and.w	r2, r3, #7
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	3310      	adds	r3, #16
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	705a      	strb	r2, [r3, #1]
 8003b0c:	e00e      	b.n	8003b2c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 0207 	and.w	r2, r3, #7
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_PCD_EP_ClrStall+0x82>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e00e      	b.n	8003b6a <HAL_PCD_EP_ClrStall+0xa0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f006 fa23 	bl	8009fa6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b096      	sub	sp, #88	; 0x58
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b7a:	e3ae      	b.n	80042da <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003b96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 8170 	bne.w	8003e80 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d14d      	bne.n	8003c48 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	81fb      	strh	r3, [r7, #14]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	89fb      	ldrh	r3, [r7, #14]
 8003bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3310      	adds	r3, #16
 8003bd4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	441a      	add	r2, r3
 8003c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f008 fa03 	bl	800c01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7b1b      	ldrb	r3, [r3, #12]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 835d 	beq.w	80042da <PCD_EP_ISR_Handler+0x768>
 8003c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f040 8358 	bne.w	80042da <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7b1b      	ldrb	r3, [r3, #12]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	731a      	strb	r2, [r3, #12]
 8003c46:	e348      	b.n	80042da <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c4e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d032      	beq.n	8003ccc <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4413      	add	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f006 faab 	bl	800a1fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	823b      	strh	r3, [r7, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	8a3a      	ldrh	r2, [r7, #16]
 8003cbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cc0:	b292      	uxth	r2, r2
 8003cc2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f008 f97b 	bl	800bfc0 <HAL_PCD_SetupStageCallback>
 8003cca:	e306      	b.n	80042da <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ccc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f280 8302 	bge.w	80042da <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	83fb      	strh	r3, [r7, #30]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	8bfa      	ldrh	r2, [r7, #30]
 8003cec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d019      	beq.n	8003d58 <PCD_EP_ISR_Handler+0x1e6>
 8003d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d015      	beq.n	8003d58 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d32:	6959      	ldr	r1, [r3, #20]
 8003d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d36:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f006 fa5d 	bl	800a1fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	441a      	add	r2, r3
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d50:	2100      	movs	r1, #0
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f008 f946 	bl	800bfe4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 82b5 	bne.w	80042da <PCD_EP_ISR_Handler+0x768>
 8003d70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d74:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d7c:	f000 82ad 	beq.w	80042da <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4413      	add	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	801a      	strh	r2, [r3, #0]
 8003db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b3e      	cmp	r3, #62	; 0x3e
 8003db6:	d91d      	bls.n	8003df4 <PCD_EP_ISR_Handler+0x282>
 8003db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <PCD_EP_ISR_Handler+0x260>
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	029b      	lsls	r3, r3, #10
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4313      	orrs	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	e026      	b.n	8003e42 <PCD_EP_ISR_Handler+0x2d0>
 8003df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <PCD_EP_ISR_Handler+0x2a0>
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	801a      	strh	r2, [r3, #0]
 8003e10:	e017      	b.n	8003e42 <PCD_EP_ISR_Handler+0x2d0>
 8003e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <PCD_EP_ISR_Handler+0x2ba>
 8003e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e28:	3301      	adds	r3, #1
 8003e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	029b      	lsls	r3, r3, #10
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	827b      	strh	r3, [r7, #18]
 8003e54:	8a7b      	ldrh	r3, [r7, #18]
 8003e56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e5a:	827b      	strh	r3, [r7, #18]
 8003e5c:	8a7b      	ldrh	r3, [r7, #18]
 8003e5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e62:	827b      	strh	r3, [r7, #18]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	8a7b      	ldrh	r3, [r7, #18]
 8003e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	8013      	strh	r3, [r2, #0]
 8003e7e:	e22c      	b.n	80042da <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e94:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f280 80f6 	bge.w	800408a <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003ecc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ed0:	b292      	uxth	r2, r2
 8003ed2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ed4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eec:	7b1b      	ldrb	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d123      	bne.n	8003f3a <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003f1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 808e 	beq.w	8004040 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2a:	6959      	ldr	r1, [r3, #20]
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2e:	88da      	ldrh	r2, [r3, #6]
 8003f30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f34:	f006 f962 	bl	800a1fc <USB_ReadPMA>
 8003f38:	e082      	b.n	8004040 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3c:	78db      	ldrb	r3, [r3, #3]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d10a      	bne.n	8003f58 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f46:	461a      	mov	r2, r3
 8003f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f9d3 	bl	80042f6 <HAL_PCD_EP_DB_Receive>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003f56:	e073      	b.n	8004040 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d022      	beq.n	8003ffc <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fda:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003fde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d02c      	beq.n	8004040 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fec:	6959      	ldr	r1, [r3, #20]
 8003fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff0:	891a      	ldrh	r2, [r3, #8]
 8003ff2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003ff6:	f006 f901 	bl	800a1fc <USB_ReadPMA>
 8003ffa:	e021      	b.n	8004040 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004004:	b29b      	uxth	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	4413      	add	r3, r2
 8004016:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004020:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004024:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004032:	6959      	ldr	r1, [r3, #20]
 8004034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004036:	895a      	ldrh	r2, [r3, #10]
 8004038:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800403c:	f006 f8de 	bl	800a1fc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004048:	441a      	add	r2, r3
 800404a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800404e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004056:	441a      	add	r2, r3
 8004058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <PCD_EP_ISR_Handler+0x4fe>
 8004064:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	429a      	cmp	r2, r3
 800406e:	d206      	bcs.n	800407e <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f007 ffb4 	bl	800bfe4 <HAL_PCD_DataOutStageCallback>
 800407c:	e005      	b.n	800408a <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004084:	4618      	mov	r0, r3
 8004086:	f004 fb8c 	bl	80087a2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800408a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8121 	beq.w	80042da <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8004098:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	3310      	adds	r3, #16
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	441a      	add	r2, r3
 80040d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80040dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80040e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ea:	78db      	ldrb	r3, [r3, #3]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	f040 80a2 	bne.w	8004236 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80040f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f4:	2200      	movs	r2, #0
 80040f6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80040f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fa:	7b1b      	ldrb	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8093 	beq.w	8004228 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004102:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d046      	beq.n	800419c <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800410e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d126      	bne.n	8004164 <PCD_EP_ISR_Handler+0x5f2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004124:	b29b      	uxth	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	4413      	add	r3, r2
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
 800412e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	00da      	lsls	r2, r3, #3
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	4413      	add	r3, r2
 8004138:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800413c:	623b      	str	r3, [r7, #32]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004148:	b29a      	uxth	r2, r3
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415c:	b29a      	uxth	r2, r3
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	e061      	b.n	8004228 <PCD_EP_ISR_Handler+0x6b6>
 8004164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004166:	785b      	ldrb	r3, [r3, #1]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d15d      	bne.n	8004228 <PCD_EP_ISR_Handler+0x6b6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417a:	b29b      	uxth	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	4413      	add	r3, r2
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	00da      	lsls	r2, r3, #3
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	4413      	add	r3, r2
 800418e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	2200      	movs	r2, #0
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	e045      	b.n	8004228 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d126      	bne.n	80041f8 <PCD_EP_ISR_Handler+0x686>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	4413      	add	r3, r2
 80041c0:	637b      	str	r3, [r7, #52]	; 0x34
 80041c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	00da      	lsls	r2, r3, #3
 80041c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ca:	4413      	add	r3, r2
 80041cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041dc:	b29a      	uxth	r2, r3
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	801a      	strh	r2, [r3, #0]
 80041f6:	e017      	b.n	8004228 <PCD_EP_ISR_Handler+0x6b6>
 80041f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d113      	bne.n	8004228 <PCD_EP_ISR_Handler+0x6b6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004208:	b29b      	uxth	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420e:	4413      	add	r3, r2
 8004210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	00da      	lsls	r2, r3, #3
 8004218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421a:	4413      	add	r3, r2
 800421c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2200      	movs	r2, #0
 8004226:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f007 fef3 	bl	800c01a <HAL_PCD_DataInStageCallback>
 8004234:	e051      	b.n	80042da <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004236:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d144      	bne.n	80042cc <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	4413      	add	r3, r2
 800425c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004266:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800426a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004272:	429a      	cmp	r2, r3
 8004274:	d907      	bls.n	8004286 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800427e:	1ad2      	subs	r2, r2, r3
 8004280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004282:	619a      	str	r2, [r3, #24]
 8004284:	e002      	b.n	800428c <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004288:	2200      	movs	r2, #0
 800428a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800428c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f007 febd 	bl	800c01a <HAL_PCD_DataInStageCallback>
 80042a0:	e01b      	b.n	80042da <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80042a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042aa:	441a      	add	r2, r3
 80042ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80042b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042b8:	441a      	add	r2, r3
 80042ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042bc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 fa6c 	bl	80087a2 <USB_EPStartXfer>
 80042ca:	e006      	b.n	80042da <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042d0:	461a      	mov	r2, r3
 80042d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f917 	bl	8004508 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f6ff ac48 	blt.w	8003b7c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3758      	adds	r7, #88	; 0x58
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b088      	sub	sp, #32
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	4613      	mov	r3, r2
 8004302:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d07c      	beq.n	8004408 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	4413      	add	r3, r2
 8004328:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004332:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	8b7b      	ldrh	r3, [r7, #26]
 800433a:	429a      	cmp	r2, r3
 800433c:	d306      	bcc.n	800434c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	8b7b      	ldrh	r3, [r7, #26]
 8004344:	1ad2      	subs	r2, r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	619a      	str	r2, [r3, #24]
 800434a:	e002      	b.n	8004352 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d123      	bne.n	80043a2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	833b      	strh	r3, [r7, #24]
 8004376:	8b3b      	ldrh	r3, [r7, #24]
 8004378:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800437c:	833b      	strh	r3, [r7, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	441a      	add	r2, r3
 800438c:	8b3b      	ldrh	r3, [r7, #24]
 800438e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439e:	b29b      	uxth	r3, r3
 80043a0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01f      	beq.n	80043ec <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	82fb      	strh	r3, [r7, #22]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	8afb      	ldrh	r3, [r7, #22]
 80043d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043ec:	8b7b      	ldrh	r3, [r7, #26]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8085 	beq.w	80044fe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6959      	ldr	r1, [r3, #20]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	891a      	ldrh	r2, [r3, #8]
 8004400:	8b7b      	ldrh	r3, [r7, #26]
 8004402:	f005 fefb 	bl	800a1fc <USB_ReadPMA>
 8004406:	e07a      	b.n	80044fe <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004410:	b29b      	uxth	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	4413      	add	r3, r2
 8004422:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	8b7b      	ldrh	r3, [r7, #26]
 8004434:	429a      	cmp	r2, r3
 8004436:	d306      	bcc.n	8004446 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	8b7b      	ldrh	r3, [r7, #26]
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	619a      	str	r2, [r3, #24]
 8004444:	e002      	b.n	800444c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2200      	movs	r2, #0
 800444a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d123      	bne.n	800449c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	83fb      	strh	r3, [r7, #30]
 8004470:	8bfb      	ldrh	r3, [r7, #30]
 8004472:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004476:	83fb      	strh	r3, [r7, #30]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	441a      	add	r2, r3
 8004486:	8bfb      	ldrh	r3, [r7, #30]
 8004488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11f      	bne.n	80044e6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c0:	83bb      	strh	r3, [r7, #28]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	8bbb      	ldrh	r3, [r7, #28]
 80044d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044e6:	8b7b      	ldrh	r3, [r7, #26]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6959      	ldr	r1, [r3, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	895a      	ldrh	r2, [r3, #10]
 80044f8:	8b7b      	ldrh	r3, [r7, #26]
 80044fa:	f005 fe7f 	bl	800a1fc <USB_ReadPMA>
    }
  }

  return count;
 80044fe:	8b7b      	ldrh	r3, [r7, #26]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3720      	adds	r7, #32
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b0a4      	sub	sp, #144	; 0x90
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 81db 	beq.w	80048d8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	4413      	add	r3, r2
 800453c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004546:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004552:	429a      	cmp	r2, r3
 8004554:	d907      	bls.n	8004566 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800455e:	1ad2      	subs	r2, r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	619a      	str	r2, [r3, #24]
 8004564:	e002      	b.n	800456c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2200      	movs	r2, #0
 800456a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 80b9 	bne.w	80046e8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d126      	bne.n	80045cc <HAL_PCD_EP_DB_Transmit+0xc4>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800458c:	b29b      	uxth	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	4413      	add	r3, r2
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	00da      	lsls	r2, r3, #3
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	4413      	add	r3, r2
 80045a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	801a      	strh	r2, [r3, #0]
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	e01a      	b.n	8004602 <HAL_PCD_EP_DB_Transmit+0xfa>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d116      	bne.n	8004602 <HAL_PCD_EP_DB_Transmit+0xfa>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	4413      	add	r3, r2
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	00da      	lsls	r2, r3, #3
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f4:	4413      	add	r3, r2
 80045f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	2200      	movs	r2, #0
 8004600:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d126      	bne.n	800465e <HAL_PCD_EP_DB_Transmit+0x156>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	4413      	add	r3, r2
 8004626:	61fb      	str	r3, [r7, #28]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	00da      	lsls	r2, r3, #3
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004642:	b29a      	uxth	r2, r3
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004656:	b29a      	uxth	r2, r3
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	801a      	strh	r2, [r3, #0]
 800465c:	e017      	b.n	800468e <HAL_PCD_EP_DB_Transmit+0x186>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d113      	bne.n	800468e <HAL_PCD_EP_DB_Transmit+0x186>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466e:	b29b      	uxth	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	4413      	add	r3, r2
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	00da      	lsls	r2, r3, #3
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	4413      	add	r3, r2
 8004682:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004686:	623b      	str	r3, [r7, #32]
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	2200      	movs	r2, #0
 800468c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	4619      	mov	r1, r3
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f007 fcc0 	bl	800c01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 82fa 	beq.w	8004c9a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	82fb      	strh	r3, [r7, #22]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	8afb      	ldrh	r3, [r7, #22]
 80046d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]
 80046e6:	e2d8      	b.n	8004c9a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d021      	beq.n	8004736 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800473c:	2b01      	cmp	r3, #1
 800473e:	f040 82ac 	bne.w	8004c9a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800474a:	441a      	add	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004758:	441a      	add	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6a1a      	ldr	r2, [r3, #32]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	429a      	cmp	r2, r3
 8004768:	d30b      	bcc.n	8004782 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	621a      	str	r2, [r3, #32]
 8004780:	e017      	b.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d108      	bne.n	800479c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800478a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800478e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800479a:	e00a      	b.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2200      	movs	r2, #0
 80047b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d165      	bne.n	8004886 <HAL_PCD_EP_DB_Transmit+0x37e>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ce:	4413      	add	r3, r2
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	00da      	lsls	r2, r3, #3
 80047d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047da:	4413      	add	r3, r2
 80047dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	801a      	strh	r2, [r3, #0]
 80047f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f6:	2b3e      	cmp	r3, #62	; 0x3e
 80047f8:	d91d      	bls.n	8004836 <HAL_PCD_EP_DB_Transmit+0x32e>
 80047fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	64bb      	str	r3, [r7, #72]	; 0x48
 8004802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <HAL_PCD_EP_DB_Transmit+0x30c>
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	3b01      	subs	r3, #1
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29a      	uxth	r2, r3
 800481a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481c:	b29b      	uxth	r3, r3
 800481e:	029b      	lsls	r3, r3, #10
 8004820:	b29b      	uxth	r3, r3
 8004822:	4313      	orrs	r3, r2
 8004824:	b29b      	uxth	r3, r3
 8004826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800482a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800482e:	b29a      	uxth	r2, r3
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	e044      	b.n	80048c0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <HAL_PCD_EP_DB_Transmit+0x34c>
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484c:	b29a      	uxth	r2, r3
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e035      	b.n	80048c0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	64bb      	str	r3, [r7, #72]	; 0x48
 800485c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_PCD_EP_DB_Transmit+0x366>
 8004868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486a:	3301      	adds	r3, #1
 800486c:	64bb      	str	r3, [r7, #72]	; 0x48
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29a      	uxth	r2, r3
 8004874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004876:	b29b      	uxth	r3, r3
 8004878:	029b      	lsls	r3, r3, #10
 800487a:	b29b      	uxth	r3, r3
 800487c:	4313      	orrs	r3, r2
 800487e:	b29a      	uxth	r2, r3
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	e01c      	b.n	80048c0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d118      	bne.n	80048c0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	647b      	str	r3, [r7, #68]	; 0x44
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489c:	b29b      	uxth	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a2:	4413      	add	r3, r2
 80048a4:	647b      	str	r3, [r7, #68]	; 0x44
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	00da      	lsls	r2, r3, #3
 80048ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ae:	4413      	add	r3, r2
 80048b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
 80048b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048be:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	6959      	ldr	r1, [r3, #20]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	891a      	ldrh	r2, [r3, #8]
 80048cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f005 fc51 	bl	800a178 <USB_WritePMA>
 80048d6:	e1e0      	b.n	8004c9a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4413      	add	r3, r2
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	4413      	add	r3, r2
 80048f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048fc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	699a      	ldr	r2, [r3, #24]
 8004904:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004908:	429a      	cmp	r2, r3
 800490a:	d307      	bcc.n	800491c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	699a      	ldr	r2, [r3, #24]
 8004910:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004914:	1ad2      	subs	r2, r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	619a      	str	r2, [r3, #24]
 800491a:	e002      	b.n	8004922 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 80c0 	bne.w	8004aac <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d126      	bne.n	8004982 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	67fb      	str	r3, [r7, #124]	; 0x7c
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004948:	4413      	add	r3, r2
 800494a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	00da      	lsls	r2, r3, #3
 8004952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004954:	4413      	add	r3, r2
 8004956:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800495a:	67bb      	str	r3, [r7, #120]	; 0x78
 800495c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004966:	b29a      	uxth	r2, r3
 8004968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497a:	b29a      	uxth	r2, r3
 800497c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	e01a      	b.n	80049b8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d116      	bne.n	80049b8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	667b      	str	r3, [r7, #100]	; 0x64
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800499e:	4413      	add	r3, r2
 80049a0:	667b      	str	r3, [r7, #100]	; 0x64
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	00da      	lsls	r2, r3, #3
 80049a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049aa:	4413      	add	r3, r2
 80049ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049b0:	663b      	str	r3, [r7, #96]	; 0x60
 80049b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049b4:	2200      	movs	r2, #0
 80049b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	677b      	str	r3, [r7, #116]	; 0x74
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	785b      	ldrb	r3, [r3, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d12b      	bne.n	8004a1e <HAL_PCD_EP_DB_Transmit+0x516>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049da:	4413      	add	r3, r2
 80049dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	00da      	lsls	r2, r3, #3
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	4413      	add	r3, r2
 80049e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	e017      	b.n	8004a4e <HAL_PCD_EP_DB_Transmit+0x546>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d113      	bne.n	8004a4e <HAL_PCD_EP_DB_Transmit+0x546>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a34:	4413      	add	r3, r2
 8004a36:	677b      	str	r3, [r7, #116]	; 0x74
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	00da      	lsls	r2, r3, #3
 8004a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a40:	4413      	add	r3, r2
 8004a42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a46:	673b      	str	r3, [r7, #112]	; 0x70
 8004a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	4619      	mov	r1, r3
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f007 fae0 	bl	800c01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 811a 	bne.w	8004c9a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a80:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8013      	strh	r3, [r2, #0]
 8004aaa:	e0f6      	b.n	8004c9a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d121      	bne.n	8004afa <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	f040 80ca 	bne.w	8004c9a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b0e:	441a      	add	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d30b      	bcc.n	8004b46 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6a1a      	ldr	r2, [r3, #32]
 8004b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b3e:	1ad2      	subs	r2, r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	621a      	str	r2, [r3, #32]
 8004b44:	e017      	b.n	8004b76 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d108      	bne.n	8004b60 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004b4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b5e:	e00a      	b.n	8004b76 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d165      	bne.n	8004c50 <HAL_PCD_EP_DB_Transmit+0x748>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b98:	4413      	add	r3, r2
 8004b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	00da      	lsls	r2, r3, #3
 8004ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8004bc2:	d91d      	bls.n	8004c00 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	029b      	lsls	r3, r3, #10
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	4313      	orrs	r3, r2
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	e041      	b.n	8004c84 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <HAL_PCD_EP_DB_Transmit+0x716>
 8004c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	e032      	b.n	8004c84 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <HAL_PCD_EP_DB_Transmit+0x730>
 8004c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c34:	3301      	adds	r3, #1
 8004c36:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	029b      	lsls	r3, r3, #10
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	4313      	orrs	r3, r2
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c4c:	801a      	strh	r2, [r3, #0]
 8004c4e:	e019      	b.n	8004c84 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d115      	bne.n	8004c84 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c66:	4413      	add	r3, r2
 8004c68:	657b      	str	r3, [r7, #84]	; 0x54
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	00da      	lsls	r2, r3, #3
 8004c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c72:	4413      	add	r3, r2
 8004c74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c78:	653b      	str	r3, [r7, #80]	; 0x50
 8004c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c82:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	6959      	ldr	r1, [r3, #20]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	895a      	ldrh	r2, [r3, #10]
 8004c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f005 fa6f 	bl	800a178 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb4:	82bb      	strh	r3, [r7, #20]
 8004cb6:	8abb      	ldrh	r3, [r7, #20]
 8004cb8:	f083 0310 	eor.w	r3, r3, #16
 8004cbc:	82bb      	strh	r3, [r7, #20]
 8004cbe:	8abb      	ldrh	r3, [r7, #20]
 8004cc0:	f083 0320 	eor.w	r3, r3, #32
 8004cc4:	82bb      	strh	r3, [r7, #20]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	8abb      	ldrh	r3, [r7, #20]
 8004cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3790      	adds	r7, #144	; 0x90
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	817b      	strh	r3, [r7, #10]
 8004d02:	4613      	mov	r3, r2
 8004d04:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00b      	beq.n	8004d2a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d12:	897b      	ldrh	r3, [r7, #10]
 8004d14:	f003 0207 	and.w	r2, r3, #7
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	3310      	adds	r3, #16
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e009      	b.n	8004d3e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d2a:	897a      	ldrh	r2, [r7, #10]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d3e:	893b      	ldrh	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d107      	bne.n	8004d54 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2200      	movs	r2, #0
 8004d48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	80da      	strh	r2, [r3, #6]
 8004d52:	e00b      	b.n	8004d6c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2201      	movs	r2, #1
 8004d58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f043 0302 	orr.w	r3, r3, #2
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d141      	bne.n	8004e62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dde:	4b4b      	ldr	r3, [pc, #300]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dea:	d131      	bne.n	8004e50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dec:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df2:	4a46      	ldr	r2, [pc, #280]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dfc:	4b43      	ldr	r3, [pc, #268]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e04:	4a41      	ldr	r2, [pc, #260]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e0c:	4b40      	ldr	r3, [pc, #256]	; (8004f10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2232      	movs	r2, #50	; 0x32
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	4a3f      	ldr	r2, [pc, #252]	; (8004f14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	0c9b      	lsrs	r3, r3, #18
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e22:	e002      	b.n	8004e2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e2a:	4b38      	ldr	r3, [pc, #224]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e36:	d102      	bne.n	8004e3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f2      	bne.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e3e:	4b33      	ldr	r3, [pc, #204]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4a:	d158      	bne.n	8004efe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e057      	b.n	8004f00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e50:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e56:	4a2d      	ldr	r2, [pc, #180]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e60:	e04d      	b.n	8004efe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e68:	d141      	bne.n	8004eee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e6a:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e76:	d131      	bne.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e78:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e7e:	4a23      	ldr	r2, [pc, #140]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e88:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e90:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e98:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2232      	movs	r2, #50	; 0x32
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	0c9b      	lsrs	r3, r3, #18
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eae:	e002      	b.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eb6:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec2:	d102      	bne.n	8004eca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f2      	bne.n	8004eb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eca:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed6:	d112      	bne.n	8004efe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e011      	b.n	8004f00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004eec:	e007      	b.n	8004efe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ef6:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004efc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	20000000 	.word	0x20000000
 8004f14:	431bde83 	.word	0x431bde83

08004f18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f26:	6093      	str	r3, [r2, #8]
}
 8004f28:	bf00      	nop
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40007000 	.word	0x40007000

08004f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e2fe      	b.n	8005548 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d075      	beq.n	8005042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f56:	4b97      	ldr	r3, [pc, #604]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f60:	4b94      	ldr	r3, [pc, #592]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b0c      	cmp	r3, #12
 8004f6e:	d102      	bne.n	8004f76 <HAL_RCC_OscConfig+0x3e>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d002      	beq.n	8004f7c <HAL_RCC_OscConfig+0x44>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d10b      	bne.n	8004f94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	4b8d      	ldr	r3, [pc, #564]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d05b      	beq.n	8005040 <HAL_RCC_OscConfig+0x108>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d157      	bne.n	8005040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e2d9      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9c:	d106      	bne.n	8004fac <HAL_RCC_OscConfig+0x74>
 8004f9e:	4b85      	ldr	r3, [pc, #532]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a84      	ldr	r2, [pc, #528]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e01d      	b.n	8004fe8 <HAL_RCC_OscConfig+0xb0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x98>
 8004fb6:	4b7f      	ldr	r3, [pc, #508]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7e      	ldr	r2, [pc, #504]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	4b7c      	ldr	r3, [pc, #496]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a7b      	ldr	r2, [pc, #492]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e00b      	b.n	8004fe8 <HAL_RCC_OscConfig+0xb0>
 8004fd0:	4b78      	ldr	r3, [pc, #480]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a77      	ldr	r2, [pc, #476]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4b75      	ldr	r3, [pc, #468]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a74      	ldr	r2, [pc, #464]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d013      	beq.n	8005018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7fc fd68 	bl	8001ac4 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7fc fd64 	bl	8001ac4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	; 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e29e      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500a:	4b6a      	ldr	r3, [pc, #424]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0xc0>
 8005016:	e014      	b.n	8005042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fc fd54 	bl	8001ac4 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005020:	f7fc fd50 	bl	8001ac4 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	; 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e28a      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005032:	4b60      	ldr	r3, [pc, #384]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0xe8>
 800503e:	e000      	b.n	8005042 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d075      	beq.n	800513a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800504e:	4b59      	ldr	r3, [pc, #356]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005058:	4b56      	ldr	r3, [pc, #344]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b0c      	cmp	r3, #12
 8005066:	d102      	bne.n	800506e <HAL_RCC_OscConfig+0x136>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d002      	beq.n	8005074 <HAL_RCC_OscConfig+0x13c>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b04      	cmp	r3, #4
 8005072:	d11f      	bne.n	80050b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005074:	4b4f      	ldr	r3, [pc, #316]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_OscConfig+0x154>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e25d      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800508c:	4b49      	ldr	r3, [pc, #292]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	061b      	lsls	r3, r3, #24
 800509a:	4946      	ldr	r1, [pc, #280]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050a0:	4b45      	ldr	r3, [pc, #276]	; (80051b8 <HAL_RCC_OscConfig+0x280>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fc fcc1 	bl	8001a2c <HAL_InitTick>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d043      	beq.n	8005138 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e249      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d023      	beq.n	8005104 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050bc:	4b3d      	ldr	r3, [pc, #244]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a3c      	ldr	r2, [pc, #240]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 80050c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fc fcfc 	bl	8001ac4 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d0:	f7fc fcf8 	bl	8001ac4 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e232      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e2:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	492d      	ldr	r1, [pc, #180]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	604b      	str	r3, [r1, #4]
 8005102:	e01a      	b.n	800513a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005104:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 800510a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800510e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fc fcd8 	bl	8001ac4 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005118:	f7fc fcd4 	bl	8001ac4 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e20e      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x1e0>
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d041      	beq.n	80051ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01c      	beq.n	8005188 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800514e:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8005150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005154:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fc fcb1 	bl	8001ac4 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005166:	f7fc fcad 	bl	8001ac4 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e1e7      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005178:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 800517a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0ef      	beq.n	8005166 <HAL_RCC_OscConfig+0x22e>
 8005186:	e020      	b.n	80051ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 800518a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <HAL_RCC_OscConfig+0x27c>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fc fc94 	bl	8001ac4 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800519e:	e00d      	b.n	80051bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a0:	f7fc fc90 	bl	8001ac4 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d906      	bls.n	80051bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e1ca      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
 80051b8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051bc:	4b8c      	ldr	r3, [pc, #560]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80051be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ea      	bne.n	80051a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80a6 	beq.w	8005324 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d8:	2300      	movs	r3, #0
 80051da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051dc:	4b84      	ldr	r3, [pc, #528]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_OscConfig+0x2b4>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <HAL_RCC_OscConfig+0x2b6>
 80051ec:	2300      	movs	r3, #0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f2:	4b7f      	ldr	r3, [pc, #508]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	4a7e      	ldr	r2, [pc, #504]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80051f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fc:	6593      	str	r3, [r2, #88]	; 0x58
 80051fe:	4b7c      	ldr	r3, [pc, #496]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800520a:	2301      	movs	r3, #1
 800520c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800520e:	4b79      	ldr	r3, [pc, #484]	; (80053f4 <HAL_RCC_OscConfig+0x4bc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d118      	bne.n	800524c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800521a:	4b76      	ldr	r3, [pc, #472]	; (80053f4 <HAL_RCC_OscConfig+0x4bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a75      	ldr	r2, [pc, #468]	; (80053f4 <HAL_RCC_OscConfig+0x4bc>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005226:	f7fc fc4d 	bl	8001ac4 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522e:	f7fc fc49 	bl	8001ac4 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e183      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005240:	4b6c      	ldr	r3, [pc, #432]	; (80053f4 <HAL_RCC_OscConfig+0x4bc>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d108      	bne.n	8005266 <HAL_RCC_OscConfig+0x32e>
 8005254:	4b66      	ldr	r3, [pc, #408]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	4a65      	ldr	r2, [pc, #404]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 800525c:	f043 0301 	orr.w	r3, r3, #1
 8005260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005264:	e024      	b.n	80052b0 <HAL_RCC_OscConfig+0x378>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b05      	cmp	r3, #5
 800526c:	d110      	bne.n	8005290 <HAL_RCC_OscConfig+0x358>
 800526e:	4b60      	ldr	r3, [pc, #384]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	4a5e      	ldr	r2, [pc, #376]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005276:	f043 0304 	orr.w	r3, r3, #4
 800527a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800527e:	4b5c      	ldr	r3, [pc, #368]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	4a5a      	ldr	r2, [pc, #360]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800528e:	e00f      	b.n	80052b0 <HAL_RCC_OscConfig+0x378>
 8005290:	4b57      	ldr	r3, [pc, #348]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	4a56      	ldr	r2, [pc, #344]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052a0:	4b53      	ldr	r3, [pc, #332]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	4a52      	ldr	r2, [pc, #328]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80052a8:	f023 0304 	bic.w	r3, r3, #4
 80052ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d016      	beq.n	80052e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7fc fc04 	bl	8001ac4 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c0:	f7fc fc00 	bl	8001ac4 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e138      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d6:	4b46      	ldr	r3, [pc, #280]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0ed      	beq.n	80052c0 <HAL_RCC_OscConfig+0x388>
 80052e4:	e015      	b.n	8005312 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e6:	f7fc fbed 	bl	8001ac4 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052ec:	e00a      	b.n	8005304 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fc fbe9 	bl	8001ac4 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e121      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005304:	4b3a      	ldr	r3, [pc, #232]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1ed      	bne.n	80052ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005312:	7ffb      	ldrb	r3, [r7, #31]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d105      	bne.n	8005324 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005318:	4b35      	ldr	r3, [pc, #212]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531c:	4a34      	ldr	r2, [pc, #208]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 800531e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005322:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d03c      	beq.n	80053aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01c      	beq.n	8005372 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005338:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 800533a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800533e:	4a2c      	ldr	r2, [pc, #176]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005348:	f7fc fbbc 	bl	8001ac4 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005350:	f7fc fbb8 	bl	8001ac4 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0f2      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005362:	4b23      	ldr	r3, [pc, #140]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0ef      	beq.n	8005350 <HAL_RCC_OscConfig+0x418>
 8005370:	e01b      	b.n	80053aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005372:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 8005374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005378:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fc fb9f 	bl	8001ac4 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800538a:	f7fc fb9b 	bl	8001ac4 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e0d5      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800539c:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 800539e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ef      	bne.n	800538a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 80c9 	beq.w	8005546 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b4:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b0c      	cmp	r3, #12
 80053be:	f000 8083 	beq.w	80054c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d15e      	bne.n	8005488 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fc fb75 	bl	8001ac4 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053dc:	e00c      	b.n	80053f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053de:	f7fc fb71 	bl	8001ac4 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d905      	bls.n	80053f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e0ab      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f8:	4b55      	ldr	r3, [pc, #340]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ec      	bne.n	80053de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005404:	4b52      	ldr	r3, [pc, #328]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	4b52      	ldr	r3, [pc, #328]	; (8005554 <HAL_RCC_OscConfig+0x61c>)
 800540a:	4013      	ands	r3, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6a11      	ldr	r1, [r2, #32]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005414:	3a01      	subs	r2, #1
 8005416:	0112      	lsls	r2, r2, #4
 8005418:	4311      	orrs	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800541e:	0212      	lsls	r2, r2, #8
 8005420:	4311      	orrs	r1, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005426:	0852      	lsrs	r2, r2, #1
 8005428:	3a01      	subs	r2, #1
 800542a:	0552      	lsls	r2, r2, #21
 800542c:	4311      	orrs	r1, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005432:	0852      	lsrs	r2, r2, #1
 8005434:	3a01      	subs	r2, #1
 8005436:	0652      	lsls	r2, r2, #25
 8005438:	4311      	orrs	r1, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800543e:	06d2      	lsls	r2, r2, #27
 8005440:	430a      	orrs	r2, r1
 8005442:	4943      	ldr	r1, [pc, #268]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 8005444:	4313      	orrs	r3, r2
 8005446:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005448:	4b41      	ldr	r3, [pc, #260]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a40      	ldr	r2, [pc, #256]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 800544e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005452:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005454:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4a3d      	ldr	r2, [pc, #244]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 800545a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800545e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fc fb30 	bl	8001ac4 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005468:	f7fc fb2c 	bl	8001ac4 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e066      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800547a:	4b35      	ldr	r3, [pc, #212]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x530>
 8005486:	e05e      	b.n	8005546 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005488:	4b31      	ldr	r3, [pc, #196]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a30      	ldr	r2, [pc, #192]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 800548e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fc fb16 	bl	8001ac4 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fc fb12 	bl	8001ac4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e04c      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ae:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80054ba:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	4924      	ldr	r1, [pc, #144]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 80054c0:	4b25      	ldr	r3, [pc, #148]	; (8005558 <HAL_RCC_OscConfig+0x620>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	60cb      	str	r3, [r1, #12]
 80054c6:	e03e      	b.n	8005546 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e039      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80054d4:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <HAL_RCC_OscConfig+0x618>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 0203 	and.w	r2, r3, #3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d12c      	bne.n	8005542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	3b01      	subs	r3, #1
 80054f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d123      	bne.n	8005542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005506:	429a      	cmp	r2, r3
 8005508:	d11b      	bne.n	8005542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d113      	bne.n	8005542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	3b01      	subs	r3, #1
 8005528:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800552a:	429a      	cmp	r2, r3
 800552c:	d109      	bne.n	8005542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	3b01      	subs	r3, #1
 800553c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d001      	beq.n	8005546 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40021000 	.word	0x40021000
 8005554:	019f800c 	.word	0x019f800c
 8005558:	feeefffc 	.word	0xfeeefffc

0800555c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e11e      	b.n	80057b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005574:	4b91      	ldr	r3, [pc, #580]	; (80057bc <HAL_RCC_ClockConfig+0x260>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d910      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005582:	4b8e      	ldr	r3, [pc, #568]	; (80057bc <HAL_RCC_ClockConfig+0x260>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 020f 	bic.w	r2, r3, #15
 800558a:	498c      	ldr	r1, [pc, #560]	; (80057bc <HAL_RCC_ClockConfig+0x260>)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	4313      	orrs	r3, r2
 8005590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b8a      	ldr	r3, [pc, #552]	; (80057bc <HAL_RCC_ClockConfig+0x260>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e106      	b.n	80057b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d073      	beq.n	8005698 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d129      	bne.n	800560c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b8:	4b81      	ldr	r3, [pc, #516]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0f4      	b.n	80057b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80055c8:	f000 f99e 	bl	8005908 <RCC_GetSysClockFreqFromPLLSource>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4a7c      	ldr	r2, [pc, #496]	; (80057c4 <HAL_RCC_ClockConfig+0x268>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d93f      	bls.n	8005656 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055d6:	4b7a      	ldr	r3, [pc, #488]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d033      	beq.n	8005656 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d12f      	bne.n	8005656 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055f6:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055fe:	4a70      	ldr	r2, [pc, #448]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005604:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e024      	b.n	8005656 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d107      	bne.n	8005624 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005614:	4b6a      	ldr	r3, [pc, #424]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0c6      	b.n	80057b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005624:	4b66      	ldr	r3, [pc, #408]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0be      	b.n	80057b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005634:	f000 f8ce 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8005638:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4a61      	ldr	r2, [pc, #388]	; (80057c4 <HAL_RCC_ClockConfig+0x268>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d909      	bls.n	8005656 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005642:	4b5f      	ldr	r3, [pc, #380]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564a:	4a5d      	ldr	r2, [pc, #372]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 800564c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005650:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005656:	4b5a      	ldr	r3, [pc, #360]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f023 0203 	bic.w	r2, r3, #3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	4957      	ldr	r1, [pc, #348]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005664:	4313      	orrs	r3, r2
 8005666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005668:	f7fc fa2c 	bl	8001ac4 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566e:	e00a      	b.n	8005686 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005670:	f7fc fa28 	bl	8001ac4 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	; 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e095      	b.n	80057b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005686:	4b4e      	ldr	r3, [pc, #312]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 020c 	and.w	r2, r3, #12
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	429a      	cmp	r2, r3
 8005696:	d1eb      	bne.n	8005670 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d023      	beq.n	80056ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056b0:	4b43      	ldr	r3, [pc, #268]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4a42      	ldr	r2, [pc, #264]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80056b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80056c8:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80056d0:	4a3b      	ldr	r2, [pc, #236]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80056d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d8:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4936      	ldr	r1, [pc, #216]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
 80056ea:	e008      	b.n	80056fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d105      	bne.n	80056fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056f2:	4b33      	ldr	r3, [pc, #204]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	4a32      	ldr	r2, [pc, #200]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 80056f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056fe:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_RCC_ClockConfig+0x260>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d21d      	bcs.n	8005748 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570c:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <HAL_RCC_ClockConfig+0x260>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f023 020f 	bic.w	r2, r3, #15
 8005714:	4929      	ldr	r1, [pc, #164]	; (80057bc <HAL_RCC_ClockConfig+0x260>)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800571c:	f7fc f9d2 	bl	8001ac4 <HAL_GetTick>
 8005720:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005722:	e00a      	b.n	800573a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005724:	f7fc f9ce 	bl	8001ac4 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e03b      	b.n	80057b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573a:	4b20      	ldr	r3, [pc, #128]	; (80057bc <HAL_RCC_ClockConfig+0x260>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d1ed      	bne.n	8005724 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005754:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4917      	ldr	r1, [pc, #92]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005772:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	490f      	ldr	r1, [pc, #60]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005786:	f000 f825 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 800578a:	4602      	mov	r2, r0
 800578c:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <HAL_RCC_ClockConfig+0x264>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	490c      	ldr	r1, [pc, #48]	; (80057c8 <HAL_RCC_ClockConfig+0x26c>)
 8005798:	5ccb      	ldrb	r3, [r1, r3]
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	fa22 f303 	lsr.w	r3, r2, r3
 80057a2:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <HAL_RCC_ClockConfig+0x270>)
 80057a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <HAL_RCC_ClockConfig+0x274>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fc f93e 	bl	8001a2c <HAL_InitTick>
 80057b0:	4603      	mov	r3, r0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40022000 	.word	0x40022000
 80057c0:	40021000 	.word	0x40021000
 80057c4:	04c4b400 	.word	0x04c4b400
 80057c8:	08013ee0 	.word	0x08013ee0
 80057cc:	20000000 	.word	0x20000000
 80057d0:	20000004 	.word	0x20000004

080057d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057da:	4b2c      	ldr	r3, [pc, #176]	; (800588c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d102      	bne.n	80057ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057e6:	4b2a      	ldr	r3, [pc, #168]	; (8005890 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	e047      	b.n	800587c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057ec:	4b27      	ldr	r3, [pc, #156]	; (800588c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 030c 	and.w	r3, r3, #12
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d102      	bne.n	80057fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057f8:	4b26      	ldr	r3, [pc, #152]	; (8005894 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	e03e      	b.n	800587c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057fe:	4b23      	ldr	r3, [pc, #140]	; (800588c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b0c      	cmp	r3, #12
 8005808:	d136      	bne.n	8005878 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <HAL_RCC_GetSysClockFreq+0xb8>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005814:	4b1d      	ldr	r3, [pc, #116]	; (800588c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	3301      	adds	r3, #1
 8005820:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b03      	cmp	r3, #3
 8005826:	d10c      	bne.n	8005842 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005828:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <HAL_RCC_GetSysClockFreq+0xc0>)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	4a16      	ldr	r2, [pc, #88]	; (800588c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005832:	68d2      	ldr	r2, [r2, #12]
 8005834:	0a12      	lsrs	r2, r2, #8
 8005836:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	617b      	str	r3, [r7, #20]
      break;
 8005840:	e00c      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005842:	4a13      	ldr	r2, [pc, #76]	; (8005890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	4a10      	ldr	r2, [pc, #64]	; (800588c <HAL_RCC_GetSysClockFreq+0xb8>)
 800584c:	68d2      	ldr	r2, [r2, #12]
 800584e:	0a12      	lsrs	r2, r2, #8
 8005850:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]
      break;
 800585a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <HAL_RCC_GetSysClockFreq+0xb8>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	0e5b      	lsrs	r3, r3, #25
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	3301      	adds	r3, #1
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	e001      	b.n	800587c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800587c:	693b      	ldr	r3, [r7, #16]
}
 800587e:	4618      	mov	r0, r3
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000
 8005890:	00f42400 	.word	0x00f42400
 8005894:	016e3600 	.word	0x016e3600

08005898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <HAL_RCC_GetHCLKFreq+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000000 	.word	0x20000000

080058b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058b4:	f7ff fff0 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4904      	ldr	r1, [pc, #16]	; (80058d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40021000 	.word	0x40021000
 80058d8:	08013ef0 	.word	0x08013ef0

080058dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058e0:	f7ff ffda 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058e4:	4602      	mov	r2, r0
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	0adb      	lsrs	r3, r3, #11
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	4904      	ldr	r1, [pc, #16]	; (8005904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058f2:	5ccb      	ldrb	r3, [r1, r3]
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000
 8005904:	08013ef0 	.word	0x08013ef0

08005908 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800590e:	4b1e      	ldr	r3, [pc, #120]	; (8005988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d10c      	bne.n	8005946 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800592c:	4a17      	ldr	r2, [pc, #92]	; (800598c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	4a14      	ldr	r2, [pc, #80]	; (8005988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005936:	68d2      	ldr	r2, [r2, #12]
 8005938:	0a12      	lsrs	r2, r2, #8
 800593a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800593e:	fb02 f303 	mul.w	r3, r2, r3
 8005942:	617b      	str	r3, [r7, #20]
    break;
 8005944:	e00c      	b.n	8005960 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005946:	4a12      	ldr	r2, [pc, #72]	; (8005990 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	4a0e      	ldr	r2, [pc, #56]	; (8005988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005950:	68d2      	ldr	r2, [r2, #12]
 8005952:	0a12      	lsrs	r2, r2, #8
 8005954:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005958:	fb02 f303 	mul.w	r3, r2, r3
 800595c:	617b      	str	r3, [r7, #20]
    break;
 800595e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	0e5b      	lsrs	r3, r3, #25
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	3301      	adds	r3, #1
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800597a:	687b      	ldr	r3, [r7, #4]
}
 800597c:	4618      	mov	r0, r3
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	40021000 	.word	0x40021000
 800598c:	016e3600 	.word	0x016e3600
 8005990:	00f42400 	.word	0x00f42400

08005994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800599c:	2300      	movs	r3, #0
 800599e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059a0:	2300      	movs	r3, #0
 80059a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8098 	beq.w	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b2:	2300      	movs	r3, #0
 80059b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059b6:	4b43      	ldr	r3, [pc, #268]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c2:	4b40      	ldr	r3, [pc, #256]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	4a3f      	ldr	r2, [pc, #252]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6593      	str	r3, [r2, #88]	; 0x58
 80059ce:	4b3d      	ldr	r3, [pc, #244]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d6:	60bb      	str	r3, [r7, #8]
 80059d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059da:	2301      	movs	r3, #1
 80059dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059de:	4b3a      	ldr	r3, [pc, #232]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a39      	ldr	r2, [pc, #228]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059ea:	f7fc f86b 	bl	8001ac4 <HAL_GetTick>
 80059ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059f0:	e009      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f2:	f7fc f867 	bl	8001ac4 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d902      	bls.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	74fb      	strb	r3, [r7, #19]
        break;
 8005a04:	e005      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a06:	4b30      	ldr	r3, [pc, #192]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0ef      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a12:	7cfb      	ldrb	r3, [r7, #19]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d159      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a18:	4b2a      	ldr	r3, [pc, #168]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01e      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d019      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a34:	4b23      	ldr	r3, [pc, #140]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a40:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a50:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a60:	4a18      	ldr	r2, [pc, #96]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d016      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fc f827 	bl	8001ac4 <HAL_GetTick>
 8005a76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a78:	e00b      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7a:	f7fc f823 	bl	8001ac4 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d902      	bls.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	74fb      	strb	r3, [r7, #19]
            break;
 8005a90:	e006      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a92:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0ec      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005aa0:	7cfb      	ldrb	r3, [r7, #19]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aa6:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	4903      	ldr	r1, [pc, #12]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005abc:	e008      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	74bb      	strb	r3, [r7, #18]
 8005ac2:	e005      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005acc:	7cfb      	ldrb	r3, [r7, #19]
 8005ace:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad0:	7c7b      	ldrb	r3, [r7, #17]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d105      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad6:	4ba6      	ldr	r3, [pc, #664]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ada:	4aa5      	ldr	r2, [pc, #660]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aee:	4ba0      	ldr	r3, [pc, #640]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af4:	f023 0203 	bic.w	r2, r3, #3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	499c      	ldr	r1, [pc, #624]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b10:	4b97      	ldr	r3, [pc, #604]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	f023 020c 	bic.w	r2, r3, #12
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4994      	ldr	r1, [pc, #592]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b32:	4b8f      	ldr	r3, [pc, #572]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	498b      	ldr	r1, [pc, #556]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b54:	4b86      	ldr	r3, [pc, #536]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	4983      	ldr	r1, [pc, #524]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b76:	4b7e      	ldr	r3, [pc, #504]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	497a      	ldr	r1, [pc, #488]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b98:	4b75      	ldr	r3, [pc, #468]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	4972      	ldr	r1, [pc, #456]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bba:	4b6d      	ldr	r3, [pc, #436]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	4969      	ldr	r1, [pc, #420]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bdc:	4b64      	ldr	r3, [pc, #400]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	4961      	ldr	r1, [pc, #388]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bfe:	4b5c      	ldr	r3, [pc, #368]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	4958      	ldr	r1, [pc, #352]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d015      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c20:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	4950      	ldr	r1, [pc, #320]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c3e:	d105      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c40:	4b4b      	ldr	r3, [pc, #300]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4a4a      	ldr	r2, [pc, #296]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d015      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c58:	4b45      	ldr	r3, [pc, #276]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	4942      	ldr	r1, [pc, #264]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c76:	d105      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c78:	4b3d      	ldr	r3, [pc, #244]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d015      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c90:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	4934      	ldr	r1, [pc, #208]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cae:	d105      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cb0:	4b2f      	ldr	r3, [pc, #188]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4a2e      	ldr	r2, [pc, #184]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d015      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cc8:	4b29      	ldr	r3, [pc, #164]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	4926      	ldr	r1, [pc, #152]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce8:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4a20      	ldr	r2, [pc, #128]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cf2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d00:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	4918      	ldr	r1, [pc, #96]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d1e:	d105      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a12      	ldr	r2, [pc, #72]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d015      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	490a      	ldr	r1, [pc, #40]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d56:	d105      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4a04      	ldr	r2, [pc, #16]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d64:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000

08005d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e049      	b.n	8005e1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fb fd32 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f000 fb12 	bl	80063dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d001      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e04a      	b.n	8005ed2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d018      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e66:	d013      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <HAL_TIM_Base_Start_IT+0xc8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a19      	ldr	r2, [pc, #100]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d115      	bne.n	8005ebc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	4b17      	ldr	r3, [pc, #92]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d015      	beq.n	8005ece <HAL_TIM_Base_Start_IT+0xaa>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea8:	d011      	beq.n	8005ece <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eba:	e008      	b.n	8005ece <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	e000      	b.n	8005ed0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ece:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	00010007 	.word	0x00010007

08005ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d020      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0202 	mvn.w	r2, #2
 8005f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa2c 	bl	80063a0 <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa1e 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fa2f 	bl	80063b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d020      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01b      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0204 	mvn.w	r2, #4
 8005f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fa06 	bl	80063a0 <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f9f8 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa09 	bl	80063b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d020      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0208 	mvn.w	r2, #8
 8005fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9e0 	bl	80063a0 <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f9d2 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f9e3 	bl	80063b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d020      	beq.n	8006040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01b      	beq.n	8006040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0210 	mvn.w	r2, #16
 8006010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2208      	movs	r2, #8
 8006016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9ba 	bl	80063a0 <HAL_TIM_IC_CaptureCallback>
 800602c:	e005      	b.n	800603a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f9ac 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f9bd 	bl	80063b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00c      	beq.n	8006064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0201 	mvn.w	r2, #1
 800605c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f009 f90e 	bl	800f280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00c      	beq.n	8006092 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800608a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fb69 	bl	8006764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00c      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fb61 	bl	8006778 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00c      	beq.n	80060da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f977 	bl	80063c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f06f 0220 	mvn.w	r2, #32
 80060f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fb29 	bl	8006750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00c      	beq.n	8006122 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800611a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fb35 	bl	800678c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00c      	beq.n	8006146 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fb2d 	bl	80067a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fb25 	bl	80067b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00c      	beq.n	800618e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fb1d 	bl	80067c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_TIM_ConfigClockSource+0x1c>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e0de      	b.n	8006372 <HAL_TIM_ConfigClockSource+0x1da>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80061d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a63      	ldr	r2, [pc, #396]	; (800637c <HAL_TIM_ConfigClockSource+0x1e4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	f000 80a9 	beq.w	8006346 <HAL_TIM_ConfigClockSource+0x1ae>
 80061f4:	4a61      	ldr	r2, [pc, #388]	; (800637c <HAL_TIM_ConfigClockSource+0x1e4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	f200 80ae 	bhi.w	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 80061fc:	4a60      	ldr	r2, [pc, #384]	; (8006380 <HAL_TIM_ConfigClockSource+0x1e8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	f000 80a1 	beq.w	8006346 <HAL_TIM_ConfigClockSource+0x1ae>
 8006204:	4a5e      	ldr	r2, [pc, #376]	; (8006380 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	f200 80a6 	bhi.w	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 800620c:	4a5d      	ldr	r2, [pc, #372]	; (8006384 <HAL_TIM_ConfigClockSource+0x1ec>)
 800620e:	4293      	cmp	r3, r2
 8006210:	f000 8099 	beq.w	8006346 <HAL_TIM_ConfigClockSource+0x1ae>
 8006214:	4a5b      	ldr	r2, [pc, #364]	; (8006384 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006216:	4293      	cmp	r3, r2
 8006218:	f200 809e 	bhi.w	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 800621c:	4a5a      	ldr	r2, [pc, #360]	; (8006388 <HAL_TIM_ConfigClockSource+0x1f0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	f000 8091 	beq.w	8006346 <HAL_TIM_ConfigClockSource+0x1ae>
 8006224:	4a58      	ldr	r2, [pc, #352]	; (8006388 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	f200 8096 	bhi.w	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 800622c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006230:	f000 8089 	beq.w	8006346 <HAL_TIM_ConfigClockSource+0x1ae>
 8006234:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006238:	f200 808e 	bhi.w	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006240:	d03e      	beq.n	80062c0 <HAL_TIM_ConfigClockSource+0x128>
 8006242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006246:	f200 8087 	bhi.w	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	f000 8086 	beq.w	800635e <HAL_TIM_ConfigClockSource+0x1c6>
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	d87f      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 8006258:	2b70      	cmp	r3, #112	; 0x70
 800625a:	d01a      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0xfa>
 800625c:	2b70      	cmp	r3, #112	; 0x70
 800625e:	d87b      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 8006260:	2b60      	cmp	r3, #96	; 0x60
 8006262:	d050      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x16e>
 8006264:	2b60      	cmp	r3, #96	; 0x60
 8006266:	d877      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 8006268:	2b50      	cmp	r3, #80	; 0x50
 800626a:	d03c      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x14e>
 800626c:	2b50      	cmp	r3, #80	; 0x50
 800626e:	d873      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d058      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x18e>
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d86f      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 8006278:	2b30      	cmp	r3, #48	; 0x30
 800627a:	d064      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x1ae>
 800627c:	2b30      	cmp	r3, #48	; 0x30
 800627e:	d86b      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 8006280:	2b20      	cmp	r3, #32
 8006282:	d060      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x1ae>
 8006284:	2b20      	cmp	r3, #32
 8006286:	d867      	bhi.n	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d05c      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x1ae>
 800628c:	2b10      	cmp	r3, #16
 800628e:	d05a      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x1ae>
 8006290:	e062      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062a2:	f000 f9b3 	bl	800660c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	609a      	str	r2, [r3, #8]
      break;
 80062be:	e04f      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062d0:	f000 f99c 	bl	800660c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062e2:	609a      	str	r2, [r3, #8]
      break;
 80062e4:	e03c      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f2:	461a      	mov	r2, r3
 80062f4:	f000 f90e 	bl	8006514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2150      	movs	r1, #80	; 0x50
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f967 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 8006304:	e02c      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006312:	461a      	mov	r2, r3
 8006314:	f000 f92d 	bl	8006572 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2160      	movs	r1, #96	; 0x60
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f957 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 8006324:	e01c      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006332:	461a      	mov	r2, r3
 8006334:	f000 f8ee 	bl	8006514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2140      	movs	r1, #64	; 0x40
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f947 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 8006344:	e00c      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f000 f93e 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 8006356:	e003      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
      break;
 800635c:	e000      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800635e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	00100070 	.word	0x00100070
 8006380:	00100040 	.word	0x00100040
 8006384:	00100030 	.word	0x00100030
 8006388:	00100020 	.word	0x00100020

0800638c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a42      	ldr	r2, [pc, #264]	; (80064f8 <TIM_Base_SetConfig+0x11c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00f      	beq.n	8006414 <TIM_Base_SetConfig+0x38>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fa:	d00b      	beq.n	8006414 <TIM_Base_SetConfig+0x38>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a3f      	ldr	r2, [pc, #252]	; (80064fc <TIM_Base_SetConfig+0x120>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d007      	beq.n	8006414 <TIM_Base_SetConfig+0x38>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3e      	ldr	r2, [pc, #248]	; (8006500 <TIM_Base_SetConfig+0x124>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_Base_SetConfig+0x38>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a3d      	ldr	r2, [pc, #244]	; (8006504 <TIM_Base_SetConfig+0x128>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a33      	ldr	r2, [pc, #204]	; (80064f8 <TIM_Base_SetConfig+0x11c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01b      	beq.n	8006466 <TIM_Base_SetConfig+0x8a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006434:	d017      	beq.n	8006466 <TIM_Base_SetConfig+0x8a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a30      	ldr	r2, [pc, #192]	; (80064fc <TIM_Base_SetConfig+0x120>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <TIM_Base_SetConfig+0x8a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2f      	ldr	r2, [pc, #188]	; (8006500 <TIM_Base_SetConfig+0x124>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00f      	beq.n	8006466 <TIM_Base_SetConfig+0x8a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a2e      	ldr	r2, [pc, #184]	; (8006504 <TIM_Base_SetConfig+0x128>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00b      	beq.n	8006466 <TIM_Base_SetConfig+0x8a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a2d      	ldr	r2, [pc, #180]	; (8006508 <TIM_Base_SetConfig+0x12c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d007      	beq.n	8006466 <TIM_Base_SetConfig+0x8a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a2c      	ldr	r2, [pc, #176]	; (800650c <TIM_Base_SetConfig+0x130>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d003      	beq.n	8006466 <TIM_Base_SetConfig+0x8a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <TIM_Base_SetConfig+0x134>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d108      	bne.n	8006478 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a16      	ldr	r2, [pc, #88]	; (80064f8 <TIM_Base_SetConfig+0x11c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00f      	beq.n	80064c4 <TIM_Base_SetConfig+0xe8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <TIM_Base_SetConfig+0x128>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00b      	beq.n	80064c4 <TIM_Base_SetConfig+0xe8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a16      	ldr	r2, [pc, #88]	; (8006508 <TIM_Base_SetConfig+0x12c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d007      	beq.n	80064c4 <TIM_Base_SetConfig+0xe8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a15      	ldr	r2, [pc, #84]	; (800650c <TIM_Base_SetConfig+0x130>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_Base_SetConfig+0xe8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a14      	ldr	r2, [pc, #80]	; (8006510 <TIM_Base_SetConfig+0x134>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d103      	bne.n	80064cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	691a      	ldr	r2, [r3, #16]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d105      	bne.n	80064ea <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f023 0201 	bic.w	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	611a      	str	r2, [r3, #16]
  }
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40013400 	.word	0x40013400
 8006508:	40014000 	.word	0x40014000
 800650c:	40014400 	.word	0x40014400
 8006510:	40014800 	.word	0x40014800

08006514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f023 0201 	bic.w	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800653e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 030a 	bic.w	r3, r3, #10
 8006550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	621a      	str	r2, [r3, #32]
}
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006572:	b480      	push	{r7}
 8006574:	b087      	sub	sp, #28
 8006576:	af00      	add	r7, sp, #0
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f023 0210 	bic.w	r2, r3, #16
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800659c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	031b      	lsls	r3, r3, #12
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f043 0307 	orr.w	r3, r3, #7
 80065f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	609a      	str	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	021a      	lsls	r2, r3, #8
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	431a      	orrs	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4313      	orrs	r3, r2
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	609a      	str	r2, [r3, #8]
}
 8006640:	bf00      	nop
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006660:	2302      	movs	r3, #2
 8006662:	e065      	b.n	8006730 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2c      	ldr	r2, [pc, #176]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a2b      	ldr	r2, [pc, #172]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d108      	bne.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800669e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80066b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d018      	beq.n	8006704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066da:	d013      	beq.n	8006704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a18      	ldr	r2, [pc, #96]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00e      	beq.n	8006704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a17      	ldr	r2, [pc, #92]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a12      	ldr	r2, [pc, #72]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a13      	ldr	r2, [pc, #76]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d10c      	bne.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800670a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	4313      	orrs	r3, r2
 8006714:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	40012c00 	.word	0x40012c00
 8006740:	40013400 	.word	0x40013400
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40014000 	.word	0x40014000

08006750 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e042      	b.n	8006874 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fb f871 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2224      	movs	r2, #36	; 0x24
 800680a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fe38 	bl	800749c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fb69 	bl	8006f04 <UART_SetConfig>
 8006832:	4603      	mov	r3, r0
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e01b      	b.n	8006874 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800684a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800685a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 feb7 	bl	80075e0 <UART_CheckIdleState>
 8006872:	4603      	mov	r3, r0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b0ba      	sub	sp, #232	; 0xe8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80068a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80068aa:	4013      	ands	r3, r2
 80068ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11b      	bne.n	80068f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d015      	beq.n	80068f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d105      	bne.n	80068dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 82e3 	beq.w	8006eac <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
      }
      return;
 80068ee:	e2dd      	b.n	8006eac <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8123 	beq.w	8006b40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80068fe:	4b8d      	ldr	r3, [pc, #564]	; (8006b34 <HAL_UART_IRQHandler+0x2b8>)
 8006900:	4013      	ands	r3, r2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006906:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800690a:	4b8b      	ldr	r3, [pc, #556]	; (8006b38 <HAL_UART_IRQHandler+0x2bc>)
 800690c:	4013      	ands	r3, r2
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 8116 	beq.w	8006b40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d011      	beq.n	8006944 <HAL_UART_IRQHandler+0xc8>
 8006920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2201      	movs	r2, #1
 8006932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693a:	f043 0201 	orr.w	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d011      	beq.n	8006974 <HAL_UART_IRQHandler+0xf8>
 8006950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00b      	beq.n	8006974 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2202      	movs	r2, #2
 8006962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696a:	f043 0204 	orr.w	r2, r3, #4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d011      	beq.n	80069a4 <HAL_UART_IRQHandler+0x128>
 8006980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2204      	movs	r2, #4
 8006992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699a:	f043 0202 	orr.w	r2, r3, #2
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d017      	beq.n	80069e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069c0:	4b5c      	ldr	r3, [pc, #368]	; (8006b34 <HAL_UART_IRQHandler+0x2b8>)
 80069c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2208      	movs	r2, #8
 80069ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d6:	f043 0208 	orr.w	r2, r3, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d012      	beq.n	8006a12 <HAL_UART_IRQHandler+0x196>
 80069ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00c      	beq.n	8006a12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a08:	f043 0220 	orr.w	r2, r3, #32
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8249 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d013      	beq.n	8006a52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d105      	bne.n	8006a42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d007      	beq.n	8006a52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d005      	beq.n	8006a76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d054      	beq.n	8006b20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fec9 	bl	800780e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b40      	cmp	r3, #64	; 0x40
 8006a88:	d146      	bne.n	8006b18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3308      	adds	r3, #8
 8006a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1d9      	bne.n	8006a8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d017      	beq.n	8006b10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae6:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <HAL_UART_IRQHandler+0x2c0>)
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fb f97d 	bl	8001df0 <HAL_DMA_Abort_IT>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d019      	beq.n	8006b30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0e:	e00f      	b.n	8006b30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f9e1 	bl	8006ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b16:	e00b      	b.n	8006b30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f9dd 	bl	8006ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1e:	e007      	b.n	8006b30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f9d9 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006b2e:	e1bf      	b.n	8006eb0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b30:	bf00      	nop
    return;
 8006b32:	e1bd      	b.n	8006eb0 <HAL_UART_IRQHandler+0x634>
 8006b34:	10000001 	.word	0x10000001
 8006b38:	04000120 	.word	0x04000120
 8006b3c:	080078db 	.word	0x080078db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	f040 8153 	bne.w	8006df0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 814c 	beq.w	8006df0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8145 	beq.w	8006df0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2210      	movs	r2, #16
 8006b6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	f040 80bb 	bne.w	8006cf4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 818f 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	f080 8187 	bcs.w	8006eb4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f040 8087 	bne.w	8006cd2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	461a      	mov	r2, r3
 8006bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bf2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1da      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e1      	bne.n	8006c0e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e3      	bne.n	8006c4a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca0:	f023 0310 	bic.w	r3, r3, #16
 8006ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cb4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e4      	bne.n	8006c90 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fb f836 	bl	8001d3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f8fd 	bl	8006eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cf2:	e0df      	b.n	8006eb4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80d1 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80cc 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d42:	647b      	str	r3, [r7, #68]	; 0x44
 8006d44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e4      	bne.n	8006d20 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	623b      	str	r3, [r7, #32]
   return(result);
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6c:	f023 0301 	bic.w	r3, r3, #1
 8006d70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e1      	bne.n	8006d56 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0310 	bic.w	r3, r3, #16
 8006dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	69b9      	ldr	r1, [r7, #24]
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e4      	bne.n	8006da6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006de2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f87f 	bl	8006eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dee:	e063      	b.n	8006eb8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00e      	beq.n	8006e1a <HAL_UART_IRQHandler+0x59e>
 8006dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fda2 	bl	800795c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e18:	e051      	b.n	8006ebe <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d014      	beq.n	8006e50 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d03a      	beq.n	8006ebc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
    }
    return;
 8006e4e:	e035      	b.n	8006ebc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <HAL_UART_IRQHandler+0x5f4>
 8006e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fd4c 	bl	8007906 <UART_EndTransmit_IT>
    return;
 8006e6e:	e026      	b.n	8006ebe <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d009      	beq.n	8006e90 <HAL_UART_IRQHandler+0x614>
 8006e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fd7b 	bl	8007984 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e8e:	e016      	b.n	8006ebe <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d010      	beq.n	8006ebe <HAL_UART_IRQHandler+0x642>
 8006e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	da0c      	bge.n	8006ebe <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fd63 	bl	8007970 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eaa:	e008      	b.n	8006ebe <HAL_UART_IRQHandler+0x642>
      return;
 8006eac:	bf00      	nop
 8006eae:	e006      	b.n	8006ebe <HAL_UART_IRQHandler+0x642>
    return;
 8006eb0:	bf00      	nop
 8006eb2:	e004      	b.n	8006ebe <HAL_UART_IRQHandler+0x642>
      return;
 8006eb4:	bf00      	nop
 8006eb6:	e002      	b.n	8006ebe <HAL_UART_IRQHandler+0x642>
      return;
 8006eb8:	bf00      	nop
 8006eba:	e000      	b.n	8006ebe <HAL_UART_IRQHandler+0x642>
    return;
 8006ebc:	bf00      	nop
  }
}
 8006ebe:	37e8      	adds	r7, #232	; 0xe8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f08:	b08c      	sub	sp, #48	; 0x30
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4bab      	ldr	r3, [pc, #684]	; (80071e0 <UART_SetConfig+0x2dc>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	6812      	ldr	r2, [r2, #0]
 8006f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4aa0      	ldr	r2, [pc, #640]	; (80071e4 <UART_SetConfig+0x2e0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d004      	beq.n	8006f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006f7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f84:	430b      	orrs	r3, r1
 8006f86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	f023 010f 	bic.w	r1, r3, #15
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a91      	ldr	r2, [pc, #580]	; (80071e8 <UART_SetConfig+0x2e4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d125      	bne.n	8006ff4 <UART_SetConfig+0xf0>
 8006fa8:	4b90      	ldr	r3, [pc, #576]	; (80071ec <UART_SetConfig+0x2e8>)
 8006faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d81a      	bhi.n	8006fec <UART_SetConfig+0xe8>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <UART_SetConfig+0xb8>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006fdd 	.word	0x08006fdd
 8006fc4:	08006fd5 	.word	0x08006fd5
 8006fc8:	08006fe5 	.word	0x08006fe5
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd2:	e0d6      	b.n	8007182 <UART_SetConfig+0x27e>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fda:	e0d2      	b.n	8007182 <UART_SetConfig+0x27e>
 8006fdc:	2304      	movs	r3, #4
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fe2:	e0ce      	b.n	8007182 <UART_SetConfig+0x27e>
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fea:	e0ca      	b.n	8007182 <UART_SetConfig+0x27e>
 8006fec:	2310      	movs	r3, #16
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ff2:	e0c6      	b.n	8007182 <UART_SetConfig+0x27e>
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a7d      	ldr	r2, [pc, #500]	; (80071f0 <UART_SetConfig+0x2ec>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d138      	bne.n	8007070 <UART_SetConfig+0x16c>
 8006ffe:	4b7b      	ldr	r3, [pc, #492]	; (80071ec <UART_SetConfig+0x2e8>)
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007004:	f003 030c 	and.w	r3, r3, #12
 8007008:	2b0c      	cmp	r3, #12
 800700a:	d82d      	bhi.n	8007068 <UART_SetConfig+0x164>
 800700c:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <UART_SetConfig+0x110>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	08007049 	.word	0x08007049
 8007018:	08007069 	.word	0x08007069
 800701c:	08007069 	.word	0x08007069
 8007020:	08007069 	.word	0x08007069
 8007024:	08007059 	.word	0x08007059
 8007028:	08007069 	.word	0x08007069
 800702c:	08007069 	.word	0x08007069
 8007030:	08007069 	.word	0x08007069
 8007034:	08007051 	.word	0x08007051
 8007038:	08007069 	.word	0x08007069
 800703c:	08007069 	.word	0x08007069
 8007040:	08007069 	.word	0x08007069
 8007044:	08007061 	.word	0x08007061
 8007048:	2300      	movs	r3, #0
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800704e:	e098      	b.n	8007182 <UART_SetConfig+0x27e>
 8007050:	2302      	movs	r3, #2
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007056:	e094      	b.n	8007182 <UART_SetConfig+0x27e>
 8007058:	2304      	movs	r3, #4
 800705a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800705e:	e090      	b.n	8007182 <UART_SetConfig+0x27e>
 8007060:	2308      	movs	r3, #8
 8007062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007066:	e08c      	b.n	8007182 <UART_SetConfig+0x27e>
 8007068:	2310      	movs	r3, #16
 800706a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800706e:	e088      	b.n	8007182 <UART_SetConfig+0x27e>
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a5f      	ldr	r2, [pc, #380]	; (80071f4 <UART_SetConfig+0x2f0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d125      	bne.n	80070c6 <UART_SetConfig+0x1c2>
 800707a:	4b5c      	ldr	r3, [pc, #368]	; (80071ec <UART_SetConfig+0x2e8>)
 800707c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007080:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007084:	2b30      	cmp	r3, #48	; 0x30
 8007086:	d016      	beq.n	80070b6 <UART_SetConfig+0x1b2>
 8007088:	2b30      	cmp	r3, #48	; 0x30
 800708a:	d818      	bhi.n	80070be <UART_SetConfig+0x1ba>
 800708c:	2b20      	cmp	r3, #32
 800708e:	d00a      	beq.n	80070a6 <UART_SetConfig+0x1a2>
 8007090:	2b20      	cmp	r3, #32
 8007092:	d814      	bhi.n	80070be <UART_SetConfig+0x1ba>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <UART_SetConfig+0x19a>
 8007098:	2b10      	cmp	r3, #16
 800709a:	d008      	beq.n	80070ae <UART_SetConfig+0x1aa>
 800709c:	e00f      	b.n	80070be <UART_SetConfig+0x1ba>
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a4:	e06d      	b.n	8007182 <UART_SetConfig+0x27e>
 80070a6:	2302      	movs	r3, #2
 80070a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ac:	e069      	b.n	8007182 <UART_SetConfig+0x27e>
 80070ae:	2304      	movs	r3, #4
 80070b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b4:	e065      	b.n	8007182 <UART_SetConfig+0x27e>
 80070b6:	2308      	movs	r3, #8
 80070b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070bc:	e061      	b.n	8007182 <UART_SetConfig+0x27e>
 80070be:	2310      	movs	r3, #16
 80070c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c4:	e05d      	b.n	8007182 <UART_SetConfig+0x27e>
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a4b      	ldr	r2, [pc, #300]	; (80071f8 <UART_SetConfig+0x2f4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d125      	bne.n	800711c <UART_SetConfig+0x218>
 80070d0:	4b46      	ldr	r3, [pc, #280]	; (80071ec <UART_SetConfig+0x2e8>)
 80070d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070da:	2bc0      	cmp	r3, #192	; 0xc0
 80070dc:	d016      	beq.n	800710c <UART_SetConfig+0x208>
 80070de:	2bc0      	cmp	r3, #192	; 0xc0
 80070e0:	d818      	bhi.n	8007114 <UART_SetConfig+0x210>
 80070e2:	2b80      	cmp	r3, #128	; 0x80
 80070e4:	d00a      	beq.n	80070fc <UART_SetConfig+0x1f8>
 80070e6:	2b80      	cmp	r3, #128	; 0x80
 80070e8:	d814      	bhi.n	8007114 <UART_SetConfig+0x210>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <UART_SetConfig+0x1f0>
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	d008      	beq.n	8007104 <UART_SetConfig+0x200>
 80070f2:	e00f      	b.n	8007114 <UART_SetConfig+0x210>
 80070f4:	2300      	movs	r3, #0
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fa:	e042      	b.n	8007182 <UART_SetConfig+0x27e>
 80070fc:	2302      	movs	r3, #2
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007102:	e03e      	b.n	8007182 <UART_SetConfig+0x27e>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710a:	e03a      	b.n	8007182 <UART_SetConfig+0x27e>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007112:	e036      	b.n	8007182 <UART_SetConfig+0x27e>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711a:	e032      	b.n	8007182 <UART_SetConfig+0x27e>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a30      	ldr	r2, [pc, #192]	; (80071e4 <UART_SetConfig+0x2e0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d12a      	bne.n	800717c <UART_SetConfig+0x278>
 8007126:	4b31      	ldr	r3, [pc, #196]	; (80071ec <UART_SetConfig+0x2e8>)
 8007128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007134:	d01a      	beq.n	800716c <UART_SetConfig+0x268>
 8007136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800713a:	d81b      	bhi.n	8007174 <UART_SetConfig+0x270>
 800713c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007140:	d00c      	beq.n	800715c <UART_SetConfig+0x258>
 8007142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007146:	d815      	bhi.n	8007174 <UART_SetConfig+0x270>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <UART_SetConfig+0x250>
 800714c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007150:	d008      	beq.n	8007164 <UART_SetConfig+0x260>
 8007152:	e00f      	b.n	8007174 <UART_SetConfig+0x270>
 8007154:	2300      	movs	r3, #0
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e012      	b.n	8007182 <UART_SetConfig+0x27e>
 800715c:	2302      	movs	r3, #2
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007162:	e00e      	b.n	8007182 <UART_SetConfig+0x27e>
 8007164:	2304      	movs	r3, #4
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716a:	e00a      	b.n	8007182 <UART_SetConfig+0x27e>
 800716c:	2308      	movs	r3, #8
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007172:	e006      	b.n	8007182 <UART_SetConfig+0x27e>
 8007174:	2310      	movs	r3, #16
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717a:	e002      	b.n	8007182 <UART_SetConfig+0x27e>
 800717c:	2310      	movs	r3, #16
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <UART_SetConfig+0x2e0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	f040 80a8 	bne.w	80072de <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800718e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007192:	2b08      	cmp	r3, #8
 8007194:	d834      	bhi.n	8007200 <UART_SetConfig+0x2fc>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <UART_SetConfig+0x298>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071c1 	.word	0x080071c1
 80071a0:	08007201 	.word	0x08007201
 80071a4:	080071c9 	.word	0x080071c9
 80071a8:	08007201 	.word	0x08007201
 80071ac:	080071cf 	.word	0x080071cf
 80071b0:	08007201 	.word	0x08007201
 80071b4:	08007201 	.word	0x08007201
 80071b8:	08007201 	.word	0x08007201
 80071bc:	080071d7 	.word	0x080071d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c0:	f7fe fb76 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 80071c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071c6:	e021      	b.n	800720c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c8:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <UART_SetConfig+0x2f8>)
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071cc:	e01e      	b.n	800720c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ce:	f7fe fb01 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 80071d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071d4:	e01a      	b.n	800720c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071dc:	e016      	b.n	800720c <UART_SetConfig+0x308>
 80071de:	bf00      	nop
 80071e0:	cfff69f3 	.word	0xcfff69f3
 80071e4:	40008000 	.word	0x40008000
 80071e8:	40013800 	.word	0x40013800
 80071ec:	40021000 	.word	0x40021000
 80071f0:	40004400 	.word	0x40004400
 80071f4:	40004800 	.word	0x40004800
 80071f8:	40004c00 	.word	0x40004c00
 80071fc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800720a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 812a 	beq.w	8007468 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	4a9e      	ldr	r2, [pc, #632]	; (8007494 <UART_SetConfig+0x590>)
 800721a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800721e:	461a      	mov	r2, r3
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	fbb3 f3f2 	udiv	r3, r3, r2
 8007226:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	429a      	cmp	r2, r3
 8007236:	d305      	bcc.n	8007244 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	429a      	cmp	r2, r3
 8007242:	d903      	bls.n	800724c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800724a:	e10d      	b.n	8007468 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	2200      	movs	r2, #0
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	60fa      	str	r2, [r7, #12]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	4a8e      	ldr	r2, [pc, #568]	; (8007494 <UART_SetConfig+0x590>)
 800725a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800725e:	b29b      	uxth	r3, r3
 8007260:	2200      	movs	r2, #0
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	607a      	str	r2, [r7, #4]
 8007266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800726e:	f7f9 fd43 	bl	8000cf8 <__aeabi_uldivmod>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4610      	mov	r0, r2
 8007278:	4619      	mov	r1, r3
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	f04f 0300 	mov.w	r3, #0
 8007282:	020b      	lsls	r3, r1, #8
 8007284:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007288:	0202      	lsls	r2, r0, #8
 800728a:	6979      	ldr	r1, [r7, #20]
 800728c:	6849      	ldr	r1, [r1, #4]
 800728e:	0849      	lsrs	r1, r1, #1
 8007290:	2000      	movs	r0, #0
 8007292:	460c      	mov	r4, r1
 8007294:	4605      	mov	r5, r0
 8007296:	eb12 0804 	adds.w	r8, r2, r4
 800729a:	eb43 0905 	adc.w	r9, r3, r5
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	469a      	mov	sl, r3
 80072a6:	4693      	mov	fp, r2
 80072a8:	4652      	mov	r2, sl
 80072aa:	465b      	mov	r3, fp
 80072ac:	4640      	mov	r0, r8
 80072ae:	4649      	mov	r1, r9
 80072b0:	f7f9 fd22 	bl	8000cf8 <__aeabi_uldivmod>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4613      	mov	r3, r2
 80072ba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c2:	d308      	bcc.n	80072d6 <UART_SetConfig+0x3d2>
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ca:	d204      	bcs.n	80072d6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6a3a      	ldr	r2, [r7, #32]
 80072d2:	60da      	str	r2, [r3, #12]
 80072d4:	e0c8      	b.n	8007468 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072dc:	e0c4      	b.n	8007468 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e6:	d167      	bne.n	80073b8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80072e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d828      	bhi.n	8007342 <UART_SetConfig+0x43e>
 80072f0:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <UART_SetConfig+0x3f4>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	0800731d 	.word	0x0800731d
 80072fc:	08007325 	.word	0x08007325
 8007300:	0800732d 	.word	0x0800732d
 8007304:	08007343 	.word	0x08007343
 8007308:	08007333 	.word	0x08007333
 800730c:	08007343 	.word	0x08007343
 8007310:	08007343 	.word	0x08007343
 8007314:	08007343 	.word	0x08007343
 8007318:	0800733b 	.word	0x0800733b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800731c:	f7fe fac8 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 8007320:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007322:	e014      	b.n	800734e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007324:	f7fe fada 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 8007328:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800732a:	e010      	b.n	800734e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800732c:	4b5a      	ldr	r3, [pc, #360]	; (8007498 <UART_SetConfig+0x594>)
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007330:	e00d      	b.n	800734e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007332:	f7fe fa4f 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8007336:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007338:	e009      	b.n	800734e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800733a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007340:	e005      	b.n	800734e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800734c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8089 	beq.w	8007468 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	4a4e      	ldr	r2, [pc, #312]	; (8007494 <UART_SetConfig+0x590>)
 800735c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007360:	461a      	mov	r2, r3
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	fbb3 f3f2 	udiv	r3, r3, r2
 8007368:	005a      	lsls	r2, r3, #1
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	441a      	add	r2, r3
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	2b0f      	cmp	r3, #15
 8007380:	d916      	bls.n	80073b0 <UART_SetConfig+0x4ac>
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007388:	d212      	bcs.n	80073b0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f023 030f 	bic.w	r3, r3, #15
 8007392:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	085b      	lsrs	r3, r3, #1
 8007398:	b29b      	uxth	r3, r3
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	b29a      	uxth	r2, r3
 80073a0:	8bfb      	ldrh	r3, [r7, #30]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	8bfa      	ldrh	r2, [r7, #30]
 80073ac:	60da      	str	r2, [r3, #12]
 80073ae:	e05b      	b.n	8007468 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073b6:	e057      	b.n	8007468 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d828      	bhi.n	8007412 <UART_SetConfig+0x50e>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <UART_SetConfig+0x4c4>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	080073ed 	.word	0x080073ed
 80073cc:	080073f5 	.word	0x080073f5
 80073d0:	080073fd 	.word	0x080073fd
 80073d4:	08007413 	.word	0x08007413
 80073d8:	08007403 	.word	0x08007403
 80073dc:	08007413 	.word	0x08007413
 80073e0:	08007413 	.word	0x08007413
 80073e4:	08007413 	.word	0x08007413
 80073e8:	0800740b 	.word	0x0800740b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ec:	f7fe fa60 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 80073f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073f2:	e014      	b.n	800741e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f4:	f7fe fa72 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 80073f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073fa:	e010      	b.n	800741e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073fc:	4b26      	ldr	r3, [pc, #152]	; (8007498 <UART_SetConfig+0x594>)
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007400:	e00d      	b.n	800741e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007402:	f7fe f9e7 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8007406:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007408:	e009      	b.n	800741e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800740a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007410:	e005      	b.n	800741e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800741c:	bf00      	nop
    }

    if (pclk != 0U)
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	2b00      	cmp	r3, #0
 8007422:	d021      	beq.n	8007468 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	4a1a      	ldr	r2, [pc, #104]	; (8007494 <UART_SetConfig+0x590>)
 800742a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800742e:	461a      	mov	r2, r3
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	fbb3 f2f2 	udiv	r2, r3, r2
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	441a      	add	r2, r3
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	fbb2 f3f3 	udiv	r3, r2, r3
 8007446:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	2b0f      	cmp	r3, #15
 800744c:	d909      	bls.n	8007462 <UART_SetConfig+0x55e>
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007454:	d205      	bcs.n	8007462 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	b29a      	uxth	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60da      	str	r2, [r3, #12]
 8007460:	e002      	b.n	8007468 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2201      	movs	r2, #1
 800746c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2201      	movs	r2, #1
 8007474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2200      	movs	r2, #0
 800747c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2200      	movs	r2, #0
 8007482:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007484:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007488:	4618      	mov	r0, r3
 800748a:	3730      	adds	r7, #48	; 0x30
 800748c:	46bd      	mov	sp, r7
 800748e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007492:	bf00      	nop
 8007494:	08013ef8 	.word	0x08013ef8
 8007498:	00f42400 	.word	0x00f42400

0800749c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	f003 0308 	and.w	r3, r3, #8
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01a      	beq.n	80075b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800759a:	d10a      	bne.n	80075b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]
  }
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b098      	sub	sp, #96	; 0x60
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075f0:	f7fa fa68 	bl	8001ac4 <HAL_GetTick>
 80075f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b08      	cmp	r3, #8
 8007602:	d12f      	bne.n	8007664 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800760c:	2200      	movs	r2, #0
 800760e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f88e 	bl	8007734 <UART_WaitOnFlagUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d022      	beq.n	8007664 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800762c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007632:	653b      	str	r3, [r7, #80]	; 0x50
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763c:	647b      	str	r3, [r7, #68]	; 0x44
 800763e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800764a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e6      	bne.n	800761e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e063      	b.n	800772c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b04      	cmp	r3, #4
 8007670:	d149      	bne.n	8007706 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800767a:	2200      	movs	r2, #0
 800767c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f857 	bl	8007734 <UART_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d03c      	beq.n	8007706 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	623b      	str	r3, [r7, #32]
   return(result);
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076aa:	633b      	str	r3, [r7, #48]	; 0x30
 80076ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b2:	e841 2300 	strex	r3, r2, [r1]
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1e6      	bne.n	800768c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f023 0301 	bic.w	r3, r3, #1
 80076d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3308      	adds	r3, #8
 80076dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076de:	61fa      	str	r2, [r7, #28]
 80076e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	69b9      	ldr	r1, [r7, #24]
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	617b      	str	r3, [r7, #20]
   return(result);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e5      	bne.n	80076be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e012      	b.n	800772c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3758      	adds	r7, #88	; 0x58
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	4613      	mov	r3, r2
 8007742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007744:	e04f      	b.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d04b      	beq.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774e:	f7fa f9b9 	bl	8001ac4 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	429a      	cmp	r2, r3
 800775c:	d302      	bcc.n	8007764 <UART_WaitOnFlagUntilTimeout+0x30>
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e04e      	b.n	8007806 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0304 	and.w	r3, r3, #4
 8007772:	2b00      	cmp	r3, #0
 8007774:	d037      	beq.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b80      	cmp	r3, #128	; 0x80
 800777a:	d034      	beq.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d031      	beq.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b08      	cmp	r3, #8
 800778e:	d110      	bne.n	80077b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2208      	movs	r2, #8
 8007796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f838 	bl	800780e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2208      	movs	r2, #8
 80077a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e029      	b.n	8007806 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c0:	d111      	bne.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f81e 	bl	800780e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e00f      	b.n	8007806 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69da      	ldr	r2, [r3, #28]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4013      	ands	r3, r2
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	bf0c      	ite	eq
 80077f6:	2301      	moveq	r3, #1
 80077f8:	2300      	movne	r3, #0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	429a      	cmp	r2, r3
 8007802:	d0a0      	beq.n	8007746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800780e:	b480      	push	{r7}
 8007810:	b095      	sub	sp, #84	; 0x54
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800782a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007834:	643b      	str	r3, [r7, #64]	; 0x40
 8007836:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800783a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e6      	bne.n	8007816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3308      	adds	r3, #8
 800784e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	61fb      	str	r3, [r7, #28]
   return(result);
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	64bb      	str	r3, [r7, #72]	; 0x48
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3308      	adds	r3, #8
 800786a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800786c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e3      	bne.n	8007848 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007884:	2b01      	cmp	r3, #1
 8007886:	d118      	bne.n	80078ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	60bb      	str	r3, [r7, #8]
   return(result);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f023 0310 	bic.w	r3, r3, #16
 800789c:	647b      	str	r3, [r7, #68]	; 0x44
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6979      	ldr	r1, [r7, #20]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	613b      	str	r3, [r7, #16]
   return(result);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e6      	bne.n	8007888 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078ce:	bf00      	nop
 80078d0:	3754      	adds	r7, #84	; 0x54
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff faed 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b088      	sub	sp, #32
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	60bb      	str	r3, [r7, #8]
   return(result);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	61bb      	str	r3, [r7, #24]
 800792e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6979      	ldr	r1, [r7, #20]
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	613b      	str	r3, [r7, #16]
   return(result);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e6      	bne.n	800790e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fab8 	bl	8006ec4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007954:	bf00      	nop
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d101      	bne.n	80079ae <HAL_UARTEx_DisableFifoMode+0x16>
 80079aa:	2302      	movs	r3, #2
 80079ac:	e027      	b.n	80079fe <HAL_UARTEx_DisableFifoMode+0x66>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2224      	movs	r2, #36	; 0x24
 80079ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0201 	bic.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e02d      	b.n	8007a7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2224      	movs	r2, #36	; 0x24
 8007a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0201 	bic.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f850 	bl	8007b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d101      	bne.n	8007a9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e02d      	b.n	8007afa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2224      	movs	r2, #36	; 0x24
 8007aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0201 	bic.w	r2, r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f812 	bl	8007b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d108      	bne.n	8007b26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b24:	e031      	b.n	8007b8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b26:	2308      	movs	r3, #8
 8007b28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b2a:	2308      	movs	r3, #8
 8007b2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	0e5b      	lsrs	r3, r3, #25
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	0f5b      	lsrs	r3, r3, #29
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	7b3a      	ldrb	r2, [r7, #12]
 8007b52:	4911      	ldr	r1, [pc, #68]	; (8007b98 <UARTEx_SetNbDataToProcess+0x94>)
 8007b54:	5c8a      	ldrb	r2, [r1, r2]
 8007b56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b5a:	7b3a      	ldrb	r2, [r7, #12]
 8007b5c:	490f      	ldr	r1, [pc, #60]	; (8007b9c <UARTEx_SetNbDataToProcess+0x98>)
 8007b5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b60:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	7b7a      	ldrb	r2, [r7, #13]
 8007b70:	4909      	ldr	r1, [pc, #36]	; (8007b98 <UARTEx_SetNbDataToProcess+0x94>)
 8007b72:	5c8a      	ldrb	r2, [r1, r2]
 8007b74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b78:	7b7a      	ldrb	r2, [r7, #13]
 8007b7a:	4908      	ldr	r1, [pc, #32]	; (8007b9c <UARTEx_SetNbDataToProcess+0x98>)
 8007b7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	08013f10 	.word	0x08013f10
 8007b9c:	08013f18 	.word	0x08013f18

08007ba0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007bb0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007bb4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b085      	sub	sp, #20
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007bd6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007bda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	43db      	mvns	r3, r3
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	4013      	ands	r3, r2
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	1d3b      	adds	r3, r7, #4
 8007c0e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b09d      	sub	sp, #116	; 0x74
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c66:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	78db      	ldrb	r3, [r3, #3]
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d81f      	bhi.n	8007cb2 <USB_ActivateEndpoint+0x72>
 8007c72:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <USB_ActivateEndpoint+0x38>)
 8007c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c78:	08007c89 	.word	0x08007c89
 8007c7c:	08007ca5 	.word	0x08007ca5
 8007c80:	08007cbb 	.word	0x08007cbb
 8007c84:	08007c97 	.word	0x08007c97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007c88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007c94:	e012      	b.n	8007cbc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007c96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007c9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007c9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007ca2:	e00b      	b.n	8007cbc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007ca4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007cb0:	e004      	b.n	8007cbc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007cb8:	e000      	b.n	8007cbc <USB_ActivateEndpoint+0x7c>
      break;
 8007cba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	441a      	add	r2, r3
 8007cc6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	b21b      	sxth	r3, r3
 8007cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf6:	b21a      	sxth	r2, r3
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	b21b      	sxth	r3, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	b21b      	sxth	r3, r3
 8007d02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	441a      	add	r2, r3
 8007d10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	7b1b      	ldrb	r3, [r3, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f040 8178 	bne.w	8008022 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	785b      	ldrb	r3, [r3, #1]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 8084 	beq.w	8007e44 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	00da      	lsls	r2, r3, #3
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	88db      	ldrh	r3, [r3, #6]
 8007d64:	085b      	lsrs	r3, r3, #1
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	827b      	strh	r3, [r7, #18]
 8007d7e:	8a7b      	ldrh	r3, [r7, #18]
 8007d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01b      	beq.n	8007dc0 <USB_ActivateEndpoint+0x180>
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9e:	823b      	strh	r3, [r7, #16]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	441a      	add	r2, r3
 8007daa:	8a3b      	ldrh	r3, [r7, #16]
 8007dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	78db      	ldrb	r3, [r3, #3]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d020      	beq.n	8007e0a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dde:	81bb      	strh	r3, [r7, #12]
 8007de0:	89bb      	ldrh	r3, [r7, #12]
 8007de2:	f083 0320 	eor.w	r3, r3, #32
 8007de6:	81bb      	strh	r3, [r7, #12]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	441a      	add	r2, r3
 8007df2:	89bb      	ldrh	r3, [r7, #12]
 8007df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	8013      	strh	r3, [r2, #0]
 8007e08:	e2d5      	b.n	80083b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e20:	81fb      	strh	r3, [r7, #14]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	441a      	add	r2, r3
 8007e2c:	89fb      	ldrh	r3, [r7, #14]
 8007e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	8013      	strh	r3, [r2, #0]
 8007e42:	e2b8      	b.n	80083b6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	633b      	str	r3, [r7, #48]	; 0x30
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	4413      	add	r3, r2
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	00da      	lsls	r2, r3, #3
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	88db      	ldrh	r3, [r3, #6]
 8007e6c:	085b      	lsrs	r3, r3, #1
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	4413      	add	r3, r2
 8007e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	00da      	lsls	r2, r3, #3
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	4413      	add	r3, r2
 8007e96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	801a      	strh	r2, [r3, #0]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8007eb2:	d91d      	bls.n	8007ef0 <USB_ActivateEndpoint+0x2b0>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <USB_ActivateEndpoint+0x28e>
 8007ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	029b      	lsls	r3, r3, #10
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	4313      	orrs	r3, r2
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	801a      	strh	r2, [r3, #0]
 8007eee:	e026      	b.n	8007f3e <USB_ActivateEndpoint+0x2fe>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <USB_ActivateEndpoint+0x2ce>
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	e017      	b.n	8007f3e <USB_ActivateEndpoint+0x2fe>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	085b      	lsrs	r3, r3, #1
 8007f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <USB_ActivateEndpoint+0x2e8>
 8007f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f24:	3301      	adds	r3, #1
 8007f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	029b      	lsls	r3, r3, #10
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	4313      	orrs	r3, r2
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8007f4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01b      	beq.n	8007f8e <USB_ActivateEndpoint+0x34e>
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6c:	843b      	strh	r3, [r7, #32]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	441a      	add	r2, r3
 8007f78:	8c3b      	ldrh	r3, [r7, #32]
 8007f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d124      	bne.n	8007fe0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fac:	83bb      	strh	r3, [r7, #28]
 8007fae:	8bbb      	ldrh	r3, [r7, #28]
 8007fb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fb4:	83bb      	strh	r3, [r7, #28]
 8007fb6:	8bbb      	ldrh	r3, [r7, #28]
 8007fb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fbc:	83bb      	strh	r3, [r7, #28]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	441a      	add	r2, r3
 8007fc8:	8bbb      	ldrh	r3, [r7, #28]
 8007fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	8013      	strh	r3, [r2, #0]
 8007fde:	e1ea      	b.n	80083b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff6:	83fb      	strh	r3, [r7, #30]
 8007ff8:	8bfb      	ldrh	r3, [r7, #30]
 8007ffa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ffe:	83fb      	strh	r3, [r7, #30]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	441a      	add	r2, r3
 800800a:	8bfb      	ldrh	r3, [r7, #30]
 800800c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801c:	b29b      	uxth	r3, r3
 800801e:	8013      	strh	r3, [r2, #0]
 8008020:	e1c9      	b.n	80083b6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	78db      	ldrb	r3, [r3, #3]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d11e      	bne.n	8008068 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800803c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008040:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	441a      	add	r2, r3
 800804e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800805a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800805e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008062:	b29b      	uxth	r3, r3
 8008064:	8013      	strh	r3, [r2, #0]
 8008066:	e01d      	b.n	80080a4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800807a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	441a      	add	r2, r3
 800808c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800809c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080b4:	4413      	add	r3, r2
 80080b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	00da      	lsls	r2, r3, #3
 80080be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	891b      	ldrh	r3, [r3, #8]
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080d6:	801a      	strh	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	657b      	str	r3, [r7, #84]	; 0x54
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	461a      	mov	r2, r3
 80080e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e8:	4413      	add	r3, r2
 80080ea:	657b      	str	r3, [r7, #84]	; 0x54
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	00da      	lsls	r2, r3, #3
 80080f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f4:	4413      	add	r3, r2
 80080f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080fa:	653b      	str	r3, [r7, #80]	; 0x50
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	895b      	ldrh	r3, [r3, #10]
 8008100:	085b      	lsrs	r3, r3, #1
 8008102:	b29b      	uxth	r3, r3
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	b29a      	uxth	r2, r3
 8008108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800810a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f040 8093 	bne.w	800823c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008126:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800812a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d01b      	beq.n	800816a <USB_ActivateEndpoint+0x52a>
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008148:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	441a      	add	r2, r3
 8008154:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800815a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800815e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008166:	b29b      	uxth	r3, r3
 8008168:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008178:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01b      	beq.n	80081ba <USB_ActivateEndpoint+0x57a>
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008198:	877b      	strh	r3, [r7, #58]	; 0x3a
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	441a      	add	r2, r3
 80081a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80081d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80081da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	441a      	add	r2, r3
 80081ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fe:	b29b      	uxth	r3, r3
 8008200:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008218:	86fb      	strh	r3, [r7, #54]	; 0x36
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	441a      	add	r2, r3
 8008224:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	b29b      	uxth	r3, r3
 8008238:	8013      	strh	r3, [r2, #0]
 800823a:	e0bc      	b.n	80083b6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800824c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01d      	beq.n	8008294 <USB_ActivateEndpoint+0x654>
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	441a      	add	r2, r3
 800827c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800828c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008290:	b29b      	uxth	r3, r3
 8008292:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80082a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d01d      	beq.n	80082ec <USB_ActivateEndpoint+0x6ac>
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	441a      	add	r2, r3
 80082d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80082d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	78db      	ldrb	r3, [r3, #3]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d024      	beq.n	800833e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800830e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008312:	f083 0320 	eor.w	r3, r3, #32
 8008316:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	441a      	add	r2, r3
 8008324:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008338:	b29b      	uxth	r3, r3
 800833a:	8013      	strh	r3, [r2, #0]
 800833c:	e01d      	b.n	800837a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008354:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	441a      	add	r2, r3
 8008362:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008376:	b29b      	uxth	r3, r3
 8008378:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b29b      	uxth	r3, r3
 8008388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800838c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008390:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	441a      	add	r2, r3
 800839e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80083a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80083b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3774      	adds	r7, #116	; 0x74
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b08d      	sub	sp, #52	; 0x34
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	7b1b      	ldrb	r3, [r3, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f040 808e 	bne.w	80084f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	785b      	ldrb	r3, [r3, #1]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d044      	beq.n	800846e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	81bb      	strh	r3, [r7, #12]
 80083f2:	89bb      	ldrh	r3, [r7, #12]
 80083f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01b      	beq.n	8008434 <USB_DeactivateEndpoint+0x6c>
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29b      	uxth	r3, r3
 800840a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800840e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008412:	817b      	strh	r3, [r7, #10]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	441a      	add	r2, r3
 800841e:	897b      	ldrh	r3, [r7, #10]
 8008420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800842c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008430:	b29b      	uxth	r3, r3
 8008432:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800844a:	813b      	strh	r3, [r7, #8]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	441a      	add	r2, r3
 8008456:	893b      	ldrh	r3, [r7, #8]
 8008458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800845c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008468:	b29b      	uxth	r3, r3
 800846a:	8013      	strh	r3, [r2, #0]
 800846c:	e192      	b.n	8008794 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	827b      	strh	r3, [r7, #18]
 800847c:	8a7b      	ldrh	r3, [r7, #18]
 800847e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01b      	beq.n	80084be <USB_DeactivateEndpoint+0xf6>
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29b      	uxth	r3, r3
 8008494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849c:	823b      	strh	r3, [r7, #16]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	441a      	add	r2, r3
 80084a8:	8a3b      	ldrh	r3, [r7, #16]
 80084aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d4:	81fb      	strh	r3, [r7, #14]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	441a      	add	r2, r3
 80084e0:	89fb      	ldrh	r3, [r7, #14]
 80084e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	8013      	strh	r3, [r2, #0]
 80084f6:	e14d      	b.n	8008794 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 80a5 	bne.w	800864c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	843b      	strh	r3, [r7, #32]
 8008510:	8c3b      	ldrh	r3, [r7, #32]
 8008512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d01b      	beq.n	8008552 <USB_DeactivateEndpoint+0x18a>
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800852c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008530:	83fb      	strh	r3, [r7, #30]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	441a      	add	r2, r3
 800853c:	8bfb      	ldrh	r3, [r7, #30]
 800853e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800854a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854e:	b29b      	uxth	r3, r3
 8008550:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	83bb      	strh	r3, [r7, #28]
 8008560:	8bbb      	ldrh	r3, [r7, #28]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01b      	beq.n	80085a2 <USB_DeactivateEndpoint+0x1da>
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800857c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008580:	837b      	strh	r3, [r7, #26]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	441a      	add	r2, r3
 800858c:	8b7b      	ldrh	r3, [r7, #26]
 800858e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800859a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800859e:	b29b      	uxth	r3, r3
 80085a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b8:	833b      	strh	r3, [r7, #24]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	441a      	add	r2, r3
 80085c4:	8b3b      	ldrh	r3, [r7, #24]
 80085c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f0:	82fb      	strh	r3, [r7, #22]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	441a      	add	r2, r3
 80085fc:	8afb      	ldrh	r3, [r7, #22]
 80085fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800860a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860e:	b29b      	uxth	r3, r3
 8008610:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008628:	82bb      	strh	r3, [r7, #20]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	441a      	add	r2, r3
 8008634:	8abb      	ldrh	r3, [r7, #20]
 8008636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800863a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800863e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008646:	b29b      	uxth	r3, r3
 8008648:	8013      	strh	r3, [r2, #0]
 800864a:	e0a3      	b.n	8008794 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800865a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800865c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01b      	beq.n	800869c <USB_DeactivateEndpoint+0x2d4>
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	441a      	add	r2, r3
 8008686:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800868c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008698:	b29b      	uxth	r3, r3
 800869a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80086aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d01b      	beq.n	80086ec <USB_DeactivateEndpoint+0x324>
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008702:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	441a      	add	r2, r3
 800870e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800871c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008720:	b29b      	uxth	r3, r3
 8008722:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	b29b      	uxth	r3, r3
 8008732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800873a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	441a      	add	r2, r3
 8008746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008758:	b29b      	uxth	r3, r3
 800875a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800876e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008772:	847b      	strh	r3, [r7, #34]	; 0x22
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800878c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008790:	b29b      	uxth	r3, r3
 8008792:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3734      	adds	r7, #52	; 0x34
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b0c2      	sub	sp, #264	; 0x108
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b0:	6018      	str	r0, [r3, #0]
 80087b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ba:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	f040 86b7 	bne.w	800953c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80087ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699a      	ldr	r2, [r3, #24]
 80087da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d908      	bls.n	80087fc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80087ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80087fa:	e007      	b.n	800880c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80087fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800880c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	7b1b      	ldrb	r3, [r3, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d13a      	bne.n	8008892 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800881c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6959      	ldr	r1, [r3, #20]
 8008828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	88da      	ldrh	r2, [r3, #6]
 8008834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008838:	b29b      	uxth	r3, r3
 800883a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800883e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008842:	6800      	ldr	r0, [r0, #0]
 8008844:	f001 fc98 	bl	800a178 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	613b      	str	r3, [r7, #16]
 8008854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008858:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008862:	b29b      	uxth	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	4413      	add	r3, r2
 800886a:	613b      	str	r3, [r7, #16]
 800886c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	00da      	lsls	r2, r3, #3
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4413      	add	r3, r2
 800887e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008888:	b29a      	uxth	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	801a      	strh	r2, [r3, #0]
 800888e:	f000 be1f 	b.w	80094d0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	78db      	ldrb	r3, [r3, #3]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	f040 8462 	bne.w	8009168 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80088a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6a1a      	ldr	r2, [r3, #32]
 80088b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	429a      	cmp	r2, r3
 80088be:	f240 83df 	bls.w	8009080 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80088c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80088ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	441a      	add	r2, r3
 8008906:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800890a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800890e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008912:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891a:	b29b      	uxth	r3, r3
 800891c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800891e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6a1a      	ldr	r2, [r3, #32]
 800892a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892e:	1ad2      	subs	r2, r2, r3
 8008930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800893c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	b29b      	uxth	r3, r3
 800895a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 81c7 	beq.w	8008cf2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	633b      	str	r3, [r7, #48]	; 0x30
 8008970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d177      	bne.n	8008a70 <USB_EPStartXfer+0x2ce>
 8008980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
 800898c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800899a:	b29b      	uxth	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	4413      	add	r3, r2
 80089a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	00da      	lsls	r2, r3, #3
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	4413      	add	r3, r2
 80089b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	801a      	strh	r2, [r3, #0]
 80089cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d0:	2b3e      	cmp	r3, #62	; 0x3e
 80089d2:	d921      	bls.n	8008a18 <USB_EPStartXfer+0x276>
 80089d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d8:	095b      	lsrs	r3, r3, #5
 80089da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80089de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e2:	f003 031f 	and.w	r3, r3, #31
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d104      	bne.n	80089f4 <USB_EPStartXfer+0x252>
 80089ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80089ee:	3b01      	subs	r3, #1
 80089f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	029b      	lsls	r3, r3, #10
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	4313      	orrs	r3, r2
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	801a      	strh	r2, [r3, #0]
 8008a16:	e050      	b.n	8008aba <USB_EPStartXfer+0x318>
 8008a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10a      	bne.n	8008a36 <USB_EPStartXfer+0x294>
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	e041      	b.n	8008aba <USB_EPStartXfer+0x318>
 8008a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3a:	085b      	lsrs	r3, r3, #1
 8008a3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <USB_EPStartXfer+0x2b4>
 8008a4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a50:	3301      	adds	r3, #1
 8008a52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	029b      	lsls	r3, r3, #10
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	4313      	orrs	r3, r2
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	e024      	b.n	8008aba <USB_EPStartXfer+0x318>
 8008a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	785b      	ldrb	r3, [r3, #1]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d11c      	bne.n	8008aba <USB_EPStartXfer+0x318>
 8008a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	4413      	add	r3, r2
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
 8008a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	00da      	lsls	r2, r3, #3
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	895b      	ldrh	r3, [r3, #10]
 8008ac6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6959      	ldr	r1, [r3, #20]
 8008ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ae0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ae4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ae8:	6800      	ldr	r0, [r0, #0]
 8008aea:	f001 fb45 	bl	800a178 <USB_WritePMA>
            ep->xfer_buff += len;
 8008aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	695a      	ldr	r2, [r3, #20]
 8008afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008afe:	441a      	add	r2, r3
 8008b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6a1a      	ldr	r2, [r3, #32]
 8008b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d90f      	bls.n	8008b48 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6a1a      	ldr	r2, [r3, #32]
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b38:	1ad2      	subs	r2, r2, r3
 8008b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	621a      	str	r2, [r3, #32]
 8008b46:	e00e      	b.n	8008b66 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2200      	movs	r2, #0
 8008b64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d177      	bne.n	8008c66 <USB_EPStartXfer+0x4c4>
 8008b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	4413      	add	r3, r2
 8008b98:	61bb      	str	r3, [r7, #24]
 8008b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	00da      	lsls	r2, r3, #3
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	4413      	add	r3, r2
 8008bac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8008bc8:	d921      	bls.n	8008c0e <USB_EPStartXfer+0x46c>
 8008bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bce:	095b      	lsrs	r3, r3, #5
 8008bd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d104      	bne.n	8008bea <USB_EPStartXfer+0x448>
 8008be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be4:	3b01      	subs	r3, #1
 8008be6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	029b      	lsls	r3, r3, #10
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	801a      	strh	r2, [r3, #0]
 8008c0c:	e056      	b.n	8008cbc <USB_EPStartXfer+0x51a>
 8008c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <USB_EPStartXfer+0x48a>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	801a      	strh	r2, [r3, #0]
 8008c2a:	e047      	b.n	8008cbc <USB_EPStartXfer+0x51a>
 8008c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c30:	085b      	lsrs	r3, r3, #1
 8008c32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <USB_EPStartXfer+0x4aa>
 8008c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c46:	3301      	adds	r3, #1
 8008c48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	029b      	lsls	r3, r3, #10
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	801a      	strh	r2, [r3, #0]
 8008c64:	e02a      	b.n	8008cbc <USB_EPStartXfer+0x51a>
 8008c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	785b      	ldrb	r3, [r3, #1]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d122      	bne.n	8008cbc <USB_EPStartXfer+0x51a>
 8008c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	623b      	str	r3, [r7, #32]
 8008c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	461a      	mov	r2, r3
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	4413      	add	r3, r2
 8008c98:	623b      	str	r3, [r7, #32]
 8008c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	00da      	lsls	r2, r3, #3
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	4413      	add	r3, r2
 8008cac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008cb0:	61fb      	str	r3, [r7, #28]
 8008cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	891b      	ldrh	r3, [r3, #8]
 8008cc8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6959      	ldr	r1, [r3, #20]
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ce2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ce6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	f001 fa44 	bl	800a178 <USB_WritePMA>
 8008cf0:	e3ee      	b.n	80094d0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d177      	bne.n	8008df2 <USB_EPStartXfer+0x650>
 8008d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d22:	4413      	add	r3, r2
 8008d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	00da      	lsls	r2, r3, #3
 8008d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d36:	4413      	add	r3, r2
 8008d38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d4c:	801a      	strh	r2, [r3, #0]
 8008d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d52:	2b3e      	cmp	r3, #62	; 0x3e
 8008d54:	d921      	bls.n	8008d9a <USB_EPStartXfer+0x5f8>
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5a:	095b      	lsrs	r3, r3, #5
 8008d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d64:	f003 031f 	and.w	r3, r3, #31
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <USB_EPStartXfer+0x5d4>
 8008d6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d70:	3b01      	subs	r3, #1
 8008d72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	029b      	lsls	r3, r3, #10
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	4313      	orrs	r3, r2
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e056      	b.n	8008e48 <USB_EPStartXfer+0x6a6>
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <USB_EPStartXfer+0x616>
 8008da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	e047      	b.n	8008e48 <USB_EPStartXfer+0x6a6>
 8008db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dbc:	085b      	lsrs	r3, r3, #1
 8008dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <USB_EPStartXfer+0x636>
 8008dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	029b      	lsls	r3, r3, #10
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	4313      	orrs	r3, r2
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dee:	801a      	strh	r2, [r3, #0]
 8008df0:	e02a      	b.n	8008e48 <USB_EPStartXfer+0x6a6>
 8008df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	785b      	ldrb	r3, [r3, #1]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d122      	bne.n	8008e48 <USB_EPStartXfer+0x6a6>
 8008e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	653b      	str	r3, [r7, #80]	; 0x50
 8008e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e22:	4413      	add	r3, r2
 8008e24:	653b      	str	r3, [r7, #80]	; 0x50
 8008e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	00da      	lsls	r2, r3, #3
 8008e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e36:	4413      	add	r3, r2
 8008e38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	891b      	ldrh	r3, [r3, #8]
 8008e54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6959      	ldr	r1, [r3, #20]
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e76:	6800      	ldr	r0, [r0, #0]
 8008e78:	f001 f97e 	bl	800a178 <USB_WritePMA>
            ep->xfer_buff += len;
 8008e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	695a      	ldr	r2, [r3, #20]
 8008e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e8c:	441a      	add	r2, r3
 8008e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6a1a      	ldr	r2, [r3, #32]
 8008ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d90f      	bls.n	8008ed6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec6:	1ad2      	subs	r2, r2, r3
 8008ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	621a      	str	r2, [r3, #32]
 8008ed4:	e00e      	b.n	8008ef4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	643b      	str	r3, [r7, #64]	; 0x40
 8008f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	785b      	ldrb	r3, [r3, #1]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d177      	bne.n	8009000 <USB_EPStartXfer+0x85e>
 8008f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f30:	4413      	add	r3, r2
 8008f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	00da      	lsls	r2, r3, #3
 8008f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f44:	4413      	add	r3, r2
 8008f46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	801a      	strh	r2, [r3, #0]
 8008f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f60:	2b3e      	cmp	r3, #62	; 0x3e
 8008f62:	d921      	bls.n	8008fa8 <USB_EPStartXfer+0x806>
 8008f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f68:	095b      	lsrs	r3, r3, #5
 8008f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f72:	f003 031f 	and.w	r3, r3, #31
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d104      	bne.n	8008f84 <USB_EPStartXfer+0x7e2>
 8008f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	029b      	lsls	r3, r3, #10
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	4313      	orrs	r3, r2
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa4:	801a      	strh	r2, [r3, #0]
 8008fa6:	e050      	b.n	800904a <USB_EPStartXfer+0x8a8>
 8008fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <USB_EPStartXfer+0x824>
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc2:	801a      	strh	r2, [r3, #0]
 8008fc4:	e041      	b.n	800904a <USB_EPStartXfer+0x8a8>
 8008fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fca:	085b      	lsrs	r3, r3, #1
 8008fcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d004      	beq.n	8008fe6 <USB_EPStartXfer+0x844>
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	029b      	lsls	r3, r3, #10
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffc:	801a      	strh	r2, [r3, #0]
 8008ffe:	e024      	b.n	800904a <USB_EPStartXfer+0x8a8>
 8009000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	785b      	ldrb	r3, [r3, #1]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d11c      	bne.n	800904a <USB_EPStartXfer+0x8a8>
 8009010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800901e:	b29b      	uxth	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009024:	4413      	add	r3, r2
 8009026:	643b      	str	r3, [r7, #64]	; 0x40
 8009028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	00da      	lsls	r2, r3, #3
 8009036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009038:	4413      	add	r3, r2
 800903a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009044:	b29a      	uxth	r2, r3
 8009046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009048:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	895b      	ldrh	r3, [r3, #10]
 8009056:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800905a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6959      	ldr	r1, [r3, #20]
 8009066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906a:	b29b      	uxth	r3, r3
 800906c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009070:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009074:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009078:	6800      	ldr	r0, [r0, #0]
 800907a:	f001 f87d 	bl	800a178 <USB_WritePMA>
 800907e:	e227      	b.n	80094d0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800909e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80090b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80090ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	441a      	add	r2, r3
 80090d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80090d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80090ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009106:	b29b      	uxth	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800910c:	4413      	add	r3, r2
 800910e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	00da      	lsls	r2, r3, #3
 800911e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009120:	4413      	add	r3, r2
 8009122:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009126:	65bb      	str	r3, [r7, #88]	; 0x58
 8009128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912c:	b29a      	uxth	r2, r3
 800912e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009130:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	891b      	ldrh	r3, [r3, #8]
 800913e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6959      	ldr	r1, [r3, #20]
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009152:	b29b      	uxth	r3, r3
 8009154:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009158:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800915c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009160:	6800      	ldr	r0, [r0, #0]
 8009162:	f001 f809 	bl	800a178 <USB_WritePMA>
 8009166:	e1b3      	b.n	80094d0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6a1a      	ldr	r2, [r3, #32]
 8009174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009178:	1ad2      	subs	r2, r2, r3
 800917a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 80c6 	beq.w	800933a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	673b      	str	r3, [r7, #112]	; 0x70
 80091ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d177      	bne.n	80092ba <USB_EPStartXfer+0xb18>
 80091ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80091d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091ea:	4413      	add	r3, r2
 80091ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80091ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	00da      	lsls	r2, r3, #3
 80091fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091fe:	4413      	add	r3, r2
 8009200:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009204:	667b      	str	r3, [r7, #100]	; 0x64
 8009206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009210:	b29a      	uxth	r2, r3
 8009212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009214:	801a      	strh	r2, [r3, #0]
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921a:	2b3e      	cmp	r3, #62	; 0x3e
 800921c:	d921      	bls.n	8009262 <USB_EPStartXfer+0xac0>
 800921e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009222:	095b      	lsrs	r3, r3, #5
 8009224:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800922c:	f003 031f 	and.w	r3, r3, #31
 8009230:	2b00      	cmp	r3, #0
 8009232:	d104      	bne.n	800923e <USB_EPStartXfer+0xa9c>
 8009234:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009238:	3b01      	subs	r3, #1
 800923a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800923e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	b29a      	uxth	r2, r3
 8009244:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009248:	b29b      	uxth	r3, r3
 800924a:	029b      	lsls	r3, r3, #10
 800924c:	b29b      	uxth	r3, r3
 800924e:	4313      	orrs	r3, r2
 8009250:	b29b      	uxth	r3, r3
 8009252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800925a:	b29a      	uxth	r2, r3
 800925c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800925e:	801a      	strh	r2, [r3, #0]
 8009260:	e050      	b.n	8009304 <USB_EPStartXfer+0xb62>
 8009262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <USB_EPStartXfer+0xade>
 800926a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	b29b      	uxth	r3, r3
 8009270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009278:	b29a      	uxth	r2, r3
 800927a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	e041      	b.n	8009304 <USB_EPStartXfer+0xb62>
 8009280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009284:	085b      	lsrs	r3, r3, #1
 8009286:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800928a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d004      	beq.n	80092a0 <USB_EPStartXfer+0xafe>
 8009296:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800929a:	3301      	adds	r3, #1
 800929c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	029b      	lsls	r3, r3, #10
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	4313      	orrs	r3, r2
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	e024      	b.n	8009304 <USB_EPStartXfer+0xb62>
 80092ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	785b      	ldrb	r3, [r3, #1]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d11c      	bne.n	8009304 <USB_EPStartXfer+0xb62>
 80092ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092d8:	b29b      	uxth	r3, r3
 80092da:	461a      	mov	r2, r3
 80092dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092de:	4413      	add	r3, r2
 80092e0:	673b      	str	r3, [r7, #112]	; 0x70
 80092e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	00da      	lsls	r2, r3, #3
 80092f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092f2:	4413      	add	r3, r2
 80092f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092fe:	b29a      	uxth	r2, r3
 8009300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009302:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	895b      	ldrh	r3, [r3, #10]
 8009310:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6959      	ldr	r1, [r3, #20]
 8009320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009324:	b29b      	uxth	r3, r3
 8009326:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800932a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800932e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009332:	6800      	ldr	r0, [r0, #0]
 8009334:	f000 ff20 	bl	800a178 <USB_WritePMA>
 8009338:	e0ca      	b.n	80094d0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800933a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800933e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d177      	bne.n	800943a <USB_EPStartXfer+0xc98>
 800934a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009364:	b29b      	uxth	r3, r3
 8009366:	461a      	mov	r2, r3
 8009368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800936a:	4413      	add	r3, r2
 800936c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800936e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	00da      	lsls	r2, r3, #3
 800937c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800937e:	4413      	add	r3, r2
 8009380:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009384:	67bb      	str	r3, [r7, #120]	; 0x78
 8009386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	b29b      	uxth	r3, r3
 800938c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009390:	b29a      	uxth	r2, r3
 8009392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009394:	801a      	strh	r2, [r3, #0]
 8009396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939a:	2b3e      	cmp	r3, #62	; 0x3e
 800939c:	d921      	bls.n	80093e2 <USB_EPStartXfer+0xc40>
 800939e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a2:	095b      	lsrs	r3, r3, #5
 80093a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80093a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ac:	f003 031f 	and.w	r3, r3, #31
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d104      	bne.n	80093be <USB_EPStartXfer+0xc1c>
 80093b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80093b8:	3b01      	subs	r3, #1
 80093ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80093be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	029b      	lsls	r3, r3, #10
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	4313      	orrs	r3, r2
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093da:	b29a      	uxth	r2, r3
 80093dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093de:	801a      	strh	r2, [r3, #0]
 80093e0:	e05c      	b.n	800949c <USB_EPStartXfer+0xcfa>
 80093e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10a      	bne.n	8009400 <USB_EPStartXfer+0xc5e>
 80093ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093fc:	801a      	strh	r2, [r3, #0]
 80093fe:	e04d      	b.n	800949c <USB_EPStartXfer+0xcfa>
 8009400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009404:	085b      	lsrs	r3, r3, #1
 8009406:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800940a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <USB_EPStartXfer+0xc7e>
 8009416:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800941a:	3301      	adds	r3, #1
 800941c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	b29a      	uxth	r2, r3
 8009426:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800942a:	b29b      	uxth	r3, r3
 800942c:	029b      	lsls	r3, r3, #10
 800942e:	b29b      	uxth	r3, r3
 8009430:	4313      	orrs	r3, r2
 8009432:	b29a      	uxth	r2, r3
 8009434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009436:	801a      	strh	r2, [r3, #0]
 8009438:	e030      	b.n	800949c <USB_EPStartXfer+0xcfa>
 800943a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800943e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	785b      	ldrb	r3, [r3, #1]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d128      	bne.n	800949c <USB_EPStartXfer+0xcfa>
 800944a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009466:	b29b      	uxth	r3, r3
 8009468:	461a      	mov	r2, r3
 800946a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800946e:	4413      	add	r3, r2
 8009470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	00da      	lsls	r2, r3, #3
 8009482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009486:	4413      	add	r3, r2
 8009488:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800948c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009494:	b29a      	uxth	r2, r3
 8009496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800949a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800949c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	891b      	ldrh	r3, [r3, #8]
 80094a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6959      	ldr	r1, [r3, #20]
 80094b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80094c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	f000 fe54 	bl	800a178 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80094d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094f6:	817b      	strh	r3, [r7, #10]
 80094f8:	897b      	ldrh	r3, [r7, #10]
 80094fa:	f083 0310 	eor.w	r3, r3, #16
 80094fe:	817b      	strh	r3, [r7, #10]
 8009500:	897b      	ldrh	r3, [r7, #10]
 8009502:	f083 0320 	eor.w	r3, r3, #32
 8009506:	817b      	strh	r3, [r7, #10]
 8009508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	441a      	add	r2, r3
 8009522:	897b      	ldrh	r3, [r7, #10]
 8009524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800952c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009534:	b29b      	uxth	r3, r3
 8009536:	8013      	strh	r3, [r2, #0]
 8009538:	f000 bcde 	b.w	8009ef8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800953c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	7b1b      	ldrb	r3, [r3, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f040 80bb 	bne.w	80096c4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800954e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	699a      	ldr	r2, [r3, #24]
 800955a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	429a      	cmp	r2, r3
 8009568:	d917      	bls.n	800959a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800956a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800957a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800958a:	1ad2      	subs	r2, r2, r3
 800958c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	619a      	str	r2, [r3, #24]
 8009598:	e00e      	b.n	80095b8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800959a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800959e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80095aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2200      	movs	r2, #0
 80095b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80095b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095dc:	4413      	add	r3, r2
 80095de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	00da      	lsls	r2, r3, #3
 80095f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095f4:	4413      	add	r3, r2
 80095f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80095fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800960a:	b29a      	uxth	r2, r3
 800960c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009610:	801a      	strh	r2, [r3, #0]
 8009612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009616:	2b3e      	cmp	r3, #62	; 0x3e
 8009618:	d924      	bls.n	8009664 <USB_EPStartXfer+0xec2>
 800961a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961e:	095b      	lsrs	r3, r3, #5
 8009620:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009628:	f003 031f 	and.w	r3, r3, #31
 800962c:	2b00      	cmp	r3, #0
 800962e:	d104      	bne.n	800963a <USB_EPStartXfer+0xe98>
 8009630:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009634:	3b01      	subs	r3, #1
 8009636:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800963a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	b29a      	uxth	r2, r3
 8009642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009646:	b29b      	uxth	r3, r3
 8009648:	029b      	lsls	r3, r3, #10
 800964a:	b29b      	uxth	r3, r3
 800964c:	4313      	orrs	r3, r2
 800964e:	b29b      	uxth	r3, r3
 8009650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009658:	b29a      	uxth	r2, r3
 800965a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800965e:	801a      	strh	r2, [r3, #0]
 8009660:	f000 bc10 	b.w	8009e84 <USB_EPStartXfer+0x16e2>
 8009664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10c      	bne.n	8009686 <USB_EPStartXfer+0xee4>
 800966c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800967c:	b29a      	uxth	r2, r3
 800967e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009682:	801a      	strh	r2, [r3, #0]
 8009684:	e3fe      	b.n	8009e84 <USB_EPStartXfer+0x16e2>
 8009686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968a:	085b      	lsrs	r3, r3, #1
 800968c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	2b00      	cmp	r3, #0
 800969a:	d004      	beq.n	80096a6 <USB_EPStartXfer+0xf04>
 800969c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096a0:	3301      	adds	r3, #1
 80096a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	029b      	lsls	r3, r3, #10
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	4313      	orrs	r3, r2
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096c0:	801a      	strh	r2, [r3, #0]
 80096c2:	e3df      	b.n	8009e84 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80096c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	78db      	ldrb	r3, [r3, #3]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	f040 8218 	bne.w	8009b06 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80096d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	785b      	ldrb	r3, [r3, #1]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f040 809d 	bne.w	8009822 <USB_EPStartXfer+0x1080>
 80096e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009704:	b29b      	uxth	r3, r3
 8009706:	461a      	mov	r2, r3
 8009708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800970c:	4413      	add	r3, r2
 800970e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	00da      	lsls	r2, r3, #3
 8009720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009724:	4413      	add	r3, r2
 8009726:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800972a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800972e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800973a:	b29a      	uxth	r2, r3
 800973c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009740:	801a      	strh	r2, [r3, #0]
 8009742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b3e      	cmp	r3, #62	; 0x3e
 8009750:	d92b      	bls.n	80097aa <USB_EPStartXfer+0x1008>
 8009752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	095b      	lsrs	r3, r3, #5
 8009760:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <USB_EPStartXfer+0xfe0>
 8009778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800977c:	3b01      	subs	r3, #1
 800977e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	b29a      	uxth	r2, r3
 800978a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800978e:	b29b      	uxth	r3, r3
 8009790:	029b      	lsls	r3, r3, #10
 8009792:	b29b      	uxth	r3, r3
 8009794:	4313      	orrs	r3, r2
 8009796:	b29b      	uxth	r3, r3
 8009798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800979c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097a6:	801a      	strh	r2, [r3, #0]
 80097a8:	e070      	b.n	800988c <USB_EPStartXfer+0x10ea>
 80097aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10c      	bne.n	80097d4 <USB_EPStartXfer+0x1032>
 80097ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097d0:	801a      	strh	r2, [r3, #0]
 80097d2:	e05b      	b.n	800988c <USB_EPStartXfer+0x10ea>
 80097d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	085b      	lsrs	r3, r3, #1
 80097e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d004      	beq.n	8009804 <USB_EPStartXfer+0x1062>
 80097fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fe:	3301      	adds	r3, #1
 8009800:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	b29a      	uxth	r2, r3
 800980c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009810:	b29b      	uxth	r3, r3
 8009812:	029b      	lsls	r3, r3, #10
 8009814:	b29b      	uxth	r3, r3
 8009816:	4313      	orrs	r3, r2
 8009818:	b29a      	uxth	r2, r3
 800981a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800981e:	801a      	strh	r2, [r3, #0]
 8009820:	e034      	b.n	800988c <USB_EPStartXfer+0x10ea>
 8009822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	785b      	ldrb	r3, [r3, #1]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d12c      	bne.n	800988c <USB_EPStartXfer+0x10ea>
 8009832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800984e:	b29b      	uxth	r3, r3
 8009850:	461a      	mov	r2, r3
 8009852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009856:	4413      	add	r3, r2
 8009858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800985c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	00da      	lsls	r2, r3, #3
 800986a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800986e:	4413      	add	r3, r2
 8009870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800987c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	b29a      	uxth	r2, r3
 8009886:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800989a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	785b      	ldrb	r3, [r3, #1]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f040 809d 	bne.w	80099e6 <USB_EPStartXfer+0x1244>
 80098ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	461a      	mov	r2, r3
 80098cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098d0:	4413      	add	r3, r2
 80098d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	00da      	lsls	r2, r3, #3
 80098e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098e8:	4413      	add	r3, r2
 80098ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098f6:	881b      	ldrh	r3, [r3, #0]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098fe:	b29a      	uxth	r2, r3
 8009900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009904:	801a      	strh	r2, [r3, #0]
 8009906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b3e      	cmp	r3, #62	; 0x3e
 8009914:	d92b      	bls.n	800996e <USB_EPStartXfer+0x11cc>
 8009916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	f003 031f 	and.w	r3, r3, #31
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <USB_EPStartXfer+0x11a4>
 800993c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009940:	3b01      	subs	r3, #1
 8009942:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009946:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	b29a      	uxth	r2, r3
 800994e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009952:	b29b      	uxth	r3, r3
 8009954:	029b      	lsls	r3, r3, #10
 8009956:	b29b      	uxth	r3, r3
 8009958:	4313      	orrs	r3, r2
 800995a:	b29b      	uxth	r3, r3
 800995c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009964:	b29a      	uxth	r2, r3
 8009966:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800996a:	801a      	strh	r2, [r3, #0]
 800996c:	e069      	b.n	8009a42 <USB_EPStartXfer+0x12a0>
 800996e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10c      	bne.n	8009998 <USB_EPStartXfer+0x11f6>
 800997e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	b29b      	uxth	r3, r3
 8009986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800998a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800998e:	b29a      	uxth	r2, r3
 8009990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009994:	801a      	strh	r2, [r3, #0]
 8009996:	e054      	b.n	8009a42 <USB_EPStartXfer+0x12a0>
 8009998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	085b      	lsrs	r3, r3, #1
 80099a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d004      	beq.n	80099c8 <USB_EPStartXfer+0x1226>
 80099be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c2:	3301      	adds	r3, #1
 80099c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099cc:	881b      	ldrh	r3, [r3, #0]
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	029b      	lsls	r3, r3, #10
 80099d8:	b29b      	uxth	r3, r3
 80099da:	4313      	orrs	r3, r2
 80099dc:	b29a      	uxth	r2, r3
 80099de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099e2:	801a      	strh	r2, [r3, #0]
 80099e4:	e02d      	b.n	8009a42 <USB_EPStartXfer+0x12a0>
 80099e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d125      	bne.n	8009a42 <USB_EPStartXfer+0x12a0>
 80099f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	00da      	lsls	r2, r3, #3
 8009a20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a24:	4413      	add	r3, r2
 8009a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a40:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 8218 	beq.w	8009e84 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d005      	beq.n	8009a8c <USB_EPStartXfer+0x12ea>
 8009a80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10d      	bne.n	8009aa8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 81f5 	bne.w	8009e84 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f040 81ee 	bne.w	8009e84 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ace:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	441a      	add	r2, r3
 8009aec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009afc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	8013      	strh	r3, [r2, #0]
 8009b04:	e1be      	b.n	8009e84 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	78db      	ldrb	r3, [r3, #3]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	f040 81b4 	bne.w	8009e80 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	699a      	ldr	r2, [r3, #24]
 8009b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d917      	bls.n	8009b64 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699a      	ldr	r2, [r3, #24]
 8009b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b54:	1ad2      	subs	r2, r2, r3
 8009b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	619a      	str	r2, [r3, #24]
 8009b62:	e00e      	b.n	8009b82 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f040 8085 	bne.w	8009c9e <USB_EPStartXfer+0x14fc>
 8009b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bb8:	4413      	add	r3, r2
 8009bba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	00da      	lsls	r2, r3, #3
 8009bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009bec:	801a      	strh	r2, [r3, #0]
 8009bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8009bf4:	d923      	bls.n	8009c3e <USB_EPStartXfer+0x149c>
 8009bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c04:	f003 031f 	and.w	r3, r3, #31
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <USB_EPStartXfer+0x1474>
 8009c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c10:	3b01      	subs	r3, #1
 8009c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	029b      	lsls	r3, r3, #10
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c3a:	801a      	strh	r2, [r3, #0]
 8009c3c:	e060      	b.n	8009d00 <USB_EPStartXfer+0x155e>
 8009c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10c      	bne.n	8009c60 <USB_EPStartXfer+0x14be>
 8009c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c5c:	801a      	strh	r2, [r3, #0]
 8009c5e:	e04f      	b.n	8009d00 <USB_EPStartXfer+0x155e>
 8009c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c64:	085b      	lsrs	r3, r3, #1
 8009c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d004      	beq.n	8009c80 <USB_EPStartXfer+0x14de>
 8009c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	029b      	lsls	r3, r3, #10
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	4313      	orrs	r3, r2
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c9a:	801a      	strh	r2, [r3, #0]
 8009c9c:	e030      	b.n	8009d00 <USB_EPStartXfer+0x155e>
 8009c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d128      	bne.n	8009d00 <USB_EPStartXfer+0x155e>
 8009cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	461a      	mov	r2, r3
 8009cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	00da      	lsls	r2, r3, #3
 8009ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cea:	4413      	add	r3, r2
 8009cec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009cfe:	801a      	strh	r2, [r3, #0]
 8009d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f040 8085 	bne.w	8009e2a <USB_EPStartXfer+0x1688>
 8009d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d44:	4413      	add	r3, r2
 8009d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	00da      	lsls	r2, r3, #3
 8009d58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d78:	801a      	strh	r2, [r3, #0]
 8009d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8009d80:	d923      	bls.n	8009dca <USB_EPStartXfer+0x1628>
 8009d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d86:	095b      	lsrs	r3, r3, #5
 8009d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d90:	f003 031f 	and.w	r3, r3, #31
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <USB_EPStartXfer+0x1600>
 8009d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	029b      	lsls	r3, r3, #10
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	4313      	orrs	r3, r2
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dc6:	801a      	strh	r2, [r3, #0]
 8009dc8:	e05c      	b.n	8009e84 <USB_EPStartXfer+0x16e2>
 8009dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10c      	bne.n	8009dec <USB_EPStartXfer+0x164a>
 8009dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	e04b      	b.n	8009e84 <USB_EPStartXfer+0x16e2>
 8009dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df0:	085b      	lsrs	r3, r3, #1
 8009df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <USB_EPStartXfer+0x166a>
 8009e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e06:	3301      	adds	r3, #1
 8009e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	029b      	lsls	r3, r3, #10
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e26:	801a      	strh	r2, [r3, #0]
 8009e28:	e02c      	b.n	8009e84 <USB_EPStartXfer+0x16e2>
 8009e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	785b      	ldrb	r3, [r3, #1]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d124      	bne.n	8009e84 <USB_EPStartXfer+0x16e2>
 8009e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e50:	4413      	add	r3, r2
 8009e52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	00da      	lsls	r2, r3, #3
 8009e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e68:	4413      	add	r3, r2
 8009e6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e7c:	801a      	strh	r2, [r3, #0]
 8009e7e:	e001      	b.n	8009e84 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e03a      	b.n	8009efa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eaa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009eae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009eb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009eb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009eba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ebe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ec2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	441a      	add	r2, r3
 8009ee0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d020      	beq.n	8009f58 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f2c:	81bb      	strh	r3, [r7, #12]
 8009f2e:	89bb      	ldrh	r3, [r7, #12]
 8009f30:	f083 0310 	eor.w	r3, r3, #16
 8009f34:	81bb      	strh	r3, [r7, #12]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	441a      	add	r2, r3
 8009f40:	89bb      	ldrh	r3, [r7, #12]
 8009f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	8013      	strh	r3, [r2, #0]
 8009f56:	e01f      	b.n	8009f98 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6e:	81fb      	strh	r3, [r7, #14]
 8009f70:	89fb      	ldrh	r3, [r7, #14]
 8009f72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f76:	81fb      	strh	r3, [r7, #14]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	441a      	add	r2, r3
 8009f82:	89fb      	ldrh	r3, [r7, #14]
 8009f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b087      	sub	sp, #28
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	7b1b      	ldrb	r3, [r3, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f040 809d 	bne.w	800a0f4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	785b      	ldrb	r3, [r3, #1]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d04c      	beq.n	800a05c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	823b      	strh	r3, [r7, #16]
 8009fd0:	8a3b      	ldrh	r3, [r7, #16]
 8009fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d01b      	beq.n	800a012 <USB_EPClearStall+0x6c>
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff0:	81fb      	strh	r3, [r7, #14]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	441a      	add	r2, r3
 8009ffc:	89fb      	ldrh	r3, [r7, #14]
 8009ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a00a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a00e:	b29b      	uxth	r3, r3
 800a010:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	78db      	ldrb	r3, [r3, #3]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d06c      	beq.n	800a0f4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	b29b      	uxth	r3, r3
 800a028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a02c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a030:	81bb      	strh	r3, [r7, #12]
 800a032:	89bb      	ldrh	r3, [r7, #12]
 800a034:	f083 0320 	eor.w	r3, r3, #32
 800a038:	81bb      	strh	r3, [r7, #12]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	441a      	add	r2, r3
 800a044:	89bb      	ldrh	r3, [r7, #12]
 800a046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a04a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a04e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a056:	b29b      	uxth	r3, r3
 800a058:	8013      	strh	r3, [r2, #0]
 800a05a:	e04b      	b.n	800a0f4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	881b      	ldrh	r3, [r3, #0]
 800a068:	82fb      	strh	r3, [r7, #22]
 800a06a:	8afb      	ldrh	r3, [r7, #22]
 800a06c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01b      	beq.n	800a0ac <USB_EPClearStall+0x106>
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	b29b      	uxth	r3, r3
 800a082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a08a:	82bb      	strh	r3, [r7, #20]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	441a      	add	r2, r3
 800a096:	8abb      	ldrh	r3, [r7, #20]
 800a098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a09c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c2:	827b      	strh	r3, [r7, #18]
 800a0c4:	8a7b      	ldrh	r3, [r7, #18]
 800a0c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a0ca:	827b      	strh	r3, [r7, #18]
 800a0cc:	8a7b      	ldrh	r3, [r7, #18]
 800a0ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a0d2:	827b      	strh	r3, [r7, #18]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	441a      	add	r2, r3
 800a0de:	8a7b      	ldrh	r3, [r7, #18]
 800a0e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	371c      	adds	r7, #28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d103      	bne.n	800a11c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2280      	movs	r2, #128	; 0x80
 800a118:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a138:	b29b      	uxth	r3, r3
 800a13a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a13e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a142:	b29a      	uxth	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a166:	b29b      	uxth	r3, r3
 800a168:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a16a:	68fb      	ldr	r3, [r7, #12]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a178:	b480      	push	{r7}
 800a17a:	b08b      	sub	sp, #44	; 0x2c
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4611      	mov	r1, r2
 800a184:	461a      	mov	r2, r3
 800a186:	460b      	mov	r3, r1
 800a188:	80fb      	strh	r3, [r7, #6]
 800a18a:	4613      	mov	r3, r2
 800a18c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a18e:	88bb      	ldrh	r3, [r7, #4]
 800a190:	3301      	adds	r3, #1
 800a192:	085b      	lsrs	r3, r3, #1
 800a194:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a19e:	88fa      	ldrh	r2, [r7, #6]
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ae:	e01b      	b.n	800a1e8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	b21a      	sxth	r2, r3
 800a1c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	b21b      	sxth	r3, r3
 800a1c8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	8a7a      	ldrh	r2, [r7, #18]
 800a1ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	3302      	adds	r3, #2
 800a1d4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e0      	bne.n	800a1b0 <USB_WritePMA+0x38>
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	bf00      	nop
 800a1f2:	372c      	adds	r7, #44	; 0x2c
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b08b      	sub	sp, #44	; 0x2c
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4611      	mov	r1, r2
 800a208:	461a      	mov	r2, r3
 800a20a:	460b      	mov	r3, r1
 800a20c:	80fb      	strh	r3, [r7, #6]
 800a20e:	4613      	mov	r3, r2
 800a210:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a212:	88bb      	ldrh	r3, [r7, #4]
 800a214:	085b      	lsrs	r3, r3, #1
 800a216:	b29b      	uxth	r3, r3
 800a218:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a222:	88fa      	ldrh	r2, [r7, #6]
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a22c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	627b      	str	r3, [r7, #36]	; 0x24
 800a232:	e018      	b.n	800a266 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	3302      	adds	r3, #2
 800a240:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	b2da      	uxtb	r2, r3
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	3301      	adds	r3, #1
 800a24e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	0a1b      	lsrs	r3, r3, #8
 800a254:	b2da      	uxtb	r2, r3
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	3301      	adds	r3, #1
 800a25e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	3b01      	subs	r3, #1
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
 800a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e3      	bne.n	800a234 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a26c:	88bb      	ldrh	r3, [r7, #4]
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	b29b      	uxth	r3, r3
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	881b      	ldrh	r3, [r3, #0]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	b2da      	uxtb	r2, r3
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	701a      	strb	r2, [r3, #0]
  }
}
 800a288:	bf00      	nop
 800a28a:	372c      	adds	r7, #44	; 0x2c
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a2a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a2a4:	f002 f90a 	bl	800c4bc <USBD_static_malloc>
 800a2a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d105      	bne.n	800a2bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e066      	b.n	800a38a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	7c1b      	ldrb	r3, [r3, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d119      	bne.n	800a300 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a2cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	2181      	movs	r1, #129	; 0x81
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 ff98 	bl	800c20a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a2e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2e4:	2202      	movs	r2, #2
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 ff8e 	bl	800c20a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2210      	movs	r2, #16
 800a2fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a2fe:	e016      	b.n	800a32e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a300:	2340      	movs	r3, #64	; 0x40
 800a302:	2202      	movs	r2, #2
 800a304:	2181      	movs	r1, #129	; 0x81
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f001 ff7f 	bl	800c20a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a312:	2340      	movs	r3, #64	; 0x40
 800a314:	2202      	movs	r2, #2
 800a316:	2101      	movs	r1, #1
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 ff76 	bl	800c20a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2210      	movs	r2, #16
 800a32a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a32e:	2308      	movs	r3, #8
 800a330:	2203      	movs	r2, #3
 800a332:	2182      	movs	r1, #130	; 0x82
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f001 ff68 	bl	800c20a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7c1b      	ldrb	r3, [r3, #16]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d109      	bne.n	800a378 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a36a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a36e:	2101      	movs	r1, #1
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f002 f839 	bl	800c3e8 <USBD_LL_PrepareReceive>
 800a376:	e007      	b.n	800a388 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a37e:	2340      	movs	r3, #64	; 0x40
 800a380:	2101      	movs	r1, #1
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f002 f830 	bl	800c3e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b082      	sub	sp, #8
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	460b      	mov	r3, r1
 800a39c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a39e:	2181      	movs	r1, #129	; 0x81
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f001 ff58 	bl	800c256 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f001 ff51 	bl	800c256 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a3bc:	2182      	movs	r1, #130	; 0x82
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f001 ff49 	bl	800c256 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00e      	beq.n	800a3fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f002 f872 	bl	800c4d8 <USBD_static_free>
    pdev->pClassData = NULL;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a418:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a41a:	2300      	movs	r3, #0
 800a41c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e0af      	b.n	800a590 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d03f      	beq.n	800a4bc <USBD_CDC_Setup+0xb4>
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	f040 809f 	bne.w	800a580 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	88db      	ldrh	r3, [r3, #6]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d02e      	beq.n	800a4a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	b25b      	sxtb	r3, r3
 800a450:	2b00      	cmp	r3, #0
 800a452:	da16      	bge.n	800a482 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a460:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	88d2      	ldrh	r2, [r2, #6]
 800a466:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	88db      	ldrh	r3, [r3, #6]
 800a46c:	2b07      	cmp	r3, #7
 800a46e:	bf28      	it	cs
 800a470:	2307      	movcs	r3, #7
 800a472:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	89fa      	ldrh	r2, [r7, #14]
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 facf 	bl	800ba1e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a480:	e085      	b.n	800a58e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	785a      	ldrb	r2, [r3, #1]
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	88db      	ldrh	r3, [r3, #6]
 800a490:	b2da      	uxtb	r2, r3
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a498:	6939      	ldr	r1, [r7, #16]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	88db      	ldrh	r3, [r3, #6]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f001 fae8 	bl	800ba76 <USBD_CtlPrepareRx>
      break;
 800a4a6:	e072      	b.n	800a58e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	7850      	ldrb	r0, [r2, #1]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	4798      	blx	r3
      break;
 800a4ba:	e068      	b.n	800a58e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	785b      	ldrb	r3, [r3, #1]
 800a4c0:	2b0b      	cmp	r3, #11
 800a4c2:	d852      	bhi.n	800a56a <USBD_CDC_Setup+0x162>
 800a4c4:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <USBD_CDC_Setup+0xc4>)
 800a4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ca:	bf00      	nop
 800a4cc:	0800a4fd 	.word	0x0800a4fd
 800a4d0:	0800a579 	.word	0x0800a579
 800a4d4:	0800a56b 	.word	0x0800a56b
 800a4d8:	0800a56b 	.word	0x0800a56b
 800a4dc:	0800a56b 	.word	0x0800a56b
 800a4e0:	0800a56b 	.word	0x0800a56b
 800a4e4:	0800a56b 	.word	0x0800a56b
 800a4e8:	0800a56b 	.word	0x0800a56b
 800a4ec:	0800a56b 	.word	0x0800a56b
 800a4f0:	0800a56b 	.word	0x0800a56b
 800a4f4:	0800a527 	.word	0x0800a527
 800a4f8:	0800a551 	.word	0x0800a551
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b03      	cmp	r3, #3
 800a506:	d107      	bne.n	800a518 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a508:	f107 030a 	add.w	r3, r7, #10
 800a50c:	2202      	movs	r2, #2
 800a50e:	4619      	mov	r1, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 fa84 	bl	800ba1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a516:	e032      	b.n	800a57e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f001 fa0e 	bl	800b93c <USBD_CtlError>
            ret = USBD_FAIL;
 800a520:	2303      	movs	r3, #3
 800a522:	75fb      	strb	r3, [r7, #23]
          break;
 800a524:	e02b      	b.n	800a57e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d107      	bne.n	800a542 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a532:	f107 030d 	add.w	r3, r7, #13
 800a536:	2201      	movs	r2, #1
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f001 fa6f 	bl	800ba1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a540:	e01d      	b.n	800a57e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f001 f9f9 	bl	800b93c <USBD_CtlError>
            ret = USBD_FAIL;
 800a54a:	2303      	movs	r3, #3
 800a54c:	75fb      	strb	r3, [r7, #23]
          break;
 800a54e:	e016      	b.n	800a57e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d00f      	beq.n	800a57c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 f9ec 	bl	800b93c <USBD_CtlError>
            ret = USBD_FAIL;
 800a564:	2303      	movs	r3, #3
 800a566:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a568:	e008      	b.n	800a57c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f001 f9e5 	bl	800b93c <USBD_CtlError>
          ret = USBD_FAIL;
 800a572:	2303      	movs	r3, #3
 800a574:	75fb      	strb	r3, [r7, #23]
          break;
 800a576:	e002      	b.n	800a57e <USBD_CDC_Setup+0x176>
          break;
 800a578:	bf00      	nop
 800a57a:	e008      	b.n	800a58e <USBD_CDC_Setup+0x186>
          break;
 800a57c:	bf00      	nop
      }
      break;
 800a57e:	e006      	b.n	800a58e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 f9da 	bl	800b93c <USBD_CtlError>
      ret = USBD_FAIL;
 800a588:	2303      	movs	r3, #3
 800a58a:	75fb      	strb	r3, [r7, #23]
      break;
 800a58c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e04f      	b.n	800a65a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a5c2:	78fa      	ldrb	r2, [r7, #3]
 800a5c4:	6879      	ldr	r1, [r7, #4]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	440b      	add	r3, r1
 800a5d0:	3318      	adds	r3, #24
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d029      	beq.n	800a62c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a5d8:	78fa      	ldrb	r2, [r7, #3]
 800a5da:	6879      	ldr	r1, [r7, #4]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4413      	add	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	440b      	add	r3, r1
 800a5e6:	3318      	adds	r3, #24
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	78f9      	ldrb	r1, [r7, #3]
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	440b      	add	r3, r1
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	4403      	add	r3, r0
 800a5f8:	3320      	adds	r3, #32
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a600:	fb01 f303 	mul.w	r3, r1, r3
 800a604:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a606:	2b00      	cmp	r3, #0
 800a608:	d110      	bne.n	800a62c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a60a:	78fa      	ldrb	r2, [r7, #3]
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	4613      	mov	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	440b      	add	r3, r1
 800a618:	3318      	adds	r3, #24
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a61e:	78f9      	ldrb	r1, [r7, #3]
 800a620:	2300      	movs	r3, #0
 800a622:	2200      	movs	r2, #0
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f001 febe 	bl	800c3a6 <USBD_LL_Transmit>
 800a62a:	e015      	b.n	800a658 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2200      	movs	r2, #0
 800a630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00b      	beq.n	800a658 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a654:	78fa      	ldrb	r2, [r7, #3]
 800a656:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a674:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d101      	bne.n	800a684 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a680:	2303      	movs	r3, #3
 800a682:	e015      	b.n	800a6b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a684:	78fb      	ldrb	r3, [r7, #3]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f001 fece 	bl	800c42a <USBD_LL_GetRxDataSize>
 800a68e:	4602      	mov	r2, r0
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e01b      	b.n	800a70a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d015      	beq.n	800a708 <USBD_CDC_EP0_RxReady+0x50>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a6e2:	2bff      	cmp	r3, #255	; 0xff
 800a6e4:	d010      	beq.n	800a708 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a6f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a6fc:	b292      	uxth	r2, r2
 800a6fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	22ff      	movs	r2, #255	; 0xff
 800a704:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2243      	movs	r2, #67	; 0x43
 800a720:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a722:	4b03      	ldr	r3, [pc, #12]	; (800a730 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	200000b4 	.word	0x200000b4

0800a734 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2243      	movs	r2, #67	; 0x43
 800a740:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a742:	4b03      	ldr	r3, [pc, #12]	; (800a750 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	20000070 	.word	0x20000070

0800a754 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2243      	movs	r2, #67	; 0x43
 800a760:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a762:	4b03      	ldr	r3, [pc, #12]	; (800a770 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	200000f8 	.word	0x200000f8

0800a774 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	220a      	movs	r2, #10
 800a780:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a782:	4b03      	ldr	r3, [pc, #12]	; (800a790 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	2000002c 	.word	0x2000002c

0800a794 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e004      	b.n	800a7b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b087      	sub	sp, #28
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e008      	b.n	800a7ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a80a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d101      	bne.n	800a816 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a812:	2303      	movs	r3, #3
 800a814:	e004      	b.n	800a820 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a83a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a83c:	2301      	movs	r3, #1
 800a83e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e01a      	b.n	800a884 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a854:	2b00      	cmp	r3, #0
 800a856:	d114      	bne.n	800a882 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a876:	2181      	movs	r1, #129	; 0x81
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 fd94 	bl	800c3a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a882:	7bfb      	ldrb	r3, [r7, #15]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a89a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e016      	b.n	800a8d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	7c1b      	ldrb	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d109      	bne.n	800a8c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8bc:	2101      	movs	r1, #1
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f001 fd92 	bl	800c3e8 <USBD_LL_PrepareReceive>
 800a8c4:	e007      	b.n	800a8d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8cc:	2340      	movs	r3, #64	; 0x40
 800a8ce:	2101      	movs	r1, #1
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 fd89 	bl	800c3e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e01f      	b.n	800a938 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	79fa      	ldrb	r2, [r7, #7]
 800a92a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f001 fbf1 	bl	800c114 <USBD_LL_Init>
 800a932:	4603      	mov	r3, r0
 800a934:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a936:	7dfb      	ldrb	r3, [r7, #23]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a954:	2303      	movs	r3, #3
 800a956:	e016      	b.n	800a986 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00b      	beq.n	800a984 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a974:	f107 020e 	add.w	r2, r7, #14
 800a978:	4610      	mov	r0, r2
 800a97a:	4798      	blx	r3
 800a97c:	4602      	mov	r2, r0
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f001 fc1c 	bl	800c1d4 <USBD_LL_Start>
 800a99c:	4603      	mov	r3, r0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d009      	beq.n	800a9ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	78fa      	ldrb	r2, [r7, #3]
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	4798      	blx	r3
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d007      	beq.n	800aa1a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	78fa      	ldrb	r2, [r7, #3]
 800aa14:	4611      	mov	r1, r2
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	4798      	blx	r3
  }

  return USBD_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 ff46 	bl	800b8c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa58:	f003 031f 	and.w	r3, r3, #31
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d01a      	beq.n	800aa96 <USBD_LL_SetupStage+0x72>
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d822      	bhi.n	800aaaa <USBD_LL_SetupStage+0x86>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <USBD_LL_SetupStage+0x4a>
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d00a      	beq.n	800aa82 <USBD_LL_SetupStage+0x5e>
 800aa6c:	e01d      	b.n	800aaaa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa74:	4619      	mov	r1, r3
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f9ee 	bl	800ae58 <USBD_StdDevReq>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa80:	e020      	b.n	800aac4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fa52 	bl	800af34 <USBD_StdItfReq>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]
      break;
 800aa94:	e016      	b.n	800aac4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fa91 	bl	800afc6 <USBD_StdEPReq>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa8:	e00c      	b.n	800aac4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aab0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f001 fbeb 	bl	800c294 <USBD_LL_StallEP>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73fb      	strb	r3, [r7, #15]
      break;
 800aac2:	bf00      	nop
  }

  return ret;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b086      	sub	sp, #24
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	60f8      	str	r0, [r7, #12]
 800aad6:	460b      	mov	r3, r1
 800aad8:	607a      	str	r2, [r7, #4]
 800aada:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aadc:	7afb      	ldrb	r3, [r7, #11]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d138      	bne.n	800ab54 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aae8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d14a      	bne.n	800ab8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d913      	bls.n	800ab28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	1ad2      	subs	r2, r2, r3
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	4293      	cmp	r3, r2
 800ab18:	bf28      	it	cs
 800ab1a:	4613      	movcs	r3, r2
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 ffc5 	bl	800bab0 <USBD_CtlContinueRx>
 800ab26:	e030      	b.n	800ab8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b03      	cmp	r3, #3
 800ab32:	d10b      	bne.n	800ab4c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d005      	beq.n	800ab4c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 ffc0 	bl	800bad2 <USBD_CtlSendStatus>
 800ab52:	e01a      	b.n	800ab8a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d114      	bne.n	800ab8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00e      	beq.n	800ab8a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	7afa      	ldrb	r2, [r7, #11]
 800ab76:	4611      	mov	r1, r2
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	4798      	blx	r3
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	e000      	b.n	800ab8c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aba2:	7afb      	ldrb	r3, [r7, #11]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d16b      	bne.n	800ac80 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3314      	adds	r3, #20
 800abac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d156      	bne.n	800ac66 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d914      	bls.n	800abee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	1ad2      	subs	r2, r2, r3
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	461a      	mov	r2, r3
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 ff3a 	bl	800ba54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abe0:	2300      	movs	r3, #0
 800abe2:	2200      	movs	r2, #0
 800abe4:	2100      	movs	r1, #0
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f001 fbfe 	bl	800c3e8 <USBD_LL_PrepareReceive>
 800abec:	e03b      	b.n	800ac66 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	68da      	ldr	r2, [r3, #12]
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d11c      	bne.n	800ac34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d316      	bcc.n	800ac34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d20f      	bcs.n	800ac34 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac14:	2200      	movs	r2, #0
 800ac16:	2100      	movs	r1, #0
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 ff1b 	bl	800ba54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac26:	2300      	movs	r3, #0
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f001 fbdb 	bl	800c3e8 <USBD_LL_PrepareReceive>
 800ac32:	e018      	b.n	800ac66 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d10b      	bne.n	800ac58 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d005      	beq.n	800ac58 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac58:	2180      	movs	r1, #128	; 0x80
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f001 fb1a 	bl	800c294 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 ff49 	bl	800baf8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d122      	bne.n	800acb6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f7ff fe98 	bl	800a9a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac7e:	e01a      	b.n	800acb6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d114      	bne.n	800acb6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00e      	beq.n	800acb6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	7afa      	ldrb	r2, [r7, #11]
 800aca2:	4611      	mov	r1, r2
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	4798      	blx	r3
 800aca8:	4603      	mov	r3, r0
 800acaa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800acac:	7dfb      	ldrb	r3, [r7, #23]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800acb2:	7dfb      	ldrb	r3, [r7, #23]
 800acb4:	e000      	b.n	800acb8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3718      	adds	r7, #24
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e02f      	b.n	800ad54 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00f      	beq.n	800ad1e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d009      	beq.n	800ad1e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	6852      	ldr	r2, [r2, #4]
 800ad16:	b2d2      	uxtb	r2, r2
 800ad18:	4611      	mov	r1, r2
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad1e:	2340      	movs	r3, #64	; 0x40
 800ad20:	2200      	movs	r2, #0
 800ad22:	2100      	movs	r1, #0
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f001 fa70 	bl	800c20a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2240      	movs	r2, #64	; 0x40
 800ad36:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad3a:	2340      	movs	r3, #64	; 0x40
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2180      	movs	r1, #128	; 0x80
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f001 fa62 	bl	800c20a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2240      	movs	r2, #64	; 0x40
 800ad50:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	78fa      	ldrb	r2, [r7, #3]
 800ad6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2204      	movs	r2, #4
 800ad96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d106      	bne.n	800adca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800adea:	2303      	movs	r3, #3
 800adec:	e012      	b.n	800ae14 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d10b      	bne.n	800ae12 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae00:	69db      	ldr	r3, [r3, #28]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	3301      	adds	r3, #1
 800ae32:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae3a:	8a3b      	ldrh	r3, [r7, #16]
 800ae3c:	021b      	lsls	r3, r3, #8
 800ae3e:	b21a      	sxth	r2, r3
 800ae40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	b21b      	sxth	r3, r3
 800ae48:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae4a:	89fb      	ldrh	r3, [r7, #14]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	371c      	adds	r7, #28
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae6e:	2b40      	cmp	r3, #64	; 0x40
 800ae70:	d005      	beq.n	800ae7e <USBD_StdDevReq+0x26>
 800ae72:	2b40      	cmp	r3, #64	; 0x40
 800ae74:	d853      	bhi.n	800af1e <USBD_StdDevReq+0xc6>
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00b      	beq.n	800ae92 <USBD_StdDevReq+0x3a>
 800ae7a:	2b20      	cmp	r3, #32
 800ae7c:	d14f      	bne.n	800af1e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	4798      	blx	r3
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae90:	e04a      	b.n	800af28 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	785b      	ldrb	r3, [r3, #1]
 800ae96:	2b09      	cmp	r3, #9
 800ae98:	d83b      	bhi.n	800af12 <USBD_StdDevReq+0xba>
 800ae9a:	a201      	add	r2, pc, #4	; (adr r2, 800aea0 <USBD_StdDevReq+0x48>)
 800ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea0:	0800aef5 	.word	0x0800aef5
 800aea4:	0800af09 	.word	0x0800af09
 800aea8:	0800af13 	.word	0x0800af13
 800aeac:	0800aeff 	.word	0x0800aeff
 800aeb0:	0800af13 	.word	0x0800af13
 800aeb4:	0800aed3 	.word	0x0800aed3
 800aeb8:	0800aec9 	.word	0x0800aec9
 800aebc:	0800af13 	.word	0x0800af13
 800aec0:	0800aeeb 	.word	0x0800aeeb
 800aec4:	0800aedd 	.word	0x0800aedd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f9de 	bl	800b28c <USBD_GetDescriptor>
          break;
 800aed0:	e024      	b.n	800af1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fb6d 	bl	800b5b4 <USBD_SetAddress>
          break;
 800aeda:	e01f      	b.n	800af1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fbac 	bl	800b63c <USBD_SetConfig>
 800aee4:	4603      	mov	r3, r0
 800aee6:	73fb      	strb	r3, [r7, #15]
          break;
 800aee8:	e018      	b.n	800af1c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fc4b 	bl	800b788 <USBD_GetConfig>
          break;
 800aef2:	e013      	b.n	800af1c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fc7c 	bl	800b7f4 <USBD_GetStatus>
          break;
 800aefc:	e00e      	b.n	800af1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fcab 	bl	800b85c <USBD_SetFeature>
          break;
 800af06:	e009      	b.n	800af1c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fcba 	bl	800b884 <USBD_ClrFeature>
          break;
 800af10:	e004      	b.n	800af1c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fd11 	bl	800b93c <USBD_CtlError>
          break;
 800af1a:	bf00      	nop
      }
      break;
 800af1c:	e004      	b.n	800af28 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fd0b 	bl	800b93c <USBD_CtlError>
      break;
 800af26:	bf00      	nop
  }

  return ret;
 800af28:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop

0800af34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af4a:	2b40      	cmp	r3, #64	; 0x40
 800af4c:	d005      	beq.n	800af5a <USBD_StdItfReq+0x26>
 800af4e:	2b40      	cmp	r3, #64	; 0x40
 800af50:	d82f      	bhi.n	800afb2 <USBD_StdItfReq+0x7e>
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <USBD_StdItfReq+0x26>
 800af56:	2b20      	cmp	r3, #32
 800af58:	d12b      	bne.n	800afb2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af60:	b2db      	uxtb	r3, r3
 800af62:	3b01      	subs	r3, #1
 800af64:	2b02      	cmp	r3, #2
 800af66:	d81d      	bhi.n	800afa4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	889b      	ldrh	r3, [r3, #4]
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d813      	bhi.n	800af9a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	4798      	blx	r3
 800af80:	4603      	mov	r3, r0
 800af82:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	88db      	ldrh	r3, [r3, #6]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d110      	bne.n	800afae <USBD_StdItfReq+0x7a>
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10d      	bne.n	800afae <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fd9d 	bl	800bad2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af98:	e009      	b.n	800afae <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fccd 	bl	800b93c <USBD_CtlError>
          break;
 800afa2:	e004      	b.n	800afae <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fcc8 	bl	800b93c <USBD_CtlError>
          break;
 800afac:	e000      	b.n	800afb0 <USBD_StdItfReq+0x7c>
          break;
 800afae:	bf00      	nop
      }
      break;
 800afb0:	e004      	b.n	800afbc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fcc1 	bl	800b93c <USBD_CtlError>
      break;
 800afba:	bf00      	nop
  }

  return ret;
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	889b      	ldrh	r3, [r3, #4]
 800afd8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afe2:	2b40      	cmp	r3, #64	; 0x40
 800afe4:	d007      	beq.n	800aff6 <USBD_StdEPReq+0x30>
 800afe6:	2b40      	cmp	r3, #64	; 0x40
 800afe8:	f200 8145 	bhi.w	800b276 <USBD_StdEPReq+0x2b0>
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00c      	beq.n	800b00a <USBD_StdEPReq+0x44>
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	f040 8140 	bne.w	800b276 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	4798      	blx	r3
 800b004:	4603      	mov	r3, r0
 800b006:	73fb      	strb	r3, [r7, #15]
      break;
 800b008:	e13a      	b.n	800b280 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	785b      	ldrb	r3, [r3, #1]
 800b00e:	2b03      	cmp	r3, #3
 800b010:	d007      	beq.n	800b022 <USBD_StdEPReq+0x5c>
 800b012:	2b03      	cmp	r3, #3
 800b014:	f300 8129 	bgt.w	800b26a <USBD_StdEPReq+0x2a4>
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d07f      	beq.n	800b11c <USBD_StdEPReq+0x156>
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d03c      	beq.n	800b09a <USBD_StdEPReq+0xd4>
 800b020:	e123      	b.n	800b26a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d002      	beq.n	800b034 <USBD_StdEPReq+0x6e>
 800b02e:	2b03      	cmp	r3, #3
 800b030:	d016      	beq.n	800b060 <USBD_StdEPReq+0x9a>
 800b032:	e02c      	b.n	800b08e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b034:	7bbb      	ldrb	r3, [r7, #14]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00d      	beq.n	800b056 <USBD_StdEPReq+0x90>
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	2b80      	cmp	r3, #128	; 0x80
 800b03e:	d00a      	beq.n	800b056 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 f925 	bl	800c294 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b04a:	2180      	movs	r1, #128	; 0x80
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 f921 	bl	800c294 <USBD_LL_StallEP>
 800b052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b054:	e020      	b.n	800b098 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fc6f 	bl	800b93c <USBD_CtlError>
              break;
 800b05e:	e01b      	b.n	800b098 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	885b      	ldrh	r3, [r3, #2]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10e      	bne.n	800b086 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <USBD_StdEPReq+0xc0>
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	2b80      	cmp	r3, #128	; 0x80
 800b072:	d008      	beq.n	800b086 <USBD_StdEPReq+0xc0>
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	88db      	ldrh	r3, [r3, #6]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d104      	bne.n	800b086 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f001 f907 	bl	800c294 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fd23 	bl	800bad2 <USBD_CtlSendStatus>

              break;
 800b08c:	e004      	b.n	800b098 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fc53 	bl	800b93c <USBD_CtlError>
              break;
 800b096:	bf00      	nop
          }
          break;
 800b098:	e0ec      	b.n	800b274 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d002      	beq.n	800b0ac <USBD_StdEPReq+0xe6>
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d016      	beq.n	800b0d8 <USBD_StdEPReq+0x112>
 800b0aa:	e030      	b.n	800b10e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0ac:	7bbb      	ldrb	r3, [r7, #14]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00d      	beq.n	800b0ce <USBD_StdEPReq+0x108>
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	2b80      	cmp	r3, #128	; 0x80
 800b0b6:	d00a      	beq.n	800b0ce <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f001 f8e9 	bl	800c294 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0c2:	2180      	movs	r1, #128	; 0x80
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f001 f8e5 	bl	800c294 <USBD_LL_StallEP>
 800b0ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0cc:	e025      	b.n	800b11a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fc33 	bl	800b93c <USBD_CtlError>
              break;
 800b0d6:	e020      	b.n	800b11a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	885b      	ldrh	r3, [r3, #2]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d11b      	bne.n	800b118 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
 800b0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d004      	beq.n	800b0f4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0ea:	7bbb      	ldrb	r3, [r7, #14]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f001 f8ef 	bl	800c2d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fcec 	bl	800bad2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	4798      	blx	r3
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b10c:	e004      	b.n	800b118 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fc13 	bl	800b93c <USBD_CtlError>
              break;
 800b116:	e000      	b.n	800b11a <USBD_StdEPReq+0x154>
              break;
 800b118:	bf00      	nop
          }
          break;
 800b11a:	e0ab      	b.n	800b274 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b02      	cmp	r3, #2
 800b126:	d002      	beq.n	800b12e <USBD_StdEPReq+0x168>
 800b128:	2b03      	cmp	r3, #3
 800b12a:	d032      	beq.n	800b192 <USBD_StdEPReq+0x1cc>
 800b12c:	e097      	b.n	800b25e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d007      	beq.n	800b144 <USBD_StdEPReq+0x17e>
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	2b80      	cmp	r3, #128	; 0x80
 800b138:	d004      	beq.n	800b144 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fbfd 	bl	800b93c <USBD_CtlError>
                break;
 800b142:	e091      	b.n	800b268 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	da0b      	bge.n	800b164 <USBD_StdEPReq+0x19e>
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
 800b14e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	3310      	adds	r3, #16
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	4413      	add	r3, r2
 800b160:	3304      	adds	r3, #4
 800b162:	e00b      	b.n	800b17c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b164:	7bbb      	ldrb	r3, [r7, #14]
 800b166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b16a:	4613      	mov	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	4413      	add	r3, r2
 800b17a:	3304      	adds	r3, #4
 800b17c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2202      	movs	r2, #2
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fc47 	bl	800ba1e <USBD_CtlSendData>
              break;
 800b190:	e06a      	b.n	800b268 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b196:	2b00      	cmp	r3, #0
 800b198:	da11      	bge.n	800b1be <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	f003 020f 	and.w	r2, r3, #15
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4413      	add	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	440b      	add	r3, r1
 800b1ac:	3324      	adds	r3, #36	; 0x24
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d117      	bne.n	800b1e4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fbc0 	bl	800b93c <USBD_CtlError>
                  break;
 800b1bc:	e054      	b.n	800b268 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	f003 020f 	and.w	r2, r3, #15
 800b1c4:	6879      	ldr	r1, [r7, #4]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	440b      	add	r3, r1
 800b1d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d104      	bne.n	800b1e4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fbad 	bl	800b93c <USBD_CtlError>
                  break;
 800b1e2:	e041      	b.n	800b268 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	da0b      	bge.n	800b204 <USBD_StdEPReq+0x23e>
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	3310      	adds	r3, #16
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	4413      	add	r3, r2
 800b200:	3304      	adds	r3, #4
 800b202:	e00b      	b.n	800b21c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b20a:	4613      	mov	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	4413      	add	r3, r2
 800b21a:	3304      	adds	r3, #4
 800b21c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b21e:	7bbb      	ldrb	r3, [r7, #14]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <USBD_StdEPReq+0x264>
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	2b80      	cmp	r3, #128	; 0x80
 800b228:	d103      	bne.n	800b232 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
 800b230:	e00e      	b.n	800b250 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b232:	7bbb      	ldrb	r3, [r7, #14]
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 f86a 	bl	800c310 <USBD_LL_IsStallEP>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2201      	movs	r2, #1
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	e002      	b.n	800b250 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2202      	movs	r2, #2
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fbe1 	bl	800ba1e <USBD_CtlSendData>
              break;
 800b25c:	e004      	b.n	800b268 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fb6b 	bl	800b93c <USBD_CtlError>
              break;
 800b266:	bf00      	nop
          }
          break;
 800b268:	e004      	b.n	800b274 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fb65 	bl	800b93c <USBD_CtlError>
          break;
 800b272:	bf00      	nop
      }
      break;
 800b274:	e004      	b.n	800b280 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fb5f 	bl	800b93c <USBD_CtlError>
      break;
 800b27e:	bf00      	nop
  }

  return ret;
 800b280:	7bfb      	ldrb	r3, [r7, #15]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b29a:	2300      	movs	r3, #0
 800b29c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	885b      	ldrh	r3, [r3, #2]
 800b2a6:	0a1b      	lsrs	r3, r3, #8
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	2b0e      	cmp	r3, #14
 800b2ae:	f200 8152 	bhi.w	800b556 <USBD_GetDescriptor+0x2ca>
 800b2b2:	a201      	add	r2, pc, #4	; (adr r2, 800b2b8 <USBD_GetDescriptor+0x2c>)
 800b2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b8:	0800b329 	.word	0x0800b329
 800b2bc:	0800b341 	.word	0x0800b341
 800b2c0:	0800b381 	.word	0x0800b381
 800b2c4:	0800b557 	.word	0x0800b557
 800b2c8:	0800b557 	.word	0x0800b557
 800b2cc:	0800b4f7 	.word	0x0800b4f7
 800b2d0:	0800b523 	.word	0x0800b523
 800b2d4:	0800b557 	.word	0x0800b557
 800b2d8:	0800b557 	.word	0x0800b557
 800b2dc:	0800b557 	.word	0x0800b557
 800b2e0:	0800b557 	.word	0x0800b557
 800b2e4:	0800b557 	.word	0x0800b557
 800b2e8:	0800b557 	.word	0x0800b557
 800b2ec:	0800b557 	.word	0x0800b557
 800b2f0:	0800b2f5 	.word	0x0800b2f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	7c12      	ldrb	r2, [r2, #16]
 800b30c:	f107 0108 	add.w	r1, r7, #8
 800b310:	4610      	mov	r0, r2
 800b312:	4798      	blx	r3
 800b314:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b316:	e126      	b.n	800b566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fb0e 	bl	800b93c <USBD_CtlError>
        err++;
 800b320:	7afb      	ldrb	r3, [r7, #11]
 800b322:	3301      	adds	r3, #1
 800b324:	72fb      	strb	r3, [r7, #11]
      break;
 800b326:	e11e      	b.n	800b566 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	7c12      	ldrb	r2, [r2, #16]
 800b334:	f107 0108 	add.w	r1, r7, #8
 800b338:	4610      	mov	r0, r2
 800b33a:	4798      	blx	r3
 800b33c:	60f8      	str	r0, [r7, #12]
      break;
 800b33e:	e112      	b.n	800b566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	7c1b      	ldrb	r3, [r3, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10d      	bne.n	800b364 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b350:	f107 0208 	add.w	r2, r7, #8
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
 800b358:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3301      	adds	r3, #1
 800b35e:	2202      	movs	r2, #2
 800b360:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b362:	e100      	b.n	800b566 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	f107 0208 	add.w	r2, r7, #8
 800b370:	4610      	mov	r0, r2
 800b372:	4798      	blx	r3
 800b374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3301      	adds	r3, #1
 800b37a:	2202      	movs	r2, #2
 800b37c:	701a      	strb	r2, [r3, #0]
      break;
 800b37e:	e0f2      	b.n	800b566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	885b      	ldrh	r3, [r3, #2]
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b05      	cmp	r3, #5
 800b388:	f200 80ac 	bhi.w	800b4e4 <USBD_GetDescriptor+0x258>
 800b38c:	a201      	add	r2, pc, #4	; (adr r2, 800b394 <USBD_GetDescriptor+0x108>)
 800b38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b392:	bf00      	nop
 800b394:	0800b3ad 	.word	0x0800b3ad
 800b398:	0800b3e1 	.word	0x0800b3e1
 800b39c:	0800b415 	.word	0x0800b415
 800b3a0:	0800b449 	.word	0x0800b449
 800b3a4:	0800b47d 	.word	0x0800b47d
 800b3a8:	0800b4b1 	.word	0x0800b4b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	7c12      	ldrb	r2, [r2, #16]
 800b3c4:	f107 0108 	add.w	r1, r7, #8
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ce:	e091      	b.n	800b4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fab2 	bl	800b93c <USBD_CtlError>
            err++;
 800b3d8:	7afb      	ldrb	r3, [r7, #11]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b3de:	e089      	b.n	800b4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00b      	beq.n	800b404 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	7c12      	ldrb	r2, [r2, #16]
 800b3f8:	f107 0108 	add.w	r1, r7, #8
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	4798      	blx	r3
 800b400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b402:	e077      	b.n	800b4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fa98 	bl	800b93c <USBD_CtlError>
            err++;
 800b40c:	7afb      	ldrb	r3, [r7, #11]
 800b40e:	3301      	adds	r3, #1
 800b410:	72fb      	strb	r3, [r7, #11]
          break;
 800b412:	e06f      	b.n	800b4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	7c12      	ldrb	r2, [r2, #16]
 800b42c:	f107 0108 	add.w	r1, r7, #8
 800b430:	4610      	mov	r0, r2
 800b432:	4798      	blx	r3
 800b434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b436:	e05d      	b.n	800b4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fa7e 	bl	800b93c <USBD_CtlError>
            err++;
 800b440:	7afb      	ldrb	r3, [r7, #11]
 800b442:	3301      	adds	r3, #1
 800b444:	72fb      	strb	r3, [r7, #11]
          break;
 800b446:	e055      	b.n	800b4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	7c12      	ldrb	r2, [r2, #16]
 800b460:	f107 0108 	add.w	r1, r7, #8
 800b464:	4610      	mov	r0, r2
 800b466:	4798      	blx	r3
 800b468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b46a:	e043      	b.n	800b4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fa64 	bl	800b93c <USBD_CtlError>
            err++;
 800b474:	7afb      	ldrb	r3, [r7, #11]
 800b476:	3301      	adds	r3, #1
 800b478:	72fb      	strb	r3, [r7, #11]
          break;
 800b47a:	e03b      	b.n	800b4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b482:	695b      	ldr	r3, [r3, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00b      	beq.n	800b4a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	7c12      	ldrb	r2, [r2, #16]
 800b494:	f107 0108 	add.w	r1, r7, #8
 800b498:	4610      	mov	r0, r2
 800b49a:	4798      	blx	r3
 800b49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b49e:	e029      	b.n	800b4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fa4a 	bl	800b93c <USBD_CtlError>
            err++;
 800b4a8:	7afb      	ldrb	r3, [r7, #11]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ae:	e021      	b.n	800b4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00b      	beq.n	800b4d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	7c12      	ldrb	r2, [r2, #16]
 800b4c8:	f107 0108 	add.w	r1, r7, #8
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4798      	blx	r3
 800b4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4d2:	e00f      	b.n	800b4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fa30 	bl	800b93c <USBD_CtlError>
            err++;
 800b4dc:	7afb      	ldrb	r3, [r7, #11]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4e2:	e007      	b.n	800b4f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fa28 	bl	800b93c <USBD_CtlError>
          err++;
 800b4ec:	7afb      	ldrb	r3, [r7, #11]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b4f2:	bf00      	nop
      }
      break;
 800b4f4:	e037      	b.n	800b566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	7c1b      	ldrb	r3, [r3, #16]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d109      	bne.n	800b512 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b506:	f107 0208 	add.w	r2, r7, #8
 800b50a:	4610      	mov	r0, r2
 800b50c:	4798      	blx	r3
 800b50e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b510:	e029      	b.n	800b566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fa11 	bl	800b93c <USBD_CtlError>
        err++;
 800b51a:	7afb      	ldrb	r3, [r7, #11]
 800b51c:	3301      	adds	r3, #1
 800b51e:	72fb      	strb	r3, [r7, #11]
      break;
 800b520:	e021      	b.n	800b566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	7c1b      	ldrb	r3, [r3, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10d      	bne.n	800b546 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b532:	f107 0208 	add.w	r2, r7, #8
 800b536:	4610      	mov	r0, r2
 800b538:	4798      	blx	r3
 800b53a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3301      	adds	r3, #1
 800b540:	2207      	movs	r2, #7
 800b542:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b544:	e00f      	b.n	800b566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f9f7 	bl	800b93c <USBD_CtlError>
        err++;
 800b54e:	7afb      	ldrb	r3, [r7, #11]
 800b550:	3301      	adds	r3, #1
 800b552:	72fb      	strb	r3, [r7, #11]
      break;
 800b554:	e007      	b.n	800b566 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f9ef 	bl	800b93c <USBD_CtlError>
      err++;
 800b55e:	7afb      	ldrb	r3, [r7, #11]
 800b560:	3301      	adds	r3, #1
 800b562:	72fb      	strb	r3, [r7, #11]
      break;
 800b564:	bf00      	nop
  }

  if (err != 0U)
 800b566:	7afb      	ldrb	r3, [r7, #11]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d11e      	bne.n	800b5aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	88db      	ldrh	r3, [r3, #6]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d016      	beq.n	800b5a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b574:	893b      	ldrh	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00e      	beq.n	800b598 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	88da      	ldrh	r2, [r3, #6]
 800b57e:	893b      	ldrh	r3, [r7, #8]
 800b580:	4293      	cmp	r3, r2
 800b582:	bf28      	it	cs
 800b584:	4613      	movcs	r3, r2
 800b586:	b29b      	uxth	r3, r3
 800b588:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b58a:	893b      	ldrh	r3, [r7, #8]
 800b58c:	461a      	mov	r2, r3
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fa44 	bl	800ba1e <USBD_CtlSendData>
 800b596:	e009      	b.n	800b5ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f9ce 	bl	800b93c <USBD_CtlError>
 800b5a0:	e004      	b.n	800b5ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fa95 	bl	800bad2 <USBD_CtlSendStatus>
 800b5a8:	e000      	b.n	800b5ac <USBD_GetDescriptor+0x320>
    return;
 800b5aa:	bf00      	nop
  }
}
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop

0800b5b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	889b      	ldrh	r3, [r3, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d131      	bne.n	800b62a <USBD_SetAddress+0x76>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	88db      	ldrh	r3, [r3, #6]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d12d      	bne.n	800b62a <USBD_SetAddress+0x76>
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	885b      	ldrh	r3, [r3, #2]
 800b5d2:	2b7f      	cmp	r3, #127	; 0x7f
 800b5d4:	d829      	bhi.n	800b62a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	885b      	ldrh	r3, [r3, #2]
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d104      	bne.n	800b5f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f9a3 	bl	800b93c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f6:	e01d      	b.n	800b634 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	7bfa      	ldrb	r2, [r7, #15]
 800b5fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b600:	7bfb      	ldrb	r3, [r7, #15]
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 feaf 	bl	800c368 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fa61 	bl	800bad2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2202      	movs	r2, #2
 800b61a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61e:	e009      	b.n	800b634 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b628:	e004      	b.n	800b634 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f985 	bl	800b93c <USBD_CtlError>
  }
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	885b      	ldrh	r3, [r3, #2]
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	4b4c      	ldr	r3, [pc, #304]	; (800b784 <USBD_SetConfig+0x148>)
 800b652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b654:	4b4b      	ldr	r3, [pc, #300]	; (800b784 <USBD_SetConfig+0x148>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d905      	bls.n	800b668 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b65c:	6839      	ldr	r1, [r7, #0]
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f96c 	bl	800b93c <USBD_CtlError>
    return USBD_FAIL;
 800b664:	2303      	movs	r3, #3
 800b666:	e088      	b.n	800b77a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b02      	cmp	r3, #2
 800b672:	d002      	beq.n	800b67a <USBD_SetConfig+0x3e>
 800b674:	2b03      	cmp	r3, #3
 800b676:	d025      	beq.n	800b6c4 <USBD_SetConfig+0x88>
 800b678:	e071      	b.n	800b75e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b67a:	4b42      	ldr	r3, [pc, #264]	; (800b784 <USBD_SetConfig+0x148>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d01c      	beq.n	800b6bc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b682:	4b40      	ldr	r3, [pc, #256]	; (800b784 <USBD_SetConfig+0x148>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b68c:	4b3d      	ldr	r3, [pc, #244]	; (800b784 <USBD_SetConfig+0x148>)
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff f992 	bl	800a9bc <USBD_SetClassConfig>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d004      	beq.n	800b6ac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f949 	bl	800b93c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6aa:	e065      	b.n	800b778 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fa10 	bl	800bad2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2203      	movs	r2, #3
 800b6b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b6ba:	e05d      	b.n	800b778 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fa08 	bl	800bad2 <USBD_CtlSendStatus>
      break;
 800b6c2:	e059      	b.n	800b778 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b6c4:	4b2f      	ldr	r3, [pc, #188]	; (800b784 <USBD_SetConfig+0x148>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d112      	bne.n	800b6f2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b6d4:	4b2b      	ldr	r3, [pc, #172]	; (800b784 <USBD_SetConfig+0x148>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6de:	4b29      	ldr	r3, [pc, #164]	; (800b784 <USBD_SetConfig+0x148>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff f985 	bl	800a9f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f9f1 	bl	800bad2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6f0:	e042      	b.n	800b778 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b6f2:	4b24      	ldr	r3, [pc, #144]	; (800b784 <USBD_SetConfig+0x148>)
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d02a      	beq.n	800b756 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	b2db      	uxtb	r3, r3
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff f973 	bl	800a9f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b70e:	4b1d      	ldr	r3, [pc, #116]	; (800b784 <USBD_SetConfig+0x148>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	461a      	mov	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b718:	4b1a      	ldr	r3, [pc, #104]	; (800b784 <USBD_SetConfig+0x148>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff f94c 	bl	800a9bc <USBD_SetClassConfig>
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00f      	beq.n	800b74e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f903 	bl	800b93c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff f958 	bl	800a9f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2202      	movs	r2, #2
 800b748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b74c:	e014      	b.n	800b778 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f9bf 	bl	800bad2 <USBD_CtlSendStatus>
      break;
 800b754:	e010      	b.n	800b778 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f9bb 	bl	800bad2 <USBD_CtlSendStatus>
      break;
 800b75c:	e00c      	b.n	800b778 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f8eb 	bl	800b93c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b766:	4b07      	ldr	r3, [pc, #28]	; (800b784 <USBD_SetConfig+0x148>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff f941 	bl	800a9f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b772:	2303      	movs	r3, #3
 800b774:	73fb      	strb	r3, [r7, #15]
      break;
 800b776:	bf00      	nop
  }

  return ret;
 800b778:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	200005a4 	.word	0x200005a4

0800b788 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	88db      	ldrh	r3, [r3, #6]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d004      	beq.n	800b7a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f8cd 	bl	800b93c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b7a2:	e023      	b.n	800b7ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	dc02      	bgt.n	800b7b6 <USBD_GetConfig+0x2e>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dc03      	bgt.n	800b7bc <USBD_GetConfig+0x34>
 800b7b4:	e015      	b.n	800b7e2 <USBD_GetConfig+0x5a>
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d00b      	beq.n	800b7d2 <USBD_GetConfig+0x4a>
 800b7ba:	e012      	b.n	800b7e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f927 	bl	800ba1e <USBD_CtlSendData>
        break;
 800b7d0:	e00c      	b.n	800b7ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	4619      	mov	r1, r3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f91f 	bl	800ba1e <USBD_CtlSendData>
        break;
 800b7e0:	e004      	b.n	800b7ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f8a9 	bl	800b93c <USBD_CtlError>
        break;
 800b7ea:	bf00      	nop
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b804:	b2db      	uxtb	r3, r3
 800b806:	3b01      	subs	r3, #1
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d81e      	bhi.n	800b84a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	88db      	ldrh	r3, [r3, #6]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d004      	beq.n	800b81e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f890 	bl	800b93c <USBD_CtlError>
        break;
 800b81c:	e01a      	b.n	800b854 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d005      	beq.n	800b83a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	f043 0202 	orr.w	r2, r3, #2
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	330c      	adds	r3, #12
 800b83e:	2202      	movs	r2, #2
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f8eb 	bl	800ba1e <USBD_CtlSendData>
      break;
 800b848:	e004      	b.n	800b854 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f875 	bl	800b93c <USBD_CtlError>
      break;
 800b852:	bf00      	nop
  }
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	885b      	ldrh	r3, [r3, #2]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d106      	bne.n	800b87c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2201      	movs	r2, #1
 800b872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f92b 	bl	800bad2 <USBD_CtlSendStatus>
  }
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b894:	b2db      	uxtb	r3, r3
 800b896:	3b01      	subs	r3, #1
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d80b      	bhi.n	800b8b4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	885b      	ldrh	r3, [r3, #2]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d10c      	bne.n	800b8be <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f910 	bl	800bad2 <USBD_CtlSendStatus>
      }
      break;
 800b8b2:	e004      	b.n	800b8be <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f840 	bl	800b93c <USBD_CtlError>
      break;
 800b8bc:	e000      	b.n	800b8c0 <USBD_ClrFeature+0x3c>
      break;
 800b8be:	bf00      	nop
  }
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	781a      	ldrb	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	781a      	ldrb	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f7ff fa92 	bl	800ae1c <SWAPBYTE>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3301      	adds	r3, #1
 800b904:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	3301      	adds	r3, #1
 800b90a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f7ff fa85 	bl	800ae1c <SWAPBYTE>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3301      	adds	r3, #1
 800b91e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3301      	adds	r3, #1
 800b924:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f7ff fa78 	bl	800ae1c <SWAPBYTE>
 800b92c:	4603      	mov	r3, r0
 800b92e:	461a      	mov	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	80da      	strh	r2, [r3, #6]
}
 800b934:	bf00      	nop
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b946:	2180      	movs	r1, #128	; 0x80
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fca3 	bl	800c294 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b94e:	2100      	movs	r1, #0
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fc9f 	bl	800c294 <USBD_LL_StallEP>
}
 800b956:	bf00      	nop
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b086      	sub	sp, #24
 800b962:	af00      	add	r7, sp, #0
 800b964:	60f8      	str	r0, [r7, #12]
 800b966:	60b9      	str	r1, [r7, #8]
 800b968:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d036      	beq.n	800b9e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b978:	6938      	ldr	r0, [r7, #16]
 800b97a:	f000 f836 	bl	800b9ea <USBD_GetLen>
 800b97e:	4603      	mov	r3, r0
 800b980:	3301      	adds	r3, #1
 800b982:	b29b      	uxth	r3, r3
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	b29a      	uxth	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	4413      	add	r3, r2
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	7812      	ldrb	r2, [r2, #0]
 800b996:	701a      	strb	r2, [r3, #0]
  idx++;
 800b998:	7dfb      	ldrb	r3, [r7, #23]
 800b99a:	3301      	adds	r3, #1
 800b99c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	2203      	movs	r2, #3
 800b9a6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b9ae:	e013      	b.n	800b9d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	7812      	ldrb	r2, [r2, #0]
 800b9ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	613b      	str	r3, [r7, #16]
    idx++;
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9c8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9d2:	7dfb      	ldrb	r3, [r7, #23]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1e7      	bne.n	800b9b0 <USBD_GetString+0x52>
 800b9e0:	e000      	b.n	800b9e4 <USBD_GetString+0x86>
    return;
 800b9e2:	bf00      	nop
  }
}
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b085      	sub	sp, #20
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9fa:	e005      	b.n	800ba08 <USBD_GetLen+0x1e>
  {
    len++;
 800b9fc:	7bfb      	ldrb	r3, [r7, #15]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	3301      	adds	r3, #1
 800ba06:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1f5      	bne.n	800b9fc <USBD_GetLen+0x12>
  }

  return len;
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2202      	movs	r2, #2
 800ba2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	2100      	movs	r1, #0
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f000 fcae 	bl	800c3a6 <USBD_LL_Transmit>

  return USBD_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	2100      	movs	r1, #0
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f000 fc9d 	bl	800c3a6 <USBD_LL_Transmit>

  return USBD_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	60f8      	str	r0, [r7, #12]
 800ba7e:	60b9      	str	r1, [r7, #8]
 800ba80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2203      	movs	r2, #3
 800ba86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	2100      	movs	r1, #0
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fca1 	bl	800c3e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	2100      	movs	r1, #0
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 fc90 	bl	800c3e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2204      	movs	r2, #4
 800bade:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bae2:	2300      	movs	r3, #0
 800bae4:	2200      	movs	r2, #0
 800bae6:	2100      	movs	r1, #0
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fc5c 	bl	800c3a6 <USBD_LL_Transmit>

  return USBD_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2205      	movs	r2, #5
 800bb04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb08:	2300      	movs	r3, #0
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fc6a 	bl	800c3e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
	...

0800bb20 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bb24:	2200      	movs	r2, #0
 800bb26:	4912      	ldr	r1, [pc, #72]	; (800bb70 <MX_USB_Device_Init+0x50>)
 800bb28:	4812      	ldr	r0, [pc, #72]	; (800bb74 <MX_USB_Device_Init+0x54>)
 800bb2a:	f7fe fed9 	bl	800a8e0 <USBD_Init>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bb34:	f7f5 fcce 	bl	80014d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bb38:	490f      	ldr	r1, [pc, #60]	; (800bb78 <MX_USB_Device_Init+0x58>)
 800bb3a:	480e      	ldr	r0, [pc, #56]	; (800bb74 <MX_USB_Device_Init+0x54>)
 800bb3c:	f7fe ff00 	bl	800a940 <USBD_RegisterClass>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bb46:	f7f5 fcc5 	bl	80014d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bb4a:	490c      	ldr	r1, [pc, #48]	; (800bb7c <MX_USB_Device_Init+0x5c>)
 800bb4c:	4809      	ldr	r0, [pc, #36]	; (800bb74 <MX_USB_Device_Init+0x54>)
 800bb4e:	f7fe fe21 	bl	800a794 <USBD_CDC_RegisterInterface>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800bb58:	f7f5 fcbc 	bl	80014d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bb5c:	4805      	ldr	r0, [pc, #20]	; (800bb74 <MX_USB_Device_Init+0x54>)
 800bb5e:	f7fe ff16 	bl	800a98e <USBD_Start>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d001      	beq.n	800bb6c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800bb68:	f7f5 fcb4 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bb6c:	bf00      	nop
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	20000150 	.word	0x20000150
 800bb74:	200005a8 	.word	0x200005a8
 800bb78:	20000038 	.word	0x20000038
 800bb7c:	2000013c 	.word	0x2000013c

0800bb80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb84:	2200      	movs	r2, #0
 800bb86:	4905      	ldr	r1, [pc, #20]	; (800bb9c <CDC_Init_FS+0x1c>)
 800bb88:	4805      	ldr	r0, [pc, #20]	; (800bba0 <CDC_Init_FS+0x20>)
 800bb8a:	f7fe fe18 	bl	800a7be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb8e:	4905      	ldr	r1, [pc, #20]	; (800bba4 <CDC_Init_FS+0x24>)
 800bb90:	4803      	ldr	r0, [pc, #12]	; (800bba0 <CDC_Init_FS+0x20>)
 800bb92:	f7fe fe32 	bl	800a7fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	20000c78 	.word	0x20000c78
 800bba0:	200005a8 	.word	0x200005a8
 800bba4:	20000878 	.word	0x20000878

0800bba8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bbac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	6039      	str	r1, [r7, #0]
 800bbc2:	71fb      	strb	r3, [r7, #7]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbc8:	79fb      	ldrb	r3, [r7, #7]
 800bbca:	2b23      	cmp	r3, #35	; 0x23
 800bbcc:	d84a      	bhi.n	800bc64 <CDC_Control_FS+0xac>
 800bbce:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <CDC_Control_FS+0x1c>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bc65 	.word	0x0800bc65
 800bbd8:	0800bc65 	.word	0x0800bc65
 800bbdc:	0800bc65 	.word	0x0800bc65
 800bbe0:	0800bc65 	.word	0x0800bc65
 800bbe4:	0800bc65 	.word	0x0800bc65
 800bbe8:	0800bc65 	.word	0x0800bc65
 800bbec:	0800bc65 	.word	0x0800bc65
 800bbf0:	0800bc65 	.word	0x0800bc65
 800bbf4:	0800bc65 	.word	0x0800bc65
 800bbf8:	0800bc65 	.word	0x0800bc65
 800bbfc:	0800bc65 	.word	0x0800bc65
 800bc00:	0800bc65 	.word	0x0800bc65
 800bc04:	0800bc65 	.word	0x0800bc65
 800bc08:	0800bc65 	.word	0x0800bc65
 800bc0c:	0800bc65 	.word	0x0800bc65
 800bc10:	0800bc65 	.word	0x0800bc65
 800bc14:	0800bc65 	.word	0x0800bc65
 800bc18:	0800bc65 	.word	0x0800bc65
 800bc1c:	0800bc65 	.word	0x0800bc65
 800bc20:	0800bc65 	.word	0x0800bc65
 800bc24:	0800bc65 	.word	0x0800bc65
 800bc28:	0800bc65 	.word	0x0800bc65
 800bc2c:	0800bc65 	.word	0x0800bc65
 800bc30:	0800bc65 	.word	0x0800bc65
 800bc34:	0800bc65 	.word	0x0800bc65
 800bc38:	0800bc65 	.word	0x0800bc65
 800bc3c:	0800bc65 	.word	0x0800bc65
 800bc40:	0800bc65 	.word	0x0800bc65
 800bc44:	0800bc65 	.word	0x0800bc65
 800bc48:	0800bc65 	.word	0x0800bc65
 800bc4c:	0800bc65 	.word	0x0800bc65
 800bc50:	0800bc65 	.word	0x0800bc65
 800bc54:	0800bc65 	.word	0x0800bc65
 800bc58:	0800bc65 	.word	0x0800bc65
 800bc5c:	0800bc65 	.word	0x0800bc65
 800bc60:	0800bc65 	.word	0x0800bc65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc64:	bf00      	nop
  }

  return (USBD_OK);
 800bc66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	480a      	ldr	r0, [pc, #40]	; (800bcac <CDC_Receive_FS+0x38>)
 800bc82:	f7fe fdba 	bl	800a7fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc86:	4809      	ldr	r0, [pc, #36]	; (800bcac <CDC_Receive_FS+0x38>)
 800bc88:	f7fe fe00 	bl	800a88c <USBD_CDC_ReceivePacket>
  cdc_rx_len = *Len;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <CDC_Receive_FS+0x3c>)
 800bc94:	801a      	strh	r2, [r3, #0]
  user_shell_recive_bytes(UserRxBufferFS,cdc_rx_len);
 800bc96:	4b06      	ldr	r3, [pc, #24]	; (800bcb0 <CDC_Receive_FS+0x3c>)
 800bc98:	881b      	ldrh	r3, [r3, #0]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4805      	ldr	r0, [pc, #20]	; (800bcb4 <CDC_Receive_FS+0x40>)
 800bc9e:	f002 ff45 	bl	800eb2c <user_shell_recive_bytes>
  return (USBD_OK);
 800bca2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	200005a8 	.word	0x200005a8
 800bcb0:	20001078 	.word	0x20001078
 800bcb4:	20000878 	.word	0x20000878

0800bcb8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bcc8:	4b0d      	ldr	r3, [pc, #52]	; (800bd00 <CDC_Transmit_FS+0x48>)
 800bcca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e00b      	b.n	800bcf6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bcde:	887b      	ldrh	r3, [r7, #2]
 800bce0:	461a      	mov	r2, r3
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	4806      	ldr	r0, [pc, #24]	; (800bd00 <CDC_Transmit_FS+0x48>)
 800bce6:	f7fe fd6a 	bl	800a7be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bcea:	4805      	ldr	r0, [pc, #20]	; (800bd00 <CDC_Transmit_FS+0x48>)
 800bcec:	f7fe fd9e 	bl	800a82c <USBD_CDC_TransmitPacket>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	200005a8 	.word	0x200005a8

0800bd04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	371c      	adds	r7, #28
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
	...

0800bd28 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	4603      	mov	r3, r0
 800bd30:	6039      	str	r1, [r7, #0]
 800bd32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	2212      	movs	r2, #18
 800bd38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bd3a:	4b03      	ldr	r3, [pc, #12]	; (800bd48 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr
 800bd48:	20000170 	.word	0x20000170

0800bd4c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	4603      	mov	r3, r0
 800bd54:	6039      	str	r1, [r7, #0]
 800bd56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	2204      	movs	r2, #4
 800bd5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd5e:	4b03      	ldr	r3, [pc, #12]	; (800bd6c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	20000184 	.word	0x20000184

0800bd70 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	4603      	mov	r3, r0
 800bd78:	6039      	str	r1, [r7, #0]
 800bd7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd7c:	79fb      	ldrb	r3, [r7, #7]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d105      	bne.n	800bd8e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	4907      	ldr	r1, [pc, #28]	; (800bda4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bd86:	4808      	ldr	r0, [pc, #32]	; (800bda8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bd88:	f7ff fde9 	bl	800b95e <USBD_GetString>
 800bd8c:	e004      	b.n	800bd98 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	4904      	ldr	r1, [pc, #16]	; (800bda4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bd92:	4805      	ldr	r0, [pc, #20]	; (800bda8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bd94:	f7ff fde3 	bl	800b95e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd98:	4b02      	ldr	r3, [pc, #8]	; (800bda4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	2000107c 	.word	0x2000107c
 800bda8:	08013cd0 	.word	0x08013cd0

0800bdac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	6039      	str	r1, [r7, #0]
 800bdb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	4904      	ldr	r1, [pc, #16]	; (800bdcc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bdbc:	4804      	ldr	r0, [pc, #16]	; (800bdd0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bdbe:	f7ff fdce 	bl	800b95e <USBD_GetString>
  return USBD_StrDesc;
 800bdc2:	4b02      	ldr	r3, [pc, #8]	; (800bdcc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	2000107c 	.word	0x2000107c
 800bdd0:	08013ce8 	.word	0x08013ce8

0800bdd4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	4603      	mov	r3, r0
 800bddc:	6039      	str	r1, [r7, #0]
 800bdde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	221a      	movs	r2, #26
 800bde4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bde6:	f000 f843 	bl	800be70 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bdea:	4b02      	ldr	r3, [pc, #8]	; (800bdf4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20000188 	.word	0x20000188

0800bdf8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	4603      	mov	r3, r0
 800be00:	6039      	str	r1, [r7, #0]
 800be02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be04:	79fb      	ldrb	r3, [r7, #7]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d105      	bne.n	800be16 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	4907      	ldr	r1, [pc, #28]	; (800be2c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be0e:	4808      	ldr	r0, [pc, #32]	; (800be30 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be10:	f7ff fda5 	bl	800b95e <USBD_GetString>
 800be14:	e004      	b.n	800be20 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	4904      	ldr	r1, [pc, #16]	; (800be2c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be1a:	4805      	ldr	r0, [pc, #20]	; (800be30 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be1c:	f7ff fd9f 	bl	800b95e <USBD_GetString>
  }
  return USBD_StrDesc;
 800be20:	4b02      	ldr	r3, [pc, #8]	; (800be2c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800be22:	4618      	mov	r0, r3
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	2000107c 	.word	0x2000107c
 800be30:	08013cfc 	.word	0x08013cfc

0800be34 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	6039      	str	r1, [r7, #0]
 800be3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d105      	bne.n	800be52 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	4907      	ldr	r1, [pc, #28]	; (800be68 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800be4a:	4808      	ldr	r0, [pc, #32]	; (800be6c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800be4c:	f7ff fd87 	bl	800b95e <USBD_GetString>
 800be50:	e004      	b.n	800be5c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	4904      	ldr	r1, [pc, #16]	; (800be68 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800be56:	4805      	ldr	r0, [pc, #20]	; (800be6c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800be58:	f7ff fd81 	bl	800b95e <USBD_GetString>
  }
  return USBD_StrDesc;
 800be5c:	4b02      	ldr	r3, [pc, #8]	; (800be68 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	2000107c 	.word	0x2000107c
 800be6c:	08013d08 	.word	0x08013d08

0800be70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be76:	4b0f      	ldr	r3, [pc, #60]	; (800beb4 <Get_SerialNum+0x44>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be7c:	4b0e      	ldr	r3, [pc, #56]	; (800beb8 <Get_SerialNum+0x48>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be82:	4b0e      	ldr	r3, [pc, #56]	; (800bebc <Get_SerialNum+0x4c>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4413      	add	r3, r2
 800be8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d009      	beq.n	800beaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be96:	2208      	movs	r2, #8
 800be98:	4909      	ldr	r1, [pc, #36]	; (800bec0 <Get_SerialNum+0x50>)
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f000 f814 	bl	800bec8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bea0:	2204      	movs	r2, #4
 800bea2:	4908      	ldr	r1, [pc, #32]	; (800bec4 <Get_SerialNum+0x54>)
 800bea4:	68b8      	ldr	r0, [r7, #8]
 800bea6:	f000 f80f 	bl	800bec8 <IntToUnicode>
  }
}
 800beaa:	bf00      	nop
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	1fff7590 	.word	0x1fff7590
 800beb8:	1fff7594 	.word	0x1fff7594
 800bebc:	1fff7598 	.word	0x1fff7598
 800bec0:	2000018a 	.word	0x2000018a
 800bec4:	2000019a 	.word	0x2000019a

0800bec8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bec8:	b480      	push	{r7}
 800beca:	b087      	sub	sp, #28
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	4613      	mov	r3, r2
 800bed4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800beda:	2300      	movs	r3, #0
 800bedc:	75fb      	strb	r3, [r7, #23]
 800bede:	e027      	b.n	800bf30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	0f1b      	lsrs	r3, r3, #28
 800bee4:	2b09      	cmp	r3, #9
 800bee6:	d80b      	bhi.n	800bf00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	0f1b      	lsrs	r3, r3, #28
 800beec:	b2da      	uxtb	r2, r3
 800beee:	7dfb      	ldrb	r3, [r7, #23]
 800bef0:	005b      	lsls	r3, r3, #1
 800bef2:	4619      	mov	r1, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	440b      	add	r3, r1
 800bef8:	3230      	adds	r2, #48	; 0x30
 800befa:	b2d2      	uxtb	r2, r2
 800befc:	701a      	strb	r2, [r3, #0]
 800befe:	e00a      	b.n	800bf16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	0f1b      	lsrs	r3, r3, #28
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	440b      	add	r3, r1
 800bf10:	3237      	adds	r2, #55	; 0x37
 800bf12:	b2d2      	uxtb	r2, r2
 800bf14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	011b      	lsls	r3, r3, #4
 800bf1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	3301      	adds	r3, #1
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	4413      	add	r3, r2
 800bf26:	2200      	movs	r2, #0
 800bf28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf2a:	7dfb      	ldrb	r3, [r7, #23]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	75fb      	strb	r3, [r7, #23]
 800bf30:	7dfa      	ldrb	r2, [r7, #23]
 800bf32:	79fb      	ldrb	r3, [r7, #7]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d3d3      	bcc.n	800bee0 <IntToUnicode+0x18>
  }
}
 800bf38:	bf00      	nop
 800bf3a:	bf00      	nop
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
	...

0800bf48 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b094      	sub	sp, #80	; 0x50
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bf50:	f107 030c 	add.w	r3, r7, #12
 800bf54:	2244      	movs	r2, #68	; 0x44
 800bf56:	2100      	movs	r1, #0
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f004 f9f7 	bl	801034c <memset>
  if(pcdHandle->Instance==USB)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a15      	ldr	r2, [pc, #84]	; (800bfb8 <HAL_PCD_MspInit+0x70>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d122      	bne.n	800bfae <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bf68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf6c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bf72:	f107 030c 	add.w	r3, r7, #12
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7f9 fd0c 	bl	8005994 <HAL_RCCEx_PeriphCLKConfig>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800bf82:	f7f5 faa7 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bf86:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <HAL_PCD_MspInit+0x74>)
 800bf88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf8a:	4a0c      	ldr	r2, [pc, #48]	; (800bfbc <HAL_PCD_MspInit+0x74>)
 800bf8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf90:	6593      	str	r3, [r2, #88]	; 0x58
 800bf92:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <HAL_PCD_MspInit+0x74>)
 800bf94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf9a:	60bb      	str	r3, [r7, #8]
 800bf9c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	2014      	movs	r0, #20
 800bfa4:	f7f5 fe97 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bfa8:	2014      	movs	r0, #20
 800bfaa:	f7f5 feae 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bfae:	bf00      	nop
 800bfb0:	3750      	adds	r7, #80	; 0x50
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	40005c00 	.word	0x40005c00
 800bfbc:	40021000 	.word	0x40021000

0800bfc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	f7fe fd24 	bl	800aa24 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bff6:	78fa      	ldrb	r2, [r7, #3]
 800bff8:	6879      	ldr	r1, [r7, #4]
 800bffa:	4613      	mov	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	440b      	add	r3, r1
 800c004:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	78fb      	ldrb	r3, [r7, #3]
 800c00c:	4619      	mov	r1, r3
 800c00e:	f7fe fd5e 	bl	800aace <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c012:	bf00      	nop
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b082      	sub	sp, #8
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	460b      	mov	r3, r1
 800c024:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800c02c:	78fa      	ldrb	r2, [r7, #3]
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	00db      	lsls	r3, r3, #3
 800c038:	440b      	add	r3, r1
 800c03a:	3324      	adds	r3, #36	; 0x24
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	78fb      	ldrb	r3, [r7, #3]
 800c040:	4619      	mov	r1, r3
 800c042:	f7fe fda7 	bl	800ab94 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c046:	bf00      	nop
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fe febb 	bl	800add8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c062:	bf00      	nop
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c072:	2301      	movs	r3, #1
 800c074:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	795b      	ldrb	r3, [r3, #5]
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d001      	beq.n	800c082 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c07e:	f7f5 fa29 	bl	80014d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c088:	7bfa      	ldrb	r2, [r7, #15]
 800c08a:	4611      	mov	r1, r2
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fe fe65 	bl	800ad5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fe fe11 	bl	800acc0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c09e:	bf00      	nop
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
	...

0800c0a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fe60 	bl	800ad7c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7a5b      	ldrb	r3, [r3, #9]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d005      	beq.n	800c0d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0c4:	4b04      	ldr	r3, [pc, #16]	; (800c0d8 <HAL_PCD_SuspendCallback+0x30>)
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	4a03      	ldr	r2, [pc, #12]	; (800c0d8 <HAL_PCD_SuspendCallback+0x30>)
 800c0ca:	f043 0306 	orr.w	r3, r3, #6
 800c0ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	e000ed00 	.word	0xe000ed00

0800c0dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7a5b      	ldrb	r3, [r3, #9]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d007      	beq.n	800c0fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0ec:	4b08      	ldr	r3, [pc, #32]	; (800c110 <HAL_PCD_ResumeCallback+0x34>)
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	4a07      	ldr	r2, [pc, #28]	; (800c110 <HAL_PCD_ResumeCallback+0x34>)
 800c0f2:	f023 0306 	bic.w	r3, r3, #6
 800c0f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c0f8:	f000 f9f8 	bl	800c4ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c102:	4618      	mov	r0, r3
 800c104:	f7fe fe50 	bl	800ada8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c108:	bf00      	nop
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	e000ed00 	.word	0xe000ed00

0800c114 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c11c:	4a2b      	ldr	r2, [pc, #172]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a29      	ldr	r2, [pc, #164]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c128:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c12c:	4b27      	ldr	r3, [pc, #156]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c12e:	4a28      	ldr	r2, [pc, #160]	; (800c1d0 <USBD_LL_Init+0xbc>)
 800c130:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c132:	4b26      	ldr	r3, [pc, #152]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c134:	2208      	movs	r2, #8
 800c136:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c138:	4b24      	ldr	r3, [pc, #144]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c13a:	2202      	movs	r2, #2
 800c13c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c13e:	4b23      	ldr	r3, [pc, #140]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c140:	2202      	movs	r2, #2
 800c142:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c144:	4b21      	ldr	r3, [pc, #132]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c146:	2200      	movs	r2, #0
 800c148:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c14a:	4b20      	ldr	r3, [pc, #128]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c150:	4b1e      	ldr	r3, [pc, #120]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c152:	2200      	movs	r2, #0
 800c154:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c156:	4b1d      	ldr	r3, [pc, #116]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c158:	2200      	movs	r2, #0
 800c15a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c15c:	481b      	ldr	r0, [pc, #108]	; (800c1cc <USBD_LL_Init+0xb8>)
 800c15e:	f7f7 f902 	bl	8003366 <HAL_PCD_Init>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d001      	beq.n	800c16c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c168:	f7f5 f9b4 	bl	80014d4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c172:	2318      	movs	r3, #24
 800c174:	2200      	movs	r2, #0
 800c176:	2100      	movs	r1, #0
 800c178:	f7f8 fdbc 	bl	8004cf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c182:	2358      	movs	r3, #88	; 0x58
 800c184:	2200      	movs	r2, #0
 800c186:	2180      	movs	r1, #128	; 0x80
 800c188:	f7f8 fdb4 	bl	8004cf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c192:	23c0      	movs	r3, #192	; 0xc0
 800c194:	2200      	movs	r2, #0
 800c196:	2181      	movs	r1, #129	; 0x81
 800c198:	f7f8 fdac 	bl	8004cf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2101      	movs	r1, #1
 800c1aa:	f7f8 fda3 	bl	8004cf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	2182      	movs	r1, #130	; 0x82
 800c1bc:	f7f8 fd9a 	bl	8004cf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	2000127c 	.word	0x2000127c
 800c1d0:	40005c00 	.word	0x40005c00

0800c1d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7f7 f989 	bl	8003502 <HAL_PCD_Start>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 f97e 	bl	800c4f8 <USBD_Get_USB_Status>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c200:	7bbb      	ldrb	r3, [r7, #14]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b084      	sub	sp, #16
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	4608      	mov	r0, r1
 800c214:	4611      	mov	r1, r2
 800c216:	461a      	mov	r2, r3
 800c218:	4603      	mov	r3, r0
 800c21a:	70fb      	strb	r3, [r7, #3]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70bb      	strb	r3, [r7, #2]
 800c220:	4613      	mov	r3, r2
 800c222:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c224:	2300      	movs	r3, #0
 800c226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c228:	2300      	movs	r3, #0
 800c22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c232:	78bb      	ldrb	r3, [r7, #2]
 800c234:	883a      	ldrh	r2, [r7, #0]
 800c236:	78f9      	ldrb	r1, [r7, #3]
 800c238:	f7f7 fad0 	bl	80037dc <HAL_PCD_EP_Open>
 800c23c:	4603      	mov	r3, r0
 800c23e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c240:	7bfb      	ldrb	r3, [r7, #15]
 800c242:	4618      	mov	r0, r3
 800c244:	f000 f958 	bl	800c4f8 <USBD_Get_USB_Status>
 800c248:	4603      	mov	r3, r0
 800c24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	460b      	mov	r3, r1
 800c260:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c270:	78fa      	ldrb	r2, [r7, #3]
 800c272:	4611      	mov	r1, r2
 800c274:	4618      	mov	r0, r3
 800c276:	f7f7 fb0e 	bl	8003896 <HAL_PCD_EP_Close>
 800c27a:	4603      	mov	r3, r0
 800c27c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
 800c280:	4618      	mov	r0, r3
 800c282:	f000 f939 	bl	800c4f8 <USBD_Get_USB_Status>
 800c286:	4603      	mov	r3, r0
 800c288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2ae:	78fa      	ldrb	r2, [r7, #3]
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7f7 fbb7 	bl	8003a26 <HAL_PCD_EP_SetStall>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2bc:	7bfb      	ldrb	r3, [r7, #15]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 f91a 	bl	800c4f8 <USBD_Get_USB_Status>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b084      	sub	sp, #16
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	460b      	mov	r3, r1
 800c2dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2ec:	78fa      	ldrb	r2, [r7, #3]
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7f7 fbea 	bl	8003aca <HAL_PCD_EP_ClrStall>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 f8fb 	bl	800c4f8 <USBD_Get_USB_Status>
 800c302:	4603      	mov	r3, r0
 800c304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c306:	7bbb      	ldrb	r3, [r7, #14]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c322:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	da0b      	bge.n	800c344 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c32c:	78fb      	ldrb	r3, [r7, #3]
 800c32e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	440b      	add	r3, r1
 800c33e:	3312      	adds	r3, #18
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	e00b      	b.n	800c35c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c34a:	68f9      	ldr	r1, [r7, #12]
 800c34c:	4613      	mov	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	440b      	add	r3, r1
 800c356:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c35a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c382:	78fa      	ldrb	r2, [r7, #3]
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f7f7 fa04 	bl	8003794 <HAL_PCD_SetAddress>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f8b0 	bl	800c4f8 <USBD_Get_USB_Status>
 800c398:	4603      	mov	r3, r0
 800c39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b086      	sub	sp, #24
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	60f8      	str	r0, [r7, #12]
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	603b      	str	r3, [r7, #0]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3c4:	7af9      	ldrb	r1, [r7, #11]
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	f7f7 faf5 	bl	80039b8 <HAL_PCD_EP_Transmit>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 f88f 	bl	800c4f8 <USBD_Get_USB_Status>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3de:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	607a      	str	r2, [r7, #4]
 800c3f2:	603b      	str	r3, [r7, #0]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c406:	7af9      	ldrb	r1, [r7, #11]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	f7f7 fa8b 	bl	8003926 <HAL_PCD_EP_Receive>
 800c410:	4603      	mov	r3, r0
 800c412:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c414:	7dfb      	ldrb	r3, [r7, #23]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f86e 	bl	800c4f8 <USBD_Get_USB_Status>
 800c41c:	4603      	mov	r3, r0
 800c41e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c420:	7dbb      	ldrb	r3, [r7, #22]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b082      	sub	sp, #8
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	460b      	mov	r3, r1
 800c434:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c43c:	78fa      	ldrb	r2, [r7, #3]
 800c43e:	4611      	mov	r1, r2
 800c440:	4618      	mov	r0, r3
 800c442:	f7f7 faa1 	bl	8003988 <HAL_PCD_EP_GetRxCount>
 800c446:	4603      	mov	r3, r0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	460b      	mov	r3, r1
 800c45a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c45c:	78fb      	ldrb	r3, [r7, #3]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d002      	beq.n	800c468 <HAL_PCDEx_LPM_Callback+0x18>
 800c462:	2b01      	cmp	r3, #1
 800c464:	d013      	beq.n	800c48e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c466:	e023      	b.n	800c4b0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	7a5b      	ldrb	r3, [r3, #9]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d007      	beq.n	800c480 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c470:	f000 f83c 	bl	800c4ec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c474:	4b10      	ldr	r3, [pc, #64]	; (800c4b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	4a0f      	ldr	r2, [pc, #60]	; (800c4b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c47a:	f023 0306 	bic.w	r3, r3, #6
 800c47e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c486:	4618      	mov	r0, r3
 800c488:	f7fe fc8e 	bl	800ada8 <USBD_LL_Resume>
    break;
 800c48c:	e010      	b.n	800c4b0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c494:	4618      	mov	r0, r3
 800c496:	f7fe fc71 	bl	800ad7c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	7a5b      	ldrb	r3, [r3, #9]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d005      	beq.n	800c4ae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4a2:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	4a04      	ldr	r2, [pc, #16]	; (800c4b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c4a8:	f043 0306 	orr.w	r3, r3, #6
 800c4ac:	6113      	str	r3, [r2, #16]
    break;
 800c4ae:	bf00      	nop
}
 800c4b0:	bf00      	nop
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	e000ed00 	.word	0xe000ed00

0800c4bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4c4:	4b03      	ldr	r3, [pc, #12]	; (800c4d4 <USBD_static_malloc+0x18>)
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20001558 	.word	0x20001558

0800c4d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]

}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c4f0:	f7f4 ffa5 	bl	800143e <SystemClock_Config>
}
 800c4f4:	bf00      	nop
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	2b03      	cmp	r3, #3
 800c50a:	d817      	bhi.n	800c53c <USBD_Get_USB_Status+0x44>
 800c50c:	a201      	add	r2, pc, #4	; (adr r2, 800c514 <USBD_Get_USB_Status+0x1c>)
 800c50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c512:	bf00      	nop
 800c514:	0800c525 	.word	0x0800c525
 800c518:	0800c52b 	.word	0x0800c52b
 800c51c:	0800c531 	.word	0x0800c531
 800c520:	0800c537 	.word	0x0800c537
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	73fb      	strb	r3, [r7, #15]
    break;
 800c528:	e00b      	b.n	800c542 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c52a:	2303      	movs	r3, #3
 800c52c:	73fb      	strb	r3, [r7, #15]
    break;
 800c52e:	e008      	b.n	800c542 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c530:	2301      	movs	r3, #1
 800c532:	73fb      	strb	r3, [r7, #15]
    break;
 800c534:	e005      	b.n	800c542 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c536:	2303      	movs	r3, #3
 800c538:	73fb      	strb	r3, [r7, #15]
    break;
 800c53a:	e002      	b.n	800c542 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c53c:	2303      	movs	r3, #3
 800c53e:	73fb      	strb	r3, [r7, #15]
    break;
 800c540:	bf00      	nop
  }
  return usb_status;
 800c542:	7bfb      	ldrb	r3, [r7, #15]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <acc_gyro_init>:
 * @author
 * @param  void
 * @return 0-成功 1-失败
 */
uint8_t acc_gyro_init(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	71bb      	strb	r3, [r7, #6]
	uint8_t cfg_index = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	71fb      	strb	r3, [r7, #7]

	BSP_I2C3_ReadReg(LSM6DS3_ADDR, WHO_AM_I, &id, 1);
 800c55e:	1dba      	adds	r2, r7, #6
 800c560:	2301      	movs	r3, #1
 800c562:	210f      	movs	r1, #15
 800c564:	20d4      	movs	r0, #212	; 0xd4
 800c566:	f001 fee6 	bl	800e336 <BSP_I2C3_ReadReg>

    for (cfg_index=0; cfg_index<sizeof(acc_gyro_init_reg)/sizeof(reg_cfg_t); cfg_index++)
 800c56a:	2300      	movs	r3, #0
 800c56c:	71fb      	strb	r3, [r7, #7]
 800c56e:	e022      	b.n	800c5b6 <acc_gyro_init+0x66>
    {
    	if(acc_gyro_init_reg[cfg_index].reg==0&&acc_gyro_init_reg[cfg_index].dat==0)
 800c570:	79fb      	ldrb	r3, [r7, #7]
 800c572:	4a15      	ldr	r2, [pc, #84]	; (800c5c8 <acc_gyro_init+0x78>)
 800c574:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d106      	bne.n	800c58a <acc_gyro_init+0x3a>
 800c57c:	79fb      	ldrb	r3, [r7, #7]
 800c57e:	4a12      	ldr	r2, [pc, #72]	; (800c5c8 <acc_gyro_init+0x78>)
 800c580:	005b      	lsls	r3, r3, #1
 800c582:	4413      	add	r3, r2
 800c584:	785b      	ldrb	r3, [r3, #1]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d011      	beq.n	800c5ae <acc_gyro_init+0x5e>
    	{
    		continue;
    	}
    	BSP_I2C3_WriteReg(LSM6DS3_ADDR,acc_gyro_init_reg[cfg_index].reg, &acc_gyro_init_reg[cfg_index].dat,1);
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	4a0e      	ldr	r2, [pc, #56]	; (800c5c8 <acc_gyro_init+0x78>)
 800c58e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c592:	b299      	uxth	r1, r3
 800c594:	79fb      	ldrb	r3, [r7, #7]
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	4a0b      	ldr	r2, [pc, #44]	; (800c5c8 <acc_gyro_init+0x78>)
 800c59a:	4413      	add	r3, r2
 800c59c:	1c5a      	adds	r2, r3, #1
 800c59e:	2301      	movs	r3, #1
 800c5a0:	20d4      	movs	r0, #212	; 0xd4
 800c5a2:	f001 feab 	bl	800e2fc <BSP_I2C3_WriteReg>
        HAL_Delay(1);
 800c5a6:	2001      	movs	r0, #1
 800c5a8:	f7f5 fa98 	bl	8001adc <HAL_Delay>
 800c5ac:	e000      	b.n	800c5b0 <acc_gyro_init+0x60>
    		continue;
 800c5ae:	bf00      	nop
    for (cfg_index=0; cfg_index<sizeof(acc_gyro_init_reg)/sizeof(reg_cfg_t); cfg_index++)
 800c5b0:	79fb      	ldrb	r3, [r7, #7]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	71fb      	strb	r3, [r7, #7]
 800c5b6:	79fb      	ldrb	r3, [r7, #7]
 800c5b8:	2b13      	cmp	r3, #19
 800c5ba:	d9d9      	bls.n	800c570 <acc_gyro_init+0x20>

    }

	return id;
 800c5bc:	79bb      	ldrb	r3, [r7, #6]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	200001a4 	.word	0x200001a4

0800c5cc <acc_gyro_sample_data>:
 * @author
 * @param  gyro-脱落仪数据 acc-加速度数据
 * @return void
 */
void acc_gyro_sample_data(int16_t *gyro,int16_t *acc )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
	uint8_t r_data[6];

	BSP_I2C3_ReadReg(LSM6DS3_ADDR, ACCEL_XOUT_L, r_data, 6);
 800c5d6:	f107 0208 	add.w	r2, r7, #8
 800c5da:	2306      	movs	r3, #6
 800c5dc:	2128      	movs	r1, #40	; 0x28
 800c5de:	20d4      	movs	r0, #212	; 0xd4
 800c5e0:	f001 fea9 	bl	800e336 <BSP_I2C3_ReadReg>

	acc[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c5e4:	7a3b      	ldrb	r3, [r7, #8]
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	7a7b      	ldrb	r3, [r7, #9]
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	021b      	lsls	r3, r3, #8
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	4413      	add	r3, r2
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	b21a      	sxth	r2, r3
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	801a      	strh	r2, [r3, #0]
	acc[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c5fa:	7abb      	ldrb	r3, [r7, #10]
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	7afb      	ldrb	r3, [r7, #11]
 800c600:	b29b      	uxth	r3, r3
 800c602:	021b      	lsls	r3, r3, #8
 800c604:	b29b      	uxth	r3, r3
 800c606:	4413      	add	r3, r2
 800c608:	b29a      	uxth	r2, r3
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	3302      	adds	r3, #2
 800c60e:	b212      	sxth	r2, r2
 800c610:	801a      	strh	r2, [r3, #0]
	acc[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c612:	7b3b      	ldrb	r3, [r7, #12]
 800c614:	b29a      	uxth	r2, r3
 800c616:	7b7b      	ldrb	r3, [r7, #13]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	021b      	lsls	r3, r3, #8
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	4413      	add	r3, r2
 800c620:	b29a      	uxth	r2, r3
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	3304      	adds	r3, #4
 800c626:	b212      	sxth	r2, r2
 800c628:	801a      	strh	r2, [r3, #0]

	BSP_I2C3_ReadReg(LSM6DS3_ADDR, GYRO_XOUT_L, r_data, 6);
 800c62a:	f107 0208 	add.w	r2, r7, #8
 800c62e:	2306      	movs	r3, #6
 800c630:	2122      	movs	r1, #34	; 0x22
 800c632:	20d4      	movs	r0, #212	; 0xd4
 800c634:	f001 fe7f 	bl	800e336 <BSP_I2C3_ReadReg>
	gyro[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c638:	7a3b      	ldrb	r3, [r7, #8]
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	7a7b      	ldrb	r3, [r7, #9]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	021b      	lsls	r3, r3, #8
 800c642:	b29b      	uxth	r3, r3
 800c644:	4413      	add	r3, r2
 800c646:	b29b      	uxth	r3, r3
 800c648:	b21a      	sxth	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	801a      	strh	r2, [r3, #0]
	gyro[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c64e:	7abb      	ldrb	r3, [r7, #10]
 800c650:	b29a      	uxth	r2, r3
 800c652:	7afb      	ldrb	r3, [r7, #11]
 800c654:	b29b      	uxth	r3, r3
 800c656:	021b      	lsls	r3, r3, #8
 800c658:	b29b      	uxth	r3, r3
 800c65a:	4413      	add	r3, r2
 800c65c:	b29a      	uxth	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3302      	adds	r3, #2
 800c662:	b212      	sxth	r2, r2
 800c664:	801a      	strh	r2, [r3, #0]
	gyro[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c666:	7b3b      	ldrb	r3, [r7, #12]
 800c668:	b29a      	uxth	r2, r3
 800c66a:	7b7b      	ldrb	r3, [r7, #13]
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	021b      	lsls	r3, r3, #8
 800c670:	b29b      	uxth	r3, r3
 800c672:	4413      	add	r3, r2
 800c674:	b29a      	uxth	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	3304      	adds	r3, #4
 800c67a:	b212      	sxth	r2, r2
 800c67c:	801a      	strh	r2, [r3, #0]



}
 800c67e:	bf00      	nop
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
	...

0800c688 <set_acc_gyro_offset>:


void set_acc_gyro_offset(void)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08e      	sub	sp, #56	; 0x38
 800c68c:	af00      	add	r7, sp, #0
    uint8_t i;
    int16_t ax_offset, ay_offset, az_offset, gx_offset, gy_offset, gz_offset;
    int32_t ax_offset_sum, ay_offset_sum, az_offset_sum, gx_offset_sum, gy_offset_sum, gz_offset_sum;
    int16_t gyro_off[3],acc_off[3];

    ax_offset_sum = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	633b      	str	r3, [r7, #48]	; 0x30
    ay_offset_sum = 0;
 800c692:	2300      	movs	r3, #0
 800c694:	62fb      	str	r3, [r7, #44]	; 0x2c
    az_offset_sum = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	62bb      	str	r3, [r7, #40]	; 0x28
    gx_offset_sum = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	627b      	str	r3, [r7, #36]	; 0x24
    gy_offset_sum = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	623b      	str	r3, [r7, #32]
    gz_offset_sum = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	61fb      	str	r3, [r7, #28]

    for (i = 0; i < 20; i++)
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c6ac:	e035      	b.n	800c71a <set_acc_gyro_offset+0x92>
   {
	  acc_gyro_sample_data(gyro_off,acc_off);
 800c6ae:	463a      	mov	r2, r7
 800c6b0:	f107 0308 	add.w	r3, r7, #8
 800c6b4:	4611      	mov	r1, r2
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff ff88 	bl	800c5cc <acc_gyro_sample_data>

	   ax_offset = acc_off[0];
 800c6bc:	883b      	ldrh	r3, [r7, #0]
 800c6be:	837b      	strh	r3, [r7, #26]
	   ay_offset = acc_off[1];
 800c6c0:	887b      	ldrh	r3, [r7, #2]
 800c6c2:	833b      	strh	r3, [r7, #24]
	   az_offset = acc_off[2];
 800c6c4:	88bb      	ldrh	r3, [r7, #4]
 800c6c6:	82fb      	strh	r3, [r7, #22]
	   ax_offset_sum = ax_offset_sum + ax_offset;
 800c6c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ce:	4413      	add	r3, r2
 800c6d0:	633b      	str	r3, [r7, #48]	; 0x30
	   ay_offset_sum = ay_offset_sum + ay_offset;
 800c6d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c6d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6d8:	4413      	add	r3, r2
 800c6da:	62fb      	str	r3, [r7, #44]	; 0x2c
	   az_offset_sum = az_offset_sum + az_offset;
 800c6dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c6e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6e2:	4413      	add	r3, r2
 800c6e4:	62bb      	str	r3, [r7, #40]	; 0x28

	   gx_offset = gyro_off[0];
 800c6e6:	893b      	ldrh	r3, [r7, #8]
 800c6e8:	82bb      	strh	r3, [r7, #20]
	   gy_offset = gyro_off[1];
 800c6ea:	897b      	ldrh	r3, [r7, #10]
 800c6ec:	827b      	strh	r3, [r7, #18]
	   gz_offset = gyro_off[2];
 800c6ee:	89bb      	ldrh	r3, [r7, #12]
 800c6f0:	823b      	strh	r3, [r7, #16]
	   gx_offset_sum = gx_offset_sum + gx_offset;
 800c6f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c6f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f8:	4413      	add	r3, r2
 800c6fa:	627b      	str	r3, [r7, #36]	; 0x24
	   gy_offset_sum = gy_offset_sum + gy_offset;
 800c6fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c700:	6a3a      	ldr	r2, [r7, #32]
 800c702:	4413      	add	r3, r2
 800c704:	623b      	str	r3, [r7, #32]
	   gz_offset_sum = gz_offset_sum + gz_offset;
 800c706:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c70a:	69fa      	ldr	r2, [r7, #28]
 800c70c:	4413      	add	r3, r2
 800c70e:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < 20; i++)
 800c710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c714:	3301      	adds	r3, #1
 800c716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c71a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c71e:	2b13      	cmp	r3, #19
 800c720:	d9c5      	bls.n	800c6ae <set_acc_gyro_offset+0x26>
   }
    imu_9.acc_zero[0] = ax_offset_sum/20;
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	4a29      	ldr	r2, [pc, #164]	; (800c7cc <set_acc_gyro_offset+0x144>)
 800c726:	fb82 1203 	smull	r1, r2, r2, r3
 800c72a:	10d2      	asrs	r2, r2, #3
 800c72c:	17db      	asrs	r3, r3, #31
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	b21a      	sxth	r2, r3
 800c732:	4b27      	ldr	r3, [pc, #156]	; (800c7d0 <set_acc_gyro_offset+0x148>)
 800c734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    imu_9.acc_zero[1] = ay_offset_sum/20;
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	4a24      	ldr	r2, [pc, #144]	; (800c7cc <set_acc_gyro_offset+0x144>)
 800c73c:	fb82 1203 	smull	r1, r2, r2, r3
 800c740:	10d2      	asrs	r2, r2, #3
 800c742:	17db      	asrs	r3, r3, #31
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	b21a      	sxth	r2, r3
 800c748:	4b21      	ldr	r3, [pc, #132]	; (800c7d0 <set_acc_gyro_offset+0x148>)
 800c74a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    imu_9.acc_zero[2] = az_offset_sum/20 - 16384;
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	4a1e      	ldr	r2, [pc, #120]	; (800c7cc <set_acc_gyro_offset+0x144>)
 800c752:	fb82 1203 	smull	r1, r2, r2, r3
 800c756:	10d2      	asrs	r2, r2, #3
 800c758:	17db      	asrs	r3, r3, #31
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c762:	b29b      	uxth	r3, r3
 800c764:	b21a      	sxth	r2, r3
 800c766:	4b1a      	ldr	r3, [pc, #104]	; (800c7d0 <set_acc_gyro_offset+0x148>)
 800c768:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    imu_9.gyro_zero[0] = gx_offset_sum/20;
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	4a17      	ldr	r2, [pc, #92]	; (800c7cc <set_acc_gyro_offset+0x144>)
 800c770:	fb82 1203 	smull	r1, r2, r2, r3
 800c774:	10d2      	asrs	r2, r2, #3
 800c776:	17db      	asrs	r3, r3, #31
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	b21a      	sxth	r2, r3
 800c77c:	4b14      	ldr	r3, [pc, #80]	; (800c7d0 <set_acc_gyro_offset+0x148>)
 800c77e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    imu_9.gyro_zero[1] = gy_offset_sum/20;
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	4a11      	ldr	r2, [pc, #68]	; (800c7cc <set_acc_gyro_offset+0x144>)
 800c786:	fb82 1203 	smull	r1, r2, r2, r3
 800c78a:	10d2      	asrs	r2, r2, #3
 800c78c:	17db      	asrs	r3, r3, #31
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	b21a      	sxth	r2, r3
 800c792:	4b0f      	ldr	r3, [pc, #60]	; (800c7d0 <set_acc_gyro_offset+0x148>)
 800c794:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    imu_9.gyro_zero[2] = gz_offset_sum/20;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	4a0c      	ldr	r2, [pc, #48]	; (800c7cc <set_acc_gyro_offset+0x144>)
 800c79c:	fb82 1203 	smull	r1, r2, r2, r3
 800c7a0:	10d2      	asrs	r2, r2, #3
 800c7a2:	17db      	asrs	r3, r3, #31
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	b21a      	sxth	r2, r3
 800c7a8:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <set_acc_gyro_offset+0x148>)
 800c7aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    //存入
    STMFLASH_Write(ACC_ZERO_ADDR,(uint8_t*)&imu_9.acc_zero,6);
 800c7ae:	2206      	movs	r2, #6
 800c7b0:	4908      	ldr	r1, [pc, #32]	; (800c7d4 <set_acc_gyro_offset+0x14c>)
 800c7b2:	4809      	ldr	r0, [pc, #36]	; (800c7d8 <set_acc_gyro_offset+0x150>)
 800c7b4:	f001 fe28 	bl	800e408 <STMFLASH_Write>
    STMFLASH_Write(GYRO_ZERO_ADDR,(uint8_t*)&imu_9.gyro_zero,6);
 800c7b8:	2206      	movs	r2, #6
 800c7ba:	4908      	ldr	r1, [pc, #32]	; (800c7dc <set_acc_gyro_offset+0x154>)
 800c7bc:	4808      	ldr	r0, [pc, #32]	; (800c7e0 <set_acc_gyro_offset+0x158>)
 800c7be:	f001 fe23 	bl	800e408 <STMFLASH_Write>





}
 800c7c2:	bf00      	nop
 800c7c4:	3738      	adds	r7, #56	; 0x38
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	66666667 	.word	0x66666667
 800c7d0:	20002154 	.word	0x20002154
 800c7d4:	2000219a 	.word	0x2000219a
 800c7d8:	0801f800 	.word	0x0801f800
 800c7dc:	20002194 	.word	0x20002194
 800c7e0:	0801f806 	.word	0x0801f806

0800c7e4 <mag_sample_data>:
}



void mag_sample_data(int16_t *mag )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
	uint8_t r_data[6];
//	mag_wait_data_update();
	BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD, LIS2MDL_OUTX_L_REG, r_data, 6);  //读地磁原始数据
 800c7ec:	f107 0208 	add.w	r2, r7, #8
 800c7f0:	2306      	movs	r3, #6
 800c7f2:	2168      	movs	r1, #104	; 0x68
 800c7f4:	203c      	movs	r0, #60	; 0x3c
 800c7f6:	f001 fd1c 	bl	800e232 <BSP_I2C1_ReadReg>
    mag[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c7fa:	7a3b      	ldrb	r3, [r7, #8]
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	7a7b      	ldrb	r3, [r7, #9]
 800c800:	b29b      	uxth	r3, r3
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	b29b      	uxth	r3, r3
 800c806:	4413      	add	r3, r2
 800c808:	b29b      	uxth	r3, r3
 800c80a:	b21a      	sxth	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	801a      	strh	r2, [r3, #0]
	mag[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c810:	7abb      	ldrb	r3, [r7, #10]
 800c812:	b29a      	uxth	r2, r3
 800c814:	7afb      	ldrb	r3, [r7, #11]
 800c816:	b29b      	uxth	r3, r3
 800c818:	021b      	lsls	r3, r3, #8
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	4413      	add	r3, r2
 800c81e:	b29a      	uxth	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	3302      	adds	r3, #2
 800c824:	b212      	sxth	r2, r2
 800c826:	801a      	strh	r2, [r3, #0]
	mag[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c828:	7b3b      	ldrb	r3, [r7, #12]
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	7b7b      	ldrb	r3, [r7, #13]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	021b      	lsls	r3, r3, #8
 800c832:	b29b      	uxth	r3, r3
 800c834:	4413      	add	r3, r2
 800c836:	b29a      	uxth	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	3304      	adds	r3, #4
 800c83c:	b212      	sxth	r2, r2
 800c83e:	801a      	strh	r2, [r3, #0]



}
 800c840:	bf00      	nop
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <mag_init>:

uint8_t mag_init(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 800c84e:	2300      	movs	r3, #0
 800c850:	73bb      	strb	r3, [r7, #14]
	uint8_t cfg_index = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	73fb      	strb	r3, [r7, #15]
	uint8_t read_reg_data[3];
	int16_t mag_hard_iron[3];

	BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD, LIS2MDL_WHO_AM_I, &id, 1);//
 800c856:	f107 020e 	add.w	r2, r7, #14
 800c85a:	2301      	movs	r3, #1
 800c85c:	214f      	movs	r1, #79	; 0x4f
 800c85e:	203c      	movs	r0, #60	; 0x3c
 800c860:	f001 fce7 	bl	800e232 <BSP_I2C1_ReadReg>

    for (cfg_index=0; cfg_index<sizeof(mag_init_reg)/sizeof(reg_cfg_t); cfg_index++) //写配置寄存器
 800c864:	2300      	movs	r3, #0
 800c866:	73fb      	strb	r3, [r7, #15]
 800c868:	e022      	b.n	800c8b0 <mag_init+0x68>
    {
    	if(mag_init_reg[cfg_index].reg==0&&mag_init_reg[cfg_index].dat==0)
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	4a19      	ldr	r2, [pc, #100]	; (800c8d4 <mag_init+0x8c>)
 800c86e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <mag_init+0x3c>
 800c876:	7bfb      	ldrb	r3, [r7, #15]
 800c878:	4a16      	ldr	r2, [pc, #88]	; (800c8d4 <mag_init+0x8c>)
 800c87a:	005b      	lsls	r3, r3, #1
 800c87c:	4413      	add	r3, r2
 800c87e:	785b      	ldrb	r3, [r3, #1]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d011      	beq.n	800c8a8 <mag_init+0x60>
    	{
    		continue;
    	}
    	BSP_I2C1_WriteReg(LIS2MDL_I2C_ADD,mag_init_reg[cfg_index].reg, &mag_init_reg[cfg_index].dat,1);
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	4a13      	ldr	r2, [pc, #76]	; (800c8d4 <mag_init+0x8c>)
 800c888:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c88c:	b299      	uxth	r1, r3
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	4a10      	ldr	r2, [pc, #64]	; (800c8d4 <mag_init+0x8c>)
 800c894:	4413      	add	r3, r2
 800c896:	1c5a      	adds	r2, r3, #1
 800c898:	2301      	movs	r3, #1
 800c89a:	203c      	movs	r0, #60	; 0x3c
 800c89c:	f001 fcac 	bl	800e1f8 <BSP_I2C1_WriteReg>
        HAL_Delay(1);
 800c8a0:	2001      	movs	r0, #1
 800c8a2:	f7f5 f91b 	bl	8001adc <HAL_Delay>
 800c8a6:	e000      	b.n	800c8aa <mag_init+0x62>
    		continue;
 800c8a8:	bf00      	nop
    for (cfg_index=0; cfg_index<sizeof(mag_init_reg)/sizeof(reg_cfg_t); cfg_index++) //写配置寄存器
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	73fb      	strb	r3, [r7, #15]
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	2b09      	cmp	r3, #9
 800c8b4:	d9d9      	bls.n	800c86a <mag_init+0x22>
    }
      BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD,LIS2MDL_CFG_REG_A,read_reg_data,3);/* 回读寄存器校验 */
 800c8b6:	f107 0208 	add.w	r2, r7, #8
 800c8ba:	2303      	movs	r3, #3
 800c8bc:	2160      	movs	r1, #96	; 0x60
 800c8be:	203c      	movs	r0, #60	; 0x3c
 800c8c0:	f001 fcb7 	bl	800e232 <BSP_I2C1_ReadReg>
      HAL_Delay(20);
 800c8c4:	2014      	movs	r0, #20
 800c8c6:	f7f5 f909 	bl	8001adc <HAL_Delay>

//      mag_sample_data(mag_hard_iron);

//      mag_Write_Offset(mag_hard_iron[0],mag_hard_iron[1],mag_hard_iron[2]);

	return id;
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	200001cc 	.word	0x200001cc

0800c8d8 <mag_set_offset>:
/*校准过程
 * 一段时间内连续采集地磁xyz三个轴向上的最大值和最小值，做运算
 *
 */
void mag_set_offset(void)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0

	uint32_t cnt = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	617b      	str	r3, [r7, #20]

	static float Xsf;
	static float Ysf;
//	static float Zsf;

	while(cnt<MAG_OFFSET_TIMES)
 800c8e2:	e06f      	b.n	800c9c4 <mag_set_offset+0xec>
	{
		cnt++;
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	617b      	str	r3, [r7, #20]
		BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD, LIS2MDL_OUTX_L_REG, r_data, 6);  //读地磁原始数据
 800c8ea:	f107 0208 	add.w	r2, r7, #8
 800c8ee:	2306      	movs	r3, #6
 800c8f0:	2168      	movs	r1, #104	; 0x68
 800c8f2:	203c      	movs	r0, #60	; 0x3c
 800c8f4:	f001 fc9d 	bl	800e232 <BSP_I2C1_ReadReg>
		mag_off[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c8f8:	7a3b      	ldrb	r3, [r7, #8]
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	7a7b      	ldrb	r3, [r7, #9]
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	021b      	lsls	r3, r3, #8
 800c902:	b29b      	uxth	r3, r3
 800c904:	4413      	add	r3, r2
 800c906:	b29b      	uxth	r3, r3
 800c908:	b21b      	sxth	r3, r3
 800c90a:	803b      	strh	r3, [r7, #0]
		mag_off[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c90c:	7abb      	ldrb	r3, [r7, #10]
 800c90e:	b29a      	uxth	r2, r3
 800c910:	7afb      	ldrb	r3, [r7, #11]
 800c912:	b29b      	uxth	r3, r3
 800c914:	021b      	lsls	r3, r3, #8
 800c916:	b29b      	uxth	r3, r3
 800c918:	4413      	add	r3, r2
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	b21b      	sxth	r3, r3
 800c91e:	807b      	strh	r3, [r7, #2]
		mag_off[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c920:	7b3b      	ldrb	r3, [r7, #12]
 800c922:	b29a      	uxth	r2, r3
 800c924:	7b7b      	ldrb	r3, [r7, #13]
 800c926:	b29b      	uxth	r3, r3
 800c928:	021b      	lsls	r3, r3, #8
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	4413      	add	r3, r2
 800c92e:	b29b      	uxth	r3, r3
 800c930:	b21b      	sxth	r3, r3
 800c932:	80bb      	strh	r3, [r7, #4]

        if(mag_off[0]<mag_x_min)
 800c934:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c938:	4b75      	ldr	r3, [pc, #468]	; (800cb10 <mag_set_offset+0x238>)
 800c93a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c93e:	429a      	cmp	r2, r3
 800c940:	da04      	bge.n	800c94c <mag_set_offset+0x74>
        	mag_x_min = mag_off[0];
 800c942:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c946:	4b72      	ldr	r3, [pc, #456]	; (800cb10 <mag_set_offset+0x238>)
 800c948:	801a      	strh	r2, [r3, #0]
 800c94a:	e00a      	b.n	800c962 <mag_set_offset+0x8a>
        else if(mag_off[0]>mag_x_max)
 800c94c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c950:	4b70      	ldr	r3, [pc, #448]	; (800cb14 <mag_set_offset+0x23c>)
 800c952:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c956:	429a      	cmp	r2, r3
 800c958:	dd03      	ble.n	800c962 <mag_set_offset+0x8a>
        	mag_x_max = mag_off[0];
 800c95a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c95e:	4b6d      	ldr	r3, [pc, #436]	; (800cb14 <mag_set_offset+0x23c>)
 800c960:	801a      	strh	r2, [r3, #0]


        if(mag_off[1]<mag_y_min)
 800c962:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c966:	4b6c      	ldr	r3, [pc, #432]	; (800cb18 <mag_set_offset+0x240>)
 800c968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	da04      	bge.n	800c97a <mag_set_offset+0xa2>
        	mag_y_min = mag_off[1];
 800c970:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c974:	4b68      	ldr	r3, [pc, #416]	; (800cb18 <mag_set_offset+0x240>)
 800c976:	801a      	strh	r2, [r3, #0]
 800c978:	e00a      	b.n	800c990 <mag_set_offset+0xb8>
        else if(mag_off[1]>mag_y_max)
 800c97a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c97e:	4b67      	ldr	r3, [pc, #412]	; (800cb1c <mag_set_offset+0x244>)
 800c980:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c984:	429a      	cmp	r2, r3
 800c986:	dd03      	ble.n	800c990 <mag_set_offset+0xb8>
        	mag_y_max = mag_off[1];
 800c988:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c98c:	4b63      	ldr	r3, [pc, #396]	; (800cb1c <mag_set_offset+0x244>)
 800c98e:	801a      	strh	r2, [r3, #0]

            if(mag_off[2]<mag_z_min)
 800c990:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c994:	4b62      	ldr	r3, [pc, #392]	; (800cb20 <mag_set_offset+0x248>)
 800c996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	da04      	bge.n	800c9a8 <mag_set_offset+0xd0>
            	mag_z_min = mag_off[2];
 800c99e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c9a2:	4b5f      	ldr	r3, [pc, #380]	; (800cb20 <mag_set_offset+0x248>)
 800c9a4:	801a      	strh	r2, [r3, #0]
 800c9a6:	e00a      	b.n	800c9be <mag_set_offset+0xe6>
        else if(mag_off[2]>mag_z_max)
 800c9a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c9ac:	4b5d      	ldr	r3, [pc, #372]	; (800cb24 <mag_set_offset+0x24c>)
 800c9ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	dd03      	ble.n	800c9be <mag_set_offset+0xe6>
        	mag_z_max = mag_off[2];
 800c9b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c9ba:	4b5a      	ldr	r3, [pc, #360]	; (800cb24 <mag_set_offset+0x24c>)
 800c9bc:	801a      	strh	r2, [r3, #0]

        HAL_Delay(1);
 800c9be:	2001      	movs	r0, #1
 800c9c0:	f7f5 f88c 	bl	8001adc <HAL_Delay>
	while(cnt<MAG_OFFSET_TIMES)
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f241 3287 	movw	r2, #4999	; 0x1387
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d98a      	bls.n	800c8e4 <mag_set_offset+0xc>
	}
	cnt = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	617b      	str	r3, [r7, #20]

    Xsf = (mag_y_max - mag_y_min) / (mag_x_max - mag_x_min);
 800c9d2:	4b52      	ldr	r3, [pc, #328]	; (800cb1c <mag_set_offset+0x244>)
 800c9d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9d8:	461a      	mov	r2, r3
 800c9da:	4b4f      	ldr	r3, [pc, #316]	; (800cb18 <mag_set_offset+0x240>)
 800c9dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9e0:	1ad2      	subs	r2, r2, r3
 800c9e2:	4b4c      	ldr	r3, [pc, #304]	; (800cb14 <mag_set_offset+0x23c>)
 800c9e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	4b49      	ldr	r3, [pc, #292]	; (800cb10 <mag_set_offset+0x238>)
 800c9ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9f0:	1acb      	subs	r3, r1, r3
 800c9f2:	fb92 f3f3 	sdiv	r3, r2, r3
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9fe:	4b4a      	ldr	r3, [pc, #296]	; (800cb28 <mag_set_offset+0x250>)
 800ca00:	edc3 7a00 	vstr	s15, [r3]
    Ysf = (mag_x_max - mag_x_min) / (mag_y_max - mag_y_min);
 800ca04:	4b43      	ldr	r3, [pc, #268]	; (800cb14 <mag_set_offset+0x23c>)
 800ca06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4b40      	ldr	r3, [pc, #256]	; (800cb10 <mag_set_offset+0x238>)
 800ca0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca12:	1ad2      	subs	r2, r2, r3
 800ca14:	4b41      	ldr	r3, [pc, #260]	; (800cb1c <mag_set_offset+0x244>)
 800ca16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	4b3e      	ldr	r3, [pc, #248]	; (800cb18 <mag_set_offset+0x240>)
 800ca1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca22:	1acb      	subs	r3, r1, r3
 800ca24:	fb92 f3f3 	sdiv	r3, r2, r3
 800ca28:	ee07 3a90 	vmov	s15, r3
 800ca2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca30:	4b3e      	ldr	r3, [pc, #248]	; (800cb2c <mag_set_offset+0x254>)
 800ca32:	edc3 7a00 	vstr	s15, [r3]

    if (Xsf < 1)
 800ca36:	4b3c      	ldr	r3, [pc, #240]	; (800cb28 <mag_set_offset+0x250>)
 800ca38:	edd3 7a00 	vldr	s15, [r3]
 800ca3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca48:	d503      	bpl.n	800ca52 <mag_set_offset+0x17a>
    {
    	Xsf = 1;
 800ca4a:	4b37      	ldr	r3, [pc, #220]	; (800cb28 <mag_set_offset+0x250>)
 800ca4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ca50:	601a      	str	r2, [r3, #0]
    }

    if (Ysf < 1)
 800ca52:	4b36      	ldr	r3, [pc, #216]	; (800cb2c <mag_set_offset+0x254>)
 800ca54:	edd3 7a00 	vldr	s15, [r3]
 800ca58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca64:	d503      	bpl.n	800ca6e <mag_set_offset+0x196>
    {
    	Ysf = 1;
 800ca66:	4b31      	ldr	r3, [pc, #196]	; (800cb2c <mag_set_offset+0x254>)
 800ca68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ca6c:	601a      	str	r2, [r3, #0]
    }


    Xoffset = ( (mag_x_max - mag_x_min)/2 - mag_x_max) *Xsf;
 800ca6e:	4b29      	ldr	r3, [pc, #164]	; (800cb14 <mag_set_offset+0x23c>)
 800ca70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca74:	461a      	mov	r2, r3
 800ca76:	4b26      	ldr	r3, [pc, #152]	; (800cb10 <mag_set_offset+0x238>)
 800ca78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	0fda      	lsrs	r2, r3, #31
 800ca80:	4413      	add	r3, r2
 800ca82:	105b      	asrs	r3, r3, #1
 800ca84:	461a      	mov	r2, r3
 800ca86:	4b23      	ldr	r3, [pc, #140]	; (800cb14 <mag_set_offset+0x23c>)
 800ca88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	ee07 3a90 	vmov	s15, r3
 800ca92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca96:	4b24      	ldr	r3, [pc, #144]	; (800cb28 <mag_set_offset+0x250>)
 800ca98:	edd3 7a00 	vldr	s15, [r3]
 800ca9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800caa4:	ee17 3a90 	vmov	r3, s15
 800caa8:	827b      	strh	r3, [r7, #18]
    Yoffset = ( (mag_y_max - mag_y_min)/2 - mag_y_max) *Ysf;
 800caaa:	4b1c      	ldr	r3, [pc, #112]	; (800cb1c <mag_set_offset+0x244>)
 800caac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cab0:	461a      	mov	r2, r3
 800cab2:	4b19      	ldr	r3, [pc, #100]	; (800cb18 <mag_set_offset+0x240>)
 800cab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	0fda      	lsrs	r2, r3, #31
 800cabc:	4413      	add	r3, r2
 800cabe:	105b      	asrs	r3, r3, #1
 800cac0:	461a      	mov	r2, r3
 800cac2:	4b16      	ldr	r3, [pc, #88]	; (800cb1c <mag_set_offset+0x244>)
 800cac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	ee07 3a90 	vmov	s15, r3
 800cace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cad2:	4b16      	ldr	r3, [pc, #88]	; (800cb2c <mag_set_offset+0x254>)
 800cad4:	edd3 7a00 	vldr	s15, [r3]
 800cad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cadc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cae0:	ee17 3a90 	vmov	r3, s15
 800cae4:	823b      	strh	r3, [r7, #16]
//    Zoffset = ( (mag_z_max-mag_z_min)/2 - mag_z_max) *Xsf;

    imu_9.mag_zero[0] = Xoffset;
 800cae6:	4a12      	ldr	r2, [pc, #72]	; (800cb30 <mag_set_offset+0x258>)
 800cae8:	8a7b      	ldrh	r3, [r7, #18]
 800caea:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
    imu_9.mag_zero[1] = Yoffset;
 800caee:	4a10      	ldr	r2, [pc, #64]	; (800cb30 <mag_set_offset+0x258>)
 800caf0:	8a3b      	ldrh	r3, [r7, #16]
 800caf2:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
//    imu_9.mag_zero[2] = Zoffset;
    imu_9.mag_zero[2] = 0.0f;
 800caf6:	4b0e      	ldr	r3, [pc, #56]	; (800cb30 <mag_set_offset+0x258>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	    //存入
	    STMFLASH_Write(MAG_ZERO_ADDR,(uint8_t*)&imu_9.mag_zero,6);
 800cafe:	2206      	movs	r2, #6
 800cb00:	490c      	ldr	r1, [pc, #48]	; (800cb34 <mag_set_offset+0x25c>)
 800cb02:	480d      	ldr	r0, [pc, #52]	; (800cb38 <mag_set_offset+0x260>)
 800cb04:	f001 fc80 	bl	800e408 <STMFLASH_Write>
}
 800cb08:	bf00      	nop
 800cb0a:	3718      	adds	r7, #24
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	2000177a 	.word	0x2000177a
 800cb14:	20001778 	.word	0x20001778
 800cb18:	2000177e 	.word	0x2000177e
 800cb1c:	2000177c 	.word	0x2000177c
 800cb20:	20001782 	.word	0x20001782
 800cb24:	20001780 	.word	0x20001780
 800cb28:	20001784 	.word	0x20001784
 800cb2c:	20001788 	.word	0x20001788
 800cb30:	20002154 	.word	0x20002154
 800cb34:	200021a0 	.word	0x200021a0
 800cb38:	0801f80c 	.word	0x0801f80c

0800cb3c <init_attitude>:
#include "imu_9.h"

ATT_Module attitude;

void init_attitude(ATT_Module *attitude)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
//标志位初始化
	attitude->flag.run = 1;						//开启计算
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	701a      	strb	r2, [r3, #0]
	attitude->flag.use_mag = 1;				//使用地磁
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	705a      	strb	r2, [r3, #1]
//接口初始化
	attitude->interface.data.a_x = 0;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f04f 0200 	mov.w	r2, #0
 800cb56:	605a      	str	r2, [r3, #4]
	attitude->interface.data.a_y = 0;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f04f 0200 	mov.w	r2, #0
 800cb5e:	609a      	str	r2, [r3, #8]
	attitude->interface.data.a_z = 0;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f04f 0200 	mov.w	r2, #0
 800cb66:	60da      	str	r2, [r3, #12]
	attitude->interface.data.g_x = 0;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f04f 0200 	mov.w	r2, #0
 800cb6e:	611a      	str	r2, [r3, #16]
	attitude->interface.data.g_y = 0;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f04f 0200 	mov.w	r2, #0
 800cb76:	615a      	str	r2, [r3, #20]
	attitude->interface.data.g_z = 0;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f04f 0200 	mov.w	r2, #0
 800cb7e:	619a      	str	r2, [r3, #24]
	attitude->interface.data.m_x = 0;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f04f 0200 	mov.w	r2, #0
 800cb86:	61da      	str	r2, [r3, #28]
	attitude->interface.data.m_y = 0;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f04f 0200 	mov.w	r2, #0
 800cb8e:	621a      	str	r2, [r3, #32]
	attitude->interface.data.m_z = 0;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	625a      	str	r2, [r3, #36]	; 0x24
//参数初始化	
	attitude->parameter.error_ki = 1.25f;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a5b      	ldr	r2, [pc, #364]	; (800cd08 <init_attitude+0x1cc>)
 800cb9c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	attitude->parameter.error_kp = 5.5f;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a5a      	ldr	r2, [pc, #360]	; (800cd0c <init_attitude+0x1d0>)
 800cba4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	attitude->parameter.correct_kp = 0.4f;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4a59      	ldr	r2, [pc, #356]	; (800cd10 <init_attitude+0x1d4>)
 800cbac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
//中间变量清空	
	attitude->process.error.x = 0;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f04f 0200 	mov.w	r2, #0
 800cbb6:	641a      	str	r2, [r3, #64]	; 0x40
	attitude->process.error.y = 0;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f04f 0200 	mov.w	r2, #0
 800cbbe:	645a      	str	r2, [r3, #68]	; 0x44
	attitude->process.error.z = 0;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f04f 0200 	mov.w	r2, #0
 800cbc6:	649a      	str	r2, [r3, #72]	; 0x48
	attitude->process.error_integral.x = 0;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f04f 0200 	mov.w	r2, #0
 800cbce:	64da      	str	r2, [r3, #76]	; 0x4c
	attitude->process.error_integral.y = 0;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f04f 0200 	mov.w	r2, #0
 800cbd6:	651a      	str	r2, [r3, #80]	; 0x50
	attitude->process.error_integral.z = 0;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f04f 0200 	mov.w	r2, #0
 800cbde:	655a      	str	r2, [r3, #84]	; 0x54
	
	attitude->process.quaternion[0] = 1;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cbe6:	631a      	str	r2, [r3, #48]	; 0x30
	attitude->process.quaternion[1] = 0;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f04f 0200 	mov.w	r2, #0
 800cbee:	635a      	str	r2, [r3, #52]	; 0x34
	attitude->process.quaternion[2] = 0;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	639a      	str	r2, [r3, #56]	; 0x38
	attitude->process.quaternion[3] = 0;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f04f 0200 	mov.w	r2, #0
 800cbfe:	63da      	str	r2, [r3, #60]	; 0x3c
//数据初始化
	attitude->data.rotate_matrix[0][0] = 0;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f04f 0200 	mov.w	r2, #0
 800cc06:	665a      	str	r2, [r3, #100]	; 0x64
	attitude->data.rotate_matrix[0][1] = 0;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f04f 0200 	mov.w	r2, #0
 800cc0e:	669a      	str	r2, [r3, #104]	; 0x68
	attitude->data.rotate_matrix[0][2] = 0;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f04f 0200 	mov.w	r2, #0
 800cc16:	66da      	str	r2, [r3, #108]	; 0x6c
	attitude->data.rotate_matrix[1][0] = 0;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f04f 0200 	mov.w	r2, #0
 800cc1e:	671a      	str	r2, [r3, #112]	; 0x70
	attitude->data.rotate_matrix[1][1] = 0;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f04f 0200 	mov.w	r2, #0
 800cc26:	675a      	str	r2, [r3, #116]	; 0x74
	attitude->data.rotate_matrix[1][2] = 0;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f04f 0200 	mov.w	r2, #0
 800cc2e:	679a      	str	r2, [r3, #120]	; 0x78
	attitude->data.rotate_matrix[2][0] = 0;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f04f 0200 	mov.w	r2, #0
 800cc36:	67da      	str	r2, [r3, #124]	; 0x7c
	attitude->data.rotate_matrix[2][1] = 0;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f04f 0200 	mov.w	r2, #0
 800cc3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	attitude->data.rotate_matrix[2][2] = 0;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f04f 0200 	mov.w	r2, #0
 800cc48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	
	attitude->data.mag_world.x = 0;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f04f 0200 	mov.w	r2, #0
 800cc52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	attitude->data.mag_world.y = 0;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f04f 0200 	mov.w	r2, #0
 800cc5c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	attitude->data.mag_world.z = 0;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f04f 0200 	mov.w	r2, #0
 800cc66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	
	attitude->data.acc_world.x = 0;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f04f 0200 	mov.w	r2, #0
 800cc70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	attitude->data.acc_world.y = 0;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f04f 0200 	mov.w	r2, #0
 800cc7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	attitude->data.acc_world.z = 0;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f04f 0200 	mov.w	r2, #0
 800cc84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	attitude->data.mag_correct.x = 0;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f04f 0200 	mov.w	r2, #0
 800cc8e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	attitude->data.mag_correct.y = 0;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f04f 0200 	mov.w	r2, #0
 800cc98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	attitude->data.mag_correct.z = 0;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f04f 0200 	mov.w	r2, #0
 800cca2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	
	attitude->data.acc_correct.x = 0;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f04f 0200 	mov.w	r2, #0
 800ccac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	attitude->data.acc_correct.y = 0;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f04f 0200 	mov.w	r2, #0
 800ccb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	attitude->data.acc_correct.z = 0;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f04f 0200 	mov.w	r2, #0
 800ccc0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	
	attitude->data.gyro_correct.x = 0;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f04f 0200 	mov.w	r2, #0
 800ccca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	attitude->data.gyro_correct.y = 0;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f04f 0200 	mov.w	r2, #0
 800ccd4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	attitude->data.gyro_correct.z = 0;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f04f 0200 	mov.w	r2, #0
 800ccde:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	
	attitude->data.pitch = 0;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f04f 0200 	mov.w	r2, #0
 800cce8:	661a      	str	r2, [r3, #96]	; 0x60
	attitude->data.rol = 0;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f04f 0200 	mov.w	r2, #0
 800ccf0:	65da      	str	r2, [r3, #92]	; 0x5c
	attitude->data.yaw = 0;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f04f 0200 	mov.w	r2, #0
 800ccf8:	659a      	str	r2, [r3, #88]	; 0x58
}
 800ccfa:	bf00      	nop
 800ccfc:	370c      	adds	r7, #12
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	3fa00000 	.word	0x3fa00000
 800cd0c:	40b00000 	.word	0x40b00000
 800cd10:	3ecccccd 	.word	0x3ecccccd

0800cd14 <simple_3d_trans>:


void simple_3d_trans(XYZ_Data_f *ref, XYZ_Data_f *in, XYZ_Data_f *out) //小范围内正确。
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
	static char pn;
	static float h_tmp_x,h_tmp_y;
	
	h_tmp_x = fast_sqrt(ref->z * ref->z + ref->y * ref->y);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	ed93 7a02 	vldr	s14, [r3, #8]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	edd3 6a01 	vldr	s13, [r3, #4]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd44:	eeb0 0a67 	vmov.f32	s0, s15
 800cd48:	f000 ff52 	bl	800dbf0 <fast_sqrt>
 800cd4c:	eef0 7a40 	vmov.f32	s15, s0
 800cd50:	4b43      	ldr	r3, [pc, #268]	; (800ce60 <simple_3d_trans+0x14c>)
 800cd52:	edc3 7a00 	vstr	s15, [r3]
	h_tmp_y = fast_sqrt(ref->z * ref->z + ref->x * ref->x);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	ed93 7a02 	vldr	s14, [r3, #8]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	edd3 6a00 	vldr	s13, [r3]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	edd3 7a00 	vldr	s15, [r3]
 800cd72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd7a:	eeb0 0a67 	vmov.f32	s0, s15
 800cd7e:	f000 ff37 	bl	800dbf0 <fast_sqrt>
 800cd82:	eef0 7a40 	vmov.f32	s15, s0
 800cd86:	4b37      	ldr	r3, [pc, #220]	; (800ce64 <simple_3d_trans+0x150>)
 800cd88:	edc3 7a00 	vstr	s15, [r3]
	
	pn = ref->z < 0 ? -1 : 1;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd9a:	d501      	bpl.n	800cda0 <simple_3d_trans+0x8c>
 800cd9c:	22ff      	movs	r2, #255	; 0xff
 800cd9e:	e000      	b.n	800cda2 <simple_3d_trans+0x8e>
 800cda0:	2201      	movs	r2, #1
 800cda2:	4b31      	ldr	r3, [pc, #196]	; (800ce68 <simple_3d_trans+0x154>)
 800cda4:	701a      	strb	r2, [r3, #0]
	
	out->x = ( h_tmp_x *in->x - pn *ref->x *in->z ) ;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	ed93 7a00 	vldr	s14, [r3]
 800cdac:	4b2c      	ldr	r3, [pc, #176]	; (800ce60 <simple_3d_trans+0x14c>)
 800cdae:	edd3 7a00 	vldr	s15, [r3]
 800cdb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdb6:	4b2c      	ldr	r3, [pc, #176]	; (800ce68 <simple_3d_trans+0x154>)
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	ee07 3a90 	vmov	s15, r3
 800cdbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	edd3 7a00 	vldr	s15, [r3]
 800cdc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	edd3 7a02 	vldr	s15, [r3, #8]
 800cdd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	edc3 7a00 	vstr	s15, [r3]
	out->y = ( pn *h_tmp_y *in->y - ref->y *in->z ) ;
 800cde0:	4b21      	ldr	r3, [pc, #132]	; (800ce68 <simple_3d_trans+0x154>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	ee07 3a90 	vmov	s15, r3
 800cde8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cdec:	4b1d      	ldr	r3, [pc, #116]	; (800ce64 <simple_3d_trans+0x150>)
 800cdee:	edd3 7a00 	vldr	s15, [r3]
 800cdf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	edd3 7a01 	vldr	s15, [r3, #4]
 800cdfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	edd3 6a01 	vldr	s13, [r3, #4]
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	edc3 7a01 	vstr	s15, [r3, #4]
	out->z = ref->x *in->x + ref->y *in->y + ref->z *in->z ;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	ed93 7a00 	vldr	s14, [r3]
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	edd3 7a00 	vldr	s15, [r3]
 800ce26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	edd3 6a01 	vldr	s13, [r3, #4]
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	edd3 7a01 	vldr	s15, [r3, #4]
 800ce36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	edd3 6a02 	vldr	s13, [r3, #8]
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	edc3 7a02 	vstr	s15, [r3, #8]

}
 800ce58:	bf00      	nop
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	2000185c 	.word	0x2000185c
 800ce64:	20001860 	.word	0x20001860
 800ce68:	20001864 	.word	0x20001864

0800ce6c <calculate_attitude>:



void calculate_attitude(ATT_Module *attitude, float cycle)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	ed2d 8b02 	vpush	{d8}
 800ce72:	b096      	sub	sp, #88	; 0x58
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	ed87 0a00 	vstr	s0, [r7]
	float length;
	XYZ_Data_f acc_tmp; 
	XYZ_Data_f error;

	attitude->interface.data.a_x = imu_9.f_acc[0]*1000.0f;
 800ce7c:	4bbf      	ldr	r3, [pc, #764]	; (800d17c <calculate_attitude+0x310>)
 800ce7e:	edd3 7a08 	vldr	s15, [r3, #32]
 800ce82:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800d180 <calculate_attitude+0x314>
 800ce86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude->interface.data.a_y = imu_9.f_acc[1]*1000.0f;
 800ce90:	4bba      	ldr	r3, [pc, #744]	; (800d17c <calculate_attitude+0x310>)
 800ce92:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ce96:	ed9f 7aba 	vldr	s14, [pc, #744]	; 800d180 <calculate_attitude+0x314>
 800ce9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	edc3 7a02 	vstr	s15, [r3, #8]
	attitude->interface.data.a_z = imu_9.f_acc[2]*1000.0f;
 800cea4:	4bb5      	ldr	r3, [pc, #724]	; (800d17c <calculate_attitude+0x310>)
 800cea6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ceaa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800d180 <calculate_attitude+0x314>
 800ceae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	edc3 7a03 	vstr	s15, [r3, #12]
	attitude->interface.data.g_x = imu_9.f_gyro[0];
 800ceb8:	4bb0      	ldr	r3, [pc, #704]	; (800d17c <calculate_attitude+0x310>)
 800ceba:	695a      	ldr	r2, [r3, #20]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	611a      	str	r2, [r3, #16]
	attitude->interface.data.g_y = imu_9.f_gyro[1];
 800cec0:	4bae      	ldr	r3, [pc, #696]	; (800d17c <calculate_attitude+0x310>)
 800cec2:	699a      	ldr	r2, [r3, #24]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	615a      	str	r2, [r3, #20]
	attitude->interface.data.g_z = imu_9.f_gyro[2];
 800cec8:	4bac      	ldr	r3, [pc, #688]	; (800d17c <calculate_attitude+0x310>)
 800ceca:	69da      	ldr	r2, [r3, #28]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	619a      	str	r2, [r3, #24]
	attitude->interface.data.m_x = imu_9.f_mag[1];
 800ced0:	4baa      	ldr	r3, [pc, #680]	; (800d17c <calculate_attitude+0x310>)
 800ced2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	61da      	str	r2, [r3, #28]
	attitude->interface.data.m_y = imu_9.f_mag[0];
 800ced8:	4ba8      	ldr	r3, [pc, #672]	; (800d17c <calculate_attitude+0x310>)
 800ceda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	621a      	str	r2, [r3, #32]
	attitude->interface.data.m_z = -imu_9.f_mag[2];
 800cee0:	4ba6      	ldr	r3, [pc, #664]	; (800d17c <calculate_attitude+0x310>)
 800cee2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800cee6:	eef1 7a67 	vneg.f32	s15, s15
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


	
	if (attitude->flag.run == 0)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 8675 	beq.w	800dbe4 <calculate_attitude+0xd78>
		return;
	
/////////////////////////////////////////////////////////////////////////////////////////////////		
	//电子罗盘处理
	if (attitude->flag.use_mag == 1)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	785b      	ldrb	r3, [r3, #1]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	f040 808c 	bne.w	800d01c <calculate_attitude+0x1b0>
	{	
		//利用电子罗盘计算yaw
		length = fast_sqrt(attitude->data.mag_correct.x * attitude->data.mag_correct.x + attitude->data.mag_correct.y * attitude->data.mag_correct.y);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800cf10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800cf20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf28:	eeb0 0a67 	vmov.f32	s0, s15
 800cf2c:	f000 fe60 	bl	800dbf0 <fast_sqrt>
 800cf30:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
		if( attitude->data.mag_correct.x != 0 && attitude->data.mag_correct.y != 0 && attitude->data.mag_correct.z != 0 && length != 0)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800cf3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf42:	d02f      	beq.n	800cfa4 <calculate_attitude+0x138>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800cf4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf52:	d027      	beq.n	800cfa4 <calculate_attitude+0x138>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800cf5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf62:	d01f      	beq.n	800cfa4 <calculate_attitude+0x138>
 800cf64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800cf68:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf70:	d018      	beq.n	800cfa4 <calculate_attitude+0x138>
		{
			attitude->process.mag_yaw = arctan2(attitude->data.mag_correct.y / length, attitude->data.mag_correct.x / length);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800cf78:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800cf7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800cf86:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800cf8a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800cf8e:	eef0 0a46 	vmov.f32	s1, s12
 800cf92:	eeb0 0a66 	vmov.f32	s0, s13
 800cf96:	f001 f83d 	bl	800e014 <arctan2>
 800cf9a:	eef0 7a40 	vmov.f32	s15, s0
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//			attitude->process.mag_yaw = arctan2(attitude->data.mag_correct.y , attitude->data.mag_correct.x);
		}

		//计算yaw偏差
		if(attitude->data.rotate_matrix[2][2] > 0.0f )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800cfaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb2:	dd2e      	ble.n	800d012 <calculate_attitude+0x1a6>
		{
			attitude->process.mag_yaw_bias = attitude->parameter.correct_kp * translateAngle(attitude->data.yaw - attitude->process.mag_yaw);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	ed93 8a31 	vldr	s16, [r3, #196]	; 0xc4
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cfc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfca:	eeb0 0a67 	vmov.f32	s0, s15
 800cfce:	f000 fe65 	bl	800dc9c <translateAngle>
 800cfd2:	eef0 7a40 	vmov.f32	s15, s0
 800cfd6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			//矫正值过大 -- 矫正值错误
			if(attitude->process.mag_yaw_bias > 360 || attitude->process.mag_yaw_bias < -360)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800cfe6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d184 <calculate_attitude+0x318>
 800cfea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff2:	dc09      	bgt.n	800d008 <calculate_attitude+0x19c>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800cffa:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800d188 <calculate_attitude+0x31c>
 800cffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	d50d      	bpl.n	800d024 <calculate_attitude+0x1b8>
			{
				attitude->process.mag_yaw_bias = 0;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f04f 0200 	mov.w	r2, #0
 800d00e:	62da      	str	r2, [r3, #44]	; 0x2c
 800d010:	e008      	b.n	800d024 <calculate_attitude+0x1b8>
			}
		}
		
		else
		{
			attitude->process.mag_yaw_bias = 0; //角度过大，停止修正，修正的目标值可能不正确
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f04f 0200 	mov.w	r2, #0
 800d018:	62da      	str	r2, [r3, #44]	; 0x2c
 800d01a:	e003      	b.n	800d024 <calculate_attitude+0x1b8>
		}
	}

	else
	{
		attitude->process.mag_yaw_bias = 0;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f04f 0200 	mov.w	r2, #0
 800d022:	62da      	str	r2, [r3, #44]	; 0x2c
	}
/////////////////////////////////////////////////////////////////////////////////////////////////	
	//加速度计处理
	length = fast_sqrt(	(attitude->interface.data.a_x) * (attitude->interface.data.a_x) +
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	ed93 7a01 	vldr	s14, [r3, #4]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d030:	ee27 7a27 	vmul.f32	s14, s14, s15
									(attitude->interface.data.a_y) * (attitude->interface.data.a_y) +
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	edd3 6a02 	vldr	s13, [r3, #8]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	edd3 7a02 	vldr	s15, [r3, #8]
 800d040:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(	(attitude->interface.data.a_x) * (attitude->interface.data.a_x) +
 800d044:	ee37 7a27 	vadd.f32	s14, s14, s15
									(attitude->interface.data.a_z) * (attitude->interface.data.a_z));
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	edd3 6a03 	vldr	s13, [r3, #12]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	edd3 7a03 	vldr	s15, [r3, #12]
 800d054:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(	(attitude->interface.data.a_x) * (attitude->interface.data.a_x) +
 800d058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d05c:	eeb0 0a67 	vmov.f32	s0, s15
 800d060:	f000 fdc6 	bl	800dbf0 <fast_sqrt>
 800d064:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	edd3 7a01 	vldr	s15, [r3, #4]
 800d06e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d076:	dd0a      	ble.n	800d08e <calculate_attitude+0x222>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	edd3 7a01 	vldr	s15, [r3, #4]
 800d07e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800d18c <calculate_attitude+0x320>
 800d082:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08a:	d40b      	bmi.n	800d0a4 <calculate_attitude+0x238>
 800d08c:	e106      	b.n	800d29c <calculate_attitude+0x430>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	edd3 7a01 	vldr	s15, [r3, #4]
 800d094:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800d190 <calculate_attitude+0x324>
 800d098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0a0:	f340 80fc 	ble.w	800d29c <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	edd3 7a02 	vldr	s15, [r3, #8]
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d0aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b2:	dd0a      	ble.n	800d0ca <calculate_attitude+0x25e>
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	edd3 7a02 	vldr	s15, [r3, #8]
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d0ba:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d18c <calculate_attitude+0x320>
 800d0be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c6:	d40b      	bmi.n	800d0e0 <calculate_attitude+0x274>
 800d0c8:	e0e8      	b.n	800d29c <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	edd3 7a02 	vldr	s15, [r3, #8]
 800d0d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d190 <calculate_attitude+0x324>
 800d0d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0dc:	f340 80de 	ble.w	800d29c <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_z)) < 1050.0f )
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	edd3 7a03 	vldr	s15, [r3, #12]
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d0e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ee:	dd0a      	ble.n	800d106 <calculate_attitude+0x29a>
			ABS((attitude->interface.data.a_z)) < 1050.0f )
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	edd3 7a03 	vldr	s15, [r3, #12]
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d0f6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800d18c <calculate_attitude+0x320>
 800d0fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d102:	d40b      	bmi.n	800d11c <calculate_attitude+0x2b0>
 800d104:	e0ca      	b.n	800d29c <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_z)) < 1050.0f )
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	edd3 7a03 	vldr	s15, [r3, #12]
 800d10c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800d190 <calculate_attitude+0x324>
 800d110:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d118:	f340 80c0 	ble.w	800d29c <calculate_attitude+0x430>
	{
		//加速度计归一化
		acc_tmp.x = (attitude->interface.data.a_x) / length;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	edd3 6a01 	vldr	s13, [r3, #4]
 800d122:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d12a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		acc_tmp.y = (attitude->interface.data.a_y) / length;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	edd3 6a02 	vldr	s13, [r3, #8]
 800d134:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d13c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		acc_tmp.z = (attitude->interface.data.a_z) / length;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	edd3 6a03 	vldr	s13, [r3, #12]
 800d146:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d14e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		
		//叉乘计算偏差	--
		if(800.0f < length && length < 1200.0f)
 800d152:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d156:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d194 <calculate_attitude+0x328>
 800d15a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d162:	f340 80a7 	ble.w	800d2b4 <calculate_attitude+0x448>
 800d166:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d16a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800d198 <calculate_attitude+0x32c>
 800d16e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d176:	d415      	bmi.n	800d1a4 <calculate_attitude+0x338>
 800d178:	e09c      	b.n	800d2b4 <calculate_attitude+0x448>
 800d17a:	bf00      	nop
 800d17c:	20002154 	.word	0x20002154
 800d180:	447a0000 	.word	0x447a0000
 800d184:	43b40000 	.word	0x43b40000
 800d188:	c3b40000 	.word	0xc3b40000
 800d18c:	44834000 	.word	0x44834000
 800d190:	c4834000 	.word	0xc4834000
 800d194:	44480000 	.word	0x44480000
 800d198:	44960000 	.word	0x44960000
 800d19c:	4048f5c3 	.word	0x4048f5c3
 800d1a0:	bd0f5c29 	.word	0xbd0f5c29
		{
			/* 叉乘得到误差 */
			error.x = (acc_tmp.y * attitude->data.rotate_matrix[2][2] - acc_tmp.z * attitude->data.rotate_matrix[1][2]);
 800d1a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800d1ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1b2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800d1bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			error.y = (acc_tmp.z * attitude->data.rotate_matrix[0][2] - acc_tmp.x * attitude->data.rotate_matrix[2][2]);
 800d1c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800d1d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1d6:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800d1e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	        error.z = (acc_tmp.x * attitude->data.rotate_matrix[1][2] - acc_tmp.y * attitude->data.rotate_matrix[0][2]);
 800d1ec:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800d1f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1fa:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800d204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d20c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			
			/* 误差低通 */
			attitude->process.error.x += 1.0f * 3.14f * cycle *(error.x  - attitude->process.error.x );
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800d216:	edd7 7a00 	vldr	s15, [r7]
 800d21a:	ed5f 6a20 	vldr	s13, [pc, #-128]	; 800d19c <calculate_attitude+0x330>
 800d21e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d222:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d22c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d234:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			attitude->process.error.y += 1.0f * 3.14f * cycle *(error.y  - attitude->process.error.y );
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800d244:	edd7 7a00 	vldr	s15, [r7]
 800d248:	ed5f 6a2c 	vldr	s13, [pc, #-176]	; 800d19c <calculate_attitude+0x330>
 800d24c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d250:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800d25a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d25e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d262:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			attitude->process.error.z += 1.0f * 3.14f * cycle *(error.z  - attitude->process.error.z );
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800d272:	edd7 7a00 	vldr	s15, [r7]
 800d276:	ed5f 6a37 	vldr	s13, [pc, #-220]	; 800d19c <calculate_attitude+0x330>
 800d27a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d27e:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800d288:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d28c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d290:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		if(800.0f < length && length < 1200.0f)
 800d29a:	e00b      	b.n	800d2b4 <calculate_attitude+0x448>
		}
	}
	else
	{
		attitude->process.error.x = 0;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f04f 0200 	mov.w	r2, #0
 800d2a2:	641a      	str	r2, [r3, #64]	; 0x40
		attitude->process.error.y = 0  ;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f04f 0200 	mov.w	r2, #0
 800d2aa:	645a      	str	r2, [r3, #68]	; 0x44
		attitude->process.error.z = 0 ;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f04f 0200 	mov.w	r2, #0
 800d2b2:	649a      	str	r2, [r3, #72]	; 0x48
	}

	// 误差积分	
	attitude->process.error_integral.x += attitude->process.error.x * attitude->parameter.error_ki * cycle;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800d2c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d2ca:	edd7 7a00 	vldr	s15, [r7]
 800d2ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	attitude->process.error_integral.y += attitude->process.error.y * attitude->parameter.error_ki * cycle;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800d2ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d2f2:	edd7 7a00 	vldr	s15, [r7]
 800d2f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	attitude->process.error_integral.z += attitude->process.error.z * attitude->parameter.error_ki * cycle;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800d316:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d31a:	edd7 7a00 	vldr	s15, [r7]
 800d31e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d322:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	
	//积分限幅 -- 2°以内
	attitude->process.error_integral.x = LIMIT(attitude->process.error_integral.x, - 0.035f ,0.035f );
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d332:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 800d1a0 <calculate_attitude+0x334>
 800d336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33e:	d501      	bpl.n	800d344 <calculate_attitude+0x4d8>
 800d340:	4b22      	ldr	r3, [pc, #136]	; (800d3cc <calculate_attitude+0x560>)
 800d342:	e00d      	b.n	800d360 <calculate_attitude+0x4f4>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d34a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d3d0 <calculate_attitude+0x564>
 800d34e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d356:	dd01      	ble.n	800d35c <calculate_attitude+0x4f0>
 800d358:	4b1e      	ldr	r3, [pc, #120]	; (800d3d4 <calculate_attitude+0x568>)
 800d35a:	e001      	b.n	800d360 <calculate_attitude+0x4f4>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	64d3      	str	r3, [r2, #76]	; 0x4c
	attitude->process.error_integral.y = LIMIT(attitude->process.error_integral.y, - 0.035f ,0.035f );
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800d36a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800d3d8 <calculate_attitude+0x56c>
 800d36e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d376:	d501      	bpl.n	800d37c <calculate_attitude+0x510>
 800d378:	4b14      	ldr	r3, [pc, #80]	; (800d3cc <calculate_attitude+0x560>)
 800d37a:	e00d      	b.n	800d398 <calculate_attitude+0x52c>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800d382:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800d3d0 <calculate_attitude+0x564>
 800d386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38e:	dd01      	ble.n	800d394 <calculate_attitude+0x528>
 800d390:	4b10      	ldr	r3, [pc, #64]	; (800d3d4 <calculate_attitude+0x568>)
 800d392:	e001      	b.n	800d398 <calculate_attitude+0x52c>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	6513      	str	r3, [r2, #80]	; 0x50
	attitude->process.error_integral.z = LIMIT(attitude->process.error_integral.z, - 0.035f ,0.035f );
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d3a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800d3d8 <calculate_attitude+0x56c>
 800d3a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ae:	d501      	bpl.n	800d3b4 <calculate_attitude+0x548>
 800d3b0:	4b06      	ldr	r3, [pc, #24]	; (800d3cc <calculate_attitude+0x560>)
 800d3b2:	e017      	b.n	800d3e4 <calculate_attitude+0x578>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d3ba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d3d0 <calculate_attitude+0x564>
 800d3be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c6:	dd0b      	ble.n	800d3e0 <calculate_attitude+0x574>
 800d3c8:	4b02      	ldr	r3, [pc, #8]	; (800d3d4 <calculate_attitude+0x568>)
 800d3ca:	e00b      	b.n	800d3e4 <calculate_attitude+0x578>
 800d3cc:	bd0f5c29 	.word	0xbd0f5c29
 800d3d0:	3d0f5c29 	.word	0x3d0f5c29
 800d3d4:	3d0f5c29 	.word	0x3d0f5c29
 800d3d8:	bd0f5c29 	.word	0xbd0f5c29
 800d3dc:	3c8efa34 	.word	0x3c8efa34
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	6553      	str	r3, [r2, #84]	; 0x54
	
/////////////////////////////////////////////////////////////////////////////////////////////////
	//开始修正陀螺仪值
	attitude->data.gyro_correct.x = ((attitude->interface.data.g_x) - attitude->data.rotate_matrix[0][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	ed93 7a04 	vldr	s14, [r3, #16]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d3fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d402:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800d3dc <calculate_attitude+0x570>
 800d406:	ee27 7a87 	vmul.f32	s14, s15, s14
						(attitude->parameter.error_kp * attitude->process.error.x + attitude->process.error_integral.x) ;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d416:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d420:	ee76 7aa7 	vadd.f32	s15, s13, s15
	attitude->data.gyro_correct.x = ((attitude->interface.data.g_x) - attitude->data.rotate_matrix[0][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d424:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	attitude->data.gyro_correct.y = ((attitude->interface.data.g_y) - attitude->data.rotate_matrix[1][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	ed93 7a05 	vldr	s14, [r3, #20]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d444:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d448:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 800d3dc <calculate_attitude+0x570>
 800d44c:	ee27 7a87 	vmul.f32	s14, s15, s14
						(attitude->parameter.error_kp * attitude->process.error.y + attitude->process.error_integral.y) ;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800d45c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800d466:	ee76 7aa7 	vadd.f32	s15, s13, s15
	attitude->data.gyro_correct.y = ((attitude->interface.data.g_y) - attitude->data.rotate_matrix[1][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d46a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	attitude->data.gyro_correct.z = ((attitude->interface.data.g_z) - attitude->data.rotate_matrix[2][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	ed93 7a06 	vldr	s14, [r3, #24]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d48a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d48e:	ed1f 7a2d 	vldr	s14, [pc, #-180]	; 800d3dc <calculate_attitude+0x570>
 800d492:	ee27 7a87 	vmul.f32	s14, s15, s14
						(attitude->parameter.error_kp * attitude->process.error.z + attitude->process.error_integral.z) ;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800d4a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d4ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
	attitude->data.gyro_correct.z = ((attitude->interface.data.g_z) - attitude->data.rotate_matrix[2][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d4b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	
/////////////////////////////////////////////////////////////////////////////////////////////////
	// 一阶龙格库塔更新四元数值
	attitude->process.quaternion[0] += (-attitude->process.quaternion[1] * attitude->data.gyro_correct.x - attitude->process.quaternion[2] * attitude->data.gyro_correct.y - attitude->process.quaternion[3] * attitude->data.gyro_correct.z) * cycle / 2.0f;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d4c6:	eef1 6a67 	vneg.f32	s13, s15
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800d4d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800d4e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d4e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800d4f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d4f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d4fc:	edd7 7a00 	vldr	s15, [r7]
 800d500:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d504:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d508:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d50c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	attitude->process.quaternion[1] +=  (attitude->process.quaternion[0] * attitude->data.gyro_correct.x + attitude->process.quaternion[2] * attitude->data.gyro_correct.z - attitude->process.quaternion[3] * attitude->data.gyro_correct.y) * cycle / 2.0f;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800d528:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800d538:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d53c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800d54c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d550:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d554:	edd7 7a00 	vldr	s15, [r7]
 800d558:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d55c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d560:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d564:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	attitude->process.quaternion[2] +=  (attitude->process.quaternion[0] * attitude->data.gyro_correct.y - attitude->process.quaternion[1] * attitude->data.gyro_correct.z + attitude->process.quaternion[3] * attitude->data.gyro_correct.x) * cycle / 2.0f;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800d580:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800d590:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d594:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800d5a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d5a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d5ac:	edd7 7a00 	vldr	s15, [r7]
 800d5b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d5b4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d5b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d5bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	attitude->process.quaternion[3] +=  (attitude->process.quaternion[0] * attitude->data.gyro_correct.z + attitude->process.quaternion[1] * attitude->data.gyro_correct.y - attitude->process.quaternion[2] * attitude->data.gyro_correct.x) * cycle / 2.0f;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800d5d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800d5e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d5ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800d5fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d600:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d604:	edd7 7a00 	vldr	s15, [r7]
 800d608:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d60c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d610:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d614:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	//四元数归一化
	length = fast_sqrt(attitude->process.quaternion[0] * attitude->process.quaternion[0] +
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d62a:	ee27 7a27 	vmul.f32	s14, s14, s15
								attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d63a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(attitude->process.quaternion[0] * attitude->process.quaternion[0] +
 800d63e:	ee37 7a27 	vadd.f32	s14, s14, s15
								attitude->process.quaternion[2] * attitude->process.quaternion[2] +
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d64e:	ee66 7aa7 	vmul.f32	s15, s13, s15
								attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d652:	ee37 7a27 	vadd.f32	s14, s14, s15
								attitude->process.quaternion[3] * attitude->process.quaternion[3]);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d662:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(attitude->process.quaternion[0] * attitude->process.quaternion[0] +
 800d666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d66a:	eeb0 0a67 	vmov.f32	s0, s15
 800d66e:	f000 fabf 	bl	800dbf0 <fast_sqrt>
 800d672:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
		
	if (length != 0)
 800d676:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d67a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d682:	d027      	beq.n	800d6d4 <calculate_attitude+0x868>
	{
		attitude->process.quaternion[0] /= length;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d68a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d68e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		attitude->process.quaternion[1] /= length;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d69e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d6a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		attitude->process.quaternion[2] /= length;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d6b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d6b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		attitude->process.quaternion[3] /= length;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d6c6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d6ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	
///////////////////////////////////////////////////////////////////////////////////////////////////	
	//计算旋转矩阵
	attitude->data.rotate_matrix[0][0] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] + attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d6e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d6f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6f4:	ee37 7a27 	vadd.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d704:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.rotate_matrix[0][0] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] + attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d708:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d71c:	ee77 7a67 	vsub.f32	s15, s14, s15
	attitude->data.rotate_matrix[0][0] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] + attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	attitude->data.rotate_matrix[0][1] = 	2 * (attitude->process.quaternion[1] * attitude->process.quaternion[2] + attitude->process.quaternion[0] * attitude->process.quaternion[3]);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d732:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d74a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	attitude->data.rotate_matrix[0][2] =  2 * (attitude->process.quaternion[1] * attitude->process.quaternion[3] - attitude->process.quaternion[0] * attitude->process.quaternion[2]);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d760:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d774:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d778:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	
	attitude->data.rotate_matrix[1][0] =  2 * (attitude->process.quaternion[1] * attitude->process.quaternion[2] - attitude->process.quaternion[0] * attitude->process.quaternion[3]);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d78e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d79e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	attitude->data.rotate_matrix[1][1] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d7bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d7cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7d0:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d7e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.rotate_matrix[1][1] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d7e4:	ee37 7a27 	vadd.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d7f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7f8:	ee77 7a67 	vsub.f32	s15, s14, s15
	attitude->data.rotate_matrix[1][1] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	attitude->data.rotate_matrix[1][2] =  2 * (attitude->process.quaternion[2] * attitude->process.quaternion[3] + attitude->process.quaternion[0] * attitude->process.quaternion[1]);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d80e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d81e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d822:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d826:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	
	attitude->data.rotate_matrix[2][0] = 	2 * (attitude->process.quaternion[1] * attitude->process.quaternion[3] + attitude->process.quaternion[0] * attitude->process.quaternion[2]);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d83c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d84c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d850:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d854:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	attitude->data.rotate_matrix[2][1] = 	2 * (attitude->process.quaternion[2] * attitude->process.quaternion[3] - attitude->process.quaternion[0] * attitude->process.quaternion[1]);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d86a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d87a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d87e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d882:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	attitude->data.rotate_matrix[2][2] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d8a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8ac:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] + attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d8bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.rotate_matrix[2][2] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d8c0:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] + attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d8d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8d4:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.rotate_matrix[2][2] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	
	//计算世界坐标系下的磁力计值
	if (attitude->flag.use_mag == 1)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	785b      	ldrb	r3, [r3, #1]
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d15c      	bne.n	800d9a0 <calculate_attitude+0xb34>
	{
		attitude->data.mag_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.m_x) +
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	edd3 7a07 	vldr	s15, [r3, #28]
 800d8f2:	ee27 7a27 	vmul.f32	s14, s14, s15
															attitude->data.rotate_matrix[1][0] * (attitude->interface.data.m_y) +
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	edd3 7a08 	vldr	s15, [r3, #32]
 800d902:	ee66 7aa7 	vmul.f32	s15, s13, s15
		attitude->data.mag_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.m_x) +
 800d906:	ee37 7a27 	vadd.f32	s14, s14, s15
															attitude->data.rotate_matrix[2][0] * (attitude->interface.data.m_z) ;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d916:	ee66 7aa7 	vmul.f32	s15, s13, s15
															attitude->data.rotate_matrix[1][0] * (attitude->interface.data.m_y) +
 800d91a:	ee77 7a27 	vadd.f32	s15, s14, s15
		attitude->data.mag_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.m_x) +
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
															
		attitude->data.mag_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.m_x) +
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	edd3 7a07 	vldr	s15, [r3, #28]
 800d930:	ee27 7a27 	vmul.f32	s14, s14, s15
															attitude->data.rotate_matrix[1][1] * (attitude->interface.data.m_y) +
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	edd3 7a08 	vldr	s15, [r3, #32]
 800d940:	ee66 7aa7 	vmul.f32	s15, s13, s15
		attitude->data.mag_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.m_x) +
 800d944:	ee37 7a27 	vadd.f32	s14, s14, s15
															attitude->data.rotate_matrix[2][1] * (attitude->interface.data.m_z) ;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d954:	ee66 7aa7 	vmul.f32	s15, s13, s15
															attitude->data.rotate_matrix[1][1] * (attitude->interface.data.m_y) +
 800d958:	ee77 7a27 	vadd.f32	s15, s14, s15
		attitude->data.mag_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.m_x) +
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
															
		attitude->data.mag_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.m_x) +
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d96e:	ee27 7a27 	vmul.f32	s14, s14, s15
															attitude->data.rotate_matrix[1][2] * (attitude->interface.data.m_y) +
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	edd3 7a08 	vldr	s15, [r3, #32]
 800d97e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		attitude->data.mag_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.m_x) +
 800d982:	ee37 7a27 	vadd.f32	s14, s14, s15
															attitude->data.rotate_matrix[2][2] * (attitude->interface.data.m_z) ;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d992:	ee66 7aa7 	vmul.f32	s15, s13, s15
															attitude->data.rotate_matrix[1][2] * (attitude->interface.data.m_y) +
 800d996:	ee77 7a27 	vadd.f32	s15, s14, s15
		attitude->data.mag_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.m_x) +
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	}
	
	//计算世界坐标系下的加速度值
	attitude->data.acc_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.a_x) +
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9ac:	ee27 7a27 	vmul.f32	s14, s14, s15
														attitude->data.rotate_matrix[1][0] * (attitude->interface.data.a_y) +
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	edd3 7a02 	vldr	s15, [r3, #8]
 800d9bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.acc_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.a_x) +
 800d9c0:	ee37 7a27 	vadd.f32	s14, s14, s15
														attitude->data.rotate_matrix[2][0] * (attitude->interface.data.a_z) ;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	edd3 7a03 	vldr	s15, [r3, #12]
 800d9d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
														attitude->data.rotate_matrix[1][0] * (attitude->interface.data.a_y) +
 800d9d4:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.acc_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.a_x) +
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
														
	attitude->data.acc_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.a_x) +
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9ea:	ee27 7a27 	vmul.f32	s14, s14, s15
														attitude->data.rotate_matrix[1][1] * (attitude->interface.data.a_y) +
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	edd3 7a02 	vldr	s15, [r3, #8]
 800d9fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.acc_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.a_x) +
 800d9fe:	ee37 7a27 	vadd.f32	s14, s14, s15
														attitude->data.rotate_matrix[2][1] * (attitude->interface.data.a_z) ;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	edd3 7a03 	vldr	s15, [r3, #12]
 800da0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
														attitude->data.rotate_matrix[1][1] * (attitude->interface.data.a_y) +
 800da12:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.acc_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.a_x) +
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
														
	attitude->data.acc_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.a_x) +
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	edd3 7a01 	vldr	s15, [r3, #4]
 800da28:	ee27 7a27 	vmul.f32	s14, s14, s15
														attitude->data.rotate_matrix[1][2] * (attitude->interface.data.a_y) +
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	edd3 7a02 	vldr	s15, [r3, #8]
 800da38:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.acc_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.a_x) +
 800da3c:	ee37 7a27 	vadd.f32	s14, s14, s15
														attitude->data.rotate_matrix[2][2] * (attitude->interface.data.a_z) ;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	edd3 7a03 	vldr	s15, [r3, #12]
 800da4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
														attitude->data.rotate_matrix[1][2] * (attitude->interface.data.a_y) +
 800da50:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.acc_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.a_x) +
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	
	//求解欧拉角
	attitude->data.rol = arctan2(attitude->data.rotate_matrix[2][2], attitude->data.rotate_matrix[1][2]);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800da66:	eef0 0a47 	vmov.f32	s1, s14
 800da6a:	eeb0 0a67 	vmov.f32	s0, s15
 800da6e:	f000 fad1 	bl	800e014 <arctan2>
 800da72:	eef0 7a40 	vmov.f32	s15, s0
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	attitude->data.pitch = -arcsin(attitude->data.rotate_matrix[0][2]);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800da82:	eeb0 0a67 	vmov.f32	s0, s15
 800da86:	f000 fb4d 	bl	800e124 <arcsin>
 800da8a:	eef0 7a40 	vmov.f32	s15, s0
 800da8e:	eef1 7a67 	vneg.f32	s15, s15
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	attitude->data.yaw = arctan2(attitude->data.rotate_matrix[0][0], attitude->data.rotate_matrix[0][1]);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800daa4:	eef0 0a47 	vmov.f32	s1, s14
 800daa8:	eeb0 0a67 	vmov.f32	s0, s15
 800daac:	f000 fab2 	bl	800e014 <arctan2>
 800dab0:	eef0 7a40 	vmov.f32	s15, s0
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	
/////////////////////////////////////////////////////////////////////////////////////////////////			
	//计算机体坐标系矫正后的加速度--不受俯仰和翻滚影响
	attitude->data.acc_correct.x =   attitude->data.acc_world.x * my_cos(attitude->data.yaw) + attitude->data.acc_world.y * my_sin(attitude->data.yaw);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	ed93 8a22 	vldr	s16, [r3, #136]	; 0x88
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800dac6:	eeb0 0a67 	vmov.f32	s0, s15
 800daca:	f000 f9a1 	bl	800de10 <my_cos>
 800dace:	eef0 7a40 	vmov.f32	s15, s0
 800dad2:	ee28 8a27 	vmul.f32	s16, s16, s15
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	edd3 8a23 	vldr	s17, [r3, #140]	; 0x8c
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800dae2:	eeb0 0a67 	vmov.f32	s0, s15
 800dae6:	f000 f913 	bl	800dd10 <my_sin>
 800daea:	eef0 7a40 	vmov.f32	s15, s0
 800daee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800daf2:	ee78 7a27 	vadd.f32	s15, s16, s15
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	attitude->data.acc_correct.y =  -attitude->data.acc_world.x * my_sin(attitude->data.yaw) + attitude->data.acc_world.y * my_cos(attitude->data.yaw);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800db02:	eeb1 8a67 	vneg.f32	s16, s15
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800db0c:	eeb0 0a67 	vmov.f32	s0, s15
 800db10:	f000 f8fe 	bl	800dd10 <my_sin>
 800db14:	eef0 7a40 	vmov.f32	s15, s0
 800db18:	ee28 8a27 	vmul.f32	s16, s16, s15
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	edd3 8a23 	vldr	s17, [r3, #140]	; 0x8c
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800db28:	eeb0 0a67 	vmov.f32	s0, s15
 800db2c:	f000 f970 	bl	800de10 <my_cos>
 800db30:	eef0 7a40 	vmov.f32	s15, s0
 800db34:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800db38:	ee78 7a27 	vadd.f32	s15, s16, s15
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	attitude->data.acc_correct.z =   attitude->data.acc_world.z;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	
	//计算机体坐标系矫正后的磁场--不受俯仰和翻滚影响
	if (attitude->flag.use_mag == 1)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	785b      	ldrb	r3, [r3, #1]
 800db52:	2b01      	cmp	r3, #1
 800db54:	d147      	bne.n	800dbe6 <calculate_attitude+0xd7a>
	{
		XYZ_Data_f ref_v = (XYZ_Data_f){attitude->data.rotate_matrix[0][2], attitude->data.rotate_matrix[1][2], attitude->data.rotate_matrix[2][2]};
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db5a:	633b      	str	r3, [r7, #48]	; 0x30
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db60:	637b      	str	r3, [r7, #52]	; 0x34
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db68:	63bb      	str	r3, [r7, #56]	; 0x38
		XYZ_Data_f mag_tmp = (XYZ_Data_f){attitude->interface.data.m_x, attitude->interface.data.m_y, attitude->interface.data.m_z};
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	69db      	ldr	r3, [r3, #28]
 800db6e:	61bb      	str	r3, [r7, #24]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a1b      	ldr	r3, [r3, #32]
 800db74:	61fb      	str	r3, [r7, #28]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7a:	623b      	str	r3, [r7, #32]
		
		length = 	fast_sqrt(	(attitude->interface.data.m_x) * (attitude->interface.data.m_x) +
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	ed93 7a07 	vldr	s14, [r3, #28]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	edd3 7a07 	vldr	s15, [r3, #28]
 800db88:	ee27 7a27 	vmul.f32	s14, s14, s15
										(attitude->interface.data.m_y) * (attitude->interface.data.m_y) +
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	edd3 6a08 	vldr	s13, [r3, #32]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	edd3 7a08 	vldr	s15, [r3, #32]
 800db98:	ee66 7aa7 	vmul.f32	s15, s13, s15
		length = 	fast_sqrt(	(attitude->interface.data.m_x) * (attitude->interface.data.m_x) +
 800db9c:	ee37 7a27 	vadd.f32	s14, s14, s15
										(attitude->interface.data.m_z) * (attitude->interface.data.m_z));
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800dbac:	ee66 7aa7 	vmul.f32	s15, s13, s15
		length = 	fast_sqrt(	(attitude->interface.data.m_x) * (attitude->interface.data.m_x) +
 800dbb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbb4:	eeb0 0a67 	vmov.f32	s0, s15
 800dbb8:	f000 f81a 	bl	800dbf0 <fast_sqrt>
 800dbbc:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54

		if (length != 0)
 800dbc0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800dbc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbcc:	d00b      	beq.n	800dbe6 <calculate_attitude+0xd7a>
		{
			simple_3d_trans(&ref_v, &mag_tmp, &attitude->data.mag_correct);//地磁坐标变换
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 800dbd4:	f107 0118 	add.w	r1, r7, #24
 800dbd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7ff f899 	bl	800cd14 <simple_3d_trans>
 800dbe2:	e000      	b.n	800dbe6 <calculate_attitude+0xd7a>
		return;
 800dbe4:	bf00      	nop
//			attitude->data.mag_correct.x = fast_sqrt(1 - (attitude->data.mag_correct.z / length) * (attitude->data.mag_correct.z / length)) * *(attitude->interface.data.m_x);
//			attitude->data.mag_correct.y = fast_sqrt(1 - (attitude->data.mag_correct.z / length) * (pose->data.mag_correct.z / length)) * *(attitude->interface.data.m_y);
		}
	}
	
}
 800dbe6:	3758      	adds	r7, #88	; 0x58
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	ecbd 8b02 	vpop	{d8}
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <fast_sqrt>:
* 函数功能		     : 快速算根值
* 输    入         : number 根号里边的数
* 输    出         : 最大的绝对值
*******************************************************************************/
float fast_sqrt(float number)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	ed87 0a01 	vstr	s0, [r7, #4]
	long i;
	float x, y;
	const float f = 1.5F;
 800dbfa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dbfe:	617b      	str	r3, [r7, #20]
	x = number * 0.5F;
 800dc00:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc0c:	edc7 7a04 	vstr	s15, [r7, #16]
	y = number;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	60bb      	str	r3, [r7, #8]
	i = * ( long * ) &y;
 800dc14:	f107 0308 	add.w	r3, r7, #8
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - ( i >> 1 );
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	105a      	asrs	r2, r3, #1
 800dc20:	4b1d      	ldr	r3, [pc, #116]	; (800dc98 <fast_sqrt+0xa8>)
 800dc22:	1a9b      	subs	r3, r3, r2
 800dc24:	60fb      	str	r3, [r7, #12]

	y = * ( float * ) &i;
 800dc26:	f107 030c 	add.w	r3, r7, #12
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	60bb      	str	r3, [r7, #8]
	y = y * ( f - ( x * y * y ) );
 800dc2e:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc32:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc3a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc42:	ed97 7a05 	vldr	s14, [r7, #20]
 800dc46:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc4a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc52:	edc7 7a02 	vstr	s15, [r7, #8]
	y = y * ( f - ( x * y * y ) );
 800dc56:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc5a:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc62:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc6a:	ed97 7a05 	vldr	s14, [r7, #20]
 800dc6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc72:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc7a:	edc7 7a02 	vstr	s15, [r7, #8]
	return number * y;
 800dc7e:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc82:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc86:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800dc8a:	eeb0 0a67 	vmov.f32	s0, s15
 800dc8e:	371c      	adds	r7, #28
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr
 800dc98:	5f3759df 	.word	0x5f3759df

0800dc9c <translateAngle>:
//* 函数功能		     : 将角度转变为-180~180之间
//* 输    入         :
//* 输    出         :
//*******************************************************************************/
float translateAngle(float angle)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	ed87 0a01 	vstr	s0, [r7, #4]
	while (angle > ANGLE_MAX)					//判断目标角度是否在允许角度范围
 800dca6:	e007      	b.n	800dcb8 <translateAngle+0x1c>
		angle -= 360.0f;
 800dca8:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcac:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800dd04 <translateAngle+0x68>
 800dcb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dcb4:	edc7 7a01 	vstr	s15, [r7, #4]
	while (angle > ANGLE_MAX)					//判断目标角度是否在允许角度范围
 800dcb8:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcbc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800dd08 <translateAngle+0x6c>
 800dcc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc8:	dcee      	bgt.n	800dca8 <translateAngle+0xc>
	while (angle < ANGLE_MIN)
 800dcca:	e007      	b.n	800dcdc <translateAngle+0x40>
		angle += 360.0f;
 800dccc:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcd0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800dd04 <translateAngle+0x68>
 800dcd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcd8:	edc7 7a01 	vstr	s15, [r7, #4]
	while (angle < ANGLE_MIN)
 800dcdc:	edd7 7a01 	vldr	s15, [r7, #4]
 800dce0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800dd0c <translateAngle+0x70>
 800dce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcec:	d4ee      	bmi.n	800dccc <translateAngle+0x30>
	return angle;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	ee07 3a90 	vmov	s15, r3
}
 800dcf4:	eeb0 0a67 	vmov.f32	s0, s15
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	43b40000 	.word	0x43b40000
 800dd08:	43340000 	.word	0x43340000
 800dd0c:	c3340000 	.word	0xc3340000

0800dd10 <my_sin>:
* 函数功能		     :
* 输    入         :
* 输    出         :
*******************************************************************************/
float my_sin(float angle)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	ed87 0a01 	vstr	s0, [r7, #4]
	float sine, rad;
	angle = translateAngle(angle);
 800dd1a:	ed97 0a01 	vldr	s0, [r7, #4]
 800dd1e:	f7ff ffbd 	bl	800dc9c <translateAngle>
 800dd22:	ed87 0a01 	vstr	s0, [r7, #4]
	rad = angle * PI / 180.0f;
 800dd26:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd2a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ddf8 <my_sin+0xe8>
 800dd2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dd32:	eddf 6a32 	vldr	s13, [pc, #200]	; 800ddfc <my_sin+0xec>
 800dd36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dd3a:	edc7 7a03 	vstr	s15, [r7, #12]

	sine = (rad < 0) ? rad * (1.27323954f + 0.405284735f * rad) : rad * (1.27323954f - 0.405284735f * rad);
 800dd3e:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4a:	d50e      	bpl.n	800dd6a <my_sin+0x5a>
 800dd4c:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd50:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800de00 <my_sin+0xf0>
 800dd54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd58:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800de04 <my_sin+0xf4>
 800dd5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd60:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd68:	e00d      	b.n	800dd86 <my_sin+0x76>
 800dd6a:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd6e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800de00 <my_sin+0xf0>
 800dd72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd76:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800de04 <my_sin+0xf4>
 800dd7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dd7e:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd86:	edc7 7a02 	vstr	s15, [r7, #8]
	sine = (sine < 0) ? sine * (-0.225f * (sine + 1) + 1) : sine * (0.225f * (sine - 1) + 1);
 800dd8a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd96:	d512      	bpl.n	800ddbe <my_sin+0xae>
 800dd98:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dda0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dda4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800de08 <my_sin+0xf8>
 800dda8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddb4:	edd7 7a02 	vldr	s15, [r7, #8]
 800ddb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddbc:	e011      	b.n	800dde2 <my_sin+0xd2>
 800ddbe:	edd7 7a02 	vldr	s15, [r7, #8]
 800ddc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ddca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800de0c <my_sin+0xfc>
 800ddce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddda:	edd7 7a02 	vldr	s15, [r7, #8]
 800ddde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dde2:	edc7 7a02 	vstr	s15, [r7, #8]
	return sine;
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	ee07 3a90 	vmov	s15, r3
}
 800ddec:	eeb0 0a67 	vmov.f32	s0, s15
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	40490fdb 	.word	0x40490fdb
 800ddfc:	43340000 	.word	0x43340000
 800de00:	3ecf817b 	.word	0x3ecf817b
 800de04:	3fa2f983 	.word	0x3fa2f983
 800de08:	be666666 	.word	0xbe666666
 800de0c:	3e666666 	.word	0x3e666666

0800de10 <my_cos>:
* 函数功能		     :
* 输    入         :
* 输    出         :
*******************************************************************************/
float my_cos(float angle)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	ed87 0a01 	vstr	s0, [r7, #4]
	return my_sin(angle + 90.0f);
 800de1a:	edd7 7a01 	vldr	s15, [r7, #4]
 800de1e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800de3c <my_cos+0x2c>
 800de22:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de26:	eeb0 0a67 	vmov.f32	s0, s15
 800de2a:	f7ff ff71 	bl	800dd10 <my_sin>
 800de2e:	eef0 7a40 	vmov.f32	s15, s0
}
 800de32:	eeb0 0a67 	vmov.f32	s0, s15
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	42b40000 	.word	0x42b40000

0800de40 <arctan1>:
* 函数功能		     : 反正切 （+- 0.09°）
* 输    入         :
* 输    出         :
*******************************************************************************/
float arctan1(float tan)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	ed87 0a01 	vstr	s0, [r7, #4]
	float angle = (ABS(tan) > 1.0f)	? 																																								\
 800de4a:	edd7 7a01 	vldr	s15, [r7, #4]
 800de4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de56:	dd0c      	ble.n	800de72 <arctan1+0x32>
 800de58:	edd7 7a01 	vldr	s15, [r7, #4]
 800de5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de68:	bfcc      	ite	gt
 800de6a:	2301      	movgt	r3, #1
 800de6c:	2300      	movle	r3, #0
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	e00b      	b.n	800de8a <arctan1+0x4a>
 800de72:	edd7 7a01 	vldr	s15, [r7, #4]
 800de76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800de7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de82:	bf4c      	ite	mi
 800de84:	2301      	movmi	r3, #1
 800de86:	2300      	movpl	r3, #0
 800de88:	b2db      	uxtb	r3, r3
								90.0f - ABS(1.0f / tan) * (45.0f - (ABS(1.0f / tan) - 1.0f) * (14.0f + 3.83f * ABS(1.0f / tan)))	: \
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d066      	beq.n	800df5c <arctan1+0x11c>
 800de8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de92:	ed97 7a01 	vldr	s14, [r7, #4]
 800de96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea2:	dd06      	ble.n	800deb2 <arctan1+0x72>
 800dea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dea8:	ed97 7a01 	vldr	s14, [r7, #4]
 800deac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800deb0:	e007      	b.n	800dec2 <arctan1+0x82>
 800deb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800deb6:	ed97 7a01 	vldr	s14, [r7, #4]
 800deba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800debe:	eef1 7a67 	vneg.f32	s15, s15
 800dec2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dec6:	edd7 6a01 	vldr	s13, [r7, #4]
 800deca:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800dece:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ded2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded6:	dd06      	ble.n	800dee6 <arctan1+0xa6>
 800ded8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dedc:	edd7 6a01 	vldr	s13, [r7, #4]
 800dee0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800dee4:	e007      	b.n	800def6 <arctan1+0xb6>
 800dee6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800deea:	edd7 6a01 	vldr	s13, [r7, #4]
 800deee:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800def2:	eeb1 7a47 	vneg.f32	s14, s14
 800def6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800defa:	ee77 6a66 	vsub.f32	s13, s14, s13
 800defe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800df02:	ed97 6a01 	vldr	s12, [r7, #4]
 800df06:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800df0a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800df0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df12:	dd06      	ble.n	800df22 <arctan1+0xe2>
 800df14:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800df18:	ed97 6a01 	vldr	s12, [r7, #4]
 800df1c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800df20:	e007      	b.n	800df32 <arctan1+0xf2>
 800df22:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800df26:	ed97 6a01 	vldr	s12, [r7, #4]
 800df2a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800df2e:	eeb1 7a47 	vneg.f32	s14, s14
 800df32:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800e008 <arctan1+0x1c8>
 800df36:	ee27 7a06 	vmul.f32	s14, s14, s12
 800df3a:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 800df3e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800df42:	ee26 7a87 	vmul.f32	s14, s13, s14
 800df46:	eddf 6a31 	vldr	s13, [pc, #196]	; 800e00c <arctan1+0x1cc>
 800df4a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800df4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df52:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800e010 <arctan1+0x1d0>
 800df56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df5a:	e03d      	b.n	800dfd8 <arctan1+0x198>
								ABS(tan) * (45.0f - (ABS(tan) - 1.0f) * (14.0f + 3.83f * ABS(tan)));
 800df5c:	edd7 7a01 	vldr	s15, [r7, #4]
 800df60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df68:	dd02      	ble.n	800df70 <arctan1+0x130>
 800df6a:	edd7 7a01 	vldr	s15, [r7, #4]
 800df6e:	e003      	b.n	800df78 <arctan1+0x138>
 800df70:	edd7 7a01 	vldr	s15, [r7, #4]
 800df74:	eef1 7a67 	vneg.f32	s15, s15
 800df78:	ed97 7a01 	vldr	s14, [r7, #4]
 800df7c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800df80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df84:	dd02      	ble.n	800df8c <arctan1+0x14c>
 800df86:	ed97 7a01 	vldr	s14, [r7, #4]
 800df8a:	e003      	b.n	800df94 <arctan1+0x154>
 800df8c:	ed97 7a01 	vldr	s14, [r7, #4]
 800df90:	eeb1 7a47 	vneg.f32	s14, s14
 800df94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df98:	ee77 6a66 	vsub.f32	s13, s14, s13
 800df9c:	ed97 7a01 	vldr	s14, [r7, #4]
 800dfa0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800dfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa8:	dd02      	ble.n	800dfb0 <arctan1+0x170>
 800dfaa:	ed97 7a01 	vldr	s14, [r7, #4]
 800dfae:	e003      	b.n	800dfb8 <arctan1+0x178>
 800dfb0:	ed97 7a01 	vldr	s14, [r7, #4]
 800dfb4:	eeb1 7a47 	vneg.f32	s14, s14
 800dfb8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e008 <arctan1+0x1c8>
 800dfbc:	ee27 7a06 	vmul.f32	s14, s14, s12
 800dfc0:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 800dfc4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800dfc8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800dfcc:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800e00c <arctan1+0x1cc>
 800dfd0:	ee36 7ac7 	vsub.f32	s14, s13, s14
								90.0f - ABS(1.0f / tan) * (45.0f - (ABS(1.0f / tan) - 1.0f) * (14.0f + 3.83f * ABS(1.0f / tan)))	: \
 800dfd4:	ee67 7a87 	vmul.f32	s15, s15, s14
	float angle = (ABS(tan) > 1.0f)	? 																																								\
 800dfd8:	edc7 7a03 	vstr	s15, [r7, #12]
	return (tan > 0) ? angle : -angle;
 800dfdc:	edd7 7a01 	vldr	s15, [r7, #4]
 800dfe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe8:	dd02      	ble.n	800dff0 <arctan1+0x1b0>
 800dfea:	edd7 7a03 	vldr	s15, [r7, #12]
 800dfee:	e003      	b.n	800dff8 <arctan1+0x1b8>
 800dff0:	edd7 7a03 	vldr	s15, [r7, #12]
 800dff4:	eef1 7a67 	vneg.f32	s15, s15
}
 800dff8:	eeb0 0a67 	vmov.f32	s0, s15
 800dffc:	3714      	adds	r7, #20
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop
 800e008:	40751eb8 	.word	0x40751eb8
 800e00c:	42340000 	.word	0x42340000
 800e010:	42b40000 	.word	0x42b40000

0800e014 <arctan2>:
* 函数功能		     : 反正切 （+- 0.09°）
* 输    入         :
* 输    出         :
*******************************************************************************/
float arctan2(float x, float y)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	ed87 0a01 	vstr	s0, [r7, #4]
 800e01e:	edc7 0a00 	vstr	s1, [r7]
	float tan, angle;

	if (x == 0 && y == 0)		//不存在
 800e022:	edd7 7a01 	vldr	s15, [r7, #4]
 800e026:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e02e:	d109      	bne.n	800e044 <arctan2+0x30>
 800e030:	edd7 7a00 	vldr	s15, [r7]
 800e034:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03c:	d102      	bne.n	800e044 <arctan2+0x30>
		return 0;
 800e03e:	f04f 0300 	mov.w	r3, #0
 800e042:	e060      	b.n	800e106 <arctan2+0xf2>

	if (x == 0)							//y轴上
 800e044:	edd7 7a01 	vldr	s15, [r7, #4]
 800e048:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e050:	d10a      	bne.n	800e068 <arctan2+0x54>
	{
		if (y > 0)
 800e052:	edd7 7a00 	vldr	s15, [r7]
 800e056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e05e:	dd01      	ble.n	800e064 <arctan2+0x50>
			return 90;
 800e060:	4b2c      	ldr	r3, [pc, #176]	; (800e114 <arctan2+0x100>)
 800e062:	e050      	b.n	800e106 <arctan2+0xf2>
		else
			return -90;
 800e064:	4b2c      	ldr	r3, [pc, #176]	; (800e118 <arctan2+0x104>)
 800e066:	e04e      	b.n	800e106 <arctan2+0xf2>
	}

	if (y == 0)							//x轴上
 800e068:	edd7 7a00 	vldr	s15, [r7]
 800e06c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e074:	d10b      	bne.n	800e08e <arctan2+0x7a>
	{
		if (x > 0)
 800e076:	edd7 7a01 	vldr	s15, [r7, #4]
 800e07a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e082:	dd02      	ble.n	800e08a <arctan2+0x76>
			return 0;
 800e084:	f04f 0300 	mov.w	r3, #0
 800e088:	e03d      	b.n	800e106 <arctan2+0xf2>
		else
			return -180.0f;
 800e08a:	4b24      	ldr	r3, [pc, #144]	; (800e11c <arctan2+0x108>)
 800e08c:	e03b      	b.n	800e106 <arctan2+0xf2>
	}

	tan = y / x;
 800e08e:	edd7 6a00 	vldr	s13, [r7]
 800e092:	ed97 7a01 	vldr	s14, [r7, #4]
 800e096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e09a:	edc7 7a02 	vstr	s15, [r7, #8]
	angle = arctan1(tan);
 800e09e:	ed97 0a02 	vldr	s0, [r7, #8]
 800e0a2:	f7ff fecd 	bl	800de40 <arctan1>
 800e0a6:	ed87 0a03 	vstr	s0, [r7, #12]
	if (x < 0 && angle > 0)
 800e0aa:	edd7 7a01 	vldr	s15, [r7, #4]
 800e0ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b6:	d50f      	bpl.n	800e0d8 <arctan2+0xc4>
 800e0b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c4:	dd08      	ble.n	800e0d8 <arctan2+0xc4>
		angle -= 180.0f;
 800e0c6:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0ca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e120 <arctan2+0x10c>
 800e0ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0d2:	edc7 7a03 	vstr	s15, [r7, #12]
 800e0d6:	e015      	b.n	800e104 <arctan2+0xf0>
	else if (x < 0 && angle < 0)
 800e0d8:	edd7 7a01 	vldr	s15, [r7, #4]
 800e0dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e4:	d50e      	bpl.n	800e104 <arctan2+0xf0>
 800e0e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f2:	d507      	bpl.n	800e104 <arctan2+0xf0>
		angle += 180.0f;
 800e0f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0f8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800e120 <arctan2+0x10c>
 800e0fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e100:	edc7 7a03 	vstr	s15, [r7, #12]
	return angle;
 800e104:	68fb      	ldr	r3, [r7, #12]
}
 800e106:	ee07 3a90 	vmov	s15, r3
 800e10a:	eeb0 0a67 	vmov.f32	s0, s15
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	42b40000 	.word	0x42b40000
 800e118:	c2b40000 	.word	0xc2b40000
 800e11c:	c3340000 	.word	0xc3340000
 800e120:	43340000 	.word	0x43340000

0800e124 <arcsin>:
* 函数功能		     : 反正切 （+- 0.09°）
* 输    入         :
* 输    出         :
*******************************************************************************/
float arcsin(float i)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	ed87 0a01 	vstr	s0, [r7, #4]
	return arctan1(i / fast_sqrt(1 - i * i));
 800e12e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e132:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e13a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e13e:	eeb0 0a67 	vmov.f32	s0, s15
 800e142:	f7ff fd55 	bl	800dbf0 <fast_sqrt>
 800e146:	eef0 6a40 	vmov.f32	s13, s0
 800e14a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e14e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e152:	eeb0 0a47 	vmov.f32	s0, s14
 800e156:	f7ff fe73 	bl	800de40 <arctan1>
 800e15a:	eef0 7a40 	vmov.f32	s15, s0
}
 800e15e:	eeb0 0a67 	vmov.f32	s0, s15
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b088      	sub	sp, #32
 800e16c:	af04      	add	r7, sp, #16
 800e16e:	607b      	str	r3, [r7, #4]
 800e170:	4603      	mov	r3, r0
 800e172:	81fb      	strh	r3, [r7, #14]
 800e174:	460b      	mov	r3, r1
 800e176:	81bb      	strh	r3, [r7, #12]
 800e178:	4613      	mov	r3, r2
 800e17a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e17c:	8978      	ldrh	r0, [r7, #10]
 800e17e:	89ba      	ldrh	r2, [r7, #12]
 800e180:	89f9      	ldrh	r1, [r7, #14]
 800e182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e186:	9302      	str	r3, [sp, #8]
 800e188:	8b3b      	ldrh	r3, [r7, #24]
 800e18a:	9301      	str	r3, [sp, #4]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	4603      	mov	r3, r0
 800e192:	4806      	ldr	r0, [pc, #24]	; (800e1ac <I2C1_WriteReg+0x44>)
 800e194:	f7f4 fb60 	bl	8002858 <HAL_I2C_Mem_Write>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d101      	bne.n	800e1a2 <I2C1_WriteReg+0x3a>
  {
    return HAL_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e000      	b.n	800e1a4 <I2C1_WriteReg+0x3c>
  }

  return HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	20000414 	.word	0x20000414

0800e1b0 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b088      	sub	sp, #32
 800e1b4:	af04      	add	r7, sp, #16
 800e1b6:	607b      	str	r3, [r7, #4]
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	81fb      	strh	r3, [r7, #14]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	81bb      	strh	r3, [r7, #12]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e1c4:	8978      	ldrh	r0, [r7, #10]
 800e1c6:	89ba      	ldrh	r2, [r7, #12]
 800e1c8:	89f9      	ldrh	r1, [r7, #14]
 800e1ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e1ce:	9302      	str	r3, [sp, #8]
 800e1d0:	8b3b      	ldrh	r3, [r7, #24]
 800e1d2:	9301      	str	r3, [sp, #4]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	4603      	mov	r3, r0
 800e1da:	4806      	ldr	r0, [pc, #24]	; (800e1f4 <I2C1_ReadReg+0x44>)
 800e1dc:	f7f4 fc50 	bl	8002a80 <HAL_I2C_Mem_Read>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d101      	bne.n	800e1ea <I2C1_ReadReg+0x3a>
  {
    return HAL_OK;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	e000      	b.n	800e1ec <I2C1_ReadReg+0x3c>
  }

  return HAL_ERROR;
 800e1ea:	2301      	movs	r3, #1
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	20000414 	.word	0x20000414

0800e1f8 <BSP_I2C1_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af02      	add	r7, sp, #8
 800e1fe:	60ba      	str	r2, [r7, #8]
 800e200:	461a      	mov	r2, r3
 800e202:	4603      	mov	r3, r0
 800e204:	81fb      	strh	r3, [r7, #14]
 800e206:	460b      	mov	r3, r1
 800e208:	81bb      	strh	r3, [r7, #12]
 800e20a:	4613      	mov	r3, r2
 800e20c:	80fb      	strh	r3, [r7, #6]
  if(I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800e20e:	89b9      	ldrh	r1, [r7, #12]
 800e210:	89f8      	ldrh	r0, [r7, #14]
 800e212:	88fb      	ldrh	r3, [r7, #6]
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	2201      	movs	r2, #1
 800e21a:	f7ff ffa5 	bl	800e168 <I2C1_WriteReg>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d101      	bne.n	800e228 <BSP_I2C1_WriteReg+0x30>
  {
	 return HAL_OK;
 800e224:	2300      	movs	r3, #0
 800e226:	e000      	b.n	800e22a <BSP_I2C1_WriteReg+0x32>
  }
  return HAL_ERROR;
 800e228:	2301      	movs	r3, #1
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b086      	sub	sp, #24
 800e236:	af02      	add	r7, sp, #8
 800e238:	60ba      	str	r2, [r7, #8]
 800e23a:	461a      	mov	r2, r3
 800e23c:	4603      	mov	r3, r0
 800e23e:	81fb      	strh	r3, [r7, #14]
 800e240:	460b      	mov	r3, r1
 800e242:	81bb      	strh	r3, [r7, #12]
 800e244:	4613      	mov	r3, r2
 800e246:	80fb      	strh	r3, [r7, #6]
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == HAL_OK)
 800e248:	89b9      	ldrh	r1, [r7, #12]
 800e24a:	89f8      	ldrh	r0, [r7, #14]
 800e24c:	88fb      	ldrh	r3, [r7, #6]
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2201      	movs	r2, #1
 800e254:	f7ff ffac 	bl	800e1b0 <I2C1_ReadReg>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <BSP_I2C1_ReadReg+0x30>
  {
	 return HAL_OK;
 800e25e:	2300      	movs	r3, #0
 800e260:	e000      	b.n	800e264 <BSP_I2C1_ReadReg+0x32>
  }
  return HAL_ERROR;
 800e262:	2301      	movs	r3, #1
}
 800e264:	4618      	mov	r0, r3
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <I2C3_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af04      	add	r7, sp, #16
 800e272:	607b      	str	r3, [r7, #4]
 800e274:	4603      	mov	r3, r0
 800e276:	81fb      	strh	r3, [r7, #14]
 800e278:	460b      	mov	r3, r1
 800e27a:	81bb      	strh	r3, [r7, #12]
 800e27c:	4613      	mov	r3, r2
 800e27e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c3, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e280:	8978      	ldrh	r0, [r7, #10]
 800e282:	89ba      	ldrh	r2, [r7, #12]
 800e284:	89f9      	ldrh	r1, [r7, #14]
 800e286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e28a:	9302      	str	r3, [sp, #8]
 800e28c:	8b3b      	ldrh	r3, [r7, #24]
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	4603      	mov	r3, r0
 800e296:	4806      	ldr	r0, [pc, #24]	; (800e2b0 <I2C3_ReadReg+0x44>)
 800e298:	f7f4 fbf2 	bl	8002a80 <HAL_I2C_Mem_Read>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d101      	bne.n	800e2a6 <I2C3_ReadReg+0x3a>
  {
    return HAL_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	e000      	b.n	800e2a8 <I2C3_ReadReg+0x3c>
  }

  return HAL_ERROR;
 800e2a6:	2301      	movs	r3, #1
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	20000468 	.word	0x20000468

0800e2b4 <I2C3_WriteReg>:


static int32_t I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b088      	sub	sp, #32
 800e2b8:	af04      	add	r7, sp, #16
 800e2ba:	607b      	str	r3, [r7, #4]
 800e2bc:	4603      	mov	r3, r0
 800e2be:	81fb      	strh	r3, [r7, #14]
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	81bb      	strh	r3, [r7, #12]
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c3, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e2c8:	8978      	ldrh	r0, [r7, #10]
 800e2ca:	89ba      	ldrh	r2, [r7, #12]
 800e2cc:	89f9      	ldrh	r1, [r7, #14]
 800e2ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e2d2:	9302      	str	r3, [sp, #8]
 800e2d4:	8b3b      	ldrh	r3, [r7, #24]
 800e2d6:	9301      	str	r3, [sp, #4]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	4603      	mov	r3, r0
 800e2de:	4806      	ldr	r0, [pc, #24]	; (800e2f8 <I2C3_WriteReg+0x44>)
 800e2e0:	f7f4 faba 	bl	8002858 <HAL_I2C_Mem_Write>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d101      	bne.n	800e2ee <I2C3_WriteReg+0x3a>
  {
    return HAL_OK;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	e000      	b.n	800e2f0 <I2C3_WriteReg+0x3c>
  }

  return HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	20000468 	.word	0x20000468

0800e2fc <BSP_I2C3_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af02      	add	r7, sp, #8
 800e302:	60ba      	str	r2, [r7, #8]
 800e304:	461a      	mov	r2, r3
 800e306:	4603      	mov	r3, r0
 800e308:	81fb      	strh	r3, [r7, #14]
 800e30a:	460b      	mov	r3, r1
 800e30c:	81bb      	strh	r3, [r7, #12]
 800e30e:	4613      	mov	r3, r2
 800e310:	80fb      	strh	r3, [r7, #6]
  if(I2C3_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800e312:	89b9      	ldrh	r1, [r7, #12]
 800e314:	89f8      	ldrh	r0, [r7, #14]
 800e316:	88fb      	ldrh	r3, [r7, #6]
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f7ff ffc9 	bl	800e2b4 <I2C3_WriteReg>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d101      	bne.n	800e32c <BSP_I2C3_WriteReg+0x30>
  {
	 return HAL_OK;
 800e328:	2300      	movs	r3, #0
 800e32a:	e000      	b.n	800e32e <BSP_I2C3_WriteReg+0x32>
  }
  return HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <BSP_I2C3_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b086      	sub	sp, #24
 800e33a:	af02      	add	r7, sp, #8
 800e33c:	60ba      	str	r2, [r7, #8]
 800e33e:	461a      	mov	r2, r3
 800e340:	4603      	mov	r3, r0
 800e342:	81fb      	strh	r3, [r7, #14]
 800e344:	460b      	mov	r3, r1
 800e346:	81bb      	strh	r3, [r7, #12]
 800e348:	4613      	mov	r3, r2
 800e34a:	80fb      	strh	r3, [r7, #6]
  if(I2C3_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == HAL_OK)
 800e34c:	89b9      	ldrh	r1, [r7, #12]
 800e34e:	89f8      	ldrh	r0, [r7, #14]
 800e350:	88fb      	ldrh	r3, [r7, #6]
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	2201      	movs	r2, #1
 800e358:	f7ff ff88 	bl	800e26c <I2C3_ReadReg>
 800e35c:	4603      	mov	r3, r0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d101      	bne.n	800e366 <BSP_I2C3_ReadReg+0x30>
  {
	 return HAL_OK;
 800e362:	2300      	movs	r3, #0
 800e364:	e000      	b.n	800e368 <BSP_I2C3_ReadReg+0x32>
  }
  return HAL_ERROR;
 800e366:	2301      	movs	r3, #1
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <STMFLASH_Write_NoCheck>:
#include "in_flash.h"

union_t  f_data;

void STMFLASH_Write_NoCheck(uint32_t WriteAddr, uint8_t *pBuffer, uint32_t NumToWrite)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
    for(int i=0;i<(NumToWrite>>3);i++)
 800e37c:	2300      	movs	r3, #0
 800e37e:	617b      	str	r3, [r7, #20]
 800e380:	e00f      	b.n	800e3a2 <STMFLASH_Write_NoCheck+0x32>
    {
  	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,WriteAddr,f_data.eight[i]);
 800e382:	4a0d      	ldr	r2, [pc, #52]	; (800e3b8 <STMFLASH_Write_NoCheck+0x48>)
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	00db      	lsls	r3, r3, #3
 800e388:	4413      	add	r3, r2
 800e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38e:	68f9      	ldr	r1, [r7, #12]
 800e390:	2000      	movs	r0, #0
 800e392:	f7f3 fd95 	bl	8001ec0 <HAL_FLASH_Program>
  	  WriteAddr += 8;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	3308      	adds	r3, #8
 800e39a:	60fb      	str	r3, [r7, #12]
    for(int i=0;i<(NumToWrite>>3);i++)
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	08da      	lsrs	r2, r3, #3
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d8ea      	bhi.n	800e382 <STMFLASH_Write_NoCheck+0x12>
    }
}
 800e3ac:	bf00      	nop
 800e3ae:	bf00      	nop
 800e3b0:	3718      	adds	r7, #24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	20001868 	.word	0x20001868

0800e3bc <FLASH_ErasePage>:
 @param pageAddress -[in] 擦除的起始地址
 @param nbPages -[in] 擦除页数
 @return 0 - 成功；-1 - 失败
*/
int FLASH_ErasePage(uint32_t pageAddress, uint32_t nbPages)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b088      	sub	sp, #32
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
	uint32_t pageError = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60fb      	str	r3, [r7, #12]
	eraseInit.Page = (pageAddress - FLASH_BASE)/PAGE_SIZE;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800e3d4:	0adb      	lsrs	r3, r3, #11
 800e3d6:	617b      	str	r3, [r7, #20]
	eraseInit.Banks = FLASH_BANK_1;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = nbPages;
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	61bb      	str	r3, [r7, #24]
	if(HAL_FLASHEx_Erase(&eraseInit, &pageError) != HAL_OK)
 800e3e0:	f107 021c 	add.w	r2, r7, #28
 800e3e4:	f107 030c 	add.w	r3, r7, #12
 800e3e8:	4611      	mov	r1, r2
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7f3 fec0 	bl	8002170 <HAL_FLASHEx_Erase>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <FLASH_ErasePage+0x40>
	{
		return -1;
 800e3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3fa:	e000      	b.n	800e3fe <FLASH_ErasePage+0x42>
	}
	return 0;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3720      	adds	r7, #32
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
	...

0800e408 <STMFLASH_Write>:

void STMFLASH_Write(uint32_t WriteAddr, uint8_t *pBuffer, uint32_t NumToWrite)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	f5ad 6d02 	sub.w	sp, sp, #2080	; 0x820
 800e40e:	af00      	add	r7, sp, #0
 800e410:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e414:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800e418:	6018      	str	r0, [r3, #0]
 800e41a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e41e:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 800e422:	6019      	str	r1, [r3, #0]
 800e424:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e428:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800e42c:	601a      	str	r2, [r3, #0]
	uint16_t secoff;
	uint16_t secremain;
	uint16_t i;
	uint32_t offaddr;

	HAL_FLASH_Unlock();
 800e42e:	f7f3 fdb3 	bl	8001f98 <HAL_FLASH_Unlock>
	offaddr = WriteAddr - USER_FLASH_ADDR_START;
 800e432:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e436:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800e440:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 800e444:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	secpos = offaddr / PAGE_SIZE;
 800e448:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800e44c:	0adb      	lsrs	r3, r3, #11
 800e44e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	secoff = (offaddr % PAGE_SIZE);
 800e452:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800e456:	b29b      	uxth	r3, r3
 800e458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e45c:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
	secremain = PAGE_SIZE  - secoff;
 800e460:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 800e464:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800e468:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
	if (NumToWrite <= secremain)
 800e46c:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	; 0x81e
 800e470:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800e474:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 800e478:	6812      	ldr	r2, [r2, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d806      	bhi.n	800e48c <STMFLASH_Write+0x84>
		secremain = NumToWrite;
 800e47e:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e482:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
//	while (1)
//	{
		STMFLASH_Read(secpos * PAGE_SIZE + USER_FLASH_ADDR_START, STMFLASH_BUF, PAGE_SIZE);
 800e48c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800e490:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e494:	333f      	adds	r3, #63	; 0x3f
 800e496:	02db      	lsls	r3, r3, #11
 800e498:	f107 0110 	add.w	r1, r7, #16
 800e49c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f000 f83f 	bl	800e524 <STMFLASH_Read>
//			if (STMFLASH_BUF[secoff + i] != 0XFFFFFFFF)
//				break;
//		}
//		if (i < secremain)
//		{
			FLASH_ErasePage(secpos * PAGE_SIZE + USER_FLASH_ADDR_START,1);
 800e4a6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800e4aa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e4ae:	333f      	adds	r3, #63	; 0x3f
 800e4b0:	02db      	lsls	r3, r3, #11
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff ff81 	bl	800e3bc <FLASH_ErasePage>
			for (i = 0; i < secremain; i++)
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 800e4c0:	e014      	b.n	800e4ec <STMFLASH_Write+0xe4>
			{
				f_data.one[i + secoff] = pBuffer[i];
 800e4c2:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 800e4c6:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800e4ca:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 800e4ce:	6812      	ldr	r2, [r2, #0]
 800e4d0:	441a      	add	r2, r3
 800e4d2:	f8b7 181c 	ldrh.w	r1, [r7, #2076]	; 0x81c
 800e4d6:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 800e4da:	440b      	add	r3, r1
 800e4dc:	7811      	ldrb	r1, [r2, #0]
 800e4de:	4a10      	ldr	r2, [pc, #64]	; (800e520 <STMFLASH_Write+0x118>)
 800e4e0:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < secremain; i++)
 800e4e2:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 800e4ec:	f8b7 281c 	ldrh.w	r2, [r7, #2076]	; 0x81c
 800e4f0:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	; 0x81e
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d3e4      	bcc.n	800e4c2 <STMFLASH_Write+0xba>
			}
			STMFLASH_Write_NoCheck(secpos * PAGE_SIZE + USER_FLASH_ADDR_START, STMFLASH_BUF, PAGE_SIZE);
 800e4f8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800e4fc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e500:	333f      	adds	r3, #63	; 0x3f
 800e502:	02db      	lsls	r3, r3, #11
 800e504:	f107 0110 	add.w	r1, r7, #16
 800e508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7ff ff2f 	bl	800e370 <STMFLASH_Write_NoCheck>
//				secremain = PAGE_SIZE;
//			else
//				secremain = NumToWrite;
//		}
//	};
	HAL_FLASH_Lock();
 800e512:	f7f3 fd63 	bl	8001fdc <HAL_FLASH_Lock>
}
 800e516:	bf00      	nop
 800e518:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	20001868 	.word	0x20001868

0800e524 <STMFLASH_Read>:

void STMFLASH_Read(uint32_t ReadAddr, uint8_t *pBuffer, uint32_t NumToRead)
{
 800e524:	b480      	push	{r7}
 800e526:	b08b      	sub	sp, #44	; 0x2c
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
	uint64_t data;
	uint32_t temp1,temp2;

	temp1 = NumToRead/8;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	08db      	lsrs	r3, r3, #3
 800e534:	61fb      	str	r3, [r7, #28]
	temp2 = NumToRead%8;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f003 0307 	and.w	r3, r3, #7
 800e53c:	61bb      	str	r3, [r7, #24]
	if(temp2>0)
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d002      	beq.n	800e54a <STMFLASH_Read+0x26>
	{
		temp1 = temp1 + 1 ;
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	3301      	adds	r3, #1
 800e548:	61fb      	str	r3, [r7, #28]

	}
	 for(uint32_t i=0; i<(PAGE_SIZE>>3); i++)
 800e54a:	2300      	movs	r3, #0
 800e54c:	627b      	str	r3, [r7, #36]	; 0x24
 800e54e:	e014      	b.n	800e57a <STMFLASH_Read+0x56>
	  {
		 data = *(__IO uint64_t *)(USER_FLASH_ADDR_START+i*8);
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800e556:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 800e55a:	00db      	lsls	r3, r3, #3
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    f_data.eight[i] = data;
 800e564:	4a15      	ldr	r2, [pc, #84]	; (800e5bc <STMFLASH_Read+0x98>)
 800e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e568:	00db      	lsls	r3, r3, #3
 800e56a:	18d1      	adds	r1, r2, r3
 800e56c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e570:	e9c1 2300 	strd	r2, r3, [r1]
	 for(uint32_t i=0; i<(PAGE_SIZE>>3); i++)
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	3301      	adds	r3, #1
 800e578:	627b      	str	r3, [r7, #36]	; 0x24
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	2bff      	cmp	r3, #255	; 0xff
 800e57e:	d9e7      	bls.n	800e550 <STMFLASH_Read+0x2c>
	  }

     for(int i=0;i<NumToRead;i++)
 800e580:	2300      	movs	r3, #0
 800e582:	623b      	str	r3, [r7, #32]
 800e584:	e00f      	b.n	800e5a6 <STMFLASH_Read+0x82>
     {
    	 pBuffer[i] = f_data.one[ReadAddr - USER_FLASH_ADDR_START+i];
 800e586:	6a3a      	ldr	r2, [r7, #32]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	4413      	add	r3, r2
 800e58c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800e590:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 800e594:	6a3a      	ldr	r2, [r7, #32]
 800e596:	68b9      	ldr	r1, [r7, #8]
 800e598:	440a      	add	r2, r1
 800e59a:	4908      	ldr	r1, [pc, #32]	; (800e5bc <STMFLASH_Read+0x98>)
 800e59c:	5ccb      	ldrb	r3, [r1, r3]
 800e59e:	7013      	strb	r3, [r2, #0]
     for(int i=0;i<NumToRead;i++)
 800e5a0:	6a3b      	ldr	r3, [r7, #32]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	623b      	str	r3, [r7, #32]
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d8eb      	bhi.n	800e586 <STMFLASH_Read+0x62>

     }
}
 800e5ae:	bf00      	nop
 800e5b0:	bf00      	nop
 800e5b2:	372c      	adds	r7, #44	; 0x2c
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	20001868 	.word	0x20001868

0800e5c0 <parseCommand>:
#define shell_debug  0

static bsp_console_parm *shell_con=0;
 shell_context_struct shell_context={0};

 static void parseCommand(shell_context_struct *context, const char* command) {
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b0b6      	sub	sp, #216	; 0xd8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
     char commandCopy[SHELL_BUFFER_SIZE+1];  // 复制命令，以便进行修改
     char *cmd_ptr;
     char* argv[10] = {};
 800e5ca:	f107 030c 	add.w	r3, r7, #12
 800e5ce:	2228      	movs	r2, #40	; 0x28
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f001 feba 	bl	801034c <memset>
	 char* param=NULL;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	 int valid_cmd=0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	 char* cmd_head;
	 const char *header="cmd";
 800e5e4:	4b4f      	ldr	r3, [pc, #316]	; (800e724 <parseCommand+0x164>)
 800e5e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

     strcpy(commandCopy, command);
 800e5ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e5ee:	6839      	ldr	r1, [r7, #0]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f001 ff9c 	bl	801052e <strcpy>
     console_cmds_t *cmds=NULL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

     if(shell_con==0)
 800e5fc:	4b4a      	ldr	r3, [pc, #296]	; (800e728 <parseCommand+0x168>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 8086 	beq.w	800e712 <parseCommand+0x152>
         {
        	 return ;
         }

     cmd_head = strtok(commandCopy, " ");  // 使用空格和换行符分割命令
 800e606:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e60a:	4948      	ldr	r1, [pc, #288]	; (800e72c <parseCommand+0x16c>)
 800e60c:	4618      	mov	r0, r3
 800e60e:	f001 fea5 	bl	801035c <strtok>
 800e612:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
     if((strcmp(shell_con->head,cmd_head)!=0)&&(strcmp(cmd_head,header)!=0))//
 800e616:	4b44      	ldr	r3, [pc, #272]	; (800e728 <parseCommand+0x168>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	3310      	adds	r3, #16
 800e61c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800e620:	4618      	mov	r0, r3
 800e622:	f7f1 fdfd 	bl	8000220 <strcmp>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d008      	beq.n	800e63e <parseCommand+0x7e>
 800e62c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800e630:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e634:	f7f1 fdf4 	bl	8000220 <strcmp>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d16b      	bne.n	800e716 <parseCommand+0x156>
    	 usb_printf("parseAddrCommand err: %s\n", cmd_head);
#endif
				 return;
     }

     char* cmd = strtok(NULL, " \r\n");  // 使用空格和换行符分割命令
 800e63e:	493c      	ldr	r1, [pc, #240]	; (800e730 <parseCommand+0x170>)
 800e640:	2000      	movs	r0, #0
 800e642:	f001 fe8b 	bl	801035c <strtok>
 800e646:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
     if(strstr(cmd,"\r\n"))
 800e64a:	493a      	ldr	r1, [pc, #232]	; (800e734 <parseCommand+0x174>)
 800e64c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800e650:	f001 fee0 	bl	8010414 <strstr>
     {

     }

     cmds=shell_con->tbl;
 800e654:	4b34      	ldr	r3, [pc, #208]	; (800e728 <parseCommand+0x168>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     if (cmd != NULL) {
 800e65e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e662:	2b00      	cmp	r3, #0
 800e664:	d04d      	beq.n	800e702 <parseCommand+0x142>
    	 while(cmds!=NULL)
 800e666:	e048      	b.n	800e6fa <parseCommand+0x13a>
    	 {
    		 cmd_ptr=cmds->name;
 800e668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			 if (strcmp(cmd, cmd_ptr) == 0)
 800e672:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e676:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800e67a:	f7f1 fdd1 	bl	8000220 <strcmp>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d135      	bne.n	800e6f0 <parseCommand+0x130>
			 {
#if shell_debug
				 usb_printf("parseCommand cmd: %s\n", cmd);
#endif
				 valid_cmd=1;
 800e684:	2301      	movs	r3, #1
 800e686:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				 int param_len=0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
				 param = strtok(NULL, " ");
 800e690:	4926      	ldr	r1, [pc, #152]	; (800e72c <parseCommand+0x16c>)
 800e692:	2000      	movs	r0, #0
 800e694:	f001 fe62 	bl	801035c <strtok>
 800e698:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				 while((param!=NULL)&&(param_len<9))
 800e69c:	e017      	b.n	800e6ce <parseCommand+0x10e>
				 {
#if shell_debug
					 usb_printf("Param: %s\r\n", param);
#endif
					 argv[param_len]=param;
 800e69e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	33d8      	adds	r3, #216	; 0xd8
 800e6a6:	443b      	add	r3, r7
 800e6a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e6ac:	f843 2ccc 	str.w	r2, [r3, #-204]
					 param_len++;
 800e6b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					 if(param_len>=10)
 800e6ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6be:	2b09      	cmp	r3, #9
 800e6c0:	dc2b      	bgt.n	800e71a <parseCommand+0x15a>
					 {
						 return;
					 }
					 param = strtok(NULL, " ");
 800e6c2:	491a      	ldr	r1, [pc, #104]	; (800e72c <parseCommand+0x16c>)
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	f001 fe49 	bl	801035c <strtok>
 800e6ca:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				 while((param!=NULL)&&(param_len<9))
 800e6ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d003      	beq.n	800e6de <parseCommand+0x11e>
 800e6d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6da:	2b08      	cmp	r3, #8
 800e6dc:	dddf      	ble.n	800e69e <parseCommand+0xde>
				 }

				 cmds->cmd(context,param_len,argv);
 800e6de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	f107 020c 	add.w	r2, r7, #12
 800e6e8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	4798      	blx	r3

			 }
			 cmds=cmds->argv1_tbl;
 800e6f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    	 while(cmds!=NULL)
 800e6fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1b2      	bne.n	800e668 <parseCommand+0xa8>
    	 }

     }
     if(valid_cmd==0)
 800e702:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d108      	bne.n	800e71c <parseCommand+0x15c>
     {
    	 usb_printf("Invalid command....\r\n");
 800e70a:	480b      	ldr	r0, [pc, #44]	; (800e738 <parseCommand+0x178>)
 800e70c:	f000 fdf2 	bl	800f2f4 <usb_printf>
 800e710:	e004      	b.n	800e71c <parseCommand+0x15c>
        	 return ;
 800e712:	bf00      	nop
 800e714:	e002      	b.n	800e71c <parseCommand+0x15c>
				 return;
 800e716:	bf00      	nop
 800e718:	e000      	b.n	800e71c <parseCommand+0x15c>
						 return;
 800e71a:	bf00      	nop
     }



 }
 800e71c:	37d8      	adds	r7, #216	; 0xd8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	08013d18 	.word	0x08013d18
 800e728:	20002068 	.word	0x20002068
 800e72c:	08013d1c 	.word	0x08013d1c
 800e730:	08013d20 	.word	0x08013d20
 800e734:	08013d24 	.word	0x08013d24
 800e738:	08013d28 	.word	0x08013d28

0800e73c <shell_driver_main_loop>:

static int shell_driver_main_loop(uint8_t ch)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	4603      	mov	r3, r0
 800e744:	71fb      	strb	r3, [r7, #7]

   shell_context.line[shell_context.c_pos++]=ch;
 800e746:	4b18      	ldr	r3, [pc, #96]	; (800e7a8 <shell_driver_main_loop+0x6c>)
 800e748:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800e74c:	1c5a      	adds	r2, r3, #1
 800e74e:	b291      	uxth	r1, r2
 800e750:	4a15      	ldr	r2, [pc, #84]	; (800e7a8 <shell_driver_main_loop+0x6c>)
 800e752:	f8a2 10b6 	strh.w	r1, [r2, #182]	; 0xb6
 800e756:	461a      	mov	r2, r3
 800e758:	4b13      	ldr	r3, [pc, #76]	; (800e7a8 <shell_driver_main_loop+0x6c>)
 800e75a:	4413      	add	r3, r2
 800e75c:	79fa      	ldrb	r2, [r7, #7]
 800e75e:	711a      	strb	r2, [r3, #4]
   if(shell_context.c_pos>=SHELL_BUFFER_SIZE)
 800e760:	4b11      	ldr	r3, [pc, #68]	; (800e7a8 <shell_driver_main_loop+0x6c>)
 800e762:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800e766:	2b7f      	cmp	r3, #127	; 0x7f
 800e768:	d906      	bls.n	800e778 <shell_driver_main_loop+0x3c>
   {
	   shell_context.c_pos=0;
 800e76a:	4b0f      	ldr	r3, [pc, #60]	; (800e7a8 <shell_driver_main_loop+0x6c>)
 800e76c:	2200      	movs	r2, #0
 800e76e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	   usb_printf("shell_driver_main_loop pos err \r\n");
 800e772:	480e      	ldr	r0, [pc, #56]	; (800e7ac <shell_driver_main_loop+0x70>)
 800e774:	f000 fdbe 	bl	800f2f4 <usb_printf>
   }

   if(ch=='\n')//检测到换行符，增加\0
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	2b0a      	cmp	r3, #10
 800e77c:	d10f      	bne.n	800e79e <shell_driver_main_loop+0x62>
   {
	   shell_context.line[shell_context.c_pos]='\0';
 800e77e:	4b0a      	ldr	r3, [pc, #40]	; (800e7a8 <shell_driver_main_loop+0x6c>)
 800e780:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800e784:	461a      	mov	r2, r3
 800e786:	4b08      	ldr	r3, [pc, #32]	; (800e7a8 <shell_driver_main_loop+0x6c>)
 800e788:	4413      	add	r3, r2
 800e78a:	2200      	movs	r2, #0
 800e78c:	711a      	strb	r2, [r3, #4]
	   parseCommand(&shell_context, shell_context.line);
 800e78e:	4908      	ldr	r1, [pc, #32]	; (800e7b0 <shell_driver_main_loop+0x74>)
 800e790:	4805      	ldr	r0, [pc, #20]	; (800e7a8 <shell_driver_main_loop+0x6c>)
 800e792:	f7ff ff15 	bl	800e5c0 <parseCommand>
	   shell_context.c_pos=0;//解析完清0
 800e796:	4b04      	ldr	r3, [pc, #16]	; (800e7a8 <shell_driver_main_loop+0x6c>)
 800e798:	2200      	movs	r2, #0
 800e79a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

   }

	return 0;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	2000206c 	.word	0x2000206c
 800e7ac:	08013d40 	.word	0x08013d40
 800e7b0:	20002070 	.word	0x20002070

0800e7b4 <shell_console_hande>:


int shell_console_hande(uint8_t *dat,uint16_t len)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	807b      	strh	r3, [r7, #2]
	while(len--)
 800e7c0:	e006      	b.n	800e7d0 <shell_console_hande+0x1c>
	{
		shell_driver_main_loop(*dat++);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	1c5a      	adds	r2, r3, #1
 800e7c6:	607a      	str	r2, [r7, #4]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7ff ffb6 	bl	800e73c <shell_driver_main_loop>
	while(len--)
 800e7d0:	887b      	ldrh	r3, [r7, #2]
 800e7d2:	1e5a      	subs	r2, r3, #1
 800e7d4:	807a      	strh	r2, [r7, #2]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1f3      	bne.n	800e7c2 <shell_console_hande+0xe>
	}

	return 0;
 800e7da:	2300      	movs	r3, #0

}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <console_driver_init>:



void console_driver_init(bsp_console_parm *p_cnl_parm)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  if(p_cnl_parm==0)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d103      	bne.n	800e7fa <console_driver_init+0x16>
  {
	  usb_printf("console_driver_init prr is null \r\n");
 800e7f2:	4807      	ldr	r0, [pc, #28]	; (800e810 <console_driver_init+0x2c>)
 800e7f4:	f000 fd7e 	bl	800f2f4 <usb_printf>
	  return;
 800e7f8:	e006      	b.n	800e808 <console_driver_init+0x24>
  }
  shell_con=p_cnl_parm;
 800e7fa:	4a06      	ldr	r2, [pc, #24]	; (800e814 <console_driver_init+0x30>)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6013      	str	r3, [r2, #0]
  shell_context.c_pos=0;
 800e800:	4b05      	ldr	r3, [pc, #20]	; (800e818 <console_driver_init+0x34>)
 800e802:	2200      	movs	r2, #0
 800e804:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6


}
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	08013d64 	.word	0x08013d64
 800e814:	20002068 	.word	0x20002068
 800e818:	2000206c 	.word	0x2000206c

0800e81c <__NVIC_SystemReset>:
{
 800e81c:	b480      	push	{r7}
 800e81e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e820:	f3bf 8f4f 	dsb	sy
}
 800e824:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e826:	4b06      	ldr	r3, [pc, #24]	; (800e840 <__NVIC_SystemReset+0x24>)
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e82e:	4904      	ldr	r1, [pc, #16]	; (800e840 <__NVIC_SystemReset+0x24>)
 800e830:	4b04      	ldr	r3, [pc, #16]	; (800e844 <__NVIC_SystemReset+0x28>)
 800e832:	4313      	orrs	r3, r2
 800e834:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e836:	f3bf 8f4f 	dsb	sy
}
 800e83a:	bf00      	nop
    __NOP();
 800e83c:	bf00      	nop
 800e83e:	e7fd      	b.n	800e83c <__NVIC_SystemReset+0x20>
 800e840:	e000ed00 	.word	0xe000ed00
 800e844:	05fa0004 	.word	0x05fa0004

0800e848 <cmd_cali>:
/// @param context
/// @param argc
/// @param argv
/// @return
int cmd_cali(void *context, int argc, char **argv)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_res_read...parm-num:%d\n", argc);
#endif
    if (argc >= 1)
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	dd27      	ble.n	800e8aa <cmd_cali+0x62>
    {
    	if(strcmp(*argv,"a+g")==0)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4915      	ldr	r1, [pc, #84]	; (800e8b4 <cmd_cali+0x6c>)
 800e860:	4618      	mov	r0, r3
 800e862:	f7f1 fcdd 	bl	8000220 <strcmp>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10a      	bne.n	800e882 <cmd_cali+0x3a>
    	{
    		shell_printf("cali a+g \r\n");
 800e86c:	4812      	ldr	r0, [pc, #72]	; (800e8b8 <cmd_cali+0x70>)
 800e86e:	f000 fd41 	bl	800f2f4 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e872:	4b12      	ldr	r3, [pc, #72]	; (800e8bc <cmd_cali+0x74>)
 800e874:	2201      	movs	r2, #1
 800e876:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.cali_flag = 1;
 800e87a:	4b10      	ldr	r3, [pc, #64]	; (800e8bc <cmd_cali+0x74>)
 800e87c:	2201      	movs	r2, #1
 800e87e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    	}
    	if(strcmp(*argv,"mag")==0)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	490e      	ldr	r1, [pc, #56]	; (800e8c0 <cmd_cali+0x78>)
 800e888:	4618      	mov	r0, r3
 800e88a:	f7f1 fcc9 	bl	8000220 <strcmp>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10a      	bne.n	800e8aa <cmd_cali+0x62>
    	{
    		shell_printf("cali mag \r\n");
 800e894:	480b      	ldr	r0, [pc, #44]	; (800e8c4 <cmd_cali+0x7c>)
 800e896:	f000 fd2d 	bl	800f2f4 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e89a:	4b08      	ldr	r3, [pc, #32]	; (800e8bc <cmd_cali+0x74>)
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.cali_flag = 2;
 800e8a2:	4b06      	ldr	r3, [pc, #24]	; (800e8bc <cmd_cali+0x74>)
 800e8a4:	2202      	movs	r2, #2
 800e8a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    	}

    }
    return 0; // 返回执行结果，根据需要进行修改
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3710      	adds	r7, #16
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	08013d88 	.word	0x08013d88
 800e8b8:	08013d8c 	.word	0x08013d8c
 800e8bc:	20002154 	.word	0x20002154
 800e8c0:	08013d98 	.word	0x08013d98
 800e8c4:	08013d9c 	.word	0x08013d9c

0800e8c8 <cmd_reset>:
/// @param context
/// @param argc
/// @param argv
/// @return test ok  24.4.3 liu
int cmd_reset(void *context, int argc, char **argv)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid f" : : : "memory");
 800e8d4:	b671      	cpsid	f
}
 800e8d6:	bf00      	nop
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_reset...parm-num:%d\n", argc);
#endif
    __disable_fault_irq();
    NVIC_SystemReset();
 800e8d8:	f7ff ffa0 	bl	800e81c <__NVIC_SystemReset>

0800e8dc <cmd_restore>:

    return 0; // 返回执行结果，根据需要进行修改
}

int cmd_restore(void *context, int argc, char **argv)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_reset...parm-num:%d\n", argc);
#endif

    HAL_FLASH_Unlock();
 800e8e8:	f7f3 fb56 	bl	8001f98 <HAL_FLASH_Unlock>
    FLASH_ErasePage(USER_FLASH_ADDR_START,1);
 800e8ec:	2101      	movs	r1, #1
 800e8ee:	4808      	ldr	r0, [pc, #32]	; (800e910 <cmd_restore+0x34>)
 800e8f0:	f7ff fd64 	bl	800e3bc <FLASH_ErasePage>
    HAL_Delay(5);
 800e8f4:	2005      	movs	r0, #5
 800e8f6:	f7f3 f8f1 	bl	8001adc <HAL_Delay>
    HAL_FLASH_Unlock();
 800e8fa:	f7f3 fb4d 	bl	8001f98 <HAL_FLASH_Unlock>
    HAL_Delay(500);
 800e8fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e902:	f7f3 f8eb 	bl	8001adc <HAL_Delay>
  __ASM volatile ("cpsid f" : : : "memory");
 800e906:	b671      	cpsid	f
}
 800e908:	bf00      	nop
    __disable_fault_irq();
    NVIC_SystemReset();
 800e90a:	f7ff ff87 	bl	800e81c <__NVIC_SystemReset>
 800e90e:	bf00      	nop
 800e910:	0801f800 	.word	0x0801f800

0800e914 <cmd_output>:
/// @param context
/// @param argc
/// @param argv
/// @return
int cmd_output(void *context, int argc, char **argv)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	607a      	str	r2, [r7, #4]
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_ad_read...parm-num:%d\n", argc);
#endif

    if (argc >= 1)
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	2b00      	cmp	r3, #0
 800e924:	f340 80a8 	ble.w	800ea78 <cmd_output+0x164>
    {
    	if(strcmp(*argv,"euler")==0)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4955      	ldr	r1, [pc, #340]	; (800ea84 <cmd_output+0x170>)
 800e92e:	4618      	mov	r0, r3
 800e930:	f7f1 fc76 	bl	8000220 <strcmp>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10e      	bne.n	800e958 <cmd_output+0x44>
    	{
    		shell_printf("output euler \r\n");
 800e93a:	4853      	ldr	r0, [pc, #332]	; (800ea88 <cmd_output+0x174>)
 800e93c:	f000 fcda 	bl	800f2f4 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e940:	4b52      	ldr	r3, [pc, #328]	; (800ea8c <cmd_output+0x178>)
 800e942:	2201      	movs	r2, #1
 800e944:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800e948:	4b50      	ldr	r3, [pc, #320]	; (800ea8c <cmd_output+0x178>)
 800e94a:	2201      	movs	r2, #1
 800e94c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 0;
 800e950:	4b4e      	ldr	r3, [pc, #312]	; (800ea8c <cmd_output+0x178>)
 800e952:	2200      	movs	r2, #0
 800e954:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}
    	if(strcmp(*argv,"quaternion")==0)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	494c      	ldr	r1, [pc, #304]	; (800ea90 <cmd_output+0x17c>)
 800e95e:	4618      	mov	r0, r3
 800e960:	f7f1 fc5e 	bl	8000220 <strcmp>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10e      	bne.n	800e988 <cmd_output+0x74>
    	{
    		shell_printf("output quaternion \r\n");
 800e96a:	484a      	ldr	r0, [pc, #296]	; (800ea94 <cmd_output+0x180>)
 800e96c:	f000 fcc2 	bl	800f2f4 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e970:	4b46      	ldr	r3, [pc, #280]	; (800ea8c <cmd_output+0x178>)
 800e972:	2201      	movs	r2, #1
 800e974:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800e978:	4b44      	ldr	r3, [pc, #272]	; (800ea8c <cmd_output+0x178>)
 800e97a:	2201      	movs	r2, #1
 800e97c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 1;
 800e980:	4b42      	ldr	r3, [pc, #264]	; (800ea8c <cmd_output+0x178>)
 800e982:	2201      	movs	r2, #1
 800e984:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"earth_a")==0)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4942      	ldr	r1, [pc, #264]	; (800ea98 <cmd_output+0x184>)
 800e98e:	4618      	mov	r0, r3
 800e990:	f7f1 fc46 	bl	8000220 <strcmp>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d10e      	bne.n	800e9b8 <cmd_output+0xa4>
    	{
    		shell_printf("output earth_a \r\n");
 800e99a:	4840      	ldr	r0, [pc, #256]	; (800ea9c <cmd_output+0x188>)
 800e99c:	f000 fcaa 	bl	800f2f4 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e9a0:	4b3a      	ldr	r3, [pc, #232]	; (800ea8c <cmd_output+0x178>)
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800e9a8:	4b38      	ldr	r3, [pc, #224]	; (800ea8c <cmd_output+0x178>)
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 2;
 800e9b0:	4b36      	ldr	r3, [pc, #216]	; (800ea8c <cmd_output+0x178>)
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"acc")==0)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4938      	ldr	r1, [pc, #224]	; (800eaa0 <cmd_output+0x18c>)
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7f1 fc2e 	bl	8000220 <strcmp>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d10e      	bne.n	800e9e8 <cmd_output+0xd4>
    	{
    		shell_printf("output acc \r\n");
 800e9ca:	4836      	ldr	r0, [pc, #216]	; (800eaa4 <cmd_output+0x190>)
 800e9cc:	f000 fc92 	bl	800f2f4 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e9d0:	4b2e      	ldr	r3, [pc, #184]	; (800ea8c <cmd_output+0x178>)
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800e9d8:	4b2c      	ldr	r3, [pc, #176]	; (800ea8c <cmd_output+0x178>)
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 3;
 800e9e0:	4b2a      	ldr	r3, [pc, #168]	; (800ea8c <cmd_output+0x178>)
 800e9e2:	2203      	movs	r2, #3
 800e9e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"gyro")==0)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	492e      	ldr	r1, [pc, #184]	; (800eaa8 <cmd_output+0x194>)
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7f1 fc16 	bl	8000220 <strcmp>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d10e      	bne.n	800ea18 <cmd_output+0x104>
    	{
    		shell_printf("output gyro \r\n");
 800e9fa:	482c      	ldr	r0, [pc, #176]	; (800eaac <cmd_output+0x198>)
 800e9fc:	f000 fc7a 	bl	800f2f4 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800ea00:	4b22      	ldr	r3, [pc, #136]	; (800ea8c <cmd_output+0x178>)
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800ea08:	4b20      	ldr	r3, [pc, #128]	; (800ea8c <cmd_output+0x178>)
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 4;
 800ea10:	4b1e      	ldr	r3, [pc, #120]	; (800ea8c <cmd_output+0x178>)
 800ea12:	2204      	movs	r2, #4
 800ea14:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"mag")==0)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4924      	ldr	r1, [pc, #144]	; (800eab0 <cmd_output+0x19c>)
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7f1 fbfe 	bl	8000220 <strcmp>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10e      	bne.n	800ea48 <cmd_output+0x134>
    	{
    		shell_printf("output mag \r\n");
 800ea2a:	4822      	ldr	r0, [pc, #136]	; (800eab4 <cmd_output+0x1a0>)
 800ea2c:	f000 fc62 	bl	800f2f4 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800ea30:	4b16      	ldr	r3, [pc, #88]	; (800ea8c <cmd_output+0x178>)
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800ea38:	4b14      	ldr	r3, [pc, #80]	; (800ea8c <cmd_output+0x178>)
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 5;
 800ea40:	4b12      	ldr	r3, [pc, #72]	; (800ea8c <cmd_output+0x178>)
 800ea42:	2205      	movs	r2, #5
 800ea44:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"acc_gyro_mag")==0)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	491a      	ldr	r1, [pc, #104]	; (800eab8 <cmd_output+0x1a4>)
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7f1 fbe6 	bl	8000220 <strcmp>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10e      	bne.n	800ea78 <cmd_output+0x164>
    	{
    		shell_printf("output acc_gyro_mag \r\n");
 800ea5a:	4818      	ldr	r0, [pc, #96]	; (800eabc <cmd_output+0x1a8>)
 800ea5c:	f000 fc4a 	bl	800f2f4 <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800ea60:	4b0a      	ldr	r3, [pc, #40]	; (800ea8c <cmd_output+0x178>)
 800ea62:	2201      	movs	r2, #1
 800ea64:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800ea68:	4b08      	ldr	r3, [pc, #32]	; (800ea8c <cmd_output+0x178>)
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 6;
 800ea70:	4b06      	ldr	r3, [pc, #24]	; (800ea8c <cmd_output+0x178>)
 800ea72:	2206      	movs	r2, #6
 800ea74:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}
    }

    return 0; // 返回执行结果，根据需要进行修改
 800ea78:	2300      	movs	r3, #0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	08013da8 	.word	0x08013da8
 800ea88:	08013db0 	.word	0x08013db0
 800ea8c:	20002154 	.word	0x20002154
 800ea90:	08013dc0 	.word	0x08013dc0
 800ea94:	08013dcc 	.word	0x08013dcc
 800ea98:	08013de4 	.word	0x08013de4
 800ea9c:	08013dec 	.word	0x08013dec
 800eaa0:	08013e00 	.word	0x08013e00
 800eaa4:	08013e04 	.word	0x08013e04
 800eaa8:	08013e14 	.word	0x08013e14
 800eaac:	08013e1c 	.word	0x08013e1c
 800eab0:	08013d98 	.word	0x08013d98
 800eab4:	08013e2c 	.word	0x08013e2c
 800eab8:	08013e3c 	.word	0x08013e3c
 800eabc:	08013e4c 	.word	0x08013e4c

0800eac0 <user_shell_init>:
    .tbl = (console_cmds_t *)cmds,
    .prompt = 0,
    .head = {0}};

void user_shell_init(void)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
    char addr_str[10] = {0};
 800eac6:	2300      	movs	r3, #0
 800eac8:	603b      	str	r3, [r7, #0]
 800eaca:	1d3b      	adds	r3, r7, #4
 800eacc:	2200      	movs	r2, #0
 800eace:	601a      	str	r2, [r3, #0]
 800ead0:	809a      	strh	r2, [r3, #4]

    strcpy(console_parm.head, addr_str);
 800ead2:	463b      	mov	r3, r7
 800ead4:	4619      	mov	r1, r3
 800ead6:	4812      	ldr	r0, [pc, #72]	; (800eb20 <user_shell_init+0x60>)
 800ead8:	f001 fd29 	bl	801052e <strcpy>

    console_driver_init(&console_parm);
 800eadc:	4811      	ldr	r0, [pc, #68]	; (800eb24 <user_shell_init+0x64>)
 800eade:	f7ff fe81 	bl	800e7e4 <console_driver_init>
    for (int i = 1; i < sizeof(cmds) / (sizeof(console_cmds_t)); i++) // 链表初始化
 800eae2:	2301      	movs	r3, #1
 800eae4:	60fb      	str	r3, [r7, #12]
 800eae6:	e013      	b.n	800eb10 <user_shell_init+0x50>
    {
        cmds[i - 1].argv1_tbl = &cmds[i];
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	1e5a      	subs	r2, r3, #1
 800eaec:	68f9      	ldr	r1, [r7, #12]
 800eaee:	460b      	mov	r3, r1
 800eaf0:	005b      	lsls	r3, r3, #1
 800eaf2:	440b      	add	r3, r1
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	490c      	ldr	r1, [pc, #48]	; (800eb28 <user_shell_init+0x68>)
 800eaf8:	4419      	add	r1, r3
 800eafa:	480b      	ldr	r0, [pc, #44]	; (800eb28 <user_shell_init+0x68>)
 800eafc:	4613      	mov	r3, r2
 800eafe:	005b      	lsls	r3, r3, #1
 800eb00:	4413      	add	r3, r2
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	4403      	add	r3, r0
 800eb06:	3308      	adds	r3, #8
 800eb08:	6019      	str	r1, [r3, #0]
    for (int i = 1; i < sizeof(cmds) / (sizeof(console_cmds_t)); i++) // 链表初始化
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	60fb      	str	r3, [r7, #12]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	d9e8      	bls.n	800eae8 <user_shell_init+0x28>
    }
}
 800eb16:	bf00      	nop
 800eb18:	bf00      	nop
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	20000220 	.word	0x20000220
 800eb24:	20000210 	.word	0x20000210
 800eb28:	200001e0 	.word	0x200001e0

0800eb2c <user_shell_recive_bytes>:
int user_shell_recive_bytes(uint8_t *data, int len)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800eb36:	2300      	movs	r3, #0
 800eb38:	60fb      	str	r3, [r7, #12]
    ret = shell_console_hande(data, len);
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	4619      	mov	r1, r3
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff fe37 	bl	800e7b4 <shell_console_hande>
 800eb46:	60f8      	str	r0, [r7, #12]

    return ret;
 800eb48:	68fb      	ldr	r3, [r7, #12]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <window_filter>:
 * @param window_Array
 * @param i
 * @param sliding_Window_Length
 */
int16_t window_filter(int16_t data, int16_t *buf, uint8_t len)
{
 800eb52:	b480      	push	{r7}
 800eb54:	b085      	sub	sp, #20
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	4603      	mov	r3, r0
 800eb5a:	6039      	str	r1, [r7, #0]
 800eb5c:	80fb      	strh	r3, [r7, #6]
 800eb5e:	4613      	mov	r3, r2
 800eb60:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	int32_t sum = 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	60bb      	str	r3, [r7, #8]

	for (i = 1; i < len; i++)
 800eb66:	2301      	movs	r3, #1
 800eb68:	73fb      	strb	r3, [r7, #15]
 800eb6a:	e010      	b.n	800eb8e <window_filter+0x3c>
	{
		buf[i - 1] = buf[i];
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
 800eb6e:	005b      	lsls	r3, r3, #1
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	441a      	add	r2, r3
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
 800eb76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	005b      	lsls	r3, r3, #1
 800eb7e:	6839      	ldr	r1, [r7, #0]
 800eb80:	440b      	add	r3, r1
 800eb82:	f9b2 2000 	ldrsh.w	r2, [r2]
 800eb86:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < len; i++)
 800eb88:	7bfb      	ldrb	r3, [r7, #15]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	73fb      	strb	r3, [r7, #15]
 800eb8e:	7bfa      	ldrb	r2, [r7, #15]
 800eb90:	797b      	ldrb	r3, [r7, #5]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d3ea      	bcc.n	800eb6c <window_filter+0x1a>
	}
	buf[len - 1] = data;
 800eb96:	797b      	ldrb	r3, [r7, #5]
 800eb98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	005b      	lsls	r3, r3, #1
 800eba0:	683a      	ldr	r2, [r7, #0]
 800eba2:	4413      	add	r3, r2
 800eba4:	88fa      	ldrh	r2, [r7, #6]
 800eba6:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < len; i++)
 800eba8:	2300      	movs	r3, #0
 800ebaa:	73fb      	strb	r3, [r7, #15]
 800ebac:	e00c      	b.n	800ebc8 <window_filter+0x76>
	{
		sum += buf[i];
 800ebae:	7bfb      	ldrb	r3, [r7, #15]
 800ebb0:	005b      	lsls	r3, r3, #1
 800ebb2:	683a      	ldr	r2, [r7, #0]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < len; i++)
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	73fb      	strb	r3, [r7, #15]
 800ebc8:	7bfa      	ldrb	r2, [r7, #15]
 800ebca:	797b      	ldrb	r3, [r7, #5]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d3ee      	bcc.n	800ebae <window_filter+0x5c>
	}

	sum /= len;
 800ebd0:	797b      	ldrb	r3, [r7, #5]
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	fb92 f3f3 	sdiv	r3, r2, r3
 800ebd8:	60bb      	str	r3, [r7, #8]

	return sum;
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	b21b      	sxth	r3, r3
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3714      	adds	r7, #20
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
	...

0800ebec <read_flash_information>:
int16_t window_my[WIN_NUM];
int16_t window_mz[WIN_NUM];


void read_flash_information(void)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	af00      	add	r7, sp, #0

	STMFLASH_Read(ACC_ZERO_ADDR,(uint8_t*)&imu_9.acc_zero,6); //读取加速度零点
 800ebf0:	2206      	movs	r2, #6
 800ebf2:	493c      	ldr	r1, [pc, #240]	; (800ece4 <read_flash_information+0xf8>)
 800ebf4:	483c      	ldr	r0, [pc, #240]	; (800ece8 <read_flash_information+0xfc>)
 800ebf6:	f7ff fc95 	bl	800e524 <STMFLASH_Read>
	STMFLASH_Read(GYRO_ZERO_ADDR,(uint8_t*)&imu_9.gyro_zero,6); //读取陀螺仪零点
 800ebfa:	2206      	movs	r2, #6
 800ebfc:	493b      	ldr	r1, [pc, #236]	; (800ecec <read_flash_information+0x100>)
 800ebfe:	483c      	ldr	r0, [pc, #240]	; (800ecf0 <read_flash_information+0x104>)
 800ec00:	f7ff fc90 	bl	800e524 <STMFLASH_Read>
	STMFLASH_Read(MAG_ZERO_ADDR,(uint8_t*)&imu_9.mag_zero,6);  //读取磁力计零点
 800ec04:	2206      	movs	r2, #6
 800ec06:	493b      	ldr	r1, [pc, #236]	; (800ecf4 <read_flash_information+0x108>)
 800ec08:	483b      	ldr	r0, [pc, #236]	; (800ecf8 <read_flash_information+0x10c>)
 800ec0a:	f7ff fc8b 	bl	800e524 <STMFLASH_Read>

    if(imu_9.acc_zero[0]==-1) //默认0点是0
 800ec0e:	4b3b      	ldr	r3, [pc, #236]	; (800ecfc <read_flash_information+0x110>)
 800ec10:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ec14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec18:	d103      	bne.n	800ec22 <read_flash_information+0x36>
    {
    	imu_9.acc_zero[0] = 0;
 800ec1a:	4b38      	ldr	r3, [pc, #224]	; (800ecfc <read_flash_information+0x110>)
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    }
    if(imu_9.acc_zero[1]==-1)
 800ec22:	4b36      	ldr	r3, [pc, #216]	; (800ecfc <read_flash_information+0x110>)
 800ec24:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ec28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2c:	d103      	bne.n	800ec36 <read_flash_information+0x4a>
    {
    	imu_9.acc_zero[1] = 0;
 800ec2e:	4b33      	ldr	r3, [pc, #204]	; (800ecfc <read_flash_information+0x110>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    }
    if(imu_9.acc_zero[2]==-1)
 800ec36:	4b31      	ldr	r3, [pc, #196]	; (800ecfc <read_flash_information+0x110>)
 800ec38:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ec3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec40:	d103      	bne.n	800ec4a <read_flash_information+0x5e>
    {
    	imu_9.acc_zero[2] = 0;
 800ec42:	4b2e      	ldr	r3, [pc, #184]	; (800ecfc <read_flash_information+0x110>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    if(imu_9.gyro_zero[0]==-1)
 800ec4a:	4b2c      	ldr	r3, [pc, #176]	; (800ecfc <read_flash_information+0x110>)
 800ec4c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ec50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec54:	d103      	bne.n	800ec5e <read_flash_information+0x72>
    {
    	imu_9.gyro_zero[0] = 0;
 800ec56:	4b29      	ldr	r3, [pc, #164]	; (800ecfc <read_flash_information+0x110>)
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    }
    if(imu_9.gyro_zero[1]==-1)
 800ec5e:	4b27      	ldr	r3, [pc, #156]	; (800ecfc <read_flash_information+0x110>)
 800ec60:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800ec64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec68:	d103      	bne.n	800ec72 <read_flash_information+0x86>
    {
    	imu_9.gyro_zero[1] = 0;
 800ec6a:	4b24      	ldr	r3, [pc, #144]	; (800ecfc <read_flash_information+0x110>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }
    if(imu_9.gyro_zero[2]==-1)
 800ec72:	4b22      	ldr	r3, [pc, #136]	; (800ecfc <read_flash_information+0x110>)
 800ec74:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ec78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec7c:	d103      	bne.n	800ec86 <read_flash_information+0x9a>
    {
    	imu_9.acc_zero[2] = 0;
 800ec7e:	4b1f      	ldr	r3, [pc, #124]	; (800ecfc <read_flash_information+0x110>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    if(imu_9.mag_zero[0]==-1)
 800ec86:	4b1d      	ldr	r3, [pc, #116]	; (800ecfc <read_flash_information+0x110>)
 800ec88:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800ec8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec90:	d103      	bne.n	800ec9a <read_flash_information+0xae>
    {
    	imu_9.mag_zero[0] = 0;
 800ec92:	4b1a      	ldr	r3, [pc, #104]	; (800ecfc <read_flash_information+0x110>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    }
    if(imu_9.mag_zero[1]==-1)
 800ec9a:	4b18      	ldr	r3, [pc, #96]	; (800ecfc <read_flash_information+0x110>)
 800ec9c:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800eca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca4:	d103      	bne.n	800ecae <read_flash_information+0xc2>
    {
    	imu_9.mag_zero[1] = 0;
 800eca6:	4b15      	ldr	r3, [pc, #84]	; (800ecfc <read_flash_information+0x110>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
    if(imu_9.mag_zero[2]==-1)
 800ecae:	4b13      	ldr	r3, [pc, #76]	; (800ecfc <read_flash_information+0x110>)
 800ecb0:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800ecb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb8:	d103      	bne.n	800ecc2 <read_flash_information+0xd6>
    {
    	imu_9.mag_zero[2] = 0;
 800ecba:	4b10      	ldr	r3, [pc, #64]	; (800ecfc <read_flash_information+0x110>)
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    }


    STMFLASH_Read(OUTPUT_ADDR,(uint8_t*)&imu_9.output_mode,1); //读取数据输出模式
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	490e      	ldr	r1, [pc, #56]	; (800ed00 <read_flash_information+0x114>)
 800ecc6:	480f      	ldr	r0, [pc, #60]	; (800ed04 <read_flash_information+0x118>)
 800ecc8:	f7ff fc2c 	bl	800e524 <STMFLASH_Read>
    if(imu_9.output_mode==0xFF)
 800eccc:	4b0b      	ldr	r3, [pc, #44]	; (800ecfc <read_flash_information+0x110>)
 800ecce:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ecd2:	2bff      	cmp	r3, #255	; 0xff
 800ecd4:	d103      	bne.n	800ecde <read_flash_information+0xf2>
    {
    	imu_9.output_mode = 0; //默认欧拉角输出
 800ecd6:	4b09      	ldr	r3, [pc, #36]	; (800ecfc <read_flash_information+0x110>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    }

}
 800ecde:	bf00      	nop
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	2000219a 	.word	0x2000219a
 800ece8:	0801f800 	.word	0x0801f800
 800ecec:	20002194 	.word	0x20002194
 800ecf0:	0801f806 	.word	0x0801f806
 800ecf4:	200021a0 	.word	0x200021a0
 800ecf8:	0801f80c 	.word	0x0801f80c
 800ecfc:	20002154 	.word	0x20002154
 800ed00:	200021dd 	.word	0x200021dd
 800ed04:	0801f812 	.word	0x0801f812

0800ed08 <imu_init>:


void imu_init(void)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
	uint8_t test_id_ag = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	71fb      	strb	r3, [r7, #7]
	uint8_t test_id_mag = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	71bb      	strb	r3, [r7, #6]

	test_id_ag = acc_gyro_init();
 800ed16:	f7fd fc1b 	bl	800c550 <acc_gyro_init>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	71fb      	strb	r3, [r7, #7]
    test_id_mag = mag_init();
 800ed1e:	f7fd fd93 	bl	800c848 <mag_init>
 800ed22:	4603      	mov	r3, r0
 800ed24:	71bb      	strb	r3, [r7, #6]

    read_flash_information();
 800ed26:	f7ff ff61 	bl	800ebec <read_flash_information>
    init_attitude(&attitude);
 800ed2a:	4806      	ldr	r0, [pc, #24]	; (800ed44 <imu_init+0x3c>)
 800ed2c:	f7fd ff06 	bl	800cb3c <init_attitude>

    HAL_Delay(100);
 800ed30:	2064      	movs	r0, #100	; 0x64
 800ed32:	f7f2 fed3 	bl	8001adc <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim2);
 800ed36:	4804      	ldr	r0, [pc, #16]	; (800ed48 <imu_init+0x40>)
 800ed38:	f7f7 f874 	bl	8005e24 <HAL_TIM_Base_Start_IT>
}
 800ed3c:	bf00      	nop
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	2000178c 	.word	0x2000178c
 800ed48:	200004c0 	.word	0x200004c0

0800ed4c <imu_sample_data>:


void imu_sample_data(void)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	af00      	add	r7, sp, #0
	acc_gyro_sample_data(imu_9.i_gyro,imu_9.i_acc);
 800ed50:	4904      	ldr	r1, [pc, #16]	; (800ed64 <imu_sample_data+0x18>)
 800ed52:	4805      	ldr	r0, [pc, #20]	; (800ed68 <imu_sample_data+0x1c>)
 800ed54:	f7fd fc3a 	bl	800c5cc <acc_gyro_sample_data>
	mag_sample_data(imu_9.i_mag);
 800ed58:	4804      	ldr	r0, [pc, #16]	; (800ed6c <imu_sample_data+0x20>)
 800ed5a:	f7fd fd43 	bl	800c7e4 <mag_sample_data>

//    usb_printf("gyro_x=%d , gyro_y=%d,gyro_z=%d\r\n",imu_9.i_gyro[0],imu_9.i_gyro[1],imu_9.i_gyro[2]);
//    usb_printf("acc_x=%d , acc_y=%d,acc_z=%d\r\n",imu_9.i_acc[0],imu_9.i_acc[1],imu_9.i_acc[2]);
//    usb_printf("mag_x=%d , mag_y=%d,mag_z=%d\r\n",imu_9.i_mag[0],imu_9.i_mag[1],imu_9.i_mag[2]);
//	usb_printf("\r\n");
}
 800ed5e:	bf00      	nop
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	2000215a 	.word	0x2000215a
 800ed68:	20002154 	.word	0x20002154
 800ed6c:	20002160 	.word	0x20002160

0800ed70 <imu_data_transition>:

//将九轴数据转换为实际物理数据
void imu_data_transition(int16_t ax,int16_t ay,int16_t az,int16_t gx,int16_t gy,int16_t gz,int16_t mx,int16_t my,int16_t mz)
{
 800ed70:	b490      	push	{r4, r7}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	4604      	mov	r4, r0
 800ed78:	4608      	mov	r0, r1
 800ed7a:	4611      	mov	r1, r2
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	4623      	mov	r3, r4
 800ed80:	80fb      	strh	r3, [r7, #6]
 800ed82:	4603      	mov	r3, r0
 800ed84:	80bb      	strh	r3, [r7, #4]
 800ed86:	460b      	mov	r3, r1
 800ed88:	807b      	strh	r3, [r7, #2]
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	803b      	strh	r3, [r7, #0]

	imu_9.f_acc[0] = (float)(ax-imu_9.acc_zero[0])/ 16393.0f;  // 加速度量程为:±2G      获取到的加速度计数据 除以 16393 ，可以转化为带物理单位的数据，单位：g(m/s^2)
 800ed8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed92:	4a4e      	ldr	r2, [pc, #312]	; (800eecc <imu_data_transition+0x15c>)
 800ed94:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800ed98:	1a9b      	subs	r3, r3, r2
 800ed9a:	ee07 3a90 	vmov	s15, r3
 800ed9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eda2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800eed0 <imu_data_transition+0x160>
 800eda6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edaa:	4b48      	ldr	r3, [pc, #288]	; (800eecc <imu_data_transition+0x15c>)
 800edac:	edc3 7a08 	vstr	s15, [r3, #32]
	imu_9.f_acc[1] = (float)(ay-imu_9.acc_zero[1]) / 16393.0f;
 800edb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800edb4:	4a45      	ldr	r2, [pc, #276]	; (800eecc <imu_data_transition+0x15c>)
 800edb6:	f9b2 2048 	ldrsh.w	r2, [r2, #72]	; 0x48
 800edba:	1a9b      	subs	r3, r3, r2
 800edbc:	ee07 3a90 	vmov	s15, r3
 800edc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800edc4:	eddf 6a42 	vldr	s13, [pc, #264]	; 800eed0 <imu_data_transition+0x160>
 800edc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edcc:	4b3f      	ldr	r3, [pc, #252]	; (800eecc <imu_data_transition+0x15c>)
 800edce:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu_9.f_acc[2] = (float)(az-imu_9.acc_zero[2]) / 16393.0f;
 800edd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800edd6:	4a3d      	ldr	r2, [pc, #244]	; (800eecc <imu_data_transition+0x15c>)
 800edd8:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800eddc:	1a9b      	subs	r3, r3, r2
 800edde:	ee07 3a90 	vmov	s15, r3
 800ede2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ede6:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800eed0 <imu_data_transition+0x160>
 800edea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edee:	4b37      	ldr	r3, [pc, #220]	; (800eecc <imu_data_transition+0x15c>)
 800edf0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	imu_9.f_gyro[0] = (float)(gx-imu_9.gyro_zero[0]) / 57.1f; //  陀螺仪量程为:±500dps  获取到的陀螺仪数据除以 57.1，    可以转化为带物理单位的数据，单位为：°/s
 800edf4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800edf8:	4a34      	ldr	r2, [pc, #208]	; (800eecc <imu_data_transition+0x15c>)
 800edfa:	f9b2 2040 	ldrsh.w	r2, [r2, #64]	; 0x40
 800edfe:	1a9b      	subs	r3, r3, r2
 800ee00:	ee07 3a90 	vmov	s15, r3
 800ee04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee08:	eddf 6a32 	vldr	s13, [pc, #200]	; 800eed4 <imu_data_transition+0x164>
 800ee0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee10:	4b2e      	ldr	r3, [pc, #184]	; (800eecc <imu_data_transition+0x15c>)
 800ee12:	edc3 7a05 	vstr	s15, [r3, #20]
	imu_9.f_gyro[1] = (float)(gy-imu_9.gyro_zero[1]) / 57.1f;
 800ee16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ee1a:	4a2c      	ldr	r2, [pc, #176]	; (800eecc <imu_data_transition+0x15c>)
 800ee1c:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 800ee20:	1a9b      	subs	r3, r3, r2
 800ee22:	ee07 3a90 	vmov	s15, r3
 800ee26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee2a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800eed4 <imu_data_transition+0x164>
 800ee2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee32:	4b26      	ldr	r3, [pc, #152]	; (800eecc <imu_data_transition+0x15c>)
 800ee34:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_9.f_gyro[2] = (float)(gz-imu_9.gyro_zero[2]) / 57.1f;
 800ee38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee3c:	4a23      	ldr	r2, [pc, #140]	; (800eecc <imu_data_transition+0x15c>)
 800ee3e:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	; 0x44
 800ee42:	1a9b      	subs	r3, r3, r2
 800ee44:	ee07 3a90 	vmov	s15, r3
 800ee48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee4c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800eed4 <imu_data_transition+0x164>
 800ee50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee54:	4b1d      	ldr	r3, [pc, #116]	; (800eecc <imu_data_transition+0x15c>)
 800ee56:	edc3 7a07 	vstr	s15, [r3, #28]

	imu_9.f_mag[0] = (float)(mx+imu_9.mag_zero[0]) * 1.5f;
 800ee5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ee5e:	4a1b      	ldr	r2, [pc, #108]	; (800eecc <imu_data_transition+0x15c>)
 800ee60:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800ee64:	4413      	add	r3, r2
 800ee66:	ee07 3a90 	vmov	s15, r3
 800ee6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee6e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800ee72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee76:	4b15      	ldr	r3, [pc, #84]	; (800eecc <imu_data_transition+0x15c>)
 800ee78:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	imu_9.f_mag[1] = (float)(my+imu_9.mag_zero[1]) * 1.5f;
 800ee7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ee80:	4a12      	ldr	r2, [pc, #72]	; (800eecc <imu_data_transition+0x15c>)
 800ee82:	f9b2 204e 	ldrsh.w	r2, [r2, #78]	; 0x4e
 800ee86:	4413      	add	r3, r2
 800ee88:	ee07 3a90 	vmov	s15, r3
 800ee8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee90:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800ee94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee98:	4b0c      	ldr	r3, [pc, #48]	; (800eecc <imu_data_transition+0x15c>)
 800ee9a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	imu_9.f_mag[2] = (float)(mz+imu_9.mag_zero[2]) * 1.5f;
 800ee9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eea2:	4a0a      	ldr	r2, [pc, #40]	; (800eecc <imu_data_transition+0x15c>)
 800eea4:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800eea8:	4413      	add	r3, r2
 800eeaa:	ee07 3a90 	vmov	s15, r3
 800eeae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eeb2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800eeb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eeba:	4b04      	ldr	r3, [pc, #16]	; (800eecc <imu_data_transition+0x15c>)
 800eebc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34



}
 800eec0:	bf00      	nop
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bc90      	pop	{r4, r7}
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	20002154 	.word	0x20002154
 800eed0:	46801200 	.word	0x46801200
 800eed4:	42646666 	.word	0x42646666

0800eed8 <imu_final_data_get>:

void imu_final_data_get(void)
{
 800eed8:	b590      	push	{r4, r7, lr}
 800eeda:	b08d      	sub	sp, #52	; 0x34
 800eedc:	af06      	add	r7, sp, #24
	int16_t filter_ax ,filter_ay,filter_az ;
	int16_t filter_gx ,filter_gy,filter_gz ;
	int16_t filter_mx ,filter_my,filter_mz ;

	  imu_sample_data(); //采样得到九轴原始数据
 800eede:	f7ff ff35 	bl	800ed4c <imu_sample_data>
	  //原始数据窗口滤波
	  filter_ax = window_filter(imu_9.i_acc[0],window_ax,WIN_NUM);
 800eee2:	4b3c      	ldr	r3, [pc, #240]	; (800efd4 <imu_final_data_get+0xfc>)
 800eee4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800eee8:	2205      	movs	r2, #5
 800eeea:	493b      	ldr	r1, [pc, #236]	; (800efd8 <imu_final_data_get+0x100>)
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff fe30 	bl	800eb52 <window_filter>
 800eef2:	4603      	mov	r3, r0
 800eef4:	82fb      	strh	r3, [r7, #22]
	  filter_ay = window_filter(imu_9.i_acc[1],window_ay,WIN_NUM);
 800eef6:	4b37      	ldr	r3, [pc, #220]	; (800efd4 <imu_final_data_get+0xfc>)
 800eef8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eefc:	2205      	movs	r2, #5
 800eefe:	4937      	ldr	r1, [pc, #220]	; (800efdc <imu_final_data_get+0x104>)
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff fe26 	bl	800eb52 <window_filter>
 800ef06:	4603      	mov	r3, r0
 800ef08:	82bb      	strh	r3, [r7, #20]
	  filter_az = window_filter(imu_9.i_acc[2],window_az,WIN_NUM);
 800ef0a:	4b32      	ldr	r3, [pc, #200]	; (800efd4 <imu_final_data_get+0xfc>)
 800ef0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ef10:	2205      	movs	r2, #5
 800ef12:	4933      	ldr	r1, [pc, #204]	; (800efe0 <imu_final_data_get+0x108>)
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7ff fe1c 	bl	800eb52 <window_filter>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	827b      	strh	r3, [r7, #18]

	  filter_gx = window_filter(imu_9.i_gyro[0],window_gx,WIN_NUM);
 800ef1e:	4b2d      	ldr	r3, [pc, #180]	; (800efd4 <imu_final_data_get+0xfc>)
 800ef20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef24:	2205      	movs	r2, #5
 800ef26:	492f      	ldr	r1, [pc, #188]	; (800efe4 <imu_final_data_get+0x10c>)
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7ff fe12 	bl	800eb52 <window_filter>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	823b      	strh	r3, [r7, #16]
	  filter_gy = window_filter(imu_9.i_gyro[1],window_gy,WIN_NUM);
 800ef32:	4b28      	ldr	r3, [pc, #160]	; (800efd4 <imu_final_data_get+0xfc>)
 800ef34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef38:	2205      	movs	r2, #5
 800ef3a:	492b      	ldr	r1, [pc, #172]	; (800efe8 <imu_final_data_get+0x110>)
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fe08 	bl	800eb52 <window_filter>
 800ef42:	4603      	mov	r3, r0
 800ef44:	81fb      	strh	r3, [r7, #14]
	  filter_gz = window_filter(imu_9.i_gyro[2],window_gz,WIN_NUM);
 800ef46:	4b23      	ldr	r3, [pc, #140]	; (800efd4 <imu_final_data_get+0xfc>)
 800ef48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ef4c:	2205      	movs	r2, #5
 800ef4e:	4927      	ldr	r1, [pc, #156]	; (800efec <imu_final_data_get+0x114>)
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7ff fdfe 	bl	800eb52 <window_filter>
 800ef56:	4603      	mov	r3, r0
 800ef58:	81bb      	strh	r3, [r7, #12]

	  filter_mx = window_filter(imu_9.i_mag[0],window_mx,WIN_NUM);
 800ef5a:	4b1e      	ldr	r3, [pc, #120]	; (800efd4 <imu_final_data_get+0xfc>)
 800ef5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ef60:	2205      	movs	r2, #5
 800ef62:	4923      	ldr	r1, [pc, #140]	; (800eff0 <imu_final_data_get+0x118>)
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7ff fdf4 	bl	800eb52 <window_filter>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	817b      	strh	r3, [r7, #10]
	  filter_my = window_filter(imu_9.i_mag[1],window_my,WIN_NUM);
 800ef6e:	4b19      	ldr	r3, [pc, #100]	; (800efd4 <imu_final_data_get+0xfc>)
 800ef70:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ef74:	2205      	movs	r2, #5
 800ef76:	491f      	ldr	r1, [pc, #124]	; (800eff4 <imu_final_data_get+0x11c>)
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7ff fdea 	bl	800eb52 <window_filter>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	813b      	strh	r3, [r7, #8]
	  filter_mz = window_filter(imu_9.i_mag[2],window_mz,WIN_NUM);
 800ef82:	4b14      	ldr	r3, [pc, #80]	; (800efd4 <imu_final_data_get+0xfc>)
 800ef84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800ef88:	2205      	movs	r2, #5
 800ef8a:	491b      	ldr	r1, [pc, #108]	; (800eff8 <imu_final_data_get+0x120>)
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7ff fde0 	bl	800eb52 <window_filter>
 800ef92:	4603      	mov	r3, r0
 800ef94:	80fb      	strh	r3, [r7, #6]
	  //转换成实际物理量
	  imu_data_transition(filter_ax,filter_ay,filter_az,filter_gx,filter_gy,filter_gz,filter_mx,filter_my,filter_mz);
 800ef96:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 800ef9a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ef9e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800efa2:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800efa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efaa:	9304      	str	r3, [sp, #16]
 800efac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800efb0:	9303      	str	r3, [sp, #12]
 800efb2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800efb6:	9302      	str	r3, [sp, #8]
 800efb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800efbc:	9301      	str	r3, [sp, #4]
 800efbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	4623      	mov	r3, r4
 800efc6:	f7ff fed3 	bl	800ed70 <imu_data_transition>

}
 800efca:	bf00      	nop
 800efcc:	371c      	adds	r7, #28
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd90      	pop	{r4, r7, pc}
 800efd2:	bf00      	nop
 800efd4:	20002154 	.word	0x20002154
 800efd8:	200021e0 	.word	0x200021e0
 800efdc:	200021ec 	.word	0x200021ec
 800efe0:	200021f8 	.word	0x200021f8
 800efe4:	20002204 	.word	0x20002204
 800efe8:	20002210 	.word	0x20002210
 800efec:	2000221c 	.word	0x2000221c
 800eff0:	20002228 	.word	0x20002228
 800eff4:	20002234 	.word	0x20002234
 800eff8:	20002240 	.word	0x20002240

0800effc <imu_9_shell_cmd_to_do>:


void imu_9_shell_cmd_to_do(void)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	af00      	add	r7, sp, #0
	if(imu_9.shell_cmd_ok==1)
 800f000:	4b1a      	ldr	r3, [pc, #104]	; (800f06c <imu_9_shell_cmd_to_do+0x70>)
 800f002:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f006:	2b01      	cmp	r3, #1
 800f008:	d12d      	bne.n	800f066 <imu_9_shell_cmd_to_do+0x6a>
	{
		imu_9.shell_cmd_ok = 0;
 800f00a:	4b18      	ldr	r3, [pc, #96]	; (800f06c <imu_9_shell_cmd_to_do+0x70>)
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	    if(imu_9.cali_flag!=0)  //校准
 800f012:	4b16      	ldr	r3, [pc, #88]	; (800f06c <imu_9_shell_cmd_to_do+0x70>)
 800f014:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d016      	beq.n	800f04a <imu_9_shell_cmd_to_do+0x4e>
	    {
	    	if(imu_9.cali_flag==1)
 800f01c:	4b13      	ldr	r3, [pc, #76]	; (800f06c <imu_9_shell_cmd_to_do+0x70>)
 800f01e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f022:	2b01      	cmp	r3, #1
 800f024:	d106      	bne.n	800f034 <imu_9_shell_cmd_to_do+0x38>
	    	{
	    		set_acc_gyro_offset();
 800f026:	f7fd fb2f 	bl	800c688 <set_acc_gyro_offset>
	    		imu_9.cali_flag = 0;
 800f02a:	4b10      	ldr	r3, [pc, #64]	; (800f06c <imu_9_shell_cmd_to_do+0x70>)
 800f02c:	2200      	movs	r2, #0
 800f02e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800f032:	e00a      	b.n	800f04a <imu_9_shell_cmd_to_do+0x4e>
	    	}
	    	else if(imu_9.cali_flag==2)
 800f034:	4b0d      	ldr	r3, [pc, #52]	; (800f06c <imu_9_shell_cmd_to_do+0x70>)
 800f036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d105      	bne.n	800f04a <imu_9_shell_cmd_to_do+0x4e>
	    	{
	    		mag_set_offset();
 800f03e:	f7fd fc4b 	bl	800c8d8 <mag_set_offset>
	    		imu_9.cali_flag = 0;
 800f042:	4b0a      	ldr	r3, [pc, #40]	; (800f06c <imu_9_shell_cmd_to_do+0x70>)
 800f044:	2200      	movs	r2, #0
 800f046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	    	}
	    }
	    if(imu_9.output_flag!=0)  //数据输出
 800f04a:	4b08      	ldr	r3, [pc, #32]	; (800f06c <imu_9_shell_cmd_to_do+0x70>)
 800f04c:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800f050:	2b00      	cmp	r3, #0
 800f052:	d008      	beq.n	800f066 <imu_9_shell_cmd_to_do+0x6a>
	    {
	    	STMFLASH_Write(OUTPUT_ADDR,&imu_9.output_mode,1);
 800f054:	2201      	movs	r2, #1
 800f056:	4906      	ldr	r1, [pc, #24]	; (800f070 <imu_9_shell_cmd_to_do+0x74>)
 800f058:	4806      	ldr	r0, [pc, #24]	; (800f074 <imu_9_shell_cmd_to_do+0x78>)
 800f05a:	f7ff f9d5 	bl	800e408 <STMFLASH_Write>
	    	imu_9.output_flag = 0;
 800f05e:	4b03      	ldr	r3, [pc, #12]	; (800f06c <imu_9_shell_cmd_to_do+0x70>)
 800f060:	2200      	movs	r2, #0
 800f062:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	    }

	}

}
 800f066:	bf00      	nop
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	20002154 	.word	0x20002154
 800f070:	200021dd 	.word	0x200021dd
 800f074:	0801f812 	.word	0x0801f812

0800f078 <data_output_mode>:

void data_output_mode(uint8_t mode)  //数据输出模式,vofa+查看曲线图形
{
 800f078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f07c:	b09c      	sub	sp, #112	; 0x70
 800f07e:	af10      	add	r7, sp, #64	; 0x40
 800f080:	4603      	mov	r3, r0
 800f082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	switch(mode)
 800f086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f08a:	2b06      	cmp	r3, #6
 800f08c:	f200 80ea 	bhi.w	800f264 <data_output_mode+0x1ec>
 800f090:	a201      	add	r2, pc, #4	; (adr r2, 800f098 <data_output_mode+0x20>)
 800f092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f096:	bf00      	nop
 800f098:	0800f0b5 	.word	0x0800f0b5
 800f09c:	0800f0dd 	.word	0x0800f0dd
 800f0a0:	0800f10b 	.word	0x0800f10b
 800f0a4:	0800f133 	.word	0x0800f133
 800f0a8:	0800f15b 	.word	0x0800f15b
 800f0ac:	0800f183 	.word	0x0800f183
 800f0b0:	0800f1ab 	.word	0x0800f1ab
	{
	case 0:  //欧拉角输出
		vofa_FireWater_USB_output(attitude.data.rol, attitude.data.pitch, attitude.data.yaw,0.0f);
 800f0b4:	4b6e      	ldr	r3, [pc, #440]	; (800f270 <data_output_mode+0x1f8>)
 800f0b6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800f0ba:	4b6d      	ldr	r3, [pc, #436]	; (800f270 <data_output_mode+0x1f8>)
 800f0bc:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800f0c0:	4b6b      	ldr	r3, [pc, #428]	; (800f270 <data_output_mode+0x1f8>)
 800f0c2:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800f0c6:	eddf 1a6b 	vldr	s3, [pc, #428]	; 800f274 <data_output_mode+0x1fc>
 800f0ca:	eeb0 1a66 	vmov.f32	s2, s13
 800f0ce:	eef0 0a47 	vmov.f32	s1, s14
 800f0d2:	eeb0 0a67 	vmov.f32	s0, s15
 800f0d6:	f000 f933 	bl	800f340 <vofa_FireWater_USB_output>
		break;
 800f0da:	e0c4      	b.n	800f266 <data_output_mode+0x1ee>
	case 1: //四元数输出
		vofa_FireWater_USB_output(attitude.process.quaternion[0],attitude.process.quaternion[1],attitude.process.quaternion[2],attitude.process.quaternion[3]);
 800f0dc:	4b64      	ldr	r3, [pc, #400]	; (800f270 <data_output_mode+0x1f8>)
 800f0de:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800f0e2:	4b63      	ldr	r3, [pc, #396]	; (800f270 <data_output_mode+0x1f8>)
 800f0e4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800f0e8:	4b61      	ldr	r3, [pc, #388]	; (800f270 <data_output_mode+0x1f8>)
 800f0ea:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800f0ee:	4b60      	ldr	r3, [pc, #384]	; (800f270 <data_output_mode+0x1f8>)
 800f0f0:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800f0f4:	eef0 1a46 	vmov.f32	s3, s12
 800f0f8:	eeb0 1a66 	vmov.f32	s2, s13
 800f0fc:	eef0 0a47 	vmov.f32	s1, s14
 800f100:	eeb0 0a67 	vmov.f32	s0, s15
 800f104:	f000 f91c 	bl	800f340 <vofa_FireWater_USB_output>

		break;
 800f108:	e0ad      	b.n	800f266 <data_output_mode+0x1ee>
	case 2://世界加速度输出
		vofa_FireWater_USB_output(attitude.data.acc_world.x,attitude.data.acc_world.y,attitude.data.acc_world.z,2.0f);
 800f10a:	4b59      	ldr	r3, [pc, #356]	; (800f270 <data_output_mode+0x1f8>)
 800f10c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f110:	4b57      	ldr	r3, [pc, #348]	; (800f270 <data_output_mode+0x1f8>)
 800f112:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f116:	4b56      	ldr	r3, [pc, #344]	; (800f270 <data_output_mode+0x1f8>)
 800f118:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800f11c:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800f120:	eeb0 1a66 	vmov.f32	s2, s13
 800f124:	eef0 0a47 	vmov.f32	s1, s14
 800f128:	eeb0 0a67 	vmov.f32	s0, s15
 800f12c:	f000 f908 	bl	800f340 <vofa_FireWater_USB_output>
		break;
 800f130:	e099      	b.n	800f266 <data_output_mode+0x1ee>
	case 3://加速度 数据输出  单位：g(m/s^2)
		vofa_FireWater_USB_output(imu_9.f_acc[0],imu_9.f_acc[1],imu_9.f_acc[2],3.0f);
 800f132:	4b51      	ldr	r3, [pc, #324]	; (800f278 <data_output_mode+0x200>)
 800f134:	edd3 7a08 	vldr	s15, [r3, #32]
 800f138:	4b4f      	ldr	r3, [pc, #316]	; (800f278 <data_output_mode+0x200>)
 800f13a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f13e:	4b4e      	ldr	r3, [pc, #312]	; (800f278 <data_output_mode+0x200>)
 800f140:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800f144:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 800f148:	eeb0 1a66 	vmov.f32	s2, s13
 800f14c:	eef0 0a47 	vmov.f32	s1, s14
 800f150:	eeb0 0a67 	vmov.f32	s0, s15
 800f154:	f000 f8f4 	bl	800f340 <vofa_FireWater_USB_output>
		break;
 800f158:	e085      	b.n	800f266 <data_output_mode+0x1ee>
	case 4://陀螺仪数据输出  单位为：°/s
		vofa_FireWater_USB_output(imu_9.f_gyro[0],imu_9.f_gyro[1],imu_9.f_gyro[2],4.0f);
 800f15a:	4b47      	ldr	r3, [pc, #284]	; (800f278 <data_output_mode+0x200>)
 800f15c:	edd3 7a05 	vldr	s15, [r3, #20]
 800f160:	4b45      	ldr	r3, [pc, #276]	; (800f278 <data_output_mode+0x200>)
 800f162:	ed93 7a06 	vldr	s14, [r3, #24]
 800f166:	4b44      	ldr	r3, [pc, #272]	; (800f278 <data_output_mode+0x200>)
 800f168:	edd3 6a07 	vldr	s13, [r3, #28]
 800f16c:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800f170:	eeb0 1a66 	vmov.f32	s2, s13
 800f174:	eef0 0a47 	vmov.f32	s1, s14
 800f178:	eeb0 0a67 	vmov.f32	s0, s15
 800f17c:	f000 f8e0 	bl	800f340 <vofa_FireWater_USB_output>
		break;
 800f180:	e071      	b.n	800f266 <data_output_mode+0x1ee>
	case 5://地磁数据输出
		vofa_FireWater_USB_output(imu_9.f_mag[0],imu_9.f_mag[1],imu_9.f_mag[2],5.0f);
 800f182:	4b3d      	ldr	r3, [pc, #244]	; (800f278 <data_output_mode+0x200>)
 800f184:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f188:	4b3b      	ldr	r3, [pc, #236]	; (800f278 <data_output_mode+0x200>)
 800f18a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800f18e:	4b3a      	ldr	r3, [pc, #232]	; (800f278 <data_output_mode+0x200>)
 800f190:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800f194:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 800f198:	eeb0 1a66 	vmov.f32	s2, s13
 800f19c:	eef0 0a47 	vmov.f32	s1, s14
 800f1a0:	eeb0 0a67 	vmov.f32	s0, s15
 800f1a4:	f000 f8cc 	bl	800f340 <vofa_FireWater_USB_output>
		break;
 800f1a8:	e05d      	b.n	800f266 <data_output_mode+0x1ee>
	case 6://地磁数据输出
		usb_printf("simples:%f,%f,%f,%f,%f,%f,%f,%f,%f\n",imu_9.f_acc[0],imu_9.f_acc[1],imu_9.f_acc[2],imu_9.f_gyro[0],imu_9.f_gyro[1],imu_9.f_gyro[2],imu_9.f_mag[0],imu_9.f_mag[1],imu_9.f_mag[2]);
 800f1aa:	4b33      	ldr	r3, [pc, #204]	; (800f278 <data_output_mode+0x200>)
 800f1ac:	6a1b      	ldr	r3, [r3, #32]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7f1 fa02 	bl	80005b8 <__aeabi_f2d>
 800f1b4:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800f1b8:	4b2f      	ldr	r3, [pc, #188]	; (800f278 <data_output_mode+0x200>)
 800f1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7f1 f9fb 	bl	80005b8 <__aeabi_f2d>
 800f1c2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800f1c6:	4b2c      	ldr	r3, [pc, #176]	; (800f278 <data_output_mode+0x200>)
 800f1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7f1 f9f4 	bl	80005b8 <__aeabi_f2d>
 800f1d0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800f1d4:	4b28      	ldr	r3, [pc, #160]	; (800f278 <data_output_mode+0x200>)
 800f1d6:	695b      	ldr	r3, [r3, #20]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7f1 f9ed 	bl	80005b8 <__aeabi_f2d>
 800f1de:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800f1e2:	4b25      	ldr	r3, [pc, #148]	; (800f278 <data_output_mode+0x200>)
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7f1 f9e6 	bl	80005b8 <__aeabi_f2d>
 800f1ec:	e9c7 0100 	strd	r0, r1, [r7]
 800f1f0:	4b21      	ldr	r3, [pc, #132]	; (800f278 <data_output_mode+0x200>)
 800f1f2:	69db      	ldr	r3, [r3, #28]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7f1 f9df 	bl	80005b8 <__aeabi_f2d>
 800f1fa:	4682      	mov	sl, r0
 800f1fc:	468b      	mov	fp, r1
 800f1fe:	4b1e      	ldr	r3, [pc, #120]	; (800f278 <data_output_mode+0x200>)
 800f200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f202:	4618      	mov	r0, r3
 800f204:	f7f1 f9d8 	bl	80005b8 <__aeabi_f2d>
 800f208:	4680      	mov	r8, r0
 800f20a:	4689      	mov	r9, r1
 800f20c:	4b1a      	ldr	r3, [pc, #104]	; (800f278 <data_output_mode+0x200>)
 800f20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f210:	4618      	mov	r0, r3
 800f212:	f7f1 f9d1 	bl	80005b8 <__aeabi_f2d>
 800f216:	4604      	mov	r4, r0
 800f218:	460d      	mov	r5, r1
 800f21a:	4b17      	ldr	r3, [pc, #92]	; (800f278 <data_output_mode+0x200>)
 800f21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f21e:	4618      	mov	r0, r3
 800f220:	f7f1 f9ca 	bl	80005b8 <__aeabi_f2d>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f22c:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800f230:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800f234:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f238:	ed97 7b00 	vldr	d7, [r7]
 800f23c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f240:	ed97 7b02 	vldr	d7, [r7, #8]
 800f244:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f248:	ed97 7b04 	vldr	d7, [r7, #16]
 800f24c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f250:	ed97 7b06 	vldr	d7, [r7, #24]
 800f254:	ed8d 7b00 	vstr	d7, [sp]
 800f258:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f25c:	4807      	ldr	r0, [pc, #28]	; (800f27c <data_output_mode+0x204>)
 800f25e:	f000 f849 	bl	800f2f4 <usb_printf>
		break;
 800f262:	e000      	b.n	800f266 <data_output_mode+0x1ee>
	default:

		break;
 800f264:	bf00      	nop
	}

}
 800f266:	bf00      	nop
 800f268:	3730      	adds	r7, #48	; 0x30
 800f26a:	46bd      	mov	sp, r7
 800f26c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f270:	2000178c 	.word	0x2000178c
 800f274:	00000000 	.word	0x00000000
 800f278:	20002154 	.word	0x20002154
 800f27c:	08013e90 	.word	0x08013e90

0800f280 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
	static uint16_t TimerCount = 0;
	float mag_yaw_test;
	if (htim == (&htim2))  //
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4a15      	ldr	r2, [pc, #84]	; (800f2e0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d123      	bne.n	800f2d8 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		TimerCount++;
 800f290:	4b14      	ldr	r3, [pc, #80]	; (800f2e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800f292:	881b      	ldrh	r3, [r3, #0]
 800f294:	3301      	adds	r3, #1
 800f296:	b29a      	uxth	r2, r3
 800f298:	4b12      	ldr	r3, [pc, #72]	; (800f2e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800f29a:	801a      	strh	r2, [r3, #0]
		if(TimerCount >= 1)  //1ms采集一次传感器数据  1KHz
 800f29c:	4b11      	ldr	r3, [pc, #68]	; (800f2e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800f29e:	881b      	ldrh	r3, [r3, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d019      	beq.n	800f2d8 <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			if(imu_9.cali_flag==0) //校准时不采集输出
 800f2a4:	4b10      	ldr	r3, [pc, #64]	; (800f2e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800f2a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d111      	bne.n	800f2d2 <HAL_TIM_PeriodElapsedCallback+0x52>
			{
				HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin); //测试引脚PA7，可使用示波器测量，确定采样时间是否准确
 800f2ae:	2180      	movs	r1, #128	; 0x80
 800f2b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f2b4:	f7f3 fa1a 	bl	80026ec <HAL_GPIO_TogglePin>
				imu_final_data_get(); //原始数据采样
 800f2b8:	f7ff fe0e 	bl	800eed8 <imu_final_data_get>
				calculate_attitude(&attitude, 0.001) ; //姿态解算
 800f2bc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800f2ec <HAL_TIM_PeriodElapsedCallback+0x6c>
 800f2c0:	480b      	ldr	r0, [pc, #44]	; (800f2f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800f2c2:	f7fd fdd3 	bl	800ce6c <calculate_attitude>
//				mag_yaw_test = atan2(imu_9.f_mag[1],imu_9.f_mag[0])*57.2957795131f;

				data_output_mode(imu_9.output_mode);  //数据输出,vofa+查看曲线图形
 800f2c6:	4b08      	ldr	r3, [pc, #32]	; (800f2e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800f2c8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7ff fed3 	bl	800f078 <data_output_mode>
			}

			TimerCount = 0;
 800f2d2:	4b04      	ldr	r3, [pc, #16]	; (800f2e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	801a      	strh	r2, [r3, #0]
		}

	}

}
 800f2d8:	bf00      	nop
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	200004c0 	.word	0x200004c0
 800f2e4:	2000224a 	.word	0x2000224a
 800f2e8:	20002154 	.word	0x20002154
 800f2ec:	3a83126f 	.word	0x3a83126f
 800f2f0:	2000178c 	.word	0x2000178c

0800f2f4 <usb_printf>:
  // 发送帧尾
  HAL_UART_Transmit(&huart1, tail, 4, 100);
}

void usb_printf(const char *format, ...)
{
 800f2f4:	b40f      	push	{r0, r1, r2, r3}
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800f2fc:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    uint8_t buf[APP_TX_DATA_SIZE];

    va_start(args, format);
 800f2fe:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800f302:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
    length = vsnprintf((char *)buf, APP_TX_DATA_SIZE, (char *)format, args);
 800f306:	4638      	mov	r0, r7
 800f308:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800f30c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800f310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f314:	f001 f80c 	bl	8010330 <vsniprintf>
 800f318:	4603      	mov	r3, r0
 800f31a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    va_end(args);
    CDC_Transmit_FS(buf, length);
 800f31e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800f322:	b29a      	uxth	r2, r3
 800f324:	463b      	mov	r3, r7
 800f326:	4611      	mov	r1, r2
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fc fcc5 	bl	800bcb8 <CDC_Transmit_FS>
}
 800f32e:	bf00      	nop
 800f330:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800f334:	46bd      	mov	sp, r7
 800f336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f33a:	b004      	add	sp, #16
 800f33c:	4770      	bx	lr
	...

0800f340 <vofa_FireWater_USB_output>:

}

// 本协议是CSV风格的字符串流，直观简洁，编程像printf简单
void vofa_FireWater_USB_output(float s1, float s2, float s3,float s4)
{
 800f340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f344:	b08a      	sub	sp, #40	; 0x28
 800f346:	af06      	add	r7, sp, #24
 800f348:	ed87 0a03 	vstr	s0, [r7, #12]
 800f34c:	edc7 0a02 	vstr	s1, [r7, #8]
 800f350:	ed87 1a01 	vstr	s2, [r7, #4]
 800f354:	edc7 1a00 	vstr	s3, [r7]
	usb_printf("simples:%f,%f,%f,%f\n", s1, s2,s3,s4);
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f7f1 f92d 	bl	80005b8 <__aeabi_f2d>
 800f35e:	4682      	mov	sl, r0
 800f360:	468b      	mov	fp, r1
 800f362:	68b8      	ldr	r0, [r7, #8]
 800f364:	f7f1 f928 	bl	80005b8 <__aeabi_f2d>
 800f368:	4604      	mov	r4, r0
 800f36a:	460d      	mov	r5, r1
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7f1 f923 	bl	80005b8 <__aeabi_f2d>
 800f372:	4680      	mov	r8, r0
 800f374:	4689      	mov	r9, r1
 800f376:	6838      	ldr	r0, [r7, #0]
 800f378:	f7f1 f91e 	bl	80005b8 <__aeabi_f2d>
 800f37c:	4602      	mov	r2, r0
 800f37e:	460b      	mov	r3, r1
 800f380:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f384:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f388:	e9cd 4500 	strd	r4, r5, [sp]
 800f38c:	4652      	mov	r2, sl
 800f38e:	465b      	mov	r3, fp
 800f390:	4803      	ldr	r0, [pc, #12]	; (800f3a0 <vofa_FireWater_USB_output+0x60>)
 800f392:	f7ff ffaf 	bl	800f2f4 <usb_printf>
}
 800f396:	bf00      	nop
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f3a0:	08013ec8 	.word	0x08013ec8

0800f3a4 <__cvt>:
 800f3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a8:	ec55 4b10 	vmov	r4, r5, d0
 800f3ac:	2d00      	cmp	r5, #0
 800f3ae:	460e      	mov	r6, r1
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	462b      	mov	r3, r5
 800f3b4:	bfbb      	ittet	lt
 800f3b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f3ba:	461d      	movlt	r5, r3
 800f3bc:	2300      	movge	r3, #0
 800f3be:	232d      	movlt	r3, #45	; 0x2d
 800f3c0:	700b      	strb	r3, [r1, #0]
 800f3c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f3c8:	4691      	mov	r9, r2
 800f3ca:	f023 0820 	bic.w	r8, r3, #32
 800f3ce:	bfbc      	itt	lt
 800f3d0:	4622      	movlt	r2, r4
 800f3d2:	4614      	movlt	r4, r2
 800f3d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f3d8:	d005      	beq.n	800f3e6 <__cvt+0x42>
 800f3da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f3de:	d100      	bne.n	800f3e2 <__cvt+0x3e>
 800f3e0:	3601      	adds	r6, #1
 800f3e2:	2102      	movs	r1, #2
 800f3e4:	e000      	b.n	800f3e8 <__cvt+0x44>
 800f3e6:	2103      	movs	r1, #3
 800f3e8:	ab03      	add	r3, sp, #12
 800f3ea:	9301      	str	r3, [sp, #4]
 800f3ec:	ab02      	add	r3, sp, #8
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	ec45 4b10 	vmov	d0, r4, r5
 800f3f4:	4653      	mov	r3, sl
 800f3f6:	4632      	mov	r2, r6
 800f3f8:	f001 f95e 	bl	80106b8 <_dtoa_r>
 800f3fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f400:	4607      	mov	r7, r0
 800f402:	d102      	bne.n	800f40a <__cvt+0x66>
 800f404:	f019 0f01 	tst.w	r9, #1
 800f408:	d022      	beq.n	800f450 <__cvt+0xac>
 800f40a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f40e:	eb07 0906 	add.w	r9, r7, r6
 800f412:	d110      	bne.n	800f436 <__cvt+0x92>
 800f414:	783b      	ldrb	r3, [r7, #0]
 800f416:	2b30      	cmp	r3, #48	; 0x30
 800f418:	d10a      	bne.n	800f430 <__cvt+0x8c>
 800f41a:	2200      	movs	r2, #0
 800f41c:	2300      	movs	r3, #0
 800f41e:	4620      	mov	r0, r4
 800f420:	4629      	mov	r1, r5
 800f422:	f7f1 fb89 	bl	8000b38 <__aeabi_dcmpeq>
 800f426:	b918      	cbnz	r0, 800f430 <__cvt+0x8c>
 800f428:	f1c6 0601 	rsb	r6, r6, #1
 800f42c:	f8ca 6000 	str.w	r6, [sl]
 800f430:	f8da 3000 	ldr.w	r3, [sl]
 800f434:	4499      	add	r9, r3
 800f436:	2200      	movs	r2, #0
 800f438:	2300      	movs	r3, #0
 800f43a:	4620      	mov	r0, r4
 800f43c:	4629      	mov	r1, r5
 800f43e:	f7f1 fb7b 	bl	8000b38 <__aeabi_dcmpeq>
 800f442:	b108      	cbz	r0, 800f448 <__cvt+0xa4>
 800f444:	f8cd 900c 	str.w	r9, [sp, #12]
 800f448:	2230      	movs	r2, #48	; 0x30
 800f44a:	9b03      	ldr	r3, [sp, #12]
 800f44c:	454b      	cmp	r3, r9
 800f44e:	d307      	bcc.n	800f460 <__cvt+0xbc>
 800f450:	9b03      	ldr	r3, [sp, #12]
 800f452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f454:	1bdb      	subs	r3, r3, r7
 800f456:	4638      	mov	r0, r7
 800f458:	6013      	str	r3, [r2, #0]
 800f45a:	b004      	add	sp, #16
 800f45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f460:	1c59      	adds	r1, r3, #1
 800f462:	9103      	str	r1, [sp, #12]
 800f464:	701a      	strb	r2, [r3, #0]
 800f466:	e7f0      	b.n	800f44a <__cvt+0xa6>

0800f468 <__exponent>:
 800f468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f46a:	4603      	mov	r3, r0
 800f46c:	2900      	cmp	r1, #0
 800f46e:	bfb8      	it	lt
 800f470:	4249      	neglt	r1, r1
 800f472:	f803 2b02 	strb.w	r2, [r3], #2
 800f476:	bfb4      	ite	lt
 800f478:	222d      	movlt	r2, #45	; 0x2d
 800f47a:	222b      	movge	r2, #43	; 0x2b
 800f47c:	2909      	cmp	r1, #9
 800f47e:	7042      	strb	r2, [r0, #1]
 800f480:	dd2a      	ble.n	800f4d8 <__exponent+0x70>
 800f482:	f10d 0207 	add.w	r2, sp, #7
 800f486:	4617      	mov	r7, r2
 800f488:	260a      	movs	r6, #10
 800f48a:	4694      	mov	ip, r2
 800f48c:	fb91 f5f6 	sdiv	r5, r1, r6
 800f490:	fb06 1415 	mls	r4, r6, r5, r1
 800f494:	3430      	adds	r4, #48	; 0x30
 800f496:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f49a:	460c      	mov	r4, r1
 800f49c:	2c63      	cmp	r4, #99	; 0x63
 800f49e:	f102 32ff 	add.w	r2, r2, #4294967295
 800f4a2:	4629      	mov	r1, r5
 800f4a4:	dcf1      	bgt.n	800f48a <__exponent+0x22>
 800f4a6:	3130      	adds	r1, #48	; 0x30
 800f4a8:	f1ac 0402 	sub.w	r4, ip, #2
 800f4ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f4b0:	1c41      	adds	r1, r0, #1
 800f4b2:	4622      	mov	r2, r4
 800f4b4:	42ba      	cmp	r2, r7
 800f4b6:	d30a      	bcc.n	800f4ce <__exponent+0x66>
 800f4b8:	f10d 0209 	add.w	r2, sp, #9
 800f4bc:	eba2 020c 	sub.w	r2, r2, ip
 800f4c0:	42bc      	cmp	r4, r7
 800f4c2:	bf88      	it	hi
 800f4c4:	2200      	movhi	r2, #0
 800f4c6:	4413      	add	r3, r2
 800f4c8:	1a18      	subs	r0, r3, r0
 800f4ca:	b003      	add	sp, #12
 800f4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f4d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f4d6:	e7ed      	b.n	800f4b4 <__exponent+0x4c>
 800f4d8:	2330      	movs	r3, #48	; 0x30
 800f4da:	3130      	adds	r1, #48	; 0x30
 800f4dc:	7083      	strb	r3, [r0, #2]
 800f4de:	70c1      	strb	r1, [r0, #3]
 800f4e0:	1d03      	adds	r3, r0, #4
 800f4e2:	e7f1      	b.n	800f4c8 <__exponent+0x60>

0800f4e4 <_printf_float>:
 800f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	ed2d 8b02 	vpush	{d8}
 800f4ec:	b08d      	sub	sp, #52	; 0x34
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f4f4:	4616      	mov	r6, r2
 800f4f6:	461f      	mov	r7, r3
 800f4f8:	4605      	mov	r5, r0
 800f4fa:	f000 ffa1 	bl	8010440 <_localeconv_r>
 800f4fe:	f8d0 a000 	ldr.w	sl, [r0]
 800f502:	4650      	mov	r0, sl
 800f504:	f7f0 feec 	bl	80002e0 <strlen>
 800f508:	2300      	movs	r3, #0
 800f50a:	930a      	str	r3, [sp, #40]	; 0x28
 800f50c:	6823      	ldr	r3, [r4, #0]
 800f50e:	9305      	str	r3, [sp, #20]
 800f510:	f8d8 3000 	ldr.w	r3, [r8]
 800f514:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f518:	3307      	adds	r3, #7
 800f51a:	f023 0307 	bic.w	r3, r3, #7
 800f51e:	f103 0208 	add.w	r2, r3, #8
 800f522:	f8c8 2000 	str.w	r2, [r8]
 800f526:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f52a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f52e:	9307      	str	r3, [sp, #28]
 800f530:	f8cd 8018 	str.w	r8, [sp, #24]
 800f534:	ee08 0a10 	vmov	s16, r0
 800f538:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f53c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f540:	4b9e      	ldr	r3, [pc, #632]	; (800f7bc <_printf_float+0x2d8>)
 800f542:	f04f 32ff 	mov.w	r2, #4294967295
 800f546:	f7f1 fb29 	bl	8000b9c <__aeabi_dcmpun>
 800f54a:	bb88      	cbnz	r0, 800f5b0 <_printf_float+0xcc>
 800f54c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f550:	4b9a      	ldr	r3, [pc, #616]	; (800f7bc <_printf_float+0x2d8>)
 800f552:	f04f 32ff 	mov.w	r2, #4294967295
 800f556:	f7f1 fb03 	bl	8000b60 <__aeabi_dcmple>
 800f55a:	bb48      	cbnz	r0, 800f5b0 <_printf_float+0xcc>
 800f55c:	2200      	movs	r2, #0
 800f55e:	2300      	movs	r3, #0
 800f560:	4640      	mov	r0, r8
 800f562:	4649      	mov	r1, r9
 800f564:	f7f1 faf2 	bl	8000b4c <__aeabi_dcmplt>
 800f568:	b110      	cbz	r0, 800f570 <_printf_float+0x8c>
 800f56a:	232d      	movs	r3, #45	; 0x2d
 800f56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f570:	4a93      	ldr	r2, [pc, #588]	; (800f7c0 <_printf_float+0x2dc>)
 800f572:	4b94      	ldr	r3, [pc, #592]	; (800f7c4 <_printf_float+0x2e0>)
 800f574:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f578:	bf94      	ite	ls
 800f57a:	4690      	movls	r8, r2
 800f57c:	4698      	movhi	r8, r3
 800f57e:	2303      	movs	r3, #3
 800f580:	6123      	str	r3, [r4, #16]
 800f582:	9b05      	ldr	r3, [sp, #20]
 800f584:	f023 0304 	bic.w	r3, r3, #4
 800f588:	6023      	str	r3, [r4, #0]
 800f58a:	f04f 0900 	mov.w	r9, #0
 800f58e:	9700      	str	r7, [sp, #0]
 800f590:	4633      	mov	r3, r6
 800f592:	aa0b      	add	r2, sp, #44	; 0x2c
 800f594:	4621      	mov	r1, r4
 800f596:	4628      	mov	r0, r5
 800f598:	f000 f9da 	bl	800f950 <_printf_common>
 800f59c:	3001      	adds	r0, #1
 800f59e:	f040 8090 	bne.w	800f6c2 <_printf_float+0x1de>
 800f5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a6:	b00d      	add	sp, #52	; 0x34
 800f5a8:	ecbd 8b02 	vpop	{d8}
 800f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b0:	4642      	mov	r2, r8
 800f5b2:	464b      	mov	r3, r9
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	4649      	mov	r1, r9
 800f5b8:	f7f1 faf0 	bl	8000b9c <__aeabi_dcmpun>
 800f5bc:	b140      	cbz	r0, 800f5d0 <_printf_float+0xec>
 800f5be:	464b      	mov	r3, r9
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	bfbc      	itt	lt
 800f5c4:	232d      	movlt	r3, #45	; 0x2d
 800f5c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f5ca:	4a7f      	ldr	r2, [pc, #508]	; (800f7c8 <_printf_float+0x2e4>)
 800f5cc:	4b7f      	ldr	r3, [pc, #508]	; (800f7cc <_printf_float+0x2e8>)
 800f5ce:	e7d1      	b.n	800f574 <_printf_float+0x90>
 800f5d0:	6863      	ldr	r3, [r4, #4]
 800f5d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f5d6:	9206      	str	r2, [sp, #24]
 800f5d8:	1c5a      	adds	r2, r3, #1
 800f5da:	d13f      	bne.n	800f65c <_printf_float+0x178>
 800f5dc:	2306      	movs	r3, #6
 800f5de:	6063      	str	r3, [r4, #4]
 800f5e0:	9b05      	ldr	r3, [sp, #20]
 800f5e2:	6861      	ldr	r1, [r4, #4]
 800f5e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	9303      	str	r3, [sp, #12]
 800f5ec:	ab0a      	add	r3, sp, #40	; 0x28
 800f5ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f5f2:	ab09      	add	r3, sp, #36	; 0x24
 800f5f4:	ec49 8b10 	vmov	d0, r8, r9
 800f5f8:	9300      	str	r3, [sp, #0]
 800f5fa:	6022      	str	r2, [r4, #0]
 800f5fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f600:	4628      	mov	r0, r5
 800f602:	f7ff fecf 	bl	800f3a4 <__cvt>
 800f606:	9b06      	ldr	r3, [sp, #24]
 800f608:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f60a:	2b47      	cmp	r3, #71	; 0x47
 800f60c:	4680      	mov	r8, r0
 800f60e:	d108      	bne.n	800f622 <_printf_float+0x13e>
 800f610:	1cc8      	adds	r0, r1, #3
 800f612:	db02      	blt.n	800f61a <_printf_float+0x136>
 800f614:	6863      	ldr	r3, [r4, #4]
 800f616:	4299      	cmp	r1, r3
 800f618:	dd41      	ble.n	800f69e <_printf_float+0x1ba>
 800f61a:	f1ab 0302 	sub.w	r3, fp, #2
 800f61e:	fa5f fb83 	uxtb.w	fp, r3
 800f622:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f626:	d820      	bhi.n	800f66a <_printf_float+0x186>
 800f628:	3901      	subs	r1, #1
 800f62a:	465a      	mov	r2, fp
 800f62c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f630:	9109      	str	r1, [sp, #36]	; 0x24
 800f632:	f7ff ff19 	bl	800f468 <__exponent>
 800f636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f638:	1813      	adds	r3, r2, r0
 800f63a:	2a01      	cmp	r2, #1
 800f63c:	4681      	mov	r9, r0
 800f63e:	6123      	str	r3, [r4, #16]
 800f640:	dc02      	bgt.n	800f648 <_printf_float+0x164>
 800f642:	6822      	ldr	r2, [r4, #0]
 800f644:	07d2      	lsls	r2, r2, #31
 800f646:	d501      	bpl.n	800f64c <_printf_float+0x168>
 800f648:	3301      	adds	r3, #1
 800f64a:	6123      	str	r3, [r4, #16]
 800f64c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f650:	2b00      	cmp	r3, #0
 800f652:	d09c      	beq.n	800f58e <_printf_float+0xaa>
 800f654:	232d      	movs	r3, #45	; 0x2d
 800f656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f65a:	e798      	b.n	800f58e <_printf_float+0xaa>
 800f65c:	9a06      	ldr	r2, [sp, #24]
 800f65e:	2a47      	cmp	r2, #71	; 0x47
 800f660:	d1be      	bne.n	800f5e0 <_printf_float+0xfc>
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1bc      	bne.n	800f5e0 <_printf_float+0xfc>
 800f666:	2301      	movs	r3, #1
 800f668:	e7b9      	b.n	800f5de <_printf_float+0xfa>
 800f66a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f66e:	d118      	bne.n	800f6a2 <_printf_float+0x1be>
 800f670:	2900      	cmp	r1, #0
 800f672:	6863      	ldr	r3, [r4, #4]
 800f674:	dd0b      	ble.n	800f68e <_printf_float+0x1aa>
 800f676:	6121      	str	r1, [r4, #16]
 800f678:	b913      	cbnz	r3, 800f680 <_printf_float+0x19c>
 800f67a:	6822      	ldr	r2, [r4, #0]
 800f67c:	07d0      	lsls	r0, r2, #31
 800f67e:	d502      	bpl.n	800f686 <_printf_float+0x1a2>
 800f680:	3301      	adds	r3, #1
 800f682:	440b      	add	r3, r1
 800f684:	6123      	str	r3, [r4, #16]
 800f686:	65a1      	str	r1, [r4, #88]	; 0x58
 800f688:	f04f 0900 	mov.w	r9, #0
 800f68c:	e7de      	b.n	800f64c <_printf_float+0x168>
 800f68e:	b913      	cbnz	r3, 800f696 <_printf_float+0x1b2>
 800f690:	6822      	ldr	r2, [r4, #0]
 800f692:	07d2      	lsls	r2, r2, #31
 800f694:	d501      	bpl.n	800f69a <_printf_float+0x1b6>
 800f696:	3302      	adds	r3, #2
 800f698:	e7f4      	b.n	800f684 <_printf_float+0x1a0>
 800f69a:	2301      	movs	r3, #1
 800f69c:	e7f2      	b.n	800f684 <_printf_float+0x1a0>
 800f69e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6a4:	4299      	cmp	r1, r3
 800f6a6:	db05      	blt.n	800f6b4 <_printf_float+0x1d0>
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	6121      	str	r1, [r4, #16]
 800f6ac:	07d8      	lsls	r0, r3, #31
 800f6ae:	d5ea      	bpl.n	800f686 <_printf_float+0x1a2>
 800f6b0:	1c4b      	adds	r3, r1, #1
 800f6b2:	e7e7      	b.n	800f684 <_printf_float+0x1a0>
 800f6b4:	2900      	cmp	r1, #0
 800f6b6:	bfd4      	ite	le
 800f6b8:	f1c1 0202 	rsble	r2, r1, #2
 800f6bc:	2201      	movgt	r2, #1
 800f6be:	4413      	add	r3, r2
 800f6c0:	e7e0      	b.n	800f684 <_printf_float+0x1a0>
 800f6c2:	6823      	ldr	r3, [r4, #0]
 800f6c4:	055a      	lsls	r2, r3, #21
 800f6c6:	d407      	bmi.n	800f6d8 <_printf_float+0x1f4>
 800f6c8:	6923      	ldr	r3, [r4, #16]
 800f6ca:	4642      	mov	r2, r8
 800f6cc:	4631      	mov	r1, r6
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	47b8      	blx	r7
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	d12c      	bne.n	800f730 <_printf_float+0x24c>
 800f6d6:	e764      	b.n	800f5a2 <_printf_float+0xbe>
 800f6d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6dc:	f240 80e0 	bls.w	800f8a0 <_printf_float+0x3bc>
 800f6e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	f7f1 fa26 	bl	8000b38 <__aeabi_dcmpeq>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d034      	beq.n	800f75a <_printf_float+0x276>
 800f6f0:	4a37      	ldr	r2, [pc, #220]	; (800f7d0 <_printf_float+0x2ec>)
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	4631      	mov	r1, r6
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	47b8      	blx	r7
 800f6fa:	3001      	adds	r0, #1
 800f6fc:	f43f af51 	beq.w	800f5a2 <_printf_float+0xbe>
 800f700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f704:	429a      	cmp	r2, r3
 800f706:	db02      	blt.n	800f70e <_printf_float+0x22a>
 800f708:	6823      	ldr	r3, [r4, #0]
 800f70a:	07d8      	lsls	r0, r3, #31
 800f70c:	d510      	bpl.n	800f730 <_printf_float+0x24c>
 800f70e:	ee18 3a10 	vmov	r3, s16
 800f712:	4652      	mov	r2, sl
 800f714:	4631      	mov	r1, r6
 800f716:	4628      	mov	r0, r5
 800f718:	47b8      	blx	r7
 800f71a:	3001      	adds	r0, #1
 800f71c:	f43f af41 	beq.w	800f5a2 <_printf_float+0xbe>
 800f720:	f04f 0800 	mov.w	r8, #0
 800f724:	f104 091a 	add.w	r9, r4, #26
 800f728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f72a:	3b01      	subs	r3, #1
 800f72c:	4543      	cmp	r3, r8
 800f72e:	dc09      	bgt.n	800f744 <_printf_float+0x260>
 800f730:	6823      	ldr	r3, [r4, #0]
 800f732:	079b      	lsls	r3, r3, #30
 800f734:	f100 8107 	bmi.w	800f946 <_printf_float+0x462>
 800f738:	68e0      	ldr	r0, [r4, #12]
 800f73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f73c:	4298      	cmp	r0, r3
 800f73e:	bfb8      	it	lt
 800f740:	4618      	movlt	r0, r3
 800f742:	e730      	b.n	800f5a6 <_printf_float+0xc2>
 800f744:	2301      	movs	r3, #1
 800f746:	464a      	mov	r2, r9
 800f748:	4631      	mov	r1, r6
 800f74a:	4628      	mov	r0, r5
 800f74c:	47b8      	blx	r7
 800f74e:	3001      	adds	r0, #1
 800f750:	f43f af27 	beq.w	800f5a2 <_printf_float+0xbe>
 800f754:	f108 0801 	add.w	r8, r8, #1
 800f758:	e7e6      	b.n	800f728 <_printf_float+0x244>
 800f75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	dc39      	bgt.n	800f7d4 <_printf_float+0x2f0>
 800f760:	4a1b      	ldr	r2, [pc, #108]	; (800f7d0 <_printf_float+0x2ec>)
 800f762:	2301      	movs	r3, #1
 800f764:	4631      	mov	r1, r6
 800f766:	4628      	mov	r0, r5
 800f768:	47b8      	blx	r7
 800f76a:	3001      	adds	r0, #1
 800f76c:	f43f af19 	beq.w	800f5a2 <_printf_float+0xbe>
 800f770:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f774:	4313      	orrs	r3, r2
 800f776:	d102      	bne.n	800f77e <_printf_float+0x29a>
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	07d9      	lsls	r1, r3, #31
 800f77c:	d5d8      	bpl.n	800f730 <_printf_float+0x24c>
 800f77e:	ee18 3a10 	vmov	r3, s16
 800f782:	4652      	mov	r2, sl
 800f784:	4631      	mov	r1, r6
 800f786:	4628      	mov	r0, r5
 800f788:	47b8      	blx	r7
 800f78a:	3001      	adds	r0, #1
 800f78c:	f43f af09 	beq.w	800f5a2 <_printf_float+0xbe>
 800f790:	f04f 0900 	mov.w	r9, #0
 800f794:	f104 0a1a 	add.w	sl, r4, #26
 800f798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f79a:	425b      	negs	r3, r3
 800f79c:	454b      	cmp	r3, r9
 800f79e:	dc01      	bgt.n	800f7a4 <_printf_float+0x2c0>
 800f7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a2:	e792      	b.n	800f6ca <_printf_float+0x1e6>
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	4652      	mov	r2, sl
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	47b8      	blx	r7
 800f7ae:	3001      	adds	r0, #1
 800f7b0:	f43f aef7 	beq.w	800f5a2 <_printf_float+0xbe>
 800f7b4:	f109 0901 	add.w	r9, r9, #1
 800f7b8:	e7ee      	b.n	800f798 <_printf_float+0x2b4>
 800f7ba:	bf00      	nop
 800f7bc:	7fefffff 	.word	0x7fefffff
 800f7c0:	08013f20 	.word	0x08013f20
 800f7c4:	08013f24 	.word	0x08013f24
 800f7c8:	08013f28 	.word	0x08013f28
 800f7cc:	08013f2c 	.word	0x08013f2c
 800f7d0:	08013f30 	.word	0x08013f30
 800f7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	bfa8      	it	ge
 800f7dc:	461a      	movge	r2, r3
 800f7de:	2a00      	cmp	r2, #0
 800f7e0:	4691      	mov	r9, r2
 800f7e2:	dc37      	bgt.n	800f854 <_printf_float+0x370>
 800f7e4:	f04f 0b00 	mov.w	fp, #0
 800f7e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7ec:	f104 021a 	add.w	r2, r4, #26
 800f7f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7f2:	9305      	str	r3, [sp, #20]
 800f7f4:	eba3 0309 	sub.w	r3, r3, r9
 800f7f8:	455b      	cmp	r3, fp
 800f7fa:	dc33      	bgt.n	800f864 <_printf_float+0x380>
 800f7fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f800:	429a      	cmp	r2, r3
 800f802:	db3b      	blt.n	800f87c <_printf_float+0x398>
 800f804:	6823      	ldr	r3, [r4, #0]
 800f806:	07da      	lsls	r2, r3, #31
 800f808:	d438      	bmi.n	800f87c <_printf_float+0x398>
 800f80a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f80e:	eba2 0903 	sub.w	r9, r2, r3
 800f812:	9b05      	ldr	r3, [sp, #20]
 800f814:	1ad2      	subs	r2, r2, r3
 800f816:	4591      	cmp	r9, r2
 800f818:	bfa8      	it	ge
 800f81a:	4691      	movge	r9, r2
 800f81c:	f1b9 0f00 	cmp.w	r9, #0
 800f820:	dc35      	bgt.n	800f88e <_printf_float+0x3aa>
 800f822:	f04f 0800 	mov.w	r8, #0
 800f826:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f82a:	f104 0a1a 	add.w	sl, r4, #26
 800f82e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f832:	1a9b      	subs	r3, r3, r2
 800f834:	eba3 0309 	sub.w	r3, r3, r9
 800f838:	4543      	cmp	r3, r8
 800f83a:	f77f af79 	ble.w	800f730 <_printf_float+0x24c>
 800f83e:	2301      	movs	r3, #1
 800f840:	4652      	mov	r2, sl
 800f842:	4631      	mov	r1, r6
 800f844:	4628      	mov	r0, r5
 800f846:	47b8      	blx	r7
 800f848:	3001      	adds	r0, #1
 800f84a:	f43f aeaa 	beq.w	800f5a2 <_printf_float+0xbe>
 800f84e:	f108 0801 	add.w	r8, r8, #1
 800f852:	e7ec      	b.n	800f82e <_printf_float+0x34a>
 800f854:	4613      	mov	r3, r2
 800f856:	4631      	mov	r1, r6
 800f858:	4642      	mov	r2, r8
 800f85a:	4628      	mov	r0, r5
 800f85c:	47b8      	blx	r7
 800f85e:	3001      	adds	r0, #1
 800f860:	d1c0      	bne.n	800f7e4 <_printf_float+0x300>
 800f862:	e69e      	b.n	800f5a2 <_printf_float+0xbe>
 800f864:	2301      	movs	r3, #1
 800f866:	4631      	mov	r1, r6
 800f868:	4628      	mov	r0, r5
 800f86a:	9205      	str	r2, [sp, #20]
 800f86c:	47b8      	blx	r7
 800f86e:	3001      	adds	r0, #1
 800f870:	f43f ae97 	beq.w	800f5a2 <_printf_float+0xbe>
 800f874:	9a05      	ldr	r2, [sp, #20]
 800f876:	f10b 0b01 	add.w	fp, fp, #1
 800f87a:	e7b9      	b.n	800f7f0 <_printf_float+0x30c>
 800f87c:	ee18 3a10 	vmov	r3, s16
 800f880:	4652      	mov	r2, sl
 800f882:	4631      	mov	r1, r6
 800f884:	4628      	mov	r0, r5
 800f886:	47b8      	blx	r7
 800f888:	3001      	adds	r0, #1
 800f88a:	d1be      	bne.n	800f80a <_printf_float+0x326>
 800f88c:	e689      	b.n	800f5a2 <_printf_float+0xbe>
 800f88e:	9a05      	ldr	r2, [sp, #20]
 800f890:	464b      	mov	r3, r9
 800f892:	4442      	add	r2, r8
 800f894:	4631      	mov	r1, r6
 800f896:	4628      	mov	r0, r5
 800f898:	47b8      	blx	r7
 800f89a:	3001      	adds	r0, #1
 800f89c:	d1c1      	bne.n	800f822 <_printf_float+0x33e>
 800f89e:	e680      	b.n	800f5a2 <_printf_float+0xbe>
 800f8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8a2:	2a01      	cmp	r2, #1
 800f8a4:	dc01      	bgt.n	800f8aa <_printf_float+0x3c6>
 800f8a6:	07db      	lsls	r3, r3, #31
 800f8a8:	d53a      	bpl.n	800f920 <_printf_float+0x43c>
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	4642      	mov	r2, r8
 800f8ae:	4631      	mov	r1, r6
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	47b8      	blx	r7
 800f8b4:	3001      	adds	r0, #1
 800f8b6:	f43f ae74 	beq.w	800f5a2 <_printf_float+0xbe>
 800f8ba:	ee18 3a10 	vmov	r3, s16
 800f8be:	4652      	mov	r2, sl
 800f8c0:	4631      	mov	r1, r6
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	47b8      	blx	r7
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	f43f ae6b 	beq.w	800f5a2 <_printf_float+0xbe>
 800f8cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f8d8:	f7f1 f92e 	bl	8000b38 <__aeabi_dcmpeq>
 800f8dc:	b9d8      	cbnz	r0, 800f916 <_printf_float+0x432>
 800f8de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f8e2:	f108 0201 	add.w	r2, r8, #1
 800f8e6:	4631      	mov	r1, r6
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	47b8      	blx	r7
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	d10e      	bne.n	800f90e <_printf_float+0x42a>
 800f8f0:	e657      	b.n	800f5a2 <_printf_float+0xbe>
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	4652      	mov	r2, sl
 800f8f6:	4631      	mov	r1, r6
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	47b8      	blx	r7
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	f43f ae50 	beq.w	800f5a2 <_printf_float+0xbe>
 800f902:	f108 0801 	add.w	r8, r8, #1
 800f906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f908:	3b01      	subs	r3, #1
 800f90a:	4543      	cmp	r3, r8
 800f90c:	dcf1      	bgt.n	800f8f2 <_printf_float+0x40e>
 800f90e:	464b      	mov	r3, r9
 800f910:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f914:	e6da      	b.n	800f6cc <_printf_float+0x1e8>
 800f916:	f04f 0800 	mov.w	r8, #0
 800f91a:	f104 0a1a 	add.w	sl, r4, #26
 800f91e:	e7f2      	b.n	800f906 <_printf_float+0x422>
 800f920:	2301      	movs	r3, #1
 800f922:	4642      	mov	r2, r8
 800f924:	e7df      	b.n	800f8e6 <_printf_float+0x402>
 800f926:	2301      	movs	r3, #1
 800f928:	464a      	mov	r2, r9
 800f92a:	4631      	mov	r1, r6
 800f92c:	4628      	mov	r0, r5
 800f92e:	47b8      	blx	r7
 800f930:	3001      	adds	r0, #1
 800f932:	f43f ae36 	beq.w	800f5a2 <_printf_float+0xbe>
 800f936:	f108 0801 	add.w	r8, r8, #1
 800f93a:	68e3      	ldr	r3, [r4, #12]
 800f93c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f93e:	1a5b      	subs	r3, r3, r1
 800f940:	4543      	cmp	r3, r8
 800f942:	dcf0      	bgt.n	800f926 <_printf_float+0x442>
 800f944:	e6f8      	b.n	800f738 <_printf_float+0x254>
 800f946:	f04f 0800 	mov.w	r8, #0
 800f94a:	f104 0919 	add.w	r9, r4, #25
 800f94e:	e7f4      	b.n	800f93a <_printf_float+0x456>

0800f950 <_printf_common>:
 800f950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f954:	4616      	mov	r6, r2
 800f956:	4699      	mov	r9, r3
 800f958:	688a      	ldr	r2, [r1, #8]
 800f95a:	690b      	ldr	r3, [r1, #16]
 800f95c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f960:	4293      	cmp	r3, r2
 800f962:	bfb8      	it	lt
 800f964:	4613      	movlt	r3, r2
 800f966:	6033      	str	r3, [r6, #0]
 800f968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f96c:	4607      	mov	r7, r0
 800f96e:	460c      	mov	r4, r1
 800f970:	b10a      	cbz	r2, 800f976 <_printf_common+0x26>
 800f972:	3301      	adds	r3, #1
 800f974:	6033      	str	r3, [r6, #0]
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	0699      	lsls	r1, r3, #26
 800f97a:	bf42      	ittt	mi
 800f97c:	6833      	ldrmi	r3, [r6, #0]
 800f97e:	3302      	addmi	r3, #2
 800f980:	6033      	strmi	r3, [r6, #0]
 800f982:	6825      	ldr	r5, [r4, #0]
 800f984:	f015 0506 	ands.w	r5, r5, #6
 800f988:	d106      	bne.n	800f998 <_printf_common+0x48>
 800f98a:	f104 0a19 	add.w	sl, r4, #25
 800f98e:	68e3      	ldr	r3, [r4, #12]
 800f990:	6832      	ldr	r2, [r6, #0]
 800f992:	1a9b      	subs	r3, r3, r2
 800f994:	42ab      	cmp	r3, r5
 800f996:	dc26      	bgt.n	800f9e6 <_printf_common+0x96>
 800f998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f99c:	1e13      	subs	r3, r2, #0
 800f99e:	6822      	ldr	r2, [r4, #0]
 800f9a0:	bf18      	it	ne
 800f9a2:	2301      	movne	r3, #1
 800f9a4:	0692      	lsls	r2, r2, #26
 800f9a6:	d42b      	bmi.n	800fa00 <_printf_common+0xb0>
 800f9a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9ac:	4649      	mov	r1, r9
 800f9ae:	4638      	mov	r0, r7
 800f9b0:	47c0      	blx	r8
 800f9b2:	3001      	adds	r0, #1
 800f9b4:	d01e      	beq.n	800f9f4 <_printf_common+0xa4>
 800f9b6:	6823      	ldr	r3, [r4, #0]
 800f9b8:	6922      	ldr	r2, [r4, #16]
 800f9ba:	f003 0306 	and.w	r3, r3, #6
 800f9be:	2b04      	cmp	r3, #4
 800f9c0:	bf02      	ittt	eq
 800f9c2:	68e5      	ldreq	r5, [r4, #12]
 800f9c4:	6833      	ldreq	r3, [r6, #0]
 800f9c6:	1aed      	subeq	r5, r5, r3
 800f9c8:	68a3      	ldr	r3, [r4, #8]
 800f9ca:	bf0c      	ite	eq
 800f9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9d0:	2500      	movne	r5, #0
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	bfc4      	itt	gt
 800f9d6:	1a9b      	subgt	r3, r3, r2
 800f9d8:	18ed      	addgt	r5, r5, r3
 800f9da:	2600      	movs	r6, #0
 800f9dc:	341a      	adds	r4, #26
 800f9de:	42b5      	cmp	r5, r6
 800f9e0:	d11a      	bne.n	800fa18 <_printf_common+0xc8>
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	e008      	b.n	800f9f8 <_printf_common+0xa8>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	4652      	mov	r2, sl
 800f9ea:	4649      	mov	r1, r9
 800f9ec:	4638      	mov	r0, r7
 800f9ee:	47c0      	blx	r8
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	d103      	bne.n	800f9fc <_printf_common+0xac>
 800f9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9fc:	3501      	adds	r5, #1
 800f9fe:	e7c6      	b.n	800f98e <_printf_common+0x3e>
 800fa00:	18e1      	adds	r1, r4, r3
 800fa02:	1c5a      	adds	r2, r3, #1
 800fa04:	2030      	movs	r0, #48	; 0x30
 800fa06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa0a:	4422      	add	r2, r4
 800fa0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa14:	3302      	adds	r3, #2
 800fa16:	e7c7      	b.n	800f9a8 <_printf_common+0x58>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	4622      	mov	r2, r4
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	4638      	mov	r0, r7
 800fa20:	47c0      	blx	r8
 800fa22:	3001      	adds	r0, #1
 800fa24:	d0e6      	beq.n	800f9f4 <_printf_common+0xa4>
 800fa26:	3601      	adds	r6, #1
 800fa28:	e7d9      	b.n	800f9de <_printf_common+0x8e>
	...

0800fa2c <_printf_i>:
 800fa2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa30:	7e0f      	ldrb	r7, [r1, #24]
 800fa32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa34:	2f78      	cmp	r7, #120	; 0x78
 800fa36:	4691      	mov	r9, r2
 800fa38:	4680      	mov	r8, r0
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	469a      	mov	sl, r3
 800fa3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa42:	d807      	bhi.n	800fa54 <_printf_i+0x28>
 800fa44:	2f62      	cmp	r7, #98	; 0x62
 800fa46:	d80a      	bhi.n	800fa5e <_printf_i+0x32>
 800fa48:	2f00      	cmp	r7, #0
 800fa4a:	f000 80d4 	beq.w	800fbf6 <_printf_i+0x1ca>
 800fa4e:	2f58      	cmp	r7, #88	; 0x58
 800fa50:	f000 80c0 	beq.w	800fbd4 <_printf_i+0x1a8>
 800fa54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa5c:	e03a      	b.n	800fad4 <_printf_i+0xa8>
 800fa5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa62:	2b15      	cmp	r3, #21
 800fa64:	d8f6      	bhi.n	800fa54 <_printf_i+0x28>
 800fa66:	a101      	add	r1, pc, #4	; (adr r1, 800fa6c <_printf_i+0x40>)
 800fa68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa6c:	0800fac5 	.word	0x0800fac5
 800fa70:	0800fad9 	.word	0x0800fad9
 800fa74:	0800fa55 	.word	0x0800fa55
 800fa78:	0800fa55 	.word	0x0800fa55
 800fa7c:	0800fa55 	.word	0x0800fa55
 800fa80:	0800fa55 	.word	0x0800fa55
 800fa84:	0800fad9 	.word	0x0800fad9
 800fa88:	0800fa55 	.word	0x0800fa55
 800fa8c:	0800fa55 	.word	0x0800fa55
 800fa90:	0800fa55 	.word	0x0800fa55
 800fa94:	0800fa55 	.word	0x0800fa55
 800fa98:	0800fbdd 	.word	0x0800fbdd
 800fa9c:	0800fb05 	.word	0x0800fb05
 800faa0:	0800fb97 	.word	0x0800fb97
 800faa4:	0800fa55 	.word	0x0800fa55
 800faa8:	0800fa55 	.word	0x0800fa55
 800faac:	0800fbff 	.word	0x0800fbff
 800fab0:	0800fa55 	.word	0x0800fa55
 800fab4:	0800fb05 	.word	0x0800fb05
 800fab8:	0800fa55 	.word	0x0800fa55
 800fabc:	0800fa55 	.word	0x0800fa55
 800fac0:	0800fb9f 	.word	0x0800fb9f
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	1d1a      	adds	r2, r3, #4
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	602a      	str	r2, [r5, #0]
 800facc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fad4:	2301      	movs	r3, #1
 800fad6:	e09f      	b.n	800fc18 <_printf_i+0x1ec>
 800fad8:	6820      	ldr	r0, [r4, #0]
 800fada:	682b      	ldr	r3, [r5, #0]
 800fadc:	0607      	lsls	r7, r0, #24
 800fade:	f103 0104 	add.w	r1, r3, #4
 800fae2:	6029      	str	r1, [r5, #0]
 800fae4:	d501      	bpl.n	800faea <_printf_i+0xbe>
 800fae6:	681e      	ldr	r6, [r3, #0]
 800fae8:	e003      	b.n	800faf2 <_printf_i+0xc6>
 800faea:	0646      	lsls	r6, r0, #25
 800faec:	d5fb      	bpl.n	800fae6 <_printf_i+0xba>
 800faee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800faf2:	2e00      	cmp	r6, #0
 800faf4:	da03      	bge.n	800fafe <_printf_i+0xd2>
 800faf6:	232d      	movs	r3, #45	; 0x2d
 800faf8:	4276      	negs	r6, r6
 800fafa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fafe:	485a      	ldr	r0, [pc, #360]	; (800fc68 <_printf_i+0x23c>)
 800fb00:	230a      	movs	r3, #10
 800fb02:	e012      	b.n	800fb2a <_printf_i+0xfe>
 800fb04:	682b      	ldr	r3, [r5, #0]
 800fb06:	6820      	ldr	r0, [r4, #0]
 800fb08:	1d19      	adds	r1, r3, #4
 800fb0a:	6029      	str	r1, [r5, #0]
 800fb0c:	0605      	lsls	r5, r0, #24
 800fb0e:	d501      	bpl.n	800fb14 <_printf_i+0xe8>
 800fb10:	681e      	ldr	r6, [r3, #0]
 800fb12:	e002      	b.n	800fb1a <_printf_i+0xee>
 800fb14:	0641      	lsls	r1, r0, #25
 800fb16:	d5fb      	bpl.n	800fb10 <_printf_i+0xe4>
 800fb18:	881e      	ldrh	r6, [r3, #0]
 800fb1a:	4853      	ldr	r0, [pc, #332]	; (800fc68 <_printf_i+0x23c>)
 800fb1c:	2f6f      	cmp	r7, #111	; 0x6f
 800fb1e:	bf0c      	ite	eq
 800fb20:	2308      	moveq	r3, #8
 800fb22:	230a      	movne	r3, #10
 800fb24:	2100      	movs	r1, #0
 800fb26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb2a:	6865      	ldr	r5, [r4, #4]
 800fb2c:	60a5      	str	r5, [r4, #8]
 800fb2e:	2d00      	cmp	r5, #0
 800fb30:	bfa2      	ittt	ge
 800fb32:	6821      	ldrge	r1, [r4, #0]
 800fb34:	f021 0104 	bicge.w	r1, r1, #4
 800fb38:	6021      	strge	r1, [r4, #0]
 800fb3a:	b90e      	cbnz	r6, 800fb40 <_printf_i+0x114>
 800fb3c:	2d00      	cmp	r5, #0
 800fb3e:	d04b      	beq.n	800fbd8 <_printf_i+0x1ac>
 800fb40:	4615      	mov	r5, r2
 800fb42:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb46:	fb03 6711 	mls	r7, r3, r1, r6
 800fb4a:	5dc7      	ldrb	r7, [r0, r7]
 800fb4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb50:	4637      	mov	r7, r6
 800fb52:	42bb      	cmp	r3, r7
 800fb54:	460e      	mov	r6, r1
 800fb56:	d9f4      	bls.n	800fb42 <_printf_i+0x116>
 800fb58:	2b08      	cmp	r3, #8
 800fb5a:	d10b      	bne.n	800fb74 <_printf_i+0x148>
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	07de      	lsls	r6, r3, #31
 800fb60:	d508      	bpl.n	800fb74 <_printf_i+0x148>
 800fb62:	6923      	ldr	r3, [r4, #16]
 800fb64:	6861      	ldr	r1, [r4, #4]
 800fb66:	4299      	cmp	r1, r3
 800fb68:	bfde      	ittt	le
 800fb6a:	2330      	movle	r3, #48	; 0x30
 800fb6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb74:	1b52      	subs	r2, r2, r5
 800fb76:	6122      	str	r2, [r4, #16]
 800fb78:	f8cd a000 	str.w	sl, [sp]
 800fb7c:	464b      	mov	r3, r9
 800fb7e:	aa03      	add	r2, sp, #12
 800fb80:	4621      	mov	r1, r4
 800fb82:	4640      	mov	r0, r8
 800fb84:	f7ff fee4 	bl	800f950 <_printf_common>
 800fb88:	3001      	adds	r0, #1
 800fb8a:	d14a      	bne.n	800fc22 <_printf_i+0x1f6>
 800fb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb90:	b004      	add	sp, #16
 800fb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb96:	6823      	ldr	r3, [r4, #0]
 800fb98:	f043 0320 	orr.w	r3, r3, #32
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	4833      	ldr	r0, [pc, #204]	; (800fc6c <_printf_i+0x240>)
 800fba0:	2778      	movs	r7, #120	; 0x78
 800fba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fba6:	6823      	ldr	r3, [r4, #0]
 800fba8:	6829      	ldr	r1, [r5, #0]
 800fbaa:	061f      	lsls	r7, r3, #24
 800fbac:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbb0:	d402      	bmi.n	800fbb8 <_printf_i+0x18c>
 800fbb2:	065f      	lsls	r7, r3, #25
 800fbb4:	bf48      	it	mi
 800fbb6:	b2b6      	uxthmi	r6, r6
 800fbb8:	07df      	lsls	r7, r3, #31
 800fbba:	bf48      	it	mi
 800fbbc:	f043 0320 	orrmi.w	r3, r3, #32
 800fbc0:	6029      	str	r1, [r5, #0]
 800fbc2:	bf48      	it	mi
 800fbc4:	6023      	strmi	r3, [r4, #0]
 800fbc6:	b91e      	cbnz	r6, 800fbd0 <_printf_i+0x1a4>
 800fbc8:	6823      	ldr	r3, [r4, #0]
 800fbca:	f023 0320 	bic.w	r3, r3, #32
 800fbce:	6023      	str	r3, [r4, #0]
 800fbd0:	2310      	movs	r3, #16
 800fbd2:	e7a7      	b.n	800fb24 <_printf_i+0xf8>
 800fbd4:	4824      	ldr	r0, [pc, #144]	; (800fc68 <_printf_i+0x23c>)
 800fbd6:	e7e4      	b.n	800fba2 <_printf_i+0x176>
 800fbd8:	4615      	mov	r5, r2
 800fbda:	e7bd      	b.n	800fb58 <_printf_i+0x12c>
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	6826      	ldr	r6, [r4, #0]
 800fbe0:	6961      	ldr	r1, [r4, #20]
 800fbe2:	1d18      	adds	r0, r3, #4
 800fbe4:	6028      	str	r0, [r5, #0]
 800fbe6:	0635      	lsls	r5, r6, #24
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	d501      	bpl.n	800fbf0 <_printf_i+0x1c4>
 800fbec:	6019      	str	r1, [r3, #0]
 800fbee:	e002      	b.n	800fbf6 <_printf_i+0x1ca>
 800fbf0:	0670      	lsls	r0, r6, #25
 800fbf2:	d5fb      	bpl.n	800fbec <_printf_i+0x1c0>
 800fbf4:	8019      	strh	r1, [r3, #0]
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	6123      	str	r3, [r4, #16]
 800fbfa:	4615      	mov	r5, r2
 800fbfc:	e7bc      	b.n	800fb78 <_printf_i+0x14c>
 800fbfe:	682b      	ldr	r3, [r5, #0]
 800fc00:	1d1a      	adds	r2, r3, #4
 800fc02:	602a      	str	r2, [r5, #0]
 800fc04:	681d      	ldr	r5, [r3, #0]
 800fc06:	6862      	ldr	r2, [r4, #4]
 800fc08:	2100      	movs	r1, #0
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	f7f0 fb18 	bl	8000240 <memchr>
 800fc10:	b108      	cbz	r0, 800fc16 <_printf_i+0x1ea>
 800fc12:	1b40      	subs	r0, r0, r5
 800fc14:	6060      	str	r0, [r4, #4]
 800fc16:	6863      	ldr	r3, [r4, #4]
 800fc18:	6123      	str	r3, [r4, #16]
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc20:	e7aa      	b.n	800fb78 <_printf_i+0x14c>
 800fc22:	6923      	ldr	r3, [r4, #16]
 800fc24:	462a      	mov	r2, r5
 800fc26:	4649      	mov	r1, r9
 800fc28:	4640      	mov	r0, r8
 800fc2a:	47d0      	blx	sl
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	d0ad      	beq.n	800fb8c <_printf_i+0x160>
 800fc30:	6823      	ldr	r3, [r4, #0]
 800fc32:	079b      	lsls	r3, r3, #30
 800fc34:	d413      	bmi.n	800fc5e <_printf_i+0x232>
 800fc36:	68e0      	ldr	r0, [r4, #12]
 800fc38:	9b03      	ldr	r3, [sp, #12]
 800fc3a:	4298      	cmp	r0, r3
 800fc3c:	bfb8      	it	lt
 800fc3e:	4618      	movlt	r0, r3
 800fc40:	e7a6      	b.n	800fb90 <_printf_i+0x164>
 800fc42:	2301      	movs	r3, #1
 800fc44:	4632      	mov	r2, r6
 800fc46:	4649      	mov	r1, r9
 800fc48:	4640      	mov	r0, r8
 800fc4a:	47d0      	blx	sl
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d09d      	beq.n	800fb8c <_printf_i+0x160>
 800fc50:	3501      	adds	r5, #1
 800fc52:	68e3      	ldr	r3, [r4, #12]
 800fc54:	9903      	ldr	r1, [sp, #12]
 800fc56:	1a5b      	subs	r3, r3, r1
 800fc58:	42ab      	cmp	r3, r5
 800fc5a:	dcf2      	bgt.n	800fc42 <_printf_i+0x216>
 800fc5c:	e7eb      	b.n	800fc36 <_printf_i+0x20a>
 800fc5e:	2500      	movs	r5, #0
 800fc60:	f104 0619 	add.w	r6, r4, #25
 800fc64:	e7f5      	b.n	800fc52 <_printf_i+0x226>
 800fc66:	bf00      	nop
 800fc68:	08013f32 	.word	0x08013f32
 800fc6c:	08013f43 	.word	0x08013f43

0800fc70 <_scanf_float>:
 800fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc74:	b087      	sub	sp, #28
 800fc76:	4617      	mov	r7, r2
 800fc78:	9303      	str	r3, [sp, #12]
 800fc7a:	688b      	ldr	r3, [r1, #8]
 800fc7c:	1e5a      	subs	r2, r3, #1
 800fc7e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fc82:	bf83      	ittte	hi
 800fc84:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fc88:	195b      	addhi	r3, r3, r5
 800fc8a:	9302      	strhi	r3, [sp, #8]
 800fc8c:	2300      	movls	r3, #0
 800fc8e:	bf86      	itte	hi
 800fc90:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fc94:	608b      	strhi	r3, [r1, #8]
 800fc96:	9302      	strls	r3, [sp, #8]
 800fc98:	680b      	ldr	r3, [r1, #0]
 800fc9a:	468b      	mov	fp, r1
 800fc9c:	2500      	movs	r5, #0
 800fc9e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fca2:	f84b 3b1c 	str.w	r3, [fp], #28
 800fca6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fcaa:	4680      	mov	r8, r0
 800fcac:	460c      	mov	r4, r1
 800fcae:	465e      	mov	r6, fp
 800fcb0:	46aa      	mov	sl, r5
 800fcb2:	46a9      	mov	r9, r5
 800fcb4:	9501      	str	r5, [sp, #4]
 800fcb6:	68a2      	ldr	r2, [r4, #8]
 800fcb8:	b152      	cbz	r2, 800fcd0 <_scanf_float+0x60>
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	2b4e      	cmp	r3, #78	; 0x4e
 800fcc0:	d864      	bhi.n	800fd8c <_scanf_float+0x11c>
 800fcc2:	2b40      	cmp	r3, #64	; 0x40
 800fcc4:	d83c      	bhi.n	800fd40 <_scanf_float+0xd0>
 800fcc6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fcca:	b2c8      	uxtb	r0, r1
 800fccc:	280e      	cmp	r0, #14
 800fcce:	d93a      	bls.n	800fd46 <_scanf_float+0xd6>
 800fcd0:	f1b9 0f00 	cmp.w	r9, #0
 800fcd4:	d003      	beq.n	800fcde <_scanf_float+0x6e>
 800fcd6:	6823      	ldr	r3, [r4, #0]
 800fcd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcdc:	6023      	str	r3, [r4, #0]
 800fcde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fce2:	f1ba 0f01 	cmp.w	sl, #1
 800fce6:	f200 8113 	bhi.w	800ff10 <_scanf_float+0x2a0>
 800fcea:	455e      	cmp	r6, fp
 800fcec:	f200 8105 	bhi.w	800fefa <_scanf_float+0x28a>
 800fcf0:	2501      	movs	r5, #1
 800fcf2:	4628      	mov	r0, r5
 800fcf4:	b007      	add	sp, #28
 800fcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcfa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fcfe:	2a0d      	cmp	r2, #13
 800fd00:	d8e6      	bhi.n	800fcd0 <_scanf_float+0x60>
 800fd02:	a101      	add	r1, pc, #4	; (adr r1, 800fd08 <_scanf_float+0x98>)
 800fd04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fd08:	0800fe47 	.word	0x0800fe47
 800fd0c:	0800fcd1 	.word	0x0800fcd1
 800fd10:	0800fcd1 	.word	0x0800fcd1
 800fd14:	0800fcd1 	.word	0x0800fcd1
 800fd18:	0800fea7 	.word	0x0800fea7
 800fd1c:	0800fe7f 	.word	0x0800fe7f
 800fd20:	0800fcd1 	.word	0x0800fcd1
 800fd24:	0800fcd1 	.word	0x0800fcd1
 800fd28:	0800fe55 	.word	0x0800fe55
 800fd2c:	0800fcd1 	.word	0x0800fcd1
 800fd30:	0800fcd1 	.word	0x0800fcd1
 800fd34:	0800fcd1 	.word	0x0800fcd1
 800fd38:	0800fcd1 	.word	0x0800fcd1
 800fd3c:	0800fe0d 	.word	0x0800fe0d
 800fd40:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fd44:	e7db      	b.n	800fcfe <_scanf_float+0x8e>
 800fd46:	290e      	cmp	r1, #14
 800fd48:	d8c2      	bhi.n	800fcd0 <_scanf_float+0x60>
 800fd4a:	a001      	add	r0, pc, #4	; (adr r0, 800fd50 <_scanf_float+0xe0>)
 800fd4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fd50:	0800fdff 	.word	0x0800fdff
 800fd54:	0800fcd1 	.word	0x0800fcd1
 800fd58:	0800fdff 	.word	0x0800fdff
 800fd5c:	0800fe93 	.word	0x0800fe93
 800fd60:	0800fcd1 	.word	0x0800fcd1
 800fd64:	0800fdad 	.word	0x0800fdad
 800fd68:	0800fde9 	.word	0x0800fde9
 800fd6c:	0800fde9 	.word	0x0800fde9
 800fd70:	0800fde9 	.word	0x0800fde9
 800fd74:	0800fde9 	.word	0x0800fde9
 800fd78:	0800fde9 	.word	0x0800fde9
 800fd7c:	0800fde9 	.word	0x0800fde9
 800fd80:	0800fde9 	.word	0x0800fde9
 800fd84:	0800fde9 	.word	0x0800fde9
 800fd88:	0800fde9 	.word	0x0800fde9
 800fd8c:	2b6e      	cmp	r3, #110	; 0x6e
 800fd8e:	d809      	bhi.n	800fda4 <_scanf_float+0x134>
 800fd90:	2b60      	cmp	r3, #96	; 0x60
 800fd92:	d8b2      	bhi.n	800fcfa <_scanf_float+0x8a>
 800fd94:	2b54      	cmp	r3, #84	; 0x54
 800fd96:	d077      	beq.n	800fe88 <_scanf_float+0x218>
 800fd98:	2b59      	cmp	r3, #89	; 0x59
 800fd9a:	d199      	bne.n	800fcd0 <_scanf_float+0x60>
 800fd9c:	2d07      	cmp	r5, #7
 800fd9e:	d197      	bne.n	800fcd0 <_scanf_float+0x60>
 800fda0:	2508      	movs	r5, #8
 800fda2:	e029      	b.n	800fdf8 <_scanf_float+0x188>
 800fda4:	2b74      	cmp	r3, #116	; 0x74
 800fda6:	d06f      	beq.n	800fe88 <_scanf_float+0x218>
 800fda8:	2b79      	cmp	r3, #121	; 0x79
 800fdaa:	e7f6      	b.n	800fd9a <_scanf_float+0x12a>
 800fdac:	6821      	ldr	r1, [r4, #0]
 800fdae:	05c8      	lsls	r0, r1, #23
 800fdb0:	d51a      	bpl.n	800fde8 <_scanf_float+0x178>
 800fdb2:	9b02      	ldr	r3, [sp, #8]
 800fdb4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fdb8:	6021      	str	r1, [r4, #0]
 800fdba:	f109 0901 	add.w	r9, r9, #1
 800fdbe:	b11b      	cbz	r3, 800fdc8 <_scanf_float+0x158>
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	3201      	adds	r2, #1
 800fdc4:	9302      	str	r3, [sp, #8]
 800fdc6:	60a2      	str	r2, [r4, #8]
 800fdc8:	68a3      	ldr	r3, [r4, #8]
 800fdca:	3b01      	subs	r3, #1
 800fdcc:	60a3      	str	r3, [r4, #8]
 800fdce:	6923      	ldr	r3, [r4, #16]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	6123      	str	r3, [r4, #16]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	607b      	str	r3, [r7, #4]
 800fddc:	f340 8084 	ble.w	800fee8 <_scanf_float+0x278>
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	3301      	adds	r3, #1
 800fde4:	603b      	str	r3, [r7, #0]
 800fde6:	e766      	b.n	800fcb6 <_scanf_float+0x46>
 800fde8:	eb1a 0f05 	cmn.w	sl, r5
 800fdec:	f47f af70 	bne.w	800fcd0 <_scanf_float+0x60>
 800fdf0:	6822      	ldr	r2, [r4, #0]
 800fdf2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fdf6:	6022      	str	r2, [r4, #0]
 800fdf8:	f806 3b01 	strb.w	r3, [r6], #1
 800fdfc:	e7e4      	b.n	800fdc8 <_scanf_float+0x158>
 800fdfe:	6822      	ldr	r2, [r4, #0]
 800fe00:	0610      	lsls	r0, r2, #24
 800fe02:	f57f af65 	bpl.w	800fcd0 <_scanf_float+0x60>
 800fe06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fe0a:	e7f4      	b.n	800fdf6 <_scanf_float+0x186>
 800fe0c:	f1ba 0f00 	cmp.w	sl, #0
 800fe10:	d10e      	bne.n	800fe30 <_scanf_float+0x1c0>
 800fe12:	f1b9 0f00 	cmp.w	r9, #0
 800fe16:	d10e      	bne.n	800fe36 <_scanf_float+0x1c6>
 800fe18:	6822      	ldr	r2, [r4, #0]
 800fe1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fe1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fe22:	d108      	bne.n	800fe36 <_scanf_float+0x1c6>
 800fe24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fe28:	6022      	str	r2, [r4, #0]
 800fe2a:	f04f 0a01 	mov.w	sl, #1
 800fe2e:	e7e3      	b.n	800fdf8 <_scanf_float+0x188>
 800fe30:	f1ba 0f02 	cmp.w	sl, #2
 800fe34:	d055      	beq.n	800fee2 <_scanf_float+0x272>
 800fe36:	2d01      	cmp	r5, #1
 800fe38:	d002      	beq.n	800fe40 <_scanf_float+0x1d0>
 800fe3a:	2d04      	cmp	r5, #4
 800fe3c:	f47f af48 	bne.w	800fcd0 <_scanf_float+0x60>
 800fe40:	3501      	adds	r5, #1
 800fe42:	b2ed      	uxtb	r5, r5
 800fe44:	e7d8      	b.n	800fdf8 <_scanf_float+0x188>
 800fe46:	f1ba 0f01 	cmp.w	sl, #1
 800fe4a:	f47f af41 	bne.w	800fcd0 <_scanf_float+0x60>
 800fe4e:	f04f 0a02 	mov.w	sl, #2
 800fe52:	e7d1      	b.n	800fdf8 <_scanf_float+0x188>
 800fe54:	b97d      	cbnz	r5, 800fe76 <_scanf_float+0x206>
 800fe56:	f1b9 0f00 	cmp.w	r9, #0
 800fe5a:	f47f af3c 	bne.w	800fcd6 <_scanf_float+0x66>
 800fe5e:	6822      	ldr	r2, [r4, #0]
 800fe60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fe64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fe68:	f47f af39 	bne.w	800fcde <_scanf_float+0x6e>
 800fe6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fe70:	6022      	str	r2, [r4, #0]
 800fe72:	2501      	movs	r5, #1
 800fe74:	e7c0      	b.n	800fdf8 <_scanf_float+0x188>
 800fe76:	2d03      	cmp	r5, #3
 800fe78:	d0e2      	beq.n	800fe40 <_scanf_float+0x1d0>
 800fe7a:	2d05      	cmp	r5, #5
 800fe7c:	e7de      	b.n	800fe3c <_scanf_float+0x1cc>
 800fe7e:	2d02      	cmp	r5, #2
 800fe80:	f47f af26 	bne.w	800fcd0 <_scanf_float+0x60>
 800fe84:	2503      	movs	r5, #3
 800fe86:	e7b7      	b.n	800fdf8 <_scanf_float+0x188>
 800fe88:	2d06      	cmp	r5, #6
 800fe8a:	f47f af21 	bne.w	800fcd0 <_scanf_float+0x60>
 800fe8e:	2507      	movs	r5, #7
 800fe90:	e7b2      	b.n	800fdf8 <_scanf_float+0x188>
 800fe92:	6822      	ldr	r2, [r4, #0]
 800fe94:	0591      	lsls	r1, r2, #22
 800fe96:	f57f af1b 	bpl.w	800fcd0 <_scanf_float+0x60>
 800fe9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fe9e:	6022      	str	r2, [r4, #0]
 800fea0:	f8cd 9004 	str.w	r9, [sp, #4]
 800fea4:	e7a8      	b.n	800fdf8 <_scanf_float+0x188>
 800fea6:	6822      	ldr	r2, [r4, #0]
 800fea8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800feac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800feb0:	d006      	beq.n	800fec0 <_scanf_float+0x250>
 800feb2:	0550      	lsls	r0, r2, #21
 800feb4:	f57f af0c 	bpl.w	800fcd0 <_scanf_float+0x60>
 800feb8:	f1b9 0f00 	cmp.w	r9, #0
 800febc:	f43f af0f 	beq.w	800fcde <_scanf_float+0x6e>
 800fec0:	0591      	lsls	r1, r2, #22
 800fec2:	bf58      	it	pl
 800fec4:	9901      	ldrpl	r1, [sp, #4]
 800fec6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800feca:	bf58      	it	pl
 800fecc:	eba9 0101 	subpl.w	r1, r9, r1
 800fed0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fed4:	bf58      	it	pl
 800fed6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800feda:	6022      	str	r2, [r4, #0]
 800fedc:	f04f 0900 	mov.w	r9, #0
 800fee0:	e78a      	b.n	800fdf8 <_scanf_float+0x188>
 800fee2:	f04f 0a03 	mov.w	sl, #3
 800fee6:	e787      	b.n	800fdf8 <_scanf_float+0x188>
 800fee8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800feec:	4639      	mov	r1, r7
 800feee:	4640      	mov	r0, r8
 800fef0:	4798      	blx	r3
 800fef2:	2800      	cmp	r0, #0
 800fef4:	f43f aedf 	beq.w	800fcb6 <_scanf_float+0x46>
 800fef8:	e6ea      	b.n	800fcd0 <_scanf_float+0x60>
 800fefa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fefe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff02:	463a      	mov	r2, r7
 800ff04:	4640      	mov	r0, r8
 800ff06:	4798      	blx	r3
 800ff08:	6923      	ldr	r3, [r4, #16]
 800ff0a:	3b01      	subs	r3, #1
 800ff0c:	6123      	str	r3, [r4, #16]
 800ff0e:	e6ec      	b.n	800fcea <_scanf_float+0x7a>
 800ff10:	1e6b      	subs	r3, r5, #1
 800ff12:	2b06      	cmp	r3, #6
 800ff14:	d825      	bhi.n	800ff62 <_scanf_float+0x2f2>
 800ff16:	2d02      	cmp	r5, #2
 800ff18:	d836      	bhi.n	800ff88 <_scanf_float+0x318>
 800ff1a:	455e      	cmp	r6, fp
 800ff1c:	f67f aee8 	bls.w	800fcf0 <_scanf_float+0x80>
 800ff20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff28:	463a      	mov	r2, r7
 800ff2a:	4640      	mov	r0, r8
 800ff2c:	4798      	blx	r3
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	3b01      	subs	r3, #1
 800ff32:	6123      	str	r3, [r4, #16]
 800ff34:	e7f1      	b.n	800ff1a <_scanf_float+0x2aa>
 800ff36:	9802      	ldr	r0, [sp, #8]
 800ff38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ff40:	9002      	str	r0, [sp, #8]
 800ff42:	463a      	mov	r2, r7
 800ff44:	4640      	mov	r0, r8
 800ff46:	4798      	blx	r3
 800ff48:	6923      	ldr	r3, [r4, #16]
 800ff4a:	3b01      	subs	r3, #1
 800ff4c:	6123      	str	r3, [r4, #16]
 800ff4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff52:	fa5f fa8a 	uxtb.w	sl, sl
 800ff56:	f1ba 0f02 	cmp.w	sl, #2
 800ff5a:	d1ec      	bne.n	800ff36 <_scanf_float+0x2c6>
 800ff5c:	3d03      	subs	r5, #3
 800ff5e:	b2ed      	uxtb	r5, r5
 800ff60:	1b76      	subs	r6, r6, r5
 800ff62:	6823      	ldr	r3, [r4, #0]
 800ff64:	05da      	lsls	r2, r3, #23
 800ff66:	d52f      	bpl.n	800ffc8 <_scanf_float+0x358>
 800ff68:	055b      	lsls	r3, r3, #21
 800ff6a:	d510      	bpl.n	800ff8e <_scanf_float+0x31e>
 800ff6c:	455e      	cmp	r6, fp
 800ff6e:	f67f aebf 	bls.w	800fcf0 <_scanf_float+0x80>
 800ff72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff7a:	463a      	mov	r2, r7
 800ff7c:	4640      	mov	r0, r8
 800ff7e:	4798      	blx	r3
 800ff80:	6923      	ldr	r3, [r4, #16]
 800ff82:	3b01      	subs	r3, #1
 800ff84:	6123      	str	r3, [r4, #16]
 800ff86:	e7f1      	b.n	800ff6c <_scanf_float+0x2fc>
 800ff88:	46aa      	mov	sl, r5
 800ff8a:	9602      	str	r6, [sp, #8]
 800ff8c:	e7df      	b.n	800ff4e <_scanf_float+0x2de>
 800ff8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ff92:	6923      	ldr	r3, [r4, #16]
 800ff94:	2965      	cmp	r1, #101	; 0x65
 800ff96:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff9a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ff9e:	6123      	str	r3, [r4, #16]
 800ffa0:	d00c      	beq.n	800ffbc <_scanf_float+0x34c>
 800ffa2:	2945      	cmp	r1, #69	; 0x45
 800ffa4:	d00a      	beq.n	800ffbc <_scanf_float+0x34c>
 800ffa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffaa:	463a      	mov	r2, r7
 800ffac:	4640      	mov	r0, r8
 800ffae:	4798      	blx	r3
 800ffb0:	6923      	ldr	r3, [r4, #16]
 800ffb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	1eb5      	subs	r5, r6, #2
 800ffba:	6123      	str	r3, [r4, #16]
 800ffbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffc0:	463a      	mov	r2, r7
 800ffc2:	4640      	mov	r0, r8
 800ffc4:	4798      	blx	r3
 800ffc6:	462e      	mov	r6, r5
 800ffc8:	6825      	ldr	r5, [r4, #0]
 800ffca:	f015 0510 	ands.w	r5, r5, #16
 800ffce:	d158      	bne.n	8010082 <_scanf_float+0x412>
 800ffd0:	7035      	strb	r5, [r6, #0]
 800ffd2:	6823      	ldr	r3, [r4, #0]
 800ffd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ffd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffdc:	d11c      	bne.n	8010018 <_scanf_float+0x3a8>
 800ffde:	9b01      	ldr	r3, [sp, #4]
 800ffe0:	454b      	cmp	r3, r9
 800ffe2:	eba3 0209 	sub.w	r2, r3, r9
 800ffe6:	d124      	bne.n	8010032 <_scanf_float+0x3c2>
 800ffe8:	2200      	movs	r2, #0
 800ffea:	4659      	mov	r1, fp
 800ffec:	4640      	mov	r0, r8
 800ffee:	f002 fd0f 	bl	8012a10 <_strtod_r>
 800fff2:	9b03      	ldr	r3, [sp, #12]
 800fff4:	6821      	ldr	r1, [r4, #0]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f011 0f02 	tst.w	r1, #2
 800fffc:	ec57 6b10 	vmov	r6, r7, d0
 8010000:	f103 0204 	add.w	r2, r3, #4
 8010004:	d020      	beq.n	8010048 <_scanf_float+0x3d8>
 8010006:	9903      	ldr	r1, [sp, #12]
 8010008:	600a      	str	r2, [r1, #0]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	e9c3 6700 	strd	r6, r7, [r3]
 8010010:	68e3      	ldr	r3, [r4, #12]
 8010012:	3301      	adds	r3, #1
 8010014:	60e3      	str	r3, [r4, #12]
 8010016:	e66c      	b.n	800fcf2 <_scanf_float+0x82>
 8010018:	9b04      	ldr	r3, [sp, #16]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d0e4      	beq.n	800ffe8 <_scanf_float+0x378>
 801001e:	9905      	ldr	r1, [sp, #20]
 8010020:	230a      	movs	r3, #10
 8010022:	462a      	mov	r2, r5
 8010024:	3101      	adds	r1, #1
 8010026:	4640      	mov	r0, r8
 8010028:	f002 fd7a 	bl	8012b20 <_strtol_r>
 801002c:	9b04      	ldr	r3, [sp, #16]
 801002e:	9e05      	ldr	r6, [sp, #20]
 8010030:	1ac2      	subs	r2, r0, r3
 8010032:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010036:	429e      	cmp	r6, r3
 8010038:	bf28      	it	cs
 801003a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801003e:	4912      	ldr	r1, [pc, #72]	; (8010088 <_scanf_float+0x418>)
 8010040:	4630      	mov	r0, r6
 8010042:	f000 f8e7 	bl	8010214 <siprintf>
 8010046:	e7cf      	b.n	800ffe8 <_scanf_float+0x378>
 8010048:	f011 0f04 	tst.w	r1, #4
 801004c:	9903      	ldr	r1, [sp, #12]
 801004e:	600a      	str	r2, [r1, #0]
 8010050:	d1db      	bne.n	801000a <_scanf_float+0x39a>
 8010052:	f8d3 8000 	ldr.w	r8, [r3]
 8010056:	ee10 2a10 	vmov	r2, s0
 801005a:	ee10 0a10 	vmov	r0, s0
 801005e:	463b      	mov	r3, r7
 8010060:	4639      	mov	r1, r7
 8010062:	f7f0 fd9b 	bl	8000b9c <__aeabi_dcmpun>
 8010066:	b128      	cbz	r0, 8010074 <_scanf_float+0x404>
 8010068:	4808      	ldr	r0, [pc, #32]	; (801008c <_scanf_float+0x41c>)
 801006a:	f000 fa77 	bl	801055c <nanf>
 801006e:	ed88 0a00 	vstr	s0, [r8]
 8010072:	e7cd      	b.n	8010010 <_scanf_float+0x3a0>
 8010074:	4630      	mov	r0, r6
 8010076:	4639      	mov	r1, r7
 8010078:	f7f0 fdee 	bl	8000c58 <__aeabi_d2f>
 801007c:	f8c8 0000 	str.w	r0, [r8]
 8010080:	e7c6      	b.n	8010010 <_scanf_float+0x3a0>
 8010082:	2500      	movs	r5, #0
 8010084:	e635      	b.n	800fcf2 <_scanf_float+0x82>
 8010086:	bf00      	nop
 8010088:	08013f54 	.word	0x08013f54
 801008c:	08014005 	.word	0x08014005

08010090 <std>:
 8010090:	2300      	movs	r3, #0
 8010092:	b510      	push	{r4, lr}
 8010094:	4604      	mov	r4, r0
 8010096:	e9c0 3300 	strd	r3, r3, [r0]
 801009a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801009e:	6083      	str	r3, [r0, #8]
 80100a0:	8181      	strh	r1, [r0, #12]
 80100a2:	6643      	str	r3, [r0, #100]	; 0x64
 80100a4:	81c2      	strh	r2, [r0, #14]
 80100a6:	6183      	str	r3, [r0, #24]
 80100a8:	4619      	mov	r1, r3
 80100aa:	2208      	movs	r2, #8
 80100ac:	305c      	adds	r0, #92	; 0x5c
 80100ae:	f000 f94d 	bl	801034c <memset>
 80100b2:	4b0d      	ldr	r3, [pc, #52]	; (80100e8 <std+0x58>)
 80100b4:	6263      	str	r3, [r4, #36]	; 0x24
 80100b6:	4b0d      	ldr	r3, [pc, #52]	; (80100ec <std+0x5c>)
 80100b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80100ba:	4b0d      	ldr	r3, [pc, #52]	; (80100f0 <std+0x60>)
 80100bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100be:	4b0d      	ldr	r3, [pc, #52]	; (80100f4 <std+0x64>)
 80100c0:	6323      	str	r3, [r4, #48]	; 0x30
 80100c2:	4b0d      	ldr	r3, [pc, #52]	; (80100f8 <std+0x68>)
 80100c4:	6224      	str	r4, [r4, #32]
 80100c6:	429c      	cmp	r4, r3
 80100c8:	d006      	beq.n	80100d8 <std+0x48>
 80100ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80100ce:	4294      	cmp	r4, r2
 80100d0:	d002      	beq.n	80100d8 <std+0x48>
 80100d2:	33d0      	adds	r3, #208	; 0xd0
 80100d4:	429c      	cmp	r4, r3
 80100d6:	d105      	bne.n	80100e4 <std+0x54>
 80100d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100e0:	f000 ba22 	b.w	8010528 <__retarget_lock_init_recursive>
 80100e4:	bd10      	pop	{r4, pc}
 80100e6:	bf00      	nop
 80100e8:	08010255 	.word	0x08010255
 80100ec:	08010277 	.word	0x08010277
 80100f0:	080102af 	.word	0x080102af
 80100f4:	080102d3 	.word	0x080102d3
 80100f8:	2000224c 	.word	0x2000224c

080100fc <stdio_exit_handler>:
 80100fc:	4a02      	ldr	r2, [pc, #8]	; (8010108 <stdio_exit_handler+0xc>)
 80100fe:	4903      	ldr	r1, [pc, #12]	; (801010c <stdio_exit_handler+0x10>)
 8010100:	4803      	ldr	r0, [pc, #12]	; (8010110 <stdio_exit_handler+0x14>)
 8010102:	f000 b869 	b.w	80101d8 <_fwalk_sglue>
 8010106:	bf00      	nop
 8010108:	20000230 	.word	0x20000230
 801010c:	08013169 	.word	0x08013169
 8010110:	2000023c 	.word	0x2000023c

08010114 <cleanup_stdio>:
 8010114:	6841      	ldr	r1, [r0, #4]
 8010116:	4b0c      	ldr	r3, [pc, #48]	; (8010148 <cleanup_stdio+0x34>)
 8010118:	4299      	cmp	r1, r3
 801011a:	b510      	push	{r4, lr}
 801011c:	4604      	mov	r4, r0
 801011e:	d001      	beq.n	8010124 <cleanup_stdio+0x10>
 8010120:	f003 f822 	bl	8013168 <_fflush_r>
 8010124:	68a1      	ldr	r1, [r4, #8]
 8010126:	4b09      	ldr	r3, [pc, #36]	; (801014c <cleanup_stdio+0x38>)
 8010128:	4299      	cmp	r1, r3
 801012a:	d002      	beq.n	8010132 <cleanup_stdio+0x1e>
 801012c:	4620      	mov	r0, r4
 801012e:	f003 f81b 	bl	8013168 <_fflush_r>
 8010132:	68e1      	ldr	r1, [r4, #12]
 8010134:	4b06      	ldr	r3, [pc, #24]	; (8010150 <cleanup_stdio+0x3c>)
 8010136:	4299      	cmp	r1, r3
 8010138:	d004      	beq.n	8010144 <cleanup_stdio+0x30>
 801013a:	4620      	mov	r0, r4
 801013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010140:	f003 b812 	b.w	8013168 <_fflush_r>
 8010144:	bd10      	pop	{r4, pc}
 8010146:	bf00      	nop
 8010148:	2000224c 	.word	0x2000224c
 801014c:	200022b4 	.word	0x200022b4
 8010150:	2000231c 	.word	0x2000231c

08010154 <global_stdio_init.part.0>:
 8010154:	b510      	push	{r4, lr}
 8010156:	4b0b      	ldr	r3, [pc, #44]	; (8010184 <global_stdio_init.part.0+0x30>)
 8010158:	4c0b      	ldr	r4, [pc, #44]	; (8010188 <global_stdio_init.part.0+0x34>)
 801015a:	4a0c      	ldr	r2, [pc, #48]	; (801018c <global_stdio_init.part.0+0x38>)
 801015c:	601a      	str	r2, [r3, #0]
 801015e:	4620      	mov	r0, r4
 8010160:	2200      	movs	r2, #0
 8010162:	2104      	movs	r1, #4
 8010164:	f7ff ff94 	bl	8010090 <std>
 8010168:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801016c:	2201      	movs	r2, #1
 801016e:	2109      	movs	r1, #9
 8010170:	f7ff ff8e 	bl	8010090 <std>
 8010174:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010178:	2202      	movs	r2, #2
 801017a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801017e:	2112      	movs	r1, #18
 8010180:	f7ff bf86 	b.w	8010090 <std>
 8010184:	20002384 	.word	0x20002384
 8010188:	2000224c 	.word	0x2000224c
 801018c:	080100fd 	.word	0x080100fd

08010190 <__sfp_lock_acquire>:
 8010190:	4801      	ldr	r0, [pc, #4]	; (8010198 <__sfp_lock_acquire+0x8>)
 8010192:	f000 b9ca 	b.w	801052a <__retarget_lock_acquire_recursive>
 8010196:	bf00      	nop
 8010198:	2000238d 	.word	0x2000238d

0801019c <__sfp_lock_release>:
 801019c:	4801      	ldr	r0, [pc, #4]	; (80101a4 <__sfp_lock_release+0x8>)
 801019e:	f000 b9c5 	b.w	801052c <__retarget_lock_release_recursive>
 80101a2:	bf00      	nop
 80101a4:	2000238d 	.word	0x2000238d

080101a8 <__sinit>:
 80101a8:	b510      	push	{r4, lr}
 80101aa:	4604      	mov	r4, r0
 80101ac:	f7ff fff0 	bl	8010190 <__sfp_lock_acquire>
 80101b0:	6a23      	ldr	r3, [r4, #32]
 80101b2:	b11b      	cbz	r3, 80101bc <__sinit+0x14>
 80101b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101b8:	f7ff bff0 	b.w	801019c <__sfp_lock_release>
 80101bc:	4b04      	ldr	r3, [pc, #16]	; (80101d0 <__sinit+0x28>)
 80101be:	6223      	str	r3, [r4, #32]
 80101c0:	4b04      	ldr	r3, [pc, #16]	; (80101d4 <__sinit+0x2c>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1f5      	bne.n	80101b4 <__sinit+0xc>
 80101c8:	f7ff ffc4 	bl	8010154 <global_stdio_init.part.0>
 80101cc:	e7f2      	b.n	80101b4 <__sinit+0xc>
 80101ce:	bf00      	nop
 80101d0:	08010115 	.word	0x08010115
 80101d4:	20002384 	.word	0x20002384

080101d8 <_fwalk_sglue>:
 80101d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101dc:	4607      	mov	r7, r0
 80101de:	4688      	mov	r8, r1
 80101e0:	4614      	mov	r4, r2
 80101e2:	2600      	movs	r6, #0
 80101e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101e8:	f1b9 0901 	subs.w	r9, r9, #1
 80101ec:	d505      	bpl.n	80101fa <_fwalk_sglue+0x22>
 80101ee:	6824      	ldr	r4, [r4, #0]
 80101f0:	2c00      	cmp	r4, #0
 80101f2:	d1f7      	bne.n	80101e4 <_fwalk_sglue+0xc>
 80101f4:	4630      	mov	r0, r6
 80101f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101fa:	89ab      	ldrh	r3, [r5, #12]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d907      	bls.n	8010210 <_fwalk_sglue+0x38>
 8010200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010204:	3301      	adds	r3, #1
 8010206:	d003      	beq.n	8010210 <_fwalk_sglue+0x38>
 8010208:	4629      	mov	r1, r5
 801020a:	4638      	mov	r0, r7
 801020c:	47c0      	blx	r8
 801020e:	4306      	orrs	r6, r0
 8010210:	3568      	adds	r5, #104	; 0x68
 8010212:	e7e9      	b.n	80101e8 <_fwalk_sglue+0x10>

08010214 <siprintf>:
 8010214:	b40e      	push	{r1, r2, r3}
 8010216:	b500      	push	{lr}
 8010218:	b09c      	sub	sp, #112	; 0x70
 801021a:	ab1d      	add	r3, sp, #116	; 0x74
 801021c:	9002      	str	r0, [sp, #8]
 801021e:	9006      	str	r0, [sp, #24]
 8010220:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010224:	4809      	ldr	r0, [pc, #36]	; (801024c <siprintf+0x38>)
 8010226:	9107      	str	r1, [sp, #28]
 8010228:	9104      	str	r1, [sp, #16]
 801022a:	4909      	ldr	r1, [pc, #36]	; (8010250 <siprintf+0x3c>)
 801022c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010230:	9105      	str	r1, [sp, #20]
 8010232:	6800      	ldr	r0, [r0, #0]
 8010234:	9301      	str	r3, [sp, #4]
 8010236:	a902      	add	r1, sp, #8
 8010238:	f002 fcce 	bl	8012bd8 <_svfiprintf_r>
 801023c:	9b02      	ldr	r3, [sp, #8]
 801023e:	2200      	movs	r2, #0
 8010240:	701a      	strb	r2, [r3, #0]
 8010242:	b01c      	add	sp, #112	; 0x70
 8010244:	f85d eb04 	ldr.w	lr, [sp], #4
 8010248:	b003      	add	sp, #12
 801024a:	4770      	bx	lr
 801024c:	20000288 	.word	0x20000288
 8010250:	ffff0208 	.word	0xffff0208

08010254 <__sread>:
 8010254:	b510      	push	{r4, lr}
 8010256:	460c      	mov	r4, r1
 8010258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801025c:	f000 f916 	bl	801048c <_read_r>
 8010260:	2800      	cmp	r0, #0
 8010262:	bfab      	itete	ge
 8010264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010266:	89a3      	ldrhlt	r3, [r4, #12]
 8010268:	181b      	addge	r3, r3, r0
 801026a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801026e:	bfac      	ite	ge
 8010270:	6563      	strge	r3, [r4, #84]	; 0x54
 8010272:	81a3      	strhlt	r3, [r4, #12]
 8010274:	bd10      	pop	{r4, pc}

08010276 <__swrite>:
 8010276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801027a:	461f      	mov	r7, r3
 801027c:	898b      	ldrh	r3, [r1, #12]
 801027e:	05db      	lsls	r3, r3, #23
 8010280:	4605      	mov	r5, r0
 8010282:	460c      	mov	r4, r1
 8010284:	4616      	mov	r6, r2
 8010286:	d505      	bpl.n	8010294 <__swrite+0x1e>
 8010288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801028c:	2302      	movs	r3, #2
 801028e:	2200      	movs	r2, #0
 8010290:	f000 f8ea 	bl	8010468 <_lseek_r>
 8010294:	89a3      	ldrh	r3, [r4, #12]
 8010296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801029a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801029e:	81a3      	strh	r3, [r4, #12]
 80102a0:	4632      	mov	r2, r6
 80102a2:	463b      	mov	r3, r7
 80102a4:	4628      	mov	r0, r5
 80102a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102aa:	f000 b901 	b.w	80104b0 <_write_r>

080102ae <__sseek>:
 80102ae:	b510      	push	{r4, lr}
 80102b0:	460c      	mov	r4, r1
 80102b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b6:	f000 f8d7 	bl	8010468 <_lseek_r>
 80102ba:	1c43      	adds	r3, r0, #1
 80102bc:	89a3      	ldrh	r3, [r4, #12]
 80102be:	bf15      	itete	ne
 80102c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80102c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102ca:	81a3      	strheq	r3, [r4, #12]
 80102cc:	bf18      	it	ne
 80102ce:	81a3      	strhne	r3, [r4, #12]
 80102d0:	bd10      	pop	{r4, pc}

080102d2 <__sclose>:
 80102d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d6:	f000 b8b7 	b.w	8010448 <_close_r>

080102da <_vsniprintf_r>:
 80102da:	b530      	push	{r4, r5, lr}
 80102dc:	4614      	mov	r4, r2
 80102de:	2c00      	cmp	r4, #0
 80102e0:	b09b      	sub	sp, #108	; 0x6c
 80102e2:	4605      	mov	r5, r0
 80102e4:	461a      	mov	r2, r3
 80102e6:	da05      	bge.n	80102f4 <_vsniprintf_r+0x1a>
 80102e8:	238b      	movs	r3, #139	; 0x8b
 80102ea:	6003      	str	r3, [r0, #0]
 80102ec:	f04f 30ff 	mov.w	r0, #4294967295
 80102f0:	b01b      	add	sp, #108	; 0x6c
 80102f2:	bd30      	pop	{r4, r5, pc}
 80102f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80102f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80102fc:	bf14      	ite	ne
 80102fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010302:	4623      	moveq	r3, r4
 8010304:	9302      	str	r3, [sp, #8]
 8010306:	9305      	str	r3, [sp, #20]
 8010308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801030c:	9100      	str	r1, [sp, #0]
 801030e:	9104      	str	r1, [sp, #16]
 8010310:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010314:	4669      	mov	r1, sp
 8010316:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010318:	f002 fc5e 	bl	8012bd8 <_svfiprintf_r>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	bfbc      	itt	lt
 8010320:	238b      	movlt	r3, #139	; 0x8b
 8010322:	602b      	strlt	r3, [r5, #0]
 8010324:	2c00      	cmp	r4, #0
 8010326:	d0e3      	beq.n	80102f0 <_vsniprintf_r+0x16>
 8010328:	9b00      	ldr	r3, [sp, #0]
 801032a:	2200      	movs	r2, #0
 801032c:	701a      	strb	r2, [r3, #0]
 801032e:	e7df      	b.n	80102f0 <_vsniprintf_r+0x16>

08010330 <vsniprintf>:
 8010330:	b507      	push	{r0, r1, r2, lr}
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	4613      	mov	r3, r2
 8010336:	460a      	mov	r2, r1
 8010338:	4601      	mov	r1, r0
 801033a:	4803      	ldr	r0, [pc, #12]	; (8010348 <vsniprintf+0x18>)
 801033c:	6800      	ldr	r0, [r0, #0]
 801033e:	f7ff ffcc 	bl	80102da <_vsniprintf_r>
 8010342:	b003      	add	sp, #12
 8010344:	f85d fb04 	ldr.w	pc, [sp], #4
 8010348:	20000288 	.word	0x20000288

0801034c <memset>:
 801034c:	4402      	add	r2, r0
 801034e:	4603      	mov	r3, r0
 8010350:	4293      	cmp	r3, r2
 8010352:	d100      	bne.n	8010356 <memset+0xa>
 8010354:	4770      	bx	lr
 8010356:	f803 1b01 	strb.w	r1, [r3], #1
 801035a:	e7f9      	b.n	8010350 <memset+0x4>

0801035c <strtok>:
 801035c:	4b16      	ldr	r3, [pc, #88]	; (80103b8 <strtok+0x5c>)
 801035e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010360:	681e      	ldr	r6, [r3, #0]
 8010362:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8010364:	4605      	mov	r5, r0
 8010366:	b9fc      	cbnz	r4, 80103a8 <strtok+0x4c>
 8010368:	2050      	movs	r0, #80	; 0x50
 801036a:	9101      	str	r1, [sp, #4]
 801036c:	f000 ffe2 	bl	8011334 <malloc>
 8010370:	9901      	ldr	r1, [sp, #4]
 8010372:	6470      	str	r0, [r6, #68]	; 0x44
 8010374:	4602      	mov	r2, r0
 8010376:	b920      	cbnz	r0, 8010382 <strtok+0x26>
 8010378:	4b10      	ldr	r3, [pc, #64]	; (80103bc <strtok+0x60>)
 801037a:	4811      	ldr	r0, [pc, #68]	; (80103c0 <strtok+0x64>)
 801037c:	215b      	movs	r1, #91	; 0x5b
 801037e:	f000 f8f3 	bl	8010568 <__assert_func>
 8010382:	e9c0 4400 	strd	r4, r4, [r0]
 8010386:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801038a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801038e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010392:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010396:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801039a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801039e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80103a2:	6184      	str	r4, [r0, #24]
 80103a4:	7704      	strb	r4, [r0, #28]
 80103a6:	6244      	str	r4, [r0, #36]	; 0x24
 80103a8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80103aa:	2301      	movs	r3, #1
 80103ac:	4628      	mov	r0, r5
 80103ae:	b002      	add	sp, #8
 80103b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103b4:	f000 b806 	b.w	80103c4 <__strtok_r>
 80103b8:	20000288 	.word	0x20000288
 80103bc:	08013f59 	.word	0x08013f59
 80103c0:	08013f70 	.word	0x08013f70

080103c4 <__strtok_r>:
 80103c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103c6:	b908      	cbnz	r0, 80103cc <__strtok_r+0x8>
 80103c8:	6810      	ldr	r0, [r2, #0]
 80103ca:	b188      	cbz	r0, 80103f0 <__strtok_r+0x2c>
 80103cc:	4604      	mov	r4, r0
 80103ce:	4620      	mov	r0, r4
 80103d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80103d4:	460f      	mov	r7, r1
 80103d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80103da:	b91e      	cbnz	r6, 80103e4 <__strtok_r+0x20>
 80103dc:	b965      	cbnz	r5, 80103f8 <__strtok_r+0x34>
 80103de:	6015      	str	r5, [r2, #0]
 80103e0:	4628      	mov	r0, r5
 80103e2:	e005      	b.n	80103f0 <__strtok_r+0x2c>
 80103e4:	42b5      	cmp	r5, r6
 80103e6:	d1f6      	bne.n	80103d6 <__strtok_r+0x12>
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d1f0      	bne.n	80103ce <__strtok_r+0xa>
 80103ec:	6014      	str	r4, [r2, #0]
 80103ee:	7003      	strb	r3, [r0, #0]
 80103f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103f2:	461c      	mov	r4, r3
 80103f4:	e00c      	b.n	8010410 <__strtok_r+0x4c>
 80103f6:	b915      	cbnz	r5, 80103fe <__strtok_r+0x3a>
 80103f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80103fc:	460e      	mov	r6, r1
 80103fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010402:	42ab      	cmp	r3, r5
 8010404:	d1f7      	bne.n	80103f6 <__strtok_r+0x32>
 8010406:	2b00      	cmp	r3, #0
 8010408:	d0f3      	beq.n	80103f2 <__strtok_r+0x2e>
 801040a:	2300      	movs	r3, #0
 801040c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010410:	6014      	str	r4, [r2, #0]
 8010412:	e7ed      	b.n	80103f0 <__strtok_r+0x2c>

08010414 <strstr>:
 8010414:	780a      	ldrb	r2, [r1, #0]
 8010416:	b570      	push	{r4, r5, r6, lr}
 8010418:	b96a      	cbnz	r2, 8010436 <strstr+0x22>
 801041a:	bd70      	pop	{r4, r5, r6, pc}
 801041c:	429a      	cmp	r2, r3
 801041e:	d109      	bne.n	8010434 <strstr+0x20>
 8010420:	460c      	mov	r4, r1
 8010422:	4605      	mov	r5, r0
 8010424:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010428:	2b00      	cmp	r3, #0
 801042a:	d0f6      	beq.n	801041a <strstr+0x6>
 801042c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010430:	429e      	cmp	r6, r3
 8010432:	d0f7      	beq.n	8010424 <strstr+0x10>
 8010434:	3001      	adds	r0, #1
 8010436:	7803      	ldrb	r3, [r0, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d1ef      	bne.n	801041c <strstr+0x8>
 801043c:	4618      	mov	r0, r3
 801043e:	e7ec      	b.n	801041a <strstr+0x6>

08010440 <_localeconv_r>:
 8010440:	4800      	ldr	r0, [pc, #0]	; (8010444 <_localeconv_r+0x4>)
 8010442:	4770      	bx	lr
 8010444:	2000037c 	.word	0x2000037c

08010448 <_close_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4d06      	ldr	r5, [pc, #24]	; (8010464 <_close_r+0x1c>)
 801044c:	2300      	movs	r3, #0
 801044e:	4604      	mov	r4, r0
 8010450:	4608      	mov	r0, r1
 8010452:	602b      	str	r3, [r5, #0]
 8010454:	f7f1 f90b 	bl	800166e <_close>
 8010458:	1c43      	adds	r3, r0, #1
 801045a:	d102      	bne.n	8010462 <_close_r+0x1a>
 801045c:	682b      	ldr	r3, [r5, #0]
 801045e:	b103      	cbz	r3, 8010462 <_close_r+0x1a>
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	bd38      	pop	{r3, r4, r5, pc}
 8010464:	20002388 	.word	0x20002388

08010468 <_lseek_r>:
 8010468:	b538      	push	{r3, r4, r5, lr}
 801046a:	4d07      	ldr	r5, [pc, #28]	; (8010488 <_lseek_r+0x20>)
 801046c:	4604      	mov	r4, r0
 801046e:	4608      	mov	r0, r1
 8010470:	4611      	mov	r1, r2
 8010472:	2200      	movs	r2, #0
 8010474:	602a      	str	r2, [r5, #0]
 8010476:	461a      	mov	r2, r3
 8010478:	f7f1 f920 	bl	80016bc <_lseek>
 801047c:	1c43      	adds	r3, r0, #1
 801047e:	d102      	bne.n	8010486 <_lseek_r+0x1e>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	b103      	cbz	r3, 8010486 <_lseek_r+0x1e>
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	20002388 	.word	0x20002388

0801048c <_read_r>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	4d07      	ldr	r5, [pc, #28]	; (80104ac <_read_r+0x20>)
 8010490:	4604      	mov	r4, r0
 8010492:	4608      	mov	r0, r1
 8010494:	4611      	mov	r1, r2
 8010496:	2200      	movs	r2, #0
 8010498:	602a      	str	r2, [r5, #0]
 801049a:	461a      	mov	r2, r3
 801049c:	f7f1 f8ae 	bl	80015fc <_read>
 80104a0:	1c43      	adds	r3, r0, #1
 80104a2:	d102      	bne.n	80104aa <_read_r+0x1e>
 80104a4:	682b      	ldr	r3, [r5, #0]
 80104a6:	b103      	cbz	r3, 80104aa <_read_r+0x1e>
 80104a8:	6023      	str	r3, [r4, #0]
 80104aa:	bd38      	pop	{r3, r4, r5, pc}
 80104ac:	20002388 	.word	0x20002388

080104b0 <_write_r>:
 80104b0:	b538      	push	{r3, r4, r5, lr}
 80104b2:	4d07      	ldr	r5, [pc, #28]	; (80104d0 <_write_r+0x20>)
 80104b4:	4604      	mov	r4, r0
 80104b6:	4608      	mov	r0, r1
 80104b8:	4611      	mov	r1, r2
 80104ba:	2200      	movs	r2, #0
 80104bc:	602a      	str	r2, [r5, #0]
 80104be:	461a      	mov	r2, r3
 80104c0:	f7f1 f8b9 	bl	8001636 <_write>
 80104c4:	1c43      	adds	r3, r0, #1
 80104c6:	d102      	bne.n	80104ce <_write_r+0x1e>
 80104c8:	682b      	ldr	r3, [r5, #0]
 80104ca:	b103      	cbz	r3, 80104ce <_write_r+0x1e>
 80104cc:	6023      	str	r3, [r4, #0]
 80104ce:	bd38      	pop	{r3, r4, r5, pc}
 80104d0:	20002388 	.word	0x20002388

080104d4 <__errno>:
 80104d4:	4b01      	ldr	r3, [pc, #4]	; (80104dc <__errno+0x8>)
 80104d6:	6818      	ldr	r0, [r3, #0]
 80104d8:	4770      	bx	lr
 80104da:	bf00      	nop
 80104dc:	20000288 	.word	0x20000288

080104e0 <__libc_init_array>:
 80104e0:	b570      	push	{r4, r5, r6, lr}
 80104e2:	4d0d      	ldr	r5, [pc, #52]	; (8010518 <__libc_init_array+0x38>)
 80104e4:	4c0d      	ldr	r4, [pc, #52]	; (801051c <__libc_init_array+0x3c>)
 80104e6:	1b64      	subs	r4, r4, r5
 80104e8:	10a4      	asrs	r4, r4, #2
 80104ea:	2600      	movs	r6, #0
 80104ec:	42a6      	cmp	r6, r4
 80104ee:	d109      	bne.n	8010504 <__libc_init_array+0x24>
 80104f0:	4d0b      	ldr	r5, [pc, #44]	; (8010520 <__libc_init_array+0x40>)
 80104f2:	4c0c      	ldr	r4, [pc, #48]	; (8010524 <__libc_init_array+0x44>)
 80104f4:	f003 fbde 	bl	8013cb4 <_init>
 80104f8:	1b64      	subs	r4, r4, r5
 80104fa:	10a4      	asrs	r4, r4, #2
 80104fc:	2600      	movs	r6, #0
 80104fe:	42a6      	cmp	r6, r4
 8010500:	d105      	bne.n	801050e <__libc_init_array+0x2e>
 8010502:	bd70      	pop	{r4, r5, r6, pc}
 8010504:	f855 3b04 	ldr.w	r3, [r5], #4
 8010508:	4798      	blx	r3
 801050a:	3601      	adds	r6, #1
 801050c:	e7ee      	b.n	80104ec <__libc_init_array+0xc>
 801050e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010512:	4798      	blx	r3
 8010514:	3601      	adds	r6, #1
 8010516:	e7f2      	b.n	80104fe <__libc_init_array+0x1e>
 8010518:	080143ac 	.word	0x080143ac
 801051c:	080143ac 	.word	0x080143ac
 8010520:	080143ac 	.word	0x080143ac
 8010524:	080143b0 	.word	0x080143b0

08010528 <__retarget_lock_init_recursive>:
 8010528:	4770      	bx	lr

0801052a <__retarget_lock_acquire_recursive>:
 801052a:	4770      	bx	lr

0801052c <__retarget_lock_release_recursive>:
 801052c:	4770      	bx	lr

0801052e <strcpy>:
 801052e:	4603      	mov	r3, r0
 8010530:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010534:	f803 2b01 	strb.w	r2, [r3], #1
 8010538:	2a00      	cmp	r2, #0
 801053a:	d1f9      	bne.n	8010530 <strcpy+0x2>
 801053c:	4770      	bx	lr

0801053e <memcpy>:
 801053e:	440a      	add	r2, r1
 8010540:	4291      	cmp	r1, r2
 8010542:	f100 33ff 	add.w	r3, r0, #4294967295
 8010546:	d100      	bne.n	801054a <memcpy+0xc>
 8010548:	4770      	bx	lr
 801054a:	b510      	push	{r4, lr}
 801054c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010554:	4291      	cmp	r1, r2
 8010556:	d1f9      	bne.n	801054c <memcpy+0xe>
 8010558:	bd10      	pop	{r4, pc}
	...

0801055c <nanf>:
 801055c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010564 <nanf+0x8>
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	7fc00000 	.word	0x7fc00000

08010568 <__assert_func>:
 8010568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801056a:	4614      	mov	r4, r2
 801056c:	461a      	mov	r2, r3
 801056e:	4b09      	ldr	r3, [pc, #36]	; (8010594 <__assert_func+0x2c>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	4605      	mov	r5, r0
 8010574:	68d8      	ldr	r0, [r3, #12]
 8010576:	b14c      	cbz	r4, 801058c <__assert_func+0x24>
 8010578:	4b07      	ldr	r3, [pc, #28]	; (8010598 <__assert_func+0x30>)
 801057a:	9100      	str	r1, [sp, #0]
 801057c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010580:	4906      	ldr	r1, [pc, #24]	; (801059c <__assert_func+0x34>)
 8010582:	462b      	mov	r3, r5
 8010584:	f002 fe18 	bl	80131b8 <fiprintf>
 8010588:	f002 ff02 	bl	8013390 <abort>
 801058c:	4b04      	ldr	r3, [pc, #16]	; (80105a0 <__assert_func+0x38>)
 801058e:	461c      	mov	r4, r3
 8010590:	e7f3      	b.n	801057a <__assert_func+0x12>
 8010592:	bf00      	nop
 8010594:	20000288 	.word	0x20000288
 8010598:	08013fca 	.word	0x08013fca
 801059c:	08013fd7 	.word	0x08013fd7
 80105a0:	08014005 	.word	0x08014005

080105a4 <quorem>:
 80105a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a8:	6903      	ldr	r3, [r0, #16]
 80105aa:	690c      	ldr	r4, [r1, #16]
 80105ac:	42a3      	cmp	r3, r4
 80105ae:	4607      	mov	r7, r0
 80105b0:	db7e      	blt.n	80106b0 <quorem+0x10c>
 80105b2:	3c01      	subs	r4, #1
 80105b4:	f101 0814 	add.w	r8, r1, #20
 80105b8:	f100 0514 	add.w	r5, r0, #20
 80105bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105c0:	9301      	str	r3, [sp, #4]
 80105c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80105c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105ca:	3301      	adds	r3, #1
 80105cc:	429a      	cmp	r2, r3
 80105ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80105da:	d331      	bcc.n	8010640 <quorem+0x9c>
 80105dc:	f04f 0e00 	mov.w	lr, #0
 80105e0:	4640      	mov	r0, r8
 80105e2:	46ac      	mov	ip, r5
 80105e4:	46f2      	mov	sl, lr
 80105e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80105ea:	b293      	uxth	r3, r2
 80105ec:	fb06 e303 	mla	r3, r6, r3, lr
 80105f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80105f4:	0c1a      	lsrs	r2, r3, #16
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	ebaa 0303 	sub.w	r3, sl, r3
 80105fc:	f8dc a000 	ldr.w	sl, [ip]
 8010600:	fa13 f38a 	uxtah	r3, r3, sl
 8010604:	fb06 220e 	mla	r2, r6, lr, r2
 8010608:	9300      	str	r3, [sp, #0]
 801060a:	9b00      	ldr	r3, [sp, #0]
 801060c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010610:	b292      	uxth	r2, r2
 8010612:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010616:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801061a:	f8bd 3000 	ldrh.w	r3, [sp]
 801061e:	4581      	cmp	r9, r0
 8010620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010624:	f84c 3b04 	str.w	r3, [ip], #4
 8010628:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801062c:	d2db      	bcs.n	80105e6 <quorem+0x42>
 801062e:	f855 300b 	ldr.w	r3, [r5, fp]
 8010632:	b92b      	cbnz	r3, 8010640 <quorem+0x9c>
 8010634:	9b01      	ldr	r3, [sp, #4]
 8010636:	3b04      	subs	r3, #4
 8010638:	429d      	cmp	r5, r3
 801063a:	461a      	mov	r2, r3
 801063c:	d32c      	bcc.n	8010698 <quorem+0xf4>
 801063e:	613c      	str	r4, [r7, #16]
 8010640:	4638      	mov	r0, r7
 8010642:	f001 f9f1 	bl	8011a28 <__mcmp>
 8010646:	2800      	cmp	r0, #0
 8010648:	db22      	blt.n	8010690 <quorem+0xec>
 801064a:	3601      	adds	r6, #1
 801064c:	4629      	mov	r1, r5
 801064e:	2000      	movs	r0, #0
 8010650:	f858 2b04 	ldr.w	r2, [r8], #4
 8010654:	f8d1 c000 	ldr.w	ip, [r1]
 8010658:	b293      	uxth	r3, r2
 801065a:	1ac3      	subs	r3, r0, r3
 801065c:	0c12      	lsrs	r2, r2, #16
 801065e:	fa13 f38c 	uxtah	r3, r3, ip
 8010662:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010666:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801066a:	b29b      	uxth	r3, r3
 801066c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010670:	45c1      	cmp	r9, r8
 8010672:	f841 3b04 	str.w	r3, [r1], #4
 8010676:	ea4f 4022 	mov.w	r0, r2, asr #16
 801067a:	d2e9      	bcs.n	8010650 <quorem+0xac>
 801067c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010680:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010684:	b922      	cbnz	r2, 8010690 <quorem+0xec>
 8010686:	3b04      	subs	r3, #4
 8010688:	429d      	cmp	r5, r3
 801068a:	461a      	mov	r2, r3
 801068c:	d30a      	bcc.n	80106a4 <quorem+0x100>
 801068e:	613c      	str	r4, [r7, #16]
 8010690:	4630      	mov	r0, r6
 8010692:	b003      	add	sp, #12
 8010694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010698:	6812      	ldr	r2, [r2, #0]
 801069a:	3b04      	subs	r3, #4
 801069c:	2a00      	cmp	r2, #0
 801069e:	d1ce      	bne.n	801063e <quorem+0x9a>
 80106a0:	3c01      	subs	r4, #1
 80106a2:	e7c9      	b.n	8010638 <quorem+0x94>
 80106a4:	6812      	ldr	r2, [r2, #0]
 80106a6:	3b04      	subs	r3, #4
 80106a8:	2a00      	cmp	r2, #0
 80106aa:	d1f0      	bne.n	801068e <quorem+0xea>
 80106ac:	3c01      	subs	r4, #1
 80106ae:	e7eb      	b.n	8010688 <quorem+0xe4>
 80106b0:	2000      	movs	r0, #0
 80106b2:	e7ee      	b.n	8010692 <quorem+0xee>
 80106b4:	0000      	movs	r0, r0
	...

080106b8 <_dtoa_r>:
 80106b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106bc:	ed2d 8b04 	vpush	{d8-d9}
 80106c0:	69c5      	ldr	r5, [r0, #28]
 80106c2:	b093      	sub	sp, #76	; 0x4c
 80106c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80106c8:	ec57 6b10 	vmov	r6, r7, d0
 80106cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80106d0:	9107      	str	r1, [sp, #28]
 80106d2:	4604      	mov	r4, r0
 80106d4:	920a      	str	r2, [sp, #40]	; 0x28
 80106d6:	930d      	str	r3, [sp, #52]	; 0x34
 80106d8:	b975      	cbnz	r5, 80106f8 <_dtoa_r+0x40>
 80106da:	2010      	movs	r0, #16
 80106dc:	f000 fe2a 	bl	8011334 <malloc>
 80106e0:	4602      	mov	r2, r0
 80106e2:	61e0      	str	r0, [r4, #28]
 80106e4:	b920      	cbnz	r0, 80106f0 <_dtoa_r+0x38>
 80106e6:	4bae      	ldr	r3, [pc, #696]	; (80109a0 <_dtoa_r+0x2e8>)
 80106e8:	21ef      	movs	r1, #239	; 0xef
 80106ea:	48ae      	ldr	r0, [pc, #696]	; (80109a4 <_dtoa_r+0x2ec>)
 80106ec:	f7ff ff3c 	bl	8010568 <__assert_func>
 80106f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106f4:	6005      	str	r5, [r0, #0]
 80106f6:	60c5      	str	r5, [r0, #12]
 80106f8:	69e3      	ldr	r3, [r4, #28]
 80106fa:	6819      	ldr	r1, [r3, #0]
 80106fc:	b151      	cbz	r1, 8010714 <_dtoa_r+0x5c>
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	604a      	str	r2, [r1, #4]
 8010702:	2301      	movs	r3, #1
 8010704:	4093      	lsls	r3, r2
 8010706:	608b      	str	r3, [r1, #8]
 8010708:	4620      	mov	r0, r4
 801070a:	f000 ff07 	bl	801151c <_Bfree>
 801070e:	69e3      	ldr	r3, [r4, #28]
 8010710:	2200      	movs	r2, #0
 8010712:	601a      	str	r2, [r3, #0]
 8010714:	1e3b      	subs	r3, r7, #0
 8010716:	bfbb      	ittet	lt
 8010718:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801071c:	9303      	strlt	r3, [sp, #12]
 801071e:	2300      	movge	r3, #0
 8010720:	2201      	movlt	r2, #1
 8010722:	bfac      	ite	ge
 8010724:	f8c8 3000 	strge.w	r3, [r8]
 8010728:	f8c8 2000 	strlt.w	r2, [r8]
 801072c:	4b9e      	ldr	r3, [pc, #632]	; (80109a8 <_dtoa_r+0x2f0>)
 801072e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010732:	ea33 0308 	bics.w	r3, r3, r8
 8010736:	d11b      	bne.n	8010770 <_dtoa_r+0xb8>
 8010738:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801073a:	f242 730f 	movw	r3, #9999	; 0x270f
 801073e:	6013      	str	r3, [r2, #0]
 8010740:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010744:	4333      	orrs	r3, r6
 8010746:	f000 8593 	beq.w	8011270 <_dtoa_r+0xbb8>
 801074a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801074c:	b963      	cbnz	r3, 8010768 <_dtoa_r+0xb0>
 801074e:	4b97      	ldr	r3, [pc, #604]	; (80109ac <_dtoa_r+0x2f4>)
 8010750:	e027      	b.n	80107a2 <_dtoa_r+0xea>
 8010752:	4b97      	ldr	r3, [pc, #604]	; (80109b0 <_dtoa_r+0x2f8>)
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	3308      	adds	r3, #8
 8010758:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801075a:	6013      	str	r3, [r2, #0]
 801075c:	9800      	ldr	r0, [sp, #0]
 801075e:	b013      	add	sp, #76	; 0x4c
 8010760:	ecbd 8b04 	vpop	{d8-d9}
 8010764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010768:	4b90      	ldr	r3, [pc, #576]	; (80109ac <_dtoa_r+0x2f4>)
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	3303      	adds	r3, #3
 801076e:	e7f3      	b.n	8010758 <_dtoa_r+0xa0>
 8010770:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010774:	2200      	movs	r2, #0
 8010776:	ec51 0b17 	vmov	r0, r1, d7
 801077a:	eeb0 8a47 	vmov.f32	s16, s14
 801077e:	eef0 8a67 	vmov.f32	s17, s15
 8010782:	2300      	movs	r3, #0
 8010784:	f7f0 f9d8 	bl	8000b38 <__aeabi_dcmpeq>
 8010788:	4681      	mov	r9, r0
 801078a:	b160      	cbz	r0, 80107a6 <_dtoa_r+0xee>
 801078c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801078e:	2301      	movs	r3, #1
 8010790:	6013      	str	r3, [r2, #0]
 8010792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010794:	2b00      	cmp	r3, #0
 8010796:	f000 8568 	beq.w	801126a <_dtoa_r+0xbb2>
 801079a:	4b86      	ldr	r3, [pc, #536]	; (80109b4 <_dtoa_r+0x2fc>)
 801079c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801079e:	6013      	str	r3, [r2, #0]
 80107a0:	3b01      	subs	r3, #1
 80107a2:	9300      	str	r3, [sp, #0]
 80107a4:	e7da      	b.n	801075c <_dtoa_r+0xa4>
 80107a6:	aa10      	add	r2, sp, #64	; 0x40
 80107a8:	a911      	add	r1, sp, #68	; 0x44
 80107aa:	4620      	mov	r0, r4
 80107ac:	eeb0 0a48 	vmov.f32	s0, s16
 80107b0:	eef0 0a68 	vmov.f32	s1, s17
 80107b4:	f001 fa4e 	bl	8011c54 <__d2b>
 80107b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80107bc:	4682      	mov	sl, r0
 80107be:	2d00      	cmp	r5, #0
 80107c0:	d07f      	beq.n	80108c2 <_dtoa_r+0x20a>
 80107c2:	ee18 3a90 	vmov	r3, s17
 80107c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80107ce:	ec51 0b18 	vmov	r0, r1, d8
 80107d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80107d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80107da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80107de:	4619      	mov	r1, r3
 80107e0:	2200      	movs	r2, #0
 80107e2:	4b75      	ldr	r3, [pc, #468]	; (80109b8 <_dtoa_r+0x300>)
 80107e4:	f7ef fd88 	bl	80002f8 <__aeabi_dsub>
 80107e8:	a367      	add	r3, pc, #412	; (adr r3, 8010988 <_dtoa_r+0x2d0>)
 80107ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ee:	f7ef ff3b 	bl	8000668 <__aeabi_dmul>
 80107f2:	a367      	add	r3, pc, #412	; (adr r3, 8010990 <_dtoa_r+0x2d8>)
 80107f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f8:	f7ef fd80 	bl	80002fc <__adddf3>
 80107fc:	4606      	mov	r6, r0
 80107fe:	4628      	mov	r0, r5
 8010800:	460f      	mov	r7, r1
 8010802:	f7ef fec7 	bl	8000594 <__aeabi_i2d>
 8010806:	a364      	add	r3, pc, #400	; (adr r3, 8010998 <_dtoa_r+0x2e0>)
 8010808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080c:	f7ef ff2c 	bl	8000668 <__aeabi_dmul>
 8010810:	4602      	mov	r2, r0
 8010812:	460b      	mov	r3, r1
 8010814:	4630      	mov	r0, r6
 8010816:	4639      	mov	r1, r7
 8010818:	f7ef fd70 	bl	80002fc <__adddf3>
 801081c:	4606      	mov	r6, r0
 801081e:	460f      	mov	r7, r1
 8010820:	f7f0 f9d2 	bl	8000bc8 <__aeabi_d2iz>
 8010824:	2200      	movs	r2, #0
 8010826:	4683      	mov	fp, r0
 8010828:	2300      	movs	r3, #0
 801082a:	4630      	mov	r0, r6
 801082c:	4639      	mov	r1, r7
 801082e:	f7f0 f98d 	bl	8000b4c <__aeabi_dcmplt>
 8010832:	b148      	cbz	r0, 8010848 <_dtoa_r+0x190>
 8010834:	4658      	mov	r0, fp
 8010836:	f7ef fead 	bl	8000594 <__aeabi_i2d>
 801083a:	4632      	mov	r2, r6
 801083c:	463b      	mov	r3, r7
 801083e:	f7f0 f97b 	bl	8000b38 <__aeabi_dcmpeq>
 8010842:	b908      	cbnz	r0, 8010848 <_dtoa_r+0x190>
 8010844:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010848:	f1bb 0f16 	cmp.w	fp, #22
 801084c:	d857      	bhi.n	80108fe <_dtoa_r+0x246>
 801084e:	4b5b      	ldr	r3, [pc, #364]	; (80109bc <_dtoa_r+0x304>)
 8010850:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010858:	ec51 0b18 	vmov	r0, r1, d8
 801085c:	f7f0 f976 	bl	8000b4c <__aeabi_dcmplt>
 8010860:	2800      	cmp	r0, #0
 8010862:	d04e      	beq.n	8010902 <_dtoa_r+0x24a>
 8010864:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010868:	2300      	movs	r3, #0
 801086a:	930c      	str	r3, [sp, #48]	; 0x30
 801086c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801086e:	1b5b      	subs	r3, r3, r5
 8010870:	1e5a      	subs	r2, r3, #1
 8010872:	bf45      	ittet	mi
 8010874:	f1c3 0301 	rsbmi	r3, r3, #1
 8010878:	9305      	strmi	r3, [sp, #20]
 801087a:	2300      	movpl	r3, #0
 801087c:	2300      	movmi	r3, #0
 801087e:	9206      	str	r2, [sp, #24]
 8010880:	bf54      	ite	pl
 8010882:	9305      	strpl	r3, [sp, #20]
 8010884:	9306      	strmi	r3, [sp, #24]
 8010886:	f1bb 0f00 	cmp.w	fp, #0
 801088a:	db3c      	blt.n	8010906 <_dtoa_r+0x24e>
 801088c:	9b06      	ldr	r3, [sp, #24]
 801088e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010892:	445b      	add	r3, fp
 8010894:	9306      	str	r3, [sp, #24]
 8010896:	2300      	movs	r3, #0
 8010898:	9308      	str	r3, [sp, #32]
 801089a:	9b07      	ldr	r3, [sp, #28]
 801089c:	2b09      	cmp	r3, #9
 801089e:	d868      	bhi.n	8010972 <_dtoa_r+0x2ba>
 80108a0:	2b05      	cmp	r3, #5
 80108a2:	bfc4      	itt	gt
 80108a4:	3b04      	subgt	r3, #4
 80108a6:	9307      	strgt	r3, [sp, #28]
 80108a8:	9b07      	ldr	r3, [sp, #28]
 80108aa:	f1a3 0302 	sub.w	r3, r3, #2
 80108ae:	bfcc      	ite	gt
 80108b0:	2500      	movgt	r5, #0
 80108b2:	2501      	movle	r5, #1
 80108b4:	2b03      	cmp	r3, #3
 80108b6:	f200 8085 	bhi.w	80109c4 <_dtoa_r+0x30c>
 80108ba:	e8df f003 	tbb	[pc, r3]
 80108be:	3b2e      	.short	0x3b2e
 80108c0:	5839      	.short	0x5839
 80108c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80108c6:	441d      	add	r5, r3
 80108c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80108cc:	2b20      	cmp	r3, #32
 80108ce:	bfc1      	itttt	gt
 80108d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80108d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80108dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80108e0:	bfd6      	itet	le
 80108e2:	f1c3 0320 	rsble	r3, r3, #32
 80108e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80108ea:	fa06 f003 	lslle.w	r0, r6, r3
 80108ee:	f7ef fe41 	bl	8000574 <__aeabi_ui2d>
 80108f2:	2201      	movs	r2, #1
 80108f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80108f8:	3d01      	subs	r5, #1
 80108fa:	920e      	str	r2, [sp, #56]	; 0x38
 80108fc:	e76f      	b.n	80107de <_dtoa_r+0x126>
 80108fe:	2301      	movs	r3, #1
 8010900:	e7b3      	b.n	801086a <_dtoa_r+0x1b2>
 8010902:	900c      	str	r0, [sp, #48]	; 0x30
 8010904:	e7b2      	b.n	801086c <_dtoa_r+0x1b4>
 8010906:	9b05      	ldr	r3, [sp, #20]
 8010908:	eba3 030b 	sub.w	r3, r3, fp
 801090c:	9305      	str	r3, [sp, #20]
 801090e:	f1cb 0300 	rsb	r3, fp, #0
 8010912:	9308      	str	r3, [sp, #32]
 8010914:	2300      	movs	r3, #0
 8010916:	930b      	str	r3, [sp, #44]	; 0x2c
 8010918:	e7bf      	b.n	801089a <_dtoa_r+0x1e2>
 801091a:	2300      	movs	r3, #0
 801091c:	9309      	str	r3, [sp, #36]	; 0x24
 801091e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010920:	2b00      	cmp	r3, #0
 8010922:	dc52      	bgt.n	80109ca <_dtoa_r+0x312>
 8010924:	2301      	movs	r3, #1
 8010926:	9301      	str	r3, [sp, #4]
 8010928:	9304      	str	r3, [sp, #16]
 801092a:	461a      	mov	r2, r3
 801092c:	920a      	str	r2, [sp, #40]	; 0x28
 801092e:	e00b      	b.n	8010948 <_dtoa_r+0x290>
 8010930:	2301      	movs	r3, #1
 8010932:	e7f3      	b.n	801091c <_dtoa_r+0x264>
 8010934:	2300      	movs	r3, #0
 8010936:	9309      	str	r3, [sp, #36]	; 0x24
 8010938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801093a:	445b      	add	r3, fp
 801093c:	9301      	str	r3, [sp, #4]
 801093e:	3301      	adds	r3, #1
 8010940:	2b01      	cmp	r3, #1
 8010942:	9304      	str	r3, [sp, #16]
 8010944:	bfb8      	it	lt
 8010946:	2301      	movlt	r3, #1
 8010948:	69e0      	ldr	r0, [r4, #28]
 801094a:	2100      	movs	r1, #0
 801094c:	2204      	movs	r2, #4
 801094e:	f102 0614 	add.w	r6, r2, #20
 8010952:	429e      	cmp	r6, r3
 8010954:	d93d      	bls.n	80109d2 <_dtoa_r+0x31a>
 8010956:	6041      	str	r1, [r0, #4]
 8010958:	4620      	mov	r0, r4
 801095a:	f000 fd9f 	bl	801149c <_Balloc>
 801095e:	9000      	str	r0, [sp, #0]
 8010960:	2800      	cmp	r0, #0
 8010962:	d139      	bne.n	80109d8 <_dtoa_r+0x320>
 8010964:	4b16      	ldr	r3, [pc, #88]	; (80109c0 <_dtoa_r+0x308>)
 8010966:	4602      	mov	r2, r0
 8010968:	f240 11af 	movw	r1, #431	; 0x1af
 801096c:	e6bd      	b.n	80106ea <_dtoa_r+0x32>
 801096e:	2301      	movs	r3, #1
 8010970:	e7e1      	b.n	8010936 <_dtoa_r+0x27e>
 8010972:	2501      	movs	r5, #1
 8010974:	2300      	movs	r3, #0
 8010976:	9307      	str	r3, [sp, #28]
 8010978:	9509      	str	r5, [sp, #36]	; 0x24
 801097a:	f04f 33ff 	mov.w	r3, #4294967295
 801097e:	9301      	str	r3, [sp, #4]
 8010980:	9304      	str	r3, [sp, #16]
 8010982:	2200      	movs	r2, #0
 8010984:	2312      	movs	r3, #18
 8010986:	e7d1      	b.n	801092c <_dtoa_r+0x274>
 8010988:	636f4361 	.word	0x636f4361
 801098c:	3fd287a7 	.word	0x3fd287a7
 8010990:	8b60c8b3 	.word	0x8b60c8b3
 8010994:	3fc68a28 	.word	0x3fc68a28
 8010998:	509f79fb 	.word	0x509f79fb
 801099c:	3fd34413 	.word	0x3fd34413
 80109a0:	08013f59 	.word	0x08013f59
 80109a4:	08014013 	.word	0x08014013
 80109a8:	7ff00000 	.word	0x7ff00000
 80109ac:	0801400f 	.word	0x0801400f
 80109b0:	08014006 	.word	0x08014006
 80109b4:	08013f31 	.word	0x08013f31
 80109b8:	3ff80000 	.word	0x3ff80000
 80109bc:	08014100 	.word	0x08014100
 80109c0:	0801406b 	.word	0x0801406b
 80109c4:	2301      	movs	r3, #1
 80109c6:	9309      	str	r3, [sp, #36]	; 0x24
 80109c8:	e7d7      	b.n	801097a <_dtoa_r+0x2c2>
 80109ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109cc:	9301      	str	r3, [sp, #4]
 80109ce:	9304      	str	r3, [sp, #16]
 80109d0:	e7ba      	b.n	8010948 <_dtoa_r+0x290>
 80109d2:	3101      	adds	r1, #1
 80109d4:	0052      	lsls	r2, r2, #1
 80109d6:	e7ba      	b.n	801094e <_dtoa_r+0x296>
 80109d8:	69e3      	ldr	r3, [r4, #28]
 80109da:	9a00      	ldr	r2, [sp, #0]
 80109dc:	601a      	str	r2, [r3, #0]
 80109de:	9b04      	ldr	r3, [sp, #16]
 80109e0:	2b0e      	cmp	r3, #14
 80109e2:	f200 80a8 	bhi.w	8010b36 <_dtoa_r+0x47e>
 80109e6:	2d00      	cmp	r5, #0
 80109e8:	f000 80a5 	beq.w	8010b36 <_dtoa_r+0x47e>
 80109ec:	f1bb 0f00 	cmp.w	fp, #0
 80109f0:	dd38      	ble.n	8010a64 <_dtoa_r+0x3ac>
 80109f2:	4bc0      	ldr	r3, [pc, #768]	; (8010cf4 <_dtoa_r+0x63c>)
 80109f4:	f00b 020f 	and.w	r2, fp, #15
 80109f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010a00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010a04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010a08:	d019      	beq.n	8010a3e <_dtoa_r+0x386>
 8010a0a:	4bbb      	ldr	r3, [pc, #748]	; (8010cf8 <_dtoa_r+0x640>)
 8010a0c:	ec51 0b18 	vmov	r0, r1, d8
 8010a10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a14:	f7ef ff52 	bl	80008bc <__aeabi_ddiv>
 8010a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a1c:	f008 080f 	and.w	r8, r8, #15
 8010a20:	2503      	movs	r5, #3
 8010a22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010cf8 <_dtoa_r+0x640>
 8010a26:	f1b8 0f00 	cmp.w	r8, #0
 8010a2a:	d10a      	bne.n	8010a42 <_dtoa_r+0x38a>
 8010a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a30:	4632      	mov	r2, r6
 8010a32:	463b      	mov	r3, r7
 8010a34:	f7ef ff42 	bl	80008bc <__aeabi_ddiv>
 8010a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a3c:	e02b      	b.n	8010a96 <_dtoa_r+0x3de>
 8010a3e:	2502      	movs	r5, #2
 8010a40:	e7ef      	b.n	8010a22 <_dtoa_r+0x36a>
 8010a42:	f018 0f01 	tst.w	r8, #1
 8010a46:	d008      	beq.n	8010a5a <_dtoa_r+0x3a2>
 8010a48:	4630      	mov	r0, r6
 8010a4a:	4639      	mov	r1, r7
 8010a4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010a50:	f7ef fe0a 	bl	8000668 <__aeabi_dmul>
 8010a54:	3501      	adds	r5, #1
 8010a56:	4606      	mov	r6, r0
 8010a58:	460f      	mov	r7, r1
 8010a5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010a5e:	f109 0908 	add.w	r9, r9, #8
 8010a62:	e7e0      	b.n	8010a26 <_dtoa_r+0x36e>
 8010a64:	f000 809f 	beq.w	8010ba6 <_dtoa_r+0x4ee>
 8010a68:	f1cb 0600 	rsb	r6, fp, #0
 8010a6c:	4ba1      	ldr	r3, [pc, #644]	; (8010cf4 <_dtoa_r+0x63c>)
 8010a6e:	4fa2      	ldr	r7, [pc, #648]	; (8010cf8 <_dtoa_r+0x640>)
 8010a70:	f006 020f 	and.w	r2, r6, #15
 8010a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a7c:	ec51 0b18 	vmov	r0, r1, d8
 8010a80:	f7ef fdf2 	bl	8000668 <__aeabi_dmul>
 8010a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a88:	1136      	asrs	r6, r6, #4
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	2502      	movs	r5, #2
 8010a8e:	2e00      	cmp	r6, #0
 8010a90:	d17e      	bne.n	8010b90 <_dtoa_r+0x4d8>
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1d0      	bne.n	8010a38 <_dtoa_r+0x380>
 8010a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	f000 8084 	beq.w	8010baa <_dtoa_r+0x4f2>
 8010aa2:	4b96      	ldr	r3, [pc, #600]	; (8010cfc <_dtoa_r+0x644>)
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	4640      	mov	r0, r8
 8010aa8:	4649      	mov	r1, r9
 8010aaa:	f7f0 f84f 	bl	8000b4c <__aeabi_dcmplt>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d07b      	beq.n	8010baa <_dtoa_r+0x4f2>
 8010ab2:	9b04      	ldr	r3, [sp, #16]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d078      	beq.n	8010baa <_dtoa_r+0x4f2>
 8010ab8:	9b01      	ldr	r3, [sp, #4]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	dd39      	ble.n	8010b32 <_dtoa_r+0x47a>
 8010abe:	4b90      	ldr	r3, [pc, #576]	; (8010d00 <_dtoa_r+0x648>)
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	4640      	mov	r0, r8
 8010ac4:	4649      	mov	r1, r9
 8010ac6:	f7ef fdcf 	bl	8000668 <__aeabi_dmul>
 8010aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ace:	9e01      	ldr	r6, [sp, #4]
 8010ad0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010ad4:	3501      	adds	r5, #1
 8010ad6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010ada:	4628      	mov	r0, r5
 8010adc:	f7ef fd5a 	bl	8000594 <__aeabi_i2d>
 8010ae0:	4642      	mov	r2, r8
 8010ae2:	464b      	mov	r3, r9
 8010ae4:	f7ef fdc0 	bl	8000668 <__aeabi_dmul>
 8010ae8:	4b86      	ldr	r3, [pc, #536]	; (8010d04 <_dtoa_r+0x64c>)
 8010aea:	2200      	movs	r2, #0
 8010aec:	f7ef fc06 	bl	80002fc <__adddf3>
 8010af0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010af8:	9303      	str	r3, [sp, #12]
 8010afa:	2e00      	cmp	r6, #0
 8010afc:	d158      	bne.n	8010bb0 <_dtoa_r+0x4f8>
 8010afe:	4b82      	ldr	r3, [pc, #520]	; (8010d08 <_dtoa_r+0x650>)
 8010b00:	2200      	movs	r2, #0
 8010b02:	4640      	mov	r0, r8
 8010b04:	4649      	mov	r1, r9
 8010b06:	f7ef fbf7 	bl	80002f8 <__aeabi_dsub>
 8010b0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b0e:	4680      	mov	r8, r0
 8010b10:	4689      	mov	r9, r1
 8010b12:	f7f0 f839 	bl	8000b88 <__aeabi_dcmpgt>
 8010b16:	2800      	cmp	r0, #0
 8010b18:	f040 8296 	bne.w	8011048 <_dtoa_r+0x990>
 8010b1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b20:	4640      	mov	r0, r8
 8010b22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b26:	4649      	mov	r1, r9
 8010b28:	f7f0 f810 	bl	8000b4c <__aeabi_dcmplt>
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	f040 8289 	bne.w	8011044 <_dtoa_r+0x98c>
 8010b32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f2c0 814e 	blt.w	8010dda <_dtoa_r+0x722>
 8010b3e:	f1bb 0f0e 	cmp.w	fp, #14
 8010b42:	f300 814a 	bgt.w	8010dda <_dtoa_r+0x722>
 8010b46:	4b6b      	ldr	r3, [pc, #428]	; (8010cf4 <_dtoa_r+0x63c>)
 8010b48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	f280 80dc 	bge.w	8010d10 <_dtoa_r+0x658>
 8010b58:	9b04      	ldr	r3, [sp, #16]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	f300 80d8 	bgt.w	8010d10 <_dtoa_r+0x658>
 8010b60:	f040 826f 	bne.w	8011042 <_dtoa_r+0x98a>
 8010b64:	4b68      	ldr	r3, [pc, #416]	; (8010d08 <_dtoa_r+0x650>)
 8010b66:	2200      	movs	r2, #0
 8010b68:	4640      	mov	r0, r8
 8010b6a:	4649      	mov	r1, r9
 8010b6c:	f7ef fd7c 	bl	8000668 <__aeabi_dmul>
 8010b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b74:	f7ef fffe 	bl	8000b74 <__aeabi_dcmpge>
 8010b78:	9e04      	ldr	r6, [sp, #16]
 8010b7a:	4637      	mov	r7, r6
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	f040 8245 	bne.w	801100c <_dtoa_r+0x954>
 8010b82:	9d00      	ldr	r5, [sp, #0]
 8010b84:	2331      	movs	r3, #49	; 0x31
 8010b86:	f805 3b01 	strb.w	r3, [r5], #1
 8010b8a:	f10b 0b01 	add.w	fp, fp, #1
 8010b8e:	e241      	b.n	8011014 <_dtoa_r+0x95c>
 8010b90:	07f2      	lsls	r2, r6, #31
 8010b92:	d505      	bpl.n	8010ba0 <_dtoa_r+0x4e8>
 8010b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b98:	f7ef fd66 	bl	8000668 <__aeabi_dmul>
 8010b9c:	3501      	adds	r5, #1
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	1076      	asrs	r6, r6, #1
 8010ba2:	3708      	adds	r7, #8
 8010ba4:	e773      	b.n	8010a8e <_dtoa_r+0x3d6>
 8010ba6:	2502      	movs	r5, #2
 8010ba8:	e775      	b.n	8010a96 <_dtoa_r+0x3de>
 8010baa:	9e04      	ldr	r6, [sp, #16]
 8010bac:	465f      	mov	r7, fp
 8010bae:	e792      	b.n	8010ad6 <_dtoa_r+0x41e>
 8010bb0:	9900      	ldr	r1, [sp, #0]
 8010bb2:	4b50      	ldr	r3, [pc, #320]	; (8010cf4 <_dtoa_r+0x63c>)
 8010bb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bb8:	4431      	add	r1, r6
 8010bba:	9102      	str	r1, [sp, #8]
 8010bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010bbe:	eeb0 9a47 	vmov.f32	s18, s14
 8010bc2:	eef0 9a67 	vmov.f32	s19, s15
 8010bc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010bca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010bce:	2900      	cmp	r1, #0
 8010bd0:	d044      	beq.n	8010c5c <_dtoa_r+0x5a4>
 8010bd2:	494e      	ldr	r1, [pc, #312]	; (8010d0c <_dtoa_r+0x654>)
 8010bd4:	2000      	movs	r0, #0
 8010bd6:	f7ef fe71 	bl	80008bc <__aeabi_ddiv>
 8010bda:	ec53 2b19 	vmov	r2, r3, d9
 8010bde:	f7ef fb8b 	bl	80002f8 <__aeabi_dsub>
 8010be2:	9d00      	ldr	r5, [sp, #0]
 8010be4:	ec41 0b19 	vmov	d9, r0, r1
 8010be8:	4649      	mov	r1, r9
 8010bea:	4640      	mov	r0, r8
 8010bec:	f7ef ffec 	bl	8000bc8 <__aeabi_d2iz>
 8010bf0:	4606      	mov	r6, r0
 8010bf2:	f7ef fccf 	bl	8000594 <__aeabi_i2d>
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	4640      	mov	r0, r8
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	f7ef fb7b 	bl	80002f8 <__aeabi_dsub>
 8010c02:	3630      	adds	r6, #48	; 0x30
 8010c04:	f805 6b01 	strb.w	r6, [r5], #1
 8010c08:	ec53 2b19 	vmov	r2, r3, d9
 8010c0c:	4680      	mov	r8, r0
 8010c0e:	4689      	mov	r9, r1
 8010c10:	f7ef ff9c 	bl	8000b4c <__aeabi_dcmplt>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d164      	bne.n	8010ce2 <_dtoa_r+0x62a>
 8010c18:	4642      	mov	r2, r8
 8010c1a:	464b      	mov	r3, r9
 8010c1c:	4937      	ldr	r1, [pc, #220]	; (8010cfc <_dtoa_r+0x644>)
 8010c1e:	2000      	movs	r0, #0
 8010c20:	f7ef fb6a 	bl	80002f8 <__aeabi_dsub>
 8010c24:	ec53 2b19 	vmov	r2, r3, d9
 8010c28:	f7ef ff90 	bl	8000b4c <__aeabi_dcmplt>
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	f040 80b6 	bne.w	8010d9e <_dtoa_r+0x6e6>
 8010c32:	9b02      	ldr	r3, [sp, #8]
 8010c34:	429d      	cmp	r5, r3
 8010c36:	f43f af7c 	beq.w	8010b32 <_dtoa_r+0x47a>
 8010c3a:	4b31      	ldr	r3, [pc, #196]	; (8010d00 <_dtoa_r+0x648>)
 8010c3c:	ec51 0b19 	vmov	r0, r1, d9
 8010c40:	2200      	movs	r2, #0
 8010c42:	f7ef fd11 	bl	8000668 <__aeabi_dmul>
 8010c46:	4b2e      	ldr	r3, [pc, #184]	; (8010d00 <_dtoa_r+0x648>)
 8010c48:	ec41 0b19 	vmov	d9, r0, r1
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	4640      	mov	r0, r8
 8010c50:	4649      	mov	r1, r9
 8010c52:	f7ef fd09 	bl	8000668 <__aeabi_dmul>
 8010c56:	4680      	mov	r8, r0
 8010c58:	4689      	mov	r9, r1
 8010c5a:	e7c5      	b.n	8010be8 <_dtoa_r+0x530>
 8010c5c:	ec51 0b17 	vmov	r0, r1, d7
 8010c60:	f7ef fd02 	bl	8000668 <__aeabi_dmul>
 8010c64:	9b02      	ldr	r3, [sp, #8]
 8010c66:	9d00      	ldr	r5, [sp, #0]
 8010c68:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c6a:	ec41 0b19 	vmov	d9, r0, r1
 8010c6e:	4649      	mov	r1, r9
 8010c70:	4640      	mov	r0, r8
 8010c72:	f7ef ffa9 	bl	8000bc8 <__aeabi_d2iz>
 8010c76:	4606      	mov	r6, r0
 8010c78:	f7ef fc8c 	bl	8000594 <__aeabi_i2d>
 8010c7c:	3630      	adds	r6, #48	; 0x30
 8010c7e:	4602      	mov	r2, r0
 8010c80:	460b      	mov	r3, r1
 8010c82:	4640      	mov	r0, r8
 8010c84:	4649      	mov	r1, r9
 8010c86:	f7ef fb37 	bl	80002f8 <__aeabi_dsub>
 8010c8a:	f805 6b01 	strb.w	r6, [r5], #1
 8010c8e:	9b02      	ldr	r3, [sp, #8]
 8010c90:	429d      	cmp	r5, r3
 8010c92:	4680      	mov	r8, r0
 8010c94:	4689      	mov	r9, r1
 8010c96:	f04f 0200 	mov.w	r2, #0
 8010c9a:	d124      	bne.n	8010ce6 <_dtoa_r+0x62e>
 8010c9c:	4b1b      	ldr	r3, [pc, #108]	; (8010d0c <_dtoa_r+0x654>)
 8010c9e:	ec51 0b19 	vmov	r0, r1, d9
 8010ca2:	f7ef fb2b 	bl	80002fc <__adddf3>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	460b      	mov	r3, r1
 8010caa:	4640      	mov	r0, r8
 8010cac:	4649      	mov	r1, r9
 8010cae:	f7ef ff6b 	bl	8000b88 <__aeabi_dcmpgt>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d173      	bne.n	8010d9e <_dtoa_r+0x6e6>
 8010cb6:	ec53 2b19 	vmov	r2, r3, d9
 8010cba:	4914      	ldr	r1, [pc, #80]	; (8010d0c <_dtoa_r+0x654>)
 8010cbc:	2000      	movs	r0, #0
 8010cbe:	f7ef fb1b 	bl	80002f8 <__aeabi_dsub>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	4649      	mov	r1, r9
 8010cca:	f7ef ff3f 	bl	8000b4c <__aeabi_dcmplt>
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	f43f af2f 	beq.w	8010b32 <_dtoa_r+0x47a>
 8010cd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010cd6:	1e6b      	subs	r3, r5, #1
 8010cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8010cda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cde:	2b30      	cmp	r3, #48	; 0x30
 8010ce0:	d0f8      	beq.n	8010cd4 <_dtoa_r+0x61c>
 8010ce2:	46bb      	mov	fp, r7
 8010ce4:	e04a      	b.n	8010d7c <_dtoa_r+0x6c4>
 8010ce6:	4b06      	ldr	r3, [pc, #24]	; (8010d00 <_dtoa_r+0x648>)
 8010ce8:	f7ef fcbe 	bl	8000668 <__aeabi_dmul>
 8010cec:	4680      	mov	r8, r0
 8010cee:	4689      	mov	r9, r1
 8010cf0:	e7bd      	b.n	8010c6e <_dtoa_r+0x5b6>
 8010cf2:	bf00      	nop
 8010cf4:	08014100 	.word	0x08014100
 8010cf8:	080140d8 	.word	0x080140d8
 8010cfc:	3ff00000 	.word	0x3ff00000
 8010d00:	40240000 	.word	0x40240000
 8010d04:	401c0000 	.word	0x401c0000
 8010d08:	40140000 	.word	0x40140000
 8010d0c:	3fe00000 	.word	0x3fe00000
 8010d10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d14:	9d00      	ldr	r5, [sp, #0]
 8010d16:	4642      	mov	r2, r8
 8010d18:	464b      	mov	r3, r9
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	4639      	mov	r1, r7
 8010d1e:	f7ef fdcd 	bl	80008bc <__aeabi_ddiv>
 8010d22:	f7ef ff51 	bl	8000bc8 <__aeabi_d2iz>
 8010d26:	9001      	str	r0, [sp, #4]
 8010d28:	f7ef fc34 	bl	8000594 <__aeabi_i2d>
 8010d2c:	4642      	mov	r2, r8
 8010d2e:	464b      	mov	r3, r9
 8010d30:	f7ef fc9a 	bl	8000668 <__aeabi_dmul>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	4630      	mov	r0, r6
 8010d3a:	4639      	mov	r1, r7
 8010d3c:	f7ef fadc 	bl	80002f8 <__aeabi_dsub>
 8010d40:	9e01      	ldr	r6, [sp, #4]
 8010d42:	9f04      	ldr	r7, [sp, #16]
 8010d44:	3630      	adds	r6, #48	; 0x30
 8010d46:	f805 6b01 	strb.w	r6, [r5], #1
 8010d4a:	9e00      	ldr	r6, [sp, #0]
 8010d4c:	1bae      	subs	r6, r5, r6
 8010d4e:	42b7      	cmp	r7, r6
 8010d50:	4602      	mov	r2, r0
 8010d52:	460b      	mov	r3, r1
 8010d54:	d134      	bne.n	8010dc0 <_dtoa_r+0x708>
 8010d56:	f7ef fad1 	bl	80002fc <__adddf3>
 8010d5a:	4642      	mov	r2, r8
 8010d5c:	464b      	mov	r3, r9
 8010d5e:	4606      	mov	r6, r0
 8010d60:	460f      	mov	r7, r1
 8010d62:	f7ef ff11 	bl	8000b88 <__aeabi_dcmpgt>
 8010d66:	b9c8      	cbnz	r0, 8010d9c <_dtoa_r+0x6e4>
 8010d68:	4642      	mov	r2, r8
 8010d6a:	464b      	mov	r3, r9
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	4639      	mov	r1, r7
 8010d70:	f7ef fee2 	bl	8000b38 <__aeabi_dcmpeq>
 8010d74:	b110      	cbz	r0, 8010d7c <_dtoa_r+0x6c4>
 8010d76:	9b01      	ldr	r3, [sp, #4]
 8010d78:	07db      	lsls	r3, r3, #31
 8010d7a:	d40f      	bmi.n	8010d9c <_dtoa_r+0x6e4>
 8010d7c:	4651      	mov	r1, sl
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f000 fbcc 	bl	801151c <_Bfree>
 8010d84:	2300      	movs	r3, #0
 8010d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d88:	702b      	strb	r3, [r5, #0]
 8010d8a:	f10b 0301 	add.w	r3, fp, #1
 8010d8e:	6013      	str	r3, [r2, #0]
 8010d90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	f43f ace2 	beq.w	801075c <_dtoa_r+0xa4>
 8010d98:	601d      	str	r5, [r3, #0]
 8010d9a:	e4df      	b.n	801075c <_dtoa_r+0xa4>
 8010d9c:	465f      	mov	r7, fp
 8010d9e:	462b      	mov	r3, r5
 8010da0:	461d      	mov	r5, r3
 8010da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010da6:	2a39      	cmp	r2, #57	; 0x39
 8010da8:	d106      	bne.n	8010db8 <_dtoa_r+0x700>
 8010daa:	9a00      	ldr	r2, [sp, #0]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d1f7      	bne.n	8010da0 <_dtoa_r+0x6e8>
 8010db0:	9900      	ldr	r1, [sp, #0]
 8010db2:	2230      	movs	r2, #48	; 0x30
 8010db4:	3701      	adds	r7, #1
 8010db6:	700a      	strb	r2, [r1, #0]
 8010db8:	781a      	ldrb	r2, [r3, #0]
 8010dba:	3201      	adds	r2, #1
 8010dbc:	701a      	strb	r2, [r3, #0]
 8010dbe:	e790      	b.n	8010ce2 <_dtoa_r+0x62a>
 8010dc0:	4ba3      	ldr	r3, [pc, #652]	; (8011050 <_dtoa_r+0x998>)
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f7ef fc50 	bl	8000668 <__aeabi_dmul>
 8010dc8:	2200      	movs	r2, #0
 8010dca:	2300      	movs	r3, #0
 8010dcc:	4606      	mov	r6, r0
 8010dce:	460f      	mov	r7, r1
 8010dd0:	f7ef feb2 	bl	8000b38 <__aeabi_dcmpeq>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	d09e      	beq.n	8010d16 <_dtoa_r+0x65e>
 8010dd8:	e7d0      	b.n	8010d7c <_dtoa_r+0x6c4>
 8010dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ddc:	2a00      	cmp	r2, #0
 8010dde:	f000 80ca 	beq.w	8010f76 <_dtoa_r+0x8be>
 8010de2:	9a07      	ldr	r2, [sp, #28]
 8010de4:	2a01      	cmp	r2, #1
 8010de6:	f300 80ad 	bgt.w	8010f44 <_dtoa_r+0x88c>
 8010dea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010dec:	2a00      	cmp	r2, #0
 8010dee:	f000 80a5 	beq.w	8010f3c <_dtoa_r+0x884>
 8010df2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010df6:	9e08      	ldr	r6, [sp, #32]
 8010df8:	9d05      	ldr	r5, [sp, #20]
 8010dfa:	9a05      	ldr	r2, [sp, #20]
 8010dfc:	441a      	add	r2, r3
 8010dfe:	9205      	str	r2, [sp, #20]
 8010e00:	9a06      	ldr	r2, [sp, #24]
 8010e02:	2101      	movs	r1, #1
 8010e04:	441a      	add	r2, r3
 8010e06:	4620      	mov	r0, r4
 8010e08:	9206      	str	r2, [sp, #24]
 8010e0a:	f000 fc87 	bl	801171c <__i2b>
 8010e0e:	4607      	mov	r7, r0
 8010e10:	b165      	cbz	r5, 8010e2c <_dtoa_r+0x774>
 8010e12:	9b06      	ldr	r3, [sp, #24]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	dd09      	ble.n	8010e2c <_dtoa_r+0x774>
 8010e18:	42ab      	cmp	r3, r5
 8010e1a:	9a05      	ldr	r2, [sp, #20]
 8010e1c:	bfa8      	it	ge
 8010e1e:	462b      	movge	r3, r5
 8010e20:	1ad2      	subs	r2, r2, r3
 8010e22:	9205      	str	r2, [sp, #20]
 8010e24:	9a06      	ldr	r2, [sp, #24]
 8010e26:	1aed      	subs	r5, r5, r3
 8010e28:	1ad3      	subs	r3, r2, r3
 8010e2a:	9306      	str	r3, [sp, #24]
 8010e2c:	9b08      	ldr	r3, [sp, #32]
 8010e2e:	b1f3      	cbz	r3, 8010e6e <_dtoa_r+0x7b6>
 8010e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f000 80a3 	beq.w	8010f7e <_dtoa_r+0x8c6>
 8010e38:	2e00      	cmp	r6, #0
 8010e3a:	dd10      	ble.n	8010e5e <_dtoa_r+0x7a6>
 8010e3c:	4639      	mov	r1, r7
 8010e3e:	4632      	mov	r2, r6
 8010e40:	4620      	mov	r0, r4
 8010e42:	f000 fd2b 	bl	801189c <__pow5mult>
 8010e46:	4652      	mov	r2, sl
 8010e48:	4601      	mov	r1, r0
 8010e4a:	4607      	mov	r7, r0
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f000 fc7b 	bl	8011748 <__multiply>
 8010e52:	4651      	mov	r1, sl
 8010e54:	4680      	mov	r8, r0
 8010e56:	4620      	mov	r0, r4
 8010e58:	f000 fb60 	bl	801151c <_Bfree>
 8010e5c:	46c2      	mov	sl, r8
 8010e5e:	9b08      	ldr	r3, [sp, #32]
 8010e60:	1b9a      	subs	r2, r3, r6
 8010e62:	d004      	beq.n	8010e6e <_dtoa_r+0x7b6>
 8010e64:	4651      	mov	r1, sl
 8010e66:	4620      	mov	r0, r4
 8010e68:	f000 fd18 	bl	801189c <__pow5mult>
 8010e6c:	4682      	mov	sl, r0
 8010e6e:	2101      	movs	r1, #1
 8010e70:	4620      	mov	r0, r4
 8010e72:	f000 fc53 	bl	801171c <__i2b>
 8010e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	4606      	mov	r6, r0
 8010e7c:	f340 8081 	ble.w	8010f82 <_dtoa_r+0x8ca>
 8010e80:	461a      	mov	r2, r3
 8010e82:	4601      	mov	r1, r0
 8010e84:	4620      	mov	r0, r4
 8010e86:	f000 fd09 	bl	801189c <__pow5mult>
 8010e8a:	9b07      	ldr	r3, [sp, #28]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	4606      	mov	r6, r0
 8010e90:	dd7a      	ble.n	8010f88 <_dtoa_r+0x8d0>
 8010e92:	f04f 0800 	mov.w	r8, #0
 8010e96:	6933      	ldr	r3, [r6, #16]
 8010e98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010e9c:	6918      	ldr	r0, [r3, #16]
 8010e9e:	f000 fbef 	bl	8011680 <__hi0bits>
 8010ea2:	f1c0 0020 	rsb	r0, r0, #32
 8010ea6:	9b06      	ldr	r3, [sp, #24]
 8010ea8:	4418      	add	r0, r3
 8010eaa:	f010 001f 	ands.w	r0, r0, #31
 8010eae:	f000 8094 	beq.w	8010fda <_dtoa_r+0x922>
 8010eb2:	f1c0 0320 	rsb	r3, r0, #32
 8010eb6:	2b04      	cmp	r3, #4
 8010eb8:	f340 8085 	ble.w	8010fc6 <_dtoa_r+0x90e>
 8010ebc:	9b05      	ldr	r3, [sp, #20]
 8010ebe:	f1c0 001c 	rsb	r0, r0, #28
 8010ec2:	4403      	add	r3, r0
 8010ec4:	9305      	str	r3, [sp, #20]
 8010ec6:	9b06      	ldr	r3, [sp, #24]
 8010ec8:	4403      	add	r3, r0
 8010eca:	4405      	add	r5, r0
 8010ecc:	9306      	str	r3, [sp, #24]
 8010ece:	9b05      	ldr	r3, [sp, #20]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	dd05      	ble.n	8010ee0 <_dtoa_r+0x828>
 8010ed4:	4651      	mov	r1, sl
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f000 fd39 	bl	8011950 <__lshift>
 8010ede:	4682      	mov	sl, r0
 8010ee0:	9b06      	ldr	r3, [sp, #24]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	dd05      	ble.n	8010ef2 <_dtoa_r+0x83a>
 8010ee6:	4631      	mov	r1, r6
 8010ee8:	461a      	mov	r2, r3
 8010eea:	4620      	mov	r0, r4
 8010eec:	f000 fd30 	bl	8011950 <__lshift>
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d072      	beq.n	8010fde <_dtoa_r+0x926>
 8010ef8:	4631      	mov	r1, r6
 8010efa:	4650      	mov	r0, sl
 8010efc:	f000 fd94 	bl	8011a28 <__mcmp>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	da6c      	bge.n	8010fde <_dtoa_r+0x926>
 8010f04:	2300      	movs	r3, #0
 8010f06:	4651      	mov	r1, sl
 8010f08:	220a      	movs	r2, #10
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f000 fb28 	bl	8011560 <__multadd>
 8010f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f16:	4682      	mov	sl, r0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f000 81b0 	beq.w	801127e <_dtoa_r+0xbc6>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	4639      	mov	r1, r7
 8010f22:	220a      	movs	r2, #10
 8010f24:	4620      	mov	r0, r4
 8010f26:	f000 fb1b 	bl	8011560 <__multadd>
 8010f2a:	9b01      	ldr	r3, [sp, #4]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	4607      	mov	r7, r0
 8010f30:	f300 8096 	bgt.w	8011060 <_dtoa_r+0x9a8>
 8010f34:	9b07      	ldr	r3, [sp, #28]
 8010f36:	2b02      	cmp	r3, #2
 8010f38:	dc59      	bgt.n	8010fee <_dtoa_r+0x936>
 8010f3a:	e091      	b.n	8011060 <_dtoa_r+0x9a8>
 8010f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f42:	e758      	b.n	8010df6 <_dtoa_r+0x73e>
 8010f44:	9b04      	ldr	r3, [sp, #16]
 8010f46:	1e5e      	subs	r6, r3, #1
 8010f48:	9b08      	ldr	r3, [sp, #32]
 8010f4a:	42b3      	cmp	r3, r6
 8010f4c:	bfbf      	itttt	lt
 8010f4e:	9b08      	ldrlt	r3, [sp, #32]
 8010f50:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010f52:	9608      	strlt	r6, [sp, #32]
 8010f54:	1af3      	sublt	r3, r6, r3
 8010f56:	bfb4      	ite	lt
 8010f58:	18d2      	addlt	r2, r2, r3
 8010f5a:	1b9e      	subge	r6, r3, r6
 8010f5c:	9b04      	ldr	r3, [sp, #16]
 8010f5e:	bfbc      	itt	lt
 8010f60:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010f62:	2600      	movlt	r6, #0
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	bfb7      	itett	lt
 8010f68:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010f6c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010f70:	1a9d      	sublt	r5, r3, r2
 8010f72:	2300      	movlt	r3, #0
 8010f74:	e741      	b.n	8010dfa <_dtoa_r+0x742>
 8010f76:	9e08      	ldr	r6, [sp, #32]
 8010f78:	9d05      	ldr	r5, [sp, #20]
 8010f7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010f7c:	e748      	b.n	8010e10 <_dtoa_r+0x758>
 8010f7e:	9a08      	ldr	r2, [sp, #32]
 8010f80:	e770      	b.n	8010e64 <_dtoa_r+0x7ac>
 8010f82:	9b07      	ldr	r3, [sp, #28]
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	dc19      	bgt.n	8010fbc <_dtoa_r+0x904>
 8010f88:	9b02      	ldr	r3, [sp, #8]
 8010f8a:	b9bb      	cbnz	r3, 8010fbc <_dtoa_r+0x904>
 8010f8c:	9b03      	ldr	r3, [sp, #12]
 8010f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f92:	b99b      	cbnz	r3, 8010fbc <_dtoa_r+0x904>
 8010f94:	9b03      	ldr	r3, [sp, #12]
 8010f96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f9a:	0d1b      	lsrs	r3, r3, #20
 8010f9c:	051b      	lsls	r3, r3, #20
 8010f9e:	b183      	cbz	r3, 8010fc2 <_dtoa_r+0x90a>
 8010fa0:	9b05      	ldr	r3, [sp, #20]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	9305      	str	r3, [sp, #20]
 8010fa6:	9b06      	ldr	r3, [sp, #24]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	9306      	str	r3, [sp, #24]
 8010fac:	f04f 0801 	mov.w	r8, #1
 8010fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f47f af6f 	bne.w	8010e96 <_dtoa_r+0x7de>
 8010fb8:	2001      	movs	r0, #1
 8010fba:	e774      	b.n	8010ea6 <_dtoa_r+0x7ee>
 8010fbc:	f04f 0800 	mov.w	r8, #0
 8010fc0:	e7f6      	b.n	8010fb0 <_dtoa_r+0x8f8>
 8010fc2:	4698      	mov	r8, r3
 8010fc4:	e7f4      	b.n	8010fb0 <_dtoa_r+0x8f8>
 8010fc6:	d082      	beq.n	8010ece <_dtoa_r+0x816>
 8010fc8:	9a05      	ldr	r2, [sp, #20]
 8010fca:	331c      	adds	r3, #28
 8010fcc:	441a      	add	r2, r3
 8010fce:	9205      	str	r2, [sp, #20]
 8010fd0:	9a06      	ldr	r2, [sp, #24]
 8010fd2:	441a      	add	r2, r3
 8010fd4:	441d      	add	r5, r3
 8010fd6:	9206      	str	r2, [sp, #24]
 8010fd8:	e779      	b.n	8010ece <_dtoa_r+0x816>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	e7f4      	b.n	8010fc8 <_dtoa_r+0x910>
 8010fde:	9b04      	ldr	r3, [sp, #16]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	dc37      	bgt.n	8011054 <_dtoa_r+0x99c>
 8010fe4:	9b07      	ldr	r3, [sp, #28]
 8010fe6:	2b02      	cmp	r3, #2
 8010fe8:	dd34      	ble.n	8011054 <_dtoa_r+0x99c>
 8010fea:	9b04      	ldr	r3, [sp, #16]
 8010fec:	9301      	str	r3, [sp, #4]
 8010fee:	9b01      	ldr	r3, [sp, #4]
 8010ff0:	b963      	cbnz	r3, 801100c <_dtoa_r+0x954>
 8010ff2:	4631      	mov	r1, r6
 8010ff4:	2205      	movs	r2, #5
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	f000 fab2 	bl	8011560 <__multadd>
 8010ffc:	4601      	mov	r1, r0
 8010ffe:	4606      	mov	r6, r0
 8011000:	4650      	mov	r0, sl
 8011002:	f000 fd11 	bl	8011a28 <__mcmp>
 8011006:	2800      	cmp	r0, #0
 8011008:	f73f adbb 	bgt.w	8010b82 <_dtoa_r+0x4ca>
 801100c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801100e:	9d00      	ldr	r5, [sp, #0]
 8011010:	ea6f 0b03 	mvn.w	fp, r3
 8011014:	f04f 0800 	mov.w	r8, #0
 8011018:	4631      	mov	r1, r6
 801101a:	4620      	mov	r0, r4
 801101c:	f000 fa7e 	bl	801151c <_Bfree>
 8011020:	2f00      	cmp	r7, #0
 8011022:	f43f aeab 	beq.w	8010d7c <_dtoa_r+0x6c4>
 8011026:	f1b8 0f00 	cmp.w	r8, #0
 801102a:	d005      	beq.n	8011038 <_dtoa_r+0x980>
 801102c:	45b8      	cmp	r8, r7
 801102e:	d003      	beq.n	8011038 <_dtoa_r+0x980>
 8011030:	4641      	mov	r1, r8
 8011032:	4620      	mov	r0, r4
 8011034:	f000 fa72 	bl	801151c <_Bfree>
 8011038:	4639      	mov	r1, r7
 801103a:	4620      	mov	r0, r4
 801103c:	f000 fa6e 	bl	801151c <_Bfree>
 8011040:	e69c      	b.n	8010d7c <_dtoa_r+0x6c4>
 8011042:	2600      	movs	r6, #0
 8011044:	4637      	mov	r7, r6
 8011046:	e7e1      	b.n	801100c <_dtoa_r+0x954>
 8011048:	46bb      	mov	fp, r7
 801104a:	4637      	mov	r7, r6
 801104c:	e599      	b.n	8010b82 <_dtoa_r+0x4ca>
 801104e:	bf00      	nop
 8011050:	40240000 	.word	0x40240000
 8011054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011056:	2b00      	cmp	r3, #0
 8011058:	f000 80c8 	beq.w	80111ec <_dtoa_r+0xb34>
 801105c:	9b04      	ldr	r3, [sp, #16]
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	2d00      	cmp	r5, #0
 8011062:	dd05      	ble.n	8011070 <_dtoa_r+0x9b8>
 8011064:	4639      	mov	r1, r7
 8011066:	462a      	mov	r2, r5
 8011068:	4620      	mov	r0, r4
 801106a:	f000 fc71 	bl	8011950 <__lshift>
 801106e:	4607      	mov	r7, r0
 8011070:	f1b8 0f00 	cmp.w	r8, #0
 8011074:	d05b      	beq.n	801112e <_dtoa_r+0xa76>
 8011076:	6879      	ldr	r1, [r7, #4]
 8011078:	4620      	mov	r0, r4
 801107a:	f000 fa0f 	bl	801149c <_Balloc>
 801107e:	4605      	mov	r5, r0
 8011080:	b928      	cbnz	r0, 801108e <_dtoa_r+0x9d6>
 8011082:	4b83      	ldr	r3, [pc, #524]	; (8011290 <_dtoa_r+0xbd8>)
 8011084:	4602      	mov	r2, r0
 8011086:	f240 21ef 	movw	r1, #751	; 0x2ef
 801108a:	f7ff bb2e 	b.w	80106ea <_dtoa_r+0x32>
 801108e:	693a      	ldr	r2, [r7, #16]
 8011090:	3202      	adds	r2, #2
 8011092:	0092      	lsls	r2, r2, #2
 8011094:	f107 010c 	add.w	r1, r7, #12
 8011098:	300c      	adds	r0, #12
 801109a:	f7ff fa50 	bl	801053e <memcpy>
 801109e:	2201      	movs	r2, #1
 80110a0:	4629      	mov	r1, r5
 80110a2:	4620      	mov	r0, r4
 80110a4:	f000 fc54 	bl	8011950 <__lshift>
 80110a8:	9b00      	ldr	r3, [sp, #0]
 80110aa:	3301      	adds	r3, #1
 80110ac:	9304      	str	r3, [sp, #16]
 80110ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110b2:	4413      	add	r3, r2
 80110b4:	9308      	str	r3, [sp, #32]
 80110b6:	9b02      	ldr	r3, [sp, #8]
 80110b8:	f003 0301 	and.w	r3, r3, #1
 80110bc:	46b8      	mov	r8, r7
 80110be:	9306      	str	r3, [sp, #24]
 80110c0:	4607      	mov	r7, r0
 80110c2:	9b04      	ldr	r3, [sp, #16]
 80110c4:	4631      	mov	r1, r6
 80110c6:	3b01      	subs	r3, #1
 80110c8:	4650      	mov	r0, sl
 80110ca:	9301      	str	r3, [sp, #4]
 80110cc:	f7ff fa6a 	bl	80105a4 <quorem>
 80110d0:	4641      	mov	r1, r8
 80110d2:	9002      	str	r0, [sp, #8]
 80110d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80110d8:	4650      	mov	r0, sl
 80110da:	f000 fca5 	bl	8011a28 <__mcmp>
 80110de:	463a      	mov	r2, r7
 80110e0:	9005      	str	r0, [sp, #20]
 80110e2:	4631      	mov	r1, r6
 80110e4:	4620      	mov	r0, r4
 80110e6:	f000 fcbb 	bl	8011a60 <__mdiff>
 80110ea:	68c2      	ldr	r2, [r0, #12]
 80110ec:	4605      	mov	r5, r0
 80110ee:	bb02      	cbnz	r2, 8011132 <_dtoa_r+0xa7a>
 80110f0:	4601      	mov	r1, r0
 80110f2:	4650      	mov	r0, sl
 80110f4:	f000 fc98 	bl	8011a28 <__mcmp>
 80110f8:	4602      	mov	r2, r0
 80110fa:	4629      	mov	r1, r5
 80110fc:	4620      	mov	r0, r4
 80110fe:	9209      	str	r2, [sp, #36]	; 0x24
 8011100:	f000 fa0c 	bl	801151c <_Bfree>
 8011104:	9b07      	ldr	r3, [sp, #28]
 8011106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011108:	9d04      	ldr	r5, [sp, #16]
 801110a:	ea43 0102 	orr.w	r1, r3, r2
 801110e:	9b06      	ldr	r3, [sp, #24]
 8011110:	4319      	orrs	r1, r3
 8011112:	d110      	bne.n	8011136 <_dtoa_r+0xa7e>
 8011114:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011118:	d029      	beq.n	801116e <_dtoa_r+0xab6>
 801111a:	9b05      	ldr	r3, [sp, #20]
 801111c:	2b00      	cmp	r3, #0
 801111e:	dd02      	ble.n	8011126 <_dtoa_r+0xa6e>
 8011120:	9b02      	ldr	r3, [sp, #8]
 8011122:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011126:	9b01      	ldr	r3, [sp, #4]
 8011128:	f883 9000 	strb.w	r9, [r3]
 801112c:	e774      	b.n	8011018 <_dtoa_r+0x960>
 801112e:	4638      	mov	r0, r7
 8011130:	e7ba      	b.n	80110a8 <_dtoa_r+0x9f0>
 8011132:	2201      	movs	r2, #1
 8011134:	e7e1      	b.n	80110fa <_dtoa_r+0xa42>
 8011136:	9b05      	ldr	r3, [sp, #20]
 8011138:	2b00      	cmp	r3, #0
 801113a:	db04      	blt.n	8011146 <_dtoa_r+0xa8e>
 801113c:	9907      	ldr	r1, [sp, #28]
 801113e:	430b      	orrs	r3, r1
 8011140:	9906      	ldr	r1, [sp, #24]
 8011142:	430b      	orrs	r3, r1
 8011144:	d120      	bne.n	8011188 <_dtoa_r+0xad0>
 8011146:	2a00      	cmp	r2, #0
 8011148:	dded      	ble.n	8011126 <_dtoa_r+0xa6e>
 801114a:	4651      	mov	r1, sl
 801114c:	2201      	movs	r2, #1
 801114e:	4620      	mov	r0, r4
 8011150:	f000 fbfe 	bl	8011950 <__lshift>
 8011154:	4631      	mov	r1, r6
 8011156:	4682      	mov	sl, r0
 8011158:	f000 fc66 	bl	8011a28 <__mcmp>
 801115c:	2800      	cmp	r0, #0
 801115e:	dc03      	bgt.n	8011168 <_dtoa_r+0xab0>
 8011160:	d1e1      	bne.n	8011126 <_dtoa_r+0xa6e>
 8011162:	f019 0f01 	tst.w	r9, #1
 8011166:	d0de      	beq.n	8011126 <_dtoa_r+0xa6e>
 8011168:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801116c:	d1d8      	bne.n	8011120 <_dtoa_r+0xa68>
 801116e:	9a01      	ldr	r2, [sp, #4]
 8011170:	2339      	movs	r3, #57	; 0x39
 8011172:	7013      	strb	r3, [r2, #0]
 8011174:	462b      	mov	r3, r5
 8011176:	461d      	mov	r5, r3
 8011178:	3b01      	subs	r3, #1
 801117a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801117e:	2a39      	cmp	r2, #57	; 0x39
 8011180:	d06c      	beq.n	801125c <_dtoa_r+0xba4>
 8011182:	3201      	adds	r2, #1
 8011184:	701a      	strb	r2, [r3, #0]
 8011186:	e747      	b.n	8011018 <_dtoa_r+0x960>
 8011188:	2a00      	cmp	r2, #0
 801118a:	dd07      	ble.n	801119c <_dtoa_r+0xae4>
 801118c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011190:	d0ed      	beq.n	801116e <_dtoa_r+0xab6>
 8011192:	9a01      	ldr	r2, [sp, #4]
 8011194:	f109 0301 	add.w	r3, r9, #1
 8011198:	7013      	strb	r3, [r2, #0]
 801119a:	e73d      	b.n	8011018 <_dtoa_r+0x960>
 801119c:	9b04      	ldr	r3, [sp, #16]
 801119e:	9a08      	ldr	r2, [sp, #32]
 80111a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d043      	beq.n	8011230 <_dtoa_r+0xb78>
 80111a8:	4651      	mov	r1, sl
 80111aa:	2300      	movs	r3, #0
 80111ac:	220a      	movs	r2, #10
 80111ae:	4620      	mov	r0, r4
 80111b0:	f000 f9d6 	bl	8011560 <__multadd>
 80111b4:	45b8      	cmp	r8, r7
 80111b6:	4682      	mov	sl, r0
 80111b8:	f04f 0300 	mov.w	r3, #0
 80111bc:	f04f 020a 	mov.w	r2, #10
 80111c0:	4641      	mov	r1, r8
 80111c2:	4620      	mov	r0, r4
 80111c4:	d107      	bne.n	80111d6 <_dtoa_r+0xb1e>
 80111c6:	f000 f9cb 	bl	8011560 <__multadd>
 80111ca:	4680      	mov	r8, r0
 80111cc:	4607      	mov	r7, r0
 80111ce:	9b04      	ldr	r3, [sp, #16]
 80111d0:	3301      	adds	r3, #1
 80111d2:	9304      	str	r3, [sp, #16]
 80111d4:	e775      	b.n	80110c2 <_dtoa_r+0xa0a>
 80111d6:	f000 f9c3 	bl	8011560 <__multadd>
 80111da:	4639      	mov	r1, r7
 80111dc:	4680      	mov	r8, r0
 80111de:	2300      	movs	r3, #0
 80111e0:	220a      	movs	r2, #10
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 f9bc 	bl	8011560 <__multadd>
 80111e8:	4607      	mov	r7, r0
 80111ea:	e7f0      	b.n	80111ce <_dtoa_r+0xb16>
 80111ec:	9b04      	ldr	r3, [sp, #16]
 80111ee:	9301      	str	r3, [sp, #4]
 80111f0:	9d00      	ldr	r5, [sp, #0]
 80111f2:	4631      	mov	r1, r6
 80111f4:	4650      	mov	r0, sl
 80111f6:	f7ff f9d5 	bl	80105a4 <quorem>
 80111fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80111fe:	9b00      	ldr	r3, [sp, #0]
 8011200:	f805 9b01 	strb.w	r9, [r5], #1
 8011204:	1aea      	subs	r2, r5, r3
 8011206:	9b01      	ldr	r3, [sp, #4]
 8011208:	4293      	cmp	r3, r2
 801120a:	dd07      	ble.n	801121c <_dtoa_r+0xb64>
 801120c:	4651      	mov	r1, sl
 801120e:	2300      	movs	r3, #0
 8011210:	220a      	movs	r2, #10
 8011212:	4620      	mov	r0, r4
 8011214:	f000 f9a4 	bl	8011560 <__multadd>
 8011218:	4682      	mov	sl, r0
 801121a:	e7ea      	b.n	80111f2 <_dtoa_r+0xb3a>
 801121c:	9b01      	ldr	r3, [sp, #4]
 801121e:	2b00      	cmp	r3, #0
 8011220:	bfc8      	it	gt
 8011222:	461d      	movgt	r5, r3
 8011224:	9b00      	ldr	r3, [sp, #0]
 8011226:	bfd8      	it	le
 8011228:	2501      	movle	r5, #1
 801122a:	441d      	add	r5, r3
 801122c:	f04f 0800 	mov.w	r8, #0
 8011230:	4651      	mov	r1, sl
 8011232:	2201      	movs	r2, #1
 8011234:	4620      	mov	r0, r4
 8011236:	f000 fb8b 	bl	8011950 <__lshift>
 801123a:	4631      	mov	r1, r6
 801123c:	4682      	mov	sl, r0
 801123e:	f000 fbf3 	bl	8011a28 <__mcmp>
 8011242:	2800      	cmp	r0, #0
 8011244:	dc96      	bgt.n	8011174 <_dtoa_r+0xabc>
 8011246:	d102      	bne.n	801124e <_dtoa_r+0xb96>
 8011248:	f019 0f01 	tst.w	r9, #1
 801124c:	d192      	bne.n	8011174 <_dtoa_r+0xabc>
 801124e:	462b      	mov	r3, r5
 8011250:	461d      	mov	r5, r3
 8011252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011256:	2a30      	cmp	r2, #48	; 0x30
 8011258:	d0fa      	beq.n	8011250 <_dtoa_r+0xb98>
 801125a:	e6dd      	b.n	8011018 <_dtoa_r+0x960>
 801125c:	9a00      	ldr	r2, [sp, #0]
 801125e:	429a      	cmp	r2, r3
 8011260:	d189      	bne.n	8011176 <_dtoa_r+0xabe>
 8011262:	f10b 0b01 	add.w	fp, fp, #1
 8011266:	2331      	movs	r3, #49	; 0x31
 8011268:	e796      	b.n	8011198 <_dtoa_r+0xae0>
 801126a:	4b0a      	ldr	r3, [pc, #40]	; (8011294 <_dtoa_r+0xbdc>)
 801126c:	f7ff ba99 	b.w	80107a2 <_dtoa_r+0xea>
 8011270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011272:	2b00      	cmp	r3, #0
 8011274:	f47f aa6d 	bne.w	8010752 <_dtoa_r+0x9a>
 8011278:	4b07      	ldr	r3, [pc, #28]	; (8011298 <_dtoa_r+0xbe0>)
 801127a:	f7ff ba92 	b.w	80107a2 <_dtoa_r+0xea>
 801127e:	9b01      	ldr	r3, [sp, #4]
 8011280:	2b00      	cmp	r3, #0
 8011282:	dcb5      	bgt.n	80111f0 <_dtoa_r+0xb38>
 8011284:	9b07      	ldr	r3, [sp, #28]
 8011286:	2b02      	cmp	r3, #2
 8011288:	f73f aeb1 	bgt.w	8010fee <_dtoa_r+0x936>
 801128c:	e7b0      	b.n	80111f0 <_dtoa_r+0xb38>
 801128e:	bf00      	nop
 8011290:	0801406b 	.word	0x0801406b
 8011294:	08013f30 	.word	0x08013f30
 8011298:	08014006 	.word	0x08014006

0801129c <_free_r>:
 801129c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801129e:	2900      	cmp	r1, #0
 80112a0:	d044      	beq.n	801132c <_free_r+0x90>
 80112a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112a6:	9001      	str	r0, [sp, #4]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f1a1 0404 	sub.w	r4, r1, #4
 80112ae:	bfb8      	it	lt
 80112b0:	18e4      	addlt	r4, r4, r3
 80112b2:	f000 f8e7 	bl	8011484 <__malloc_lock>
 80112b6:	4a1e      	ldr	r2, [pc, #120]	; (8011330 <_free_r+0x94>)
 80112b8:	9801      	ldr	r0, [sp, #4]
 80112ba:	6813      	ldr	r3, [r2, #0]
 80112bc:	b933      	cbnz	r3, 80112cc <_free_r+0x30>
 80112be:	6063      	str	r3, [r4, #4]
 80112c0:	6014      	str	r4, [r2, #0]
 80112c2:	b003      	add	sp, #12
 80112c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112c8:	f000 b8e2 	b.w	8011490 <__malloc_unlock>
 80112cc:	42a3      	cmp	r3, r4
 80112ce:	d908      	bls.n	80112e2 <_free_r+0x46>
 80112d0:	6825      	ldr	r5, [r4, #0]
 80112d2:	1961      	adds	r1, r4, r5
 80112d4:	428b      	cmp	r3, r1
 80112d6:	bf01      	itttt	eq
 80112d8:	6819      	ldreq	r1, [r3, #0]
 80112da:	685b      	ldreq	r3, [r3, #4]
 80112dc:	1949      	addeq	r1, r1, r5
 80112de:	6021      	streq	r1, [r4, #0]
 80112e0:	e7ed      	b.n	80112be <_free_r+0x22>
 80112e2:	461a      	mov	r2, r3
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	b10b      	cbz	r3, 80112ec <_free_r+0x50>
 80112e8:	42a3      	cmp	r3, r4
 80112ea:	d9fa      	bls.n	80112e2 <_free_r+0x46>
 80112ec:	6811      	ldr	r1, [r2, #0]
 80112ee:	1855      	adds	r5, r2, r1
 80112f0:	42a5      	cmp	r5, r4
 80112f2:	d10b      	bne.n	801130c <_free_r+0x70>
 80112f4:	6824      	ldr	r4, [r4, #0]
 80112f6:	4421      	add	r1, r4
 80112f8:	1854      	adds	r4, r2, r1
 80112fa:	42a3      	cmp	r3, r4
 80112fc:	6011      	str	r1, [r2, #0]
 80112fe:	d1e0      	bne.n	80112c2 <_free_r+0x26>
 8011300:	681c      	ldr	r4, [r3, #0]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	6053      	str	r3, [r2, #4]
 8011306:	440c      	add	r4, r1
 8011308:	6014      	str	r4, [r2, #0]
 801130a:	e7da      	b.n	80112c2 <_free_r+0x26>
 801130c:	d902      	bls.n	8011314 <_free_r+0x78>
 801130e:	230c      	movs	r3, #12
 8011310:	6003      	str	r3, [r0, #0]
 8011312:	e7d6      	b.n	80112c2 <_free_r+0x26>
 8011314:	6825      	ldr	r5, [r4, #0]
 8011316:	1961      	adds	r1, r4, r5
 8011318:	428b      	cmp	r3, r1
 801131a:	bf04      	itt	eq
 801131c:	6819      	ldreq	r1, [r3, #0]
 801131e:	685b      	ldreq	r3, [r3, #4]
 8011320:	6063      	str	r3, [r4, #4]
 8011322:	bf04      	itt	eq
 8011324:	1949      	addeq	r1, r1, r5
 8011326:	6021      	streq	r1, [r4, #0]
 8011328:	6054      	str	r4, [r2, #4]
 801132a:	e7ca      	b.n	80112c2 <_free_r+0x26>
 801132c:	b003      	add	sp, #12
 801132e:	bd30      	pop	{r4, r5, pc}
 8011330:	20002390 	.word	0x20002390

08011334 <malloc>:
 8011334:	4b02      	ldr	r3, [pc, #8]	; (8011340 <malloc+0xc>)
 8011336:	4601      	mov	r1, r0
 8011338:	6818      	ldr	r0, [r3, #0]
 801133a:	f000 b823 	b.w	8011384 <_malloc_r>
 801133e:	bf00      	nop
 8011340:	20000288 	.word	0x20000288

08011344 <sbrk_aligned>:
 8011344:	b570      	push	{r4, r5, r6, lr}
 8011346:	4e0e      	ldr	r6, [pc, #56]	; (8011380 <sbrk_aligned+0x3c>)
 8011348:	460c      	mov	r4, r1
 801134a:	6831      	ldr	r1, [r6, #0]
 801134c:	4605      	mov	r5, r0
 801134e:	b911      	cbnz	r1, 8011356 <sbrk_aligned+0x12>
 8011350:	f002 f806 	bl	8013360 <_sbrk_r>
 8011354:	6030      	str	r0, [r6, #0]
 8011356:	4621      	mov	r1, r4
 8011358:	4628      	mov	r0, r5
 801135a:	f002 f801 	bl	8013360 <_sbrk_r>
 801135e:	1c43      	adds	r3, r0, #1
 8011360:	d00a      	beq.n	8011378 <sbrk_aligned+0x34>
 8011362:	1cc4      	adds	r4, r0, #3
 8011364:	f024 0403 	bic.w	r4, r4, #3
 8011368:	42a0      	cmp	r0, r4
 801136a:	d007      	beq.n	801137c <sbrk_aligned+0x38>
 801136c:	1a21      	subs	r1, r4, r0
 801136e:	4628      	mov	r0, r5
 8011370:	f001 fff6 	bl	8013360 <_sbrk_r>
 8011374:	3001      	adds	r0, #1
 8011376:	d101      	bne.n	801137c <sbrk_aligned+0x38>
 8011378:	f04f 34ff 	mov.w	r4, #4294967295
 801137c:	4620      	mov	r0, r4
 801137e:	bd70      	pop	{r4, r5, r6, pc}
 8011380:	20002394 	.word	0x20002394

08011384 <_malloc_r>:
 8011384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011388:	1ccd      	adds	r5, r1, #3
 801138a:	f025 0503 	bic.w	r5, r5, #3
 801138e:	3508      	adds	r5, #8
 8011390:	2d0c      	cmp	r5, #12
 8011392:	bf38      	it	cc
 8011394:	250c      	movcc	r5, #12
 8011396:	2d00      	cmp	r5, #0
 8011398:	4607      	mov	r7, r0
 801139a:	db01      	blt.n	80113a0 <_malloc_r+0x1c>
 801139c:	42a9      	cmp	r1, r5
 801139e:	d905      	bls.n	80113ac <_malloc_r+0x28>
 80113a0:	230c      	movs	r3, #12
 80113a2:	603b      	str	r3, [r7, #0]
 80113a4:	2600      	movs	r6, #0
 80113a6:	4630      	mov	r0, r6
 80113a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011480 <_malloc_r+0xfc>
 80113b0:	f000 f868 	bl	8011484 <__malloc_lock>
 80113b4:	f8d8 3000 	ldr.w	r3, [r8]
 80113b8:	461c      	mov	r4, r3
 80113ba:	bb5c      	cbnz	r4, 8011414 <_malloc_r+0x90>
 80113bc:	4629      	mov	r1, r5
 80113be:	4638      	mov	r0, r7
 80113c0:	f7ff ffc0 	bl	8011344 <sbrk_aligned>
 80113c4:	1c43      	adds	r3, r0, #1
 80113c6:	4604      	mov	r4, r0
 80113c8:	d155      	bne.n	8011476 <_malloc_r+0xf2>
 80113ca:	f8d8 4000 	ldr.w	r4, [r8]
 80113ce:	4626      	mov	r6, r4
 80113d0:	2e00      	cmp	r6, #0
 80113d2:	d145      	bne.n	8011460 <_malloc_r+0xdc>
 80113d4:	2c00      	cmp	r4, #0
 80113d6:	d048      	beq.n	801146a <_malloc_r+0xe6>
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	4631      	mov	r1, r6
 80113dc:	4638      	mov	r0, r7
 80113de:	eb04 0903 	add.w	r9, r4, r3
 80113e2:	f001 ffbd 	bl	8013360 <_sbrk_r>
 80113e6:	4581      	cmp	r9, r0
 80113e8:	d13f      	bne.n	801146a <_malloc_r+0xe6>
 80113ea:	6821      	ldr	r1, [r4, #0]
 80113ec:	1a6d      	subs	r5, r5, r1
 80113ee:	4629      	mov	r1, r5
 80113f0:	4638      	mov	r0, r7
 80113f2:	f7ff ffa7 	bl	8011344 <sbrk_aligned>
 80113f6:	3001      	adds	r0, #1
 80113f8:	d037      	beq.n	801146a <_malloc_r+0xe6>
 80113fa:	6823      	ldr	r3, [r4, #0]
 80113fc:	442b      	add	r3, r5
 80113fe:	6023      	str	r3, [r4, #0]
 8011400:	f8d8 3000 	ldr.w	r3, [r8]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d038      	beq.n	801147a <_malloc_r+0xf6>
 8011408:	685a      	ldr	r2, [r3, #4]
 801140a:	42a2      	cmp	r2, r4
 801140c:	d12b      	bne.n	8011466 <_malloc_r+0xe2>
 801140e:	2200      	movs	r2, #0
 8011410:	605a      	str	r2, [r3, #4]
 8011412:	e00f      	b.n	8011434 <_malloc_r+0xb0>
 8011414:	6822      	ldr	r2, [r4, #0]
 8011416:	1b52      	subs	r2, r2, r5
 8011418:	d41f      	bmi.n	801145a <_malloc_r+0xd6>
 801141a:	2a0b      	cmp	r2, #11
 801141c:	d917      	bls.n	801144e <_malloc_r+0xca>
 801141e:	1961      	adds	r1, r4, r5
 8011420:	42a3      	cmp	r3, r4
 8011422:	6025      	str	r5, [r4, #0]
 8011424:	bf18      	it	ne
 8011426:	6059      	strne	r1, [r3, #4]
 8011428:	6863      	ldr	r3, [r4, #4]
 801142a:	bf08      	it	eq
 801142c:	f8c8 1000 	streq.w	r1, [r8]
 8011430:	5162      	str	r2, [r4, r5]
 8011432:	604b      	str	r3, [r1, #4]
 8011434:	4638      	mov	r0, r7
 8011436:	f104 060b 	add.w	r6, r4, #11
 801143a:	f000 f829 	bl	8011490 <__malloc_unlock>
 801143e:	f026 0607 	bic.w	r6, r6, #7
 8011442:	1d23      	adds	r3, r4, #4
 8011444:	1af2      	subs	r2, r6, r3
 8011446:	d0ae      	beq.n	80113a6 <_malloc_r+0x22>
 8011448:	1b9b      	subs	r3, r3, r6
 801144a:	50a3      	str	r3, [r4, r2]
 801144c:	e7ab      	b.n	80113a6 <_malloc_r+0x22>
 801144e:	42a3      	cmp	r3, r4
 8011450:	6862      	ldr	r2, [r4, #4]
 8011452:	d1dd      	bne.n	8011410 <_malloc_r+0x8c>
 8011454:	f8c8 2000 	str.w	r2, [r8]
 8011458:	e7ec      	b.n	8011434 <_malloc_r+0xb0>
 801145a:	4623      	mov	r3, r4
 801145c:	6864      	ldr	r4, [r4, #4]
 801145e:	e7ac      	b.n	80113ba <_malloc_r+0x36>
 8011460:	4634      	mov	r4, r6
 8011462:	6876      	ldr	r6, [r6, #4]
 8011464:	e7b4      	b.n	80113d0 <_malloc_r+0x4c>
 8011466:	4613      	mov	r3, r2
 8011468:	e7cc      	b.n	8011404 <_malloc_r+0x80>
 801146a:	230c      	movs	r3, #12
 801146c:	603b      	str	r3, [r7, #0]
 801146e:	4638      	mov	r0, r7
 8011470:	f000 f80e 	bl	8011490 <__malloc_unlock>
 8011474:	e797      	b.n	80113a6 <_malloc_r+0x22>
 8011476:	6025      	str	r5, [r4, #0]
 8011478:	e7dc      	b.n	8011434 <_malloc_r+0xb0>
 801147a:	605b      	str	r3, [r3, #4]
 801147c:	deff      	udf	#255	; 0xff
 801147e:	bf00      	nop
 8011480:	20002390 	.word	0x20002390

08011484 <__malloc_lock>:
 8011484:	4801      	ldr	r0, [pc, #4]	; (801148c <__malloc_lock+0x8>)
 8011486:	f7ff b850 	b.w	801052a <__retarget_lock_acquire_recursive>
 801148a:	bf00      	nop
 801148c:	2000238c 	.word	0x2000238c

08011490 <__malloc_unlock>:
 8011490:	4801      	ldr	r0, [pc, #4]	; (8011498 <__malloc_unlock+0x8>)
 8011492:	f7ff b84b 	b.w	801052c <__retarget_lock_release_recursive>
 8011496:	bf00      	nop
 8011498:	2000238c 	.word	0x2000238c

0801149c <_Balloc>:
 801149c:	b570      	push	{r4, r5, r6, lr}
 801149e:	69c6      	ldr	r6, [r0, #28]
 80114a0:	4604      	mov	r4, r0
 80114a2:	460d      	mov	r5, r1
 80114a4:	b976      	cbnz	r6, 80114c4 <_Balloc+0x28>
 80114a6:	2010      	movs	r0, #16
 80114a8:	f7ff ff44 	bl	8011334 <malloc>
 80114ac:	4602      	mov	r2, r0
 80114ae:	61e0      	str	r0, [r4, #28]
 80114b0:	b920      	cbnz	r0, 80114bc <_Balloc+0x20>
 80114b2:	4b18      	ldr	r3, [pc, #96]	; (8011514 <_Balloc+0x78>)
 80114b4:	4818      	ldr	r0, [pc, #96]	; (8011518 <_Balloc+0x7c>)
 80114b6:	216b      	movs	r1, #107	; 0x6b
 80114b8:	f7ff f856 	bl	8010568 <__assert_func>
 80114bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114c0:	6006      	str	r6, [r0, #0]
 80114c2:	60c6      	str	r6, [r0, #12]
 80114c4:	69e6      	ldr	r6, [r4, #28]
 80114c6:	68f3      	ldr	r3, [r6, #12]
 80114c8:	b183      	cbz	r3, 80114ec <_Balloc+0x50>
 80114ca:	69e3      	ldr	r3, [r4, #28]
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114d2:	b9b8      	cbnz	r0, 8011504 <_Balloc+0x68>
 80114d4:	2101      	movs	r1, #1
 80114d6:	fa01 f605 	lsl.w	r6, r1, r5
 80114da:	1d72      	adds	r2, r6, #5
 80114dc:	0092      	lsls	r2, r2, #2
 80114de:	4620      	mov	r0, r4
 80114e0:	f001 ff5d 	bl	801339e <_calloc_r>
 80114e4:	b160      	cbz	r0, 8011500 <_Balloc+0x64>
 80114e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ea:	e00e      	b.n	801150a <_Balloc+0x6e>
 80114ec:	2221      	movs	r2, #33	; 0x21
 80114ee:	2104      	movs	r1, #4
 80114f0:	4620      	mov	r0, r4
 80114f2:	f001 ff54 	bl	801339e <_calloc_r>
 80114f6:	69e3      	ldr	r3, [r4, #28]
 80114f8:	60f0      	str	r0, [r6, #12]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d1e4      	bne.n	80114ca <_Balloc+0x2e>
 8011500:	2000      	movs	r0, #0
 8011502:	bd70      	pop	{r4, r5, r6, pc}
 8011504:	6802      	ldr	r2, [r0, #0]
 8011506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801150a:	2300      	movs	r3, #0
 801150c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011510:	e7f7      	b.n	8011502 <_Balloc+0x66>
 8011512:	bf00      	nop
 8011514:	08013f59 	.word	0x08013f59
 8011518:	0801407c 	.word	0x0801407c

0801151c <_Bfree>:
 801151c:	b570      	push	{r4, r5, r6, lr}
 801151e:	69c6      	ldr	r6, [r0, #28]
 8011520:	4605      	mov	r5, r0
 8011522:	460c      	mov	r4, r1
 8011524:	b976      	cbnz	r6, 8011544 <_Bfree+0x28>
 8011526:	2010      	movs	r0, #16
 8011528:	f7ff ff04 	bl	8011334 <malloc>
 801152c:	4602      	mov	r2, r0
 801152e:	61e8      	str	r0, [r5, #28]
 8011530:	b920      	cbnz	r0, 801153c <_Bfree+0x20>
 8011532:	4b09      	ldr	r3, [pc, #36]	; (8011558 <_Bfree+0x3c>)
 8011534:	4809      	ldr	r0, [pc, #36]	; (801155c <_Bfree+0x40>)
 8011536:	218f      	movs	r1, #143	; 0x8f
 8011538:	f7ff f816 	bl	8010568 <__assert_func>
 801153c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011540:	6006      	str	r6, [r0, #0]
 8011542:	60c6      	str	r6, [r0, #12]
 8011544:	b13c      	cbz	r4, 8011556 <_Bfree+0x3a>
 8011546:	69eb      	ldr	r3, [r5, #28]
 8011548:	6862      	ldr	r2, [r4, #4]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011550:	6021      	str	r1, [r4, #0]
 8011552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011556:	bd70      	pop	{r4, r5, r6, pc}
 8011558:	08013f59 	.word	0x08013f59
 801155c:	0801407c 	.word	0x0801407c

08011560 <__multadd>:
 8011560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011564:	690d      	ldr	r5, [r1, #16]
 8011566:	4607      	mov	r7, r0
 8011568:	460c      	mov	r4, r1
 801156a:	461e      	mov	r6, r3
 801156c:	f101 0c14 	add.w	ip, r1, #20
 8011570:	2000      	movs	r0, #0
 8011572:	f8dc 3000 	ldr.w	r3, [ip]
 8011576:	b299      	uxth	r1, r3
 8011578:	fb02 6101 	mla	r1, r2, r1, r6
 801157c:	0c1e      	lsrs	r6, r3, #16
 801157e:	0c0b      	lsrs	r3, r1, #16
 8011580:	fb02 3306 	mla	r3, r2, r6, r3
 8011584:	b289      	uxth	r1, r1
 8011586:	3001      	adds	r0, #1
 8011588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801158c:	4285      	cmp	r5, r0
 801158e:	f84c 1b04 	str.w	r1, [ip], #4
 8011592:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011596:	dcec      	bgt.n	8011572 <__multadd+0x12>
 8011598:	b30e      	cbz	r6, 80115de <__multadd+0x7e>
 801159a:	68a3      	ldr	r3, [r4, #8]
 801159c:	42ab      	cmp	r3, r5
 801159e:	dc19      	bgt.n	80115d4 <__multadd+0x74>
 80115a0:	6861      	ldr	r1, [r4, #4]
 80115a2:	4638      	mov	r0, r7
 80115a4:	3101      	adds	r1, #1
 80115a6:	f7ff ff79 	bl	801149c <_Balloc>
 80115aa:	4680      	mov	r8, r0
 80115ac:	b928      	cbnz	r0, 80115ba <__multadd+0x5a>
 80115ae:	4602      	mov	r2, r0
 80115b0:	4b0c      	ldr	r3, [pc, #48]	; (80115e4 <__multadd+0x84>)
 80115b2:	480d      	ldr	r0, [pc, #52]	; (80115e8 <__multadd+0x88>)
 80115b4:	21ba      	movs	r1, #186	; 0xba
 80115b6:	f7fe ffd7 	bl	8010568 <__assert_func>
 80115ba:	6922      	ldr	r2, [r4, #16]
 80115bc:	3202      	adds	r2, #2
 80115be:	f104 010c 	add.w	r1, r4, #12
 80115c2:	0092      	lsls	r2, r2, #2
 80115c4:	300c      	adds	r0, #12
 80115c6:	f7fe ffba 	bl	801053e <memcpy>
 80115ca:	4621      	mov	r1, r4
 80115cc:	4638      	mov	r0, r7
 80115ce:	f7ff ffa5 	bl	801151c <_Bfree>
 80115d2:	4644      	mov	r4, r8
 80115d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115d8:	3501      	adds	r5, #1
 80115da:	615e      	str	r6, [r3, #20]
 80115dc:	6125      	str	r5, [r4, #16]
 80115de:	4620      	mov	r0, r4
 80115e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e4:	0801406b 	.word	0x0801406b
 80115e8:	0801407c 	.word	0x0801407c

080115ec <__s2b>:
 80115ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f0:	460c      	mov	r4, r1
 80115f2:	4615      	mov	r5, r2
 80115f4:	461f      	mov	r7, r3
 80115f6:	2209      	movs	r2, #9
 80115f8:	3308      	adds	r3, #8
 80115fa:	4606      	mov	r6, r0
 80115fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011600:	2100      	movs	r1, #0
 8011602:	2201      	movs	r2, #1
 8011604:	429a      	cmp	r2, r3
 8011606:	db09      	blt.n	801161c <__s2b+0x30>
 8011608:	4630      	mov	r0, r6
 801160a:	f7ff ff47 	bl	801149c <_Balloc>
 801160e:	b940      	cbnz	r0, 8011622 <__s2b+0x36>
 8011610:	4602      	mov	r2, r0
 8011612:	4b19      	ldr	r3, [pc, #100]	; (8011678 <__s2b+0x8c>)
 8011614:	4819      	ldr	r0, [pc, #100]	; (801167c <__s2b+0x90>)
 8011616:	21d3      	movs	r1, #211	; 0xd3
 8011618:	f7fe ffa6 	bl	8010568 <__assert_func>
 801161c:	0052      	lsls	r2, r2, #1
 801161e:	3101      	adds	r1, #1
 8011620:	e7f0      	b.n	8011604 <__s2b+0x18>
 8011622:	9b08      	ldr	r3, [sp, #32]
 8011624:	6143      	str	r3, [r0, #20]
 8011626:	2d09      	cmp	r5, #9
 8011628:	f04f 0301 	mov.w	r3, #1
 801162c:	6103      	str	r3, [r0, #16]
 801162e:	dd16      	ble.n	801165e <__s2b+0x72>
 8011630:	f104 0909 	add.w	r9, r4, #9
 8011634:	46c8      	mov	r8, r9
 8011636:	442c      	add	r4, r5
 8011638:	f818 3b01 	ldrb.w	r3, [r8], #1
 801163c:	4601      	mov	r1, r0
 801163e:	3b30      	subs	r3, #48	; 0x30
 8011640:	220a      	movs	r2, #10
 8011642:	4630      	mov	r0, r6
 8011644:	f7ff ff8c 	bl	8011560 <__multadd>
 8011648:	45a0      	cmp	r8, r4
 801164a:	d1f5      	bne.n	8011638 <__s2b+0x4c>
 801164c:	f1a5 0408 	sub.w	r4, r5, #8
 8011650:	444c      	add	r4, r9
 8011652:	1b2d      	subs	r5, r5, r4
 8011654:	1963      	adds	r3, r4, r5
 8011656:	42bb      	cmp	r3, r7
 8011658:	db04      	blt.n	8011664 <__s2b+0x78>
 801165a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801165e:	340a      	adds	r4, #10
 8011660:	2509      	movs	r5, #9
 8011662:	e7f6      	b.n	8011652 <__s2b+0x66>
 8011664:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011668:	4601      	mov	r1, r0
 801166a:	3b30      	subs	r3, #48	; 0x30
 801166c:	220a      	movs	r2, #10
 801166e:	4630      	mov	r0, r6
 8011670:	f7ff ff76 	bl	8011560 <__multadd>
 8011674:	e7ee      	b.n	8011654 <__s2b+0x68>
 8011676:	bf00      	nop
 8011678:	0801406b 	.word	0x0801406b
 801167c:	0801407c 	.word	0x0801407c

08011680 <__hi0bits>:
 8011680:	0c03      	lsrs	r3, r0, #16
 8011682:	041b      	lsls	r3, r3, #16
 8011684:	b9d3      	cbnz	r3, 80116bc <__hi0bits+0x3c>
 8011686:	0400      	lsls	r0, r0, #16
 8011688:	2310      	movs	r3, #16
 801168a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801168e:	bf04      	itt	eq
 8011690:	0200      	lsleq	r0, r0, #8
 8011692:	3308      	addeq	r3, #8
 8011694:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011698:	bf04      	itt	eq
 801169a:	0100      	lsleq	r0, r0, #4
 801169c:	3304      	addeq	r3, #4
 801169e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80116a2:	bf04      	itt	eq
 80116a4:	0080      	lsleq	r0, r0, #2
 80116a6:	3302      	addeq	r3, #2
 80116a8:	2800      	cmp	r0, #0
 80116aa:	db05      	blt.n	80116b8 <__hi0bits+0x38>
 80116ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80116b0:	f103 0301 	add.w	r3, r3, #1
 80116b4:	bf08      	it	eq
 80116b6:	2320      	moveq	r3, #32
 80116b8:	4618      	mov	r0, r3
 80116ba:	4770      	bx	lr
 80116bc:	2300      	movs	r3, #0
 80116be:	e7e4      	b.n	801168a <__hi0bits+0xa>

080116c0 <__lo0bits>:
 80116c0:	6803      	ldr	r3, [r0, #0]
 80116c2:	f013 0207 	ands.w	r2, r3, #7
 80116c6:	d00c      	beq.n	80116e2 <__lo0bits+0x22>
 80116c8:	07d9      	lsls	r1, r3, #31
 80116ca:	d422      	bmi.n	8011712 <__lo0bits+0x52>
 80116cc:	079a      	lsls	r2, r3, #30
 80116ce:	bf49      	itett	mi
 80116d0:	085b      	lsrmi	r3, r3, #1
 80116d2:	089b      	lsrpl	r3, r3, #2
 80116d4:	6003      	strmi	r3, [r0, #0]
 80116d6:	2201      	movmi	r2, #1
 80116d8:	bf5c      	itt	pl
 80116da:	6003      	strpl	r3, [r0, #0]
 80116dc:	2202      	movpl	r2, #2
 80116de:	4610      	mov	r0, r2
 80116e0:	4770      	bx	lr
 80116e2:	b299      	uxth	r1, r3
 80116e4:	b909      	cbnz	r1, 80116ea <__lo0bits+0x2a>
 80116e6:	0c1b      	lsrs	r3, r3, #16
 80116e8:	2210      	movs	r2, #16
 80116ea:	b2d9      	uxtb	r1, r3
 80116ec:	b909      	cbnz	r1, 80116f2 <__lo0bits+0x32>
 80116ee:	3208      	adds	r2, #8
 80116f0:	0a1b      	lsrs	r3, r3, #8
 80116f2:	0719      	lsls	r1, r3, #28
 80116f4:	bf04      	itt	eq
 80116f6:	091b      	lsreq	r3, r3, #4
 80116f8:	3204      	addeq	r2, #4
 80116fa:	0799      	lsls	r1, r3, #30
 80116fc:	bf04      	itt	eq
 80116fe:	089b      	lsreq	r3, r3, #2
 8011700:	3202      	addeq	r2, #2
 8011702:	07d9      	lsls	r1, r3, #31
 8011704:	d403      	bmi.n	801170e <__lo0bits+0x4e>
 8011706:	085b      	lsrs	r3, r3, #1
 8011708:	f102 0201 	add.w	r2, r2, #1
 801170c:	d003      	beq.n	8011716 <__lo0bits+0x56>
 801170e:	6003      	str	r3, [r0, #0]
 8011710:	e7e5      	b.n	80116de <__lo0bits+0x1e>
 8011712:	2200      	movs	r2, #0
 8011714:	e7e3      	b.n	80116de <__lo0bits+0x1e>
 8011716:	2220      	movs	r2, #32
 8011718:	e7e1      	b.n	80116de <__lo0bits+0x1e>
	...

0801171c <__i2b>:
 801171c:	b510      	push	{r4, lr}
 801171e:	460c      	mov	r4, r1
 8011720:	2101      	movs	r1, #1
 8011722:	f7ff febb 	bl	801149c <_Balloc>
 8011726:	4602      	mov	r2, r0
 8011728:	b928      	cbnz	r0, 8011736 <__i2b+0x1a>
 801172a:	4b05      	ldr	r3, [pc, #20]	; (8011740 <__i2b+0x24>)
 801172c:	4805      	ldr	r0, [pc, #20]	; (8011744 <__i2b+0x28>)
 801172e:	f240 1145 	movw	r1, #325	; 0x145
 8011732:	f7fe ff19 	bl	8010568 <__assert_func>
 8011736:	2301      	movs	r3, #1
 8011738:	6144      	str	r4, [r0, #20]
 801173a:	6103      	str	r3, [r0, #16]
 801173c:	bd10      	pop	{r4, pc}
 801173e:	bf00      	nop
 8011740:	0801406b 	.word	0x0801406b
 8011744:	0801407c 	.word	0x0801407c

08011748 <__multiply>:
 8011748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801174c:	4691      	mov	r9, r2
 801174e:	690a      	ldr	r2, [r1, #16]
 8011750:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011754:	429a      	cmp	r2, r3
 8011756:	bfb8      	it	lt
 8011758:	460b      	movlt	r3, r1
 801175a:	460c      	mov	r4, r1
 801175c:	bfbc      	itt	lt
 801175e:	464c      	movlt	r4, r9
 8011760:	4699      	movlt	r9, r3
 8011762:	6927      	ldr	r7, [r4, #16]
 8011764:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011768:	68a3      	ldr	r3, [r4, #8]
 801176a:	6861      	ldr	r1, [r4, #4]
 801176c:	eb07 060a 	add.w	r6, r7, sl
 8011770:	42b3      	cmp	r3, r6
 8011772:	b085      	sub	sp, #20
 8011774:	bfb8      	it	lt
 8011776:	3101      	addlt	r1, #1
 8011778:	f7ff fe90 	bl	801149c <_Balloc>
 801177c:	b930      	cbnz	r0, 801178c <__multiply+0x44>
 801177e:	4602      	mov	r2, r0
 8011780:	4b44      	ldr	r3, [pc, #272]	; (8011894 <__multiply+0x14c>)
 8011782:	4845      	ldr	r0, [pc, #276]	; (8011898 <__multiply+0x150>)
 8011784:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011788:	f7fe feee 	bl	8010568 <__assert_func>
 801178c:	f100 0514 	add.w	r5, r0, #20
 8011790:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011794:	462b      	mov	r3, r5
 8011796:	2200      	movs	r2, #0
 8011798:	4543      	cmp	r3, r8
 801179a:	d321      	bcc.n	80117e0 <__multiply+0x98>
 801179c:	f104 0314 	add.w	r3, r4, #20
 80117a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80117a4:	f109 0314 	add.w	r3, r9, #20
 80117a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80117ac:	9202      	str	r2, [sp, #8]
 80117ae:	1b3a      	subs	r2, r7, r4
 80117b0:	3a15      	subs	r2, #21
 80117b2:	f022 0203 	bic.w	r2, r2, #3
 80117b6:	3204      	adds	r2, #4
 80117b8:	f104 0115 	add.w	r1, r4, #21
 80117bc:	428f      	cmp	r7, r1
 80117be:	bf38      	it	cc
 80117c0:	2204      	movcc	r2, #4
 80117c2:	9201      	str	r2, [sp, #4]
 80117c4:	9a02      	ldr	r2, [sp, #8]
 80117c6:	9303      	str	r3, [sp, #12]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d80c      	bhi.n	80117e6 <__multiply+0x9e>
 80117cc:	2e00      	cmp	r6, #0
 80117ce:	dd03      	ble.n	80117d8 <__multiply+0x90>
 80117d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d05b      	beq.n	8011890 <__multiply+0x148>
 80117d8:	6106      	str	r6, [r0, #16]
 80117da:	b005      	add	sp, #20
 80117dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e0:	f843 2b04 	str.w	r2, [r3], #4
 80117e4:	e7d8      	b.n	8011798 <__multiply+0x50>
 80117e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80117ea:	f1ba 0f00 	cmp.w	sl, #0
 80117ee:	d024      	beq.n	801183a <__multiply+0xf2>
 80117f0:	f104 0e14 	add.w	lr, r4, #20
 80117f4:	46a9      	mov	r9, r5
 80117f6:	f04f 0c00 	mov.w	ip, #0
 80117fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80117fe:	f8d9 1000 	ldr.w	r1, [r9]
 8011802:	fa1f fb82 	uxth.w	fp, r2
 8011806:	b289      	uxth	r1, r1
 8011808:	fb0a 110b 	mla	r1, sl, fp, r1
 801180c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011810:	f8d9 2000 	ldr.w	r2, [r9]
 8011814:	4461      	add	r1, ip
 8011816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801181a:	fb0a c20b 	mla	r2, sl, fp, ip
 801181e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011822:	b289      	uxth	r1, r1
 8011824:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011828:	4577      	cmp	r7, lr
 801182a:	f849 1b04 	str.w	r1, [r9], #4
 801182e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011832:	d8e2      	bhi.n	80117fa <__multiply+0xb2>
 8011834:	9a01      	ldr	r2, [sp, #4]
 8011836:	f845 c002 	str.w	ip, [r5, r2]
 801183a:	9a03      	ldr	r2, [sp, #12]
 801183c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011840:	3304      	adds	r3, #4
 8011842:	f1b9 0f00 	cmp.w	r9, #0
 8011846:	d021      	beq.n	801188c <__multiply+0x144>
 8011848:	6829      	ldr	r1, [r5, #0]
 801184a:	f104 0c14 	add.w	ip, r4, #20
 801184e:	46ae      	mov	lr, r5
 8011850:	f04f 0a00 	mov.w	sl, #0
 8011854:	f8bc b000 	ldrh.w	fp, [ip]
 8011858:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801185c:	fb09 220b 	mla	r2, r9, fp, r2
 8011860:	4452      	add	r2, sl
 8011862:	b289      	uxth	r1, r1
 8011864:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011868:	f84e 1b04 	str.w	r1, [lr], #4
 801186c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011870:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011874:	f8be 1000 	ldrh.w	r1, [lr]
 8011878:	fb09 110a 	mla	r1, r9, sl, r1
 801187c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011880:	4567      	cmp	r7, ip
 8011882:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011886:	d8e5      	bhi.n	8011854 <__multiply+0x10c>
 8011888:	9a01      	ldr	r2, [sp, #4]
 801188a:	50a9      	str	r1, [r5, r2]
 801188c:	3504      	adds	r5, #4
 801188e:	e799      	b.n	80117c4 <__multiply+0x7c>
 8011890:	3e01      	subs	r6, #1
 8011892:	e79b      	b.n	80117cc <__multiply+0x84>
 8011894:	0801406b 	.word	0x0801406b
 8011898:	0801407c 	.word	0x0801407c

0801189c <__pow5mult>:
 801189c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a0:	4615      	mov	r5, r2
 80118a2:	f012 0203 	ands.w	r2, r2, #3
 80118a6:	4606      	mov	r6, r0
 80118a8:	460f      	mov	r7, r1
 80118aa:	d007      	beq.n	80118bc <__pow5mult+0x20>
 80118ac:	4c25      	ldr	r4, [pc, #148]	; (8011944 <__pow5mult+0xa8>)
 80118ae:	3a01      	subs	r2, #1
 80118b0:	2300      	movs	r3, #0
 80118b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118b6:	f7ff fe53 	bl	8011560 <__multadd>
 80118ba:	4607      	mov	r7, r0
 80118bc:	10ad      	asrs	r5, r5, #2
 80118be:	d03d      	beq.n	801193c <__pow5mult+0xa0>
 80118c0:	69f4      	ldr	r4, [r6, #28]
 80118c2:	b97c      	cbnz	r4, 80118e4 <__pow5mult+0x48>
 80118c4:	2010      	movs	r0, #16
 80118c6:	f7ff fd35 	bl	8011334 <malloc>
 80118ca:	4602      	mov	r2, r0
 80118cc:	61f0      	str	r0, [r6, #28]
 80118ce:	b928      	cbnz	r0, 80118dc <__pow5mult+0x40>
 80118d0:	4b1d      	ldr	r3, [pc, #116]	; (8011948 <__pow5mult+0xac>)
 80118d2:	481e      	ldr	r0, [pc, #120]	; (801194c <__pow5mult+0xb0>)
 80118d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80118d8:	f7fe fe46 	bl	8010568 <__assert_func>
 80118dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118e0:	6004      	str	r4, [r0, #0]
 80118e2:	60c4      	str	r4, [r0, #12]
 80118e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80118e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118ec:	b94c      	cbnz	r4, 8011902 <__pow5mult+0x66>
 80118ee:	f240 2171 	movw	r1, #625	; 0x271
 80118f2:	4630      	mov	r0, r6
 80118f4:	f7ff ff12 	bl	801171c <__i2b>
 80118f8:	2300      	movs	r3, #0
 80118fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80118fe:	4604      	mov	r4, r0
 8011900:	6003      	str	r3, [r0, #0]
 8011902:	f04f 0900 	mov.w	r9, #0
 8011906:	07eb      	lsls	r3, r5, #31
 8011908:	d50a      	bpl.n	8011920 <__pow5mult+0x84>
 801190a:	4639      	mov	r1, r7
 801190c:	4622      	mov	r2, r4
 801190e:	4630      	mov	r0, r6
 8011910:	f7ff ff1a 	bl	8011748 <__multiply>
 8011914:	4639      	mov	r1, r7
 8011916:	4680      	mov	r8, r0
 8011918:	4630      	mov	r0, r6
 801191a:	f7ff fdff 	bl	801151c <_Bfree>
 801191e:	4647      	mov	r7, r8
 8011920:	106d      	asrs	r5, r5, #1
 8011922:	d00b      	beq.n	801193c <__pow5mult+0xa0>
 8011924:	6820      	ldr	r0, [r4, #0]
 8011926:	b938      	cbnz	r0, 8011938 <__pow5mult+0x9c>
 8011928:	4622      	mov	r2, r4
 801192a:	4621      	mov	r1, r4
 801192c:	4630      	mov	r0, r6
 801192e:	f7ff ff0b 	bl	8011748 <__multiply>
 8011932:	6020      	str	r0, [r4, #0]
 8011934:	f8c0 9000 	str.w	r9, [r0]
 8011938:	4604      	mov	r4, r0
 801193a:	e7e4      	b.n	8011906 <__pow5mult+0x6a>
 801193c:	4638      	mov	r0, r7
 801193e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011942:	bf00      	nop
 8011944:	080141c8 	.word	0x080141c8
 8011948:	08013f59 	.word	0x08013f59
 801194c:	0801407c 	.word	0x0801407c

08011950 <__lshift>:
 8011950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011954:	460c      	mov	r4, r1
 8011956:	6849      	ldr	r1, [r1, #4]
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801195e:	68a3      	ldr	r3, [r4, #8]
 8011960:	4607      	mov	r7, r0
 8011962:	4691      	mov	r9, r2
 8011964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011968:	f108 0601 	add.w	r6, r8, #1
 801196c:	42b3      	cmp	r3, r6
 801196e:	db0b      	blt.n	8011988 <__lshift+0x38>
 8011970:	4638      	mov	r0, r7
 8011972:	f7ff fd93 	bl	801149c <_Balloc>
 8011976:	4605      	mov	r5, r0
 8011978:	b948      	cbnz	r0, 801198e <__lshift+0x3e>
 801197a:	4602      	mov	r2, r0
 801197c:	4b28      	ldr	r3, [pc, #160]	; (8011a20 <__lshift+0xd0>)
 801197e:	4829      	ldr	r0, [pc, #164]	; (8011a24 <__lshift+0xd4>)
 8011980:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011984:	f7fe fdf0 	bl	8010568 <__assert_func>
 8011988:	3101      	adds	r1, #1
 801198a:	005b      	lsls	r3, r3, #1
 801198c:	e7ee      	b.n	801196c <__lshift+0x1c>
 801198e:	2300      	movs	r3, #0
 8011990:	f100 0114 	add.w	r1, r0, #20
 8011994:	f100 0210 	add.w	r2, r0, #16
 8011998:	4618      	mov	r0, r3
 801199a:	4553      	cmp	r3, sl
 801199c:	db33      	blt.n	8011a06 <__lshift+0xb6>
 801199e:	6920      	ldr	r0, [r4, #16]
 80119a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119a4:	f104 0314 	add.w	r3, r4, #20
 80119a8:	f019 091f 	ands.w	r9, r9, #31
 80119ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119b4:	d02b      	beq.n	8011a0e <__lshift+0xbe>
 80119b6:	f1c9 0e20 	rsb	lr, r9, #32
 80119ba:	468a      	mov	sl, r1
 80119bc:	2200      	movs	r2, #0
 80119be:	6818      	ldr	r0, [r3, #0]
 80119c0:	fa00 f009 	lsl.w	r0, r0, r9
 80119c4:	4310      	orrs	r0, r2
 80119c6:	f84a 0b04 	str.w	r0, [sl], #4
 80119ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ce:	459c      	cmp	ip, r3
 80119d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80119d4:	d8f3      	bhi.n	80119be <__lshift+0x6e>
 80119d6:	ebac 0304 	sub.w	r3, ip, r4
 80119da:	3b15      	subs	r3, #21
 80119dc:	f023 0303 	bic.w	r3, r3, #3
 80119e0:	3304      	adds	r3, #4
 80119e2:	f104 0015 	add.w	r0, r4, #21
 80119e6:	4584      	cmp	ip, r0
 80119e8:	bf38      	it	cc
 80119ea:	2304      	movcc	r3, #4
 80119ec:	50ca      	str	r2, [r1, r3]
 80119ee:	b10a      	cbz	r2, 80119f4 <__lshift+0xa4>
 80119f0:	f108 0602 	add.w	r6, r8, #2
 80119f4:	3e01      	subs	r6, #1
 80119f6:	4638      	mov	r0, r7
 80119f8:	612e      	str	r6, [r5, #16]
 80119fa:	4621      	mov	r1, r4
 80119fc:	f7ff fd8e 	bl	801151c <_Bfree>
 8011a00:	4628      	mov	r0, r5
 8011a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a06:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	e7c5      	b.n	801199a <__lshift+0x4a>
 8011a0e:	3904      	subs	r1, #4
 8011a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a14:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a18:	459c      	cmp	ip, r3
 8011a1a:	d8f9      	bhi.n	8011a10 <__lshift+0xc0>
 8011a1c:	e7ea      	b.n	80119f4 <__lshift+0xa4>
 8011a1e:	bf00      	nop
 8011a20:	0801406b 	.word	0x0801406b
 8011a24:	0801407c 	.word	0x0801407c

08011a28 <__mcmp>:
 8011a28:	b530      	push	{r4, r5, lr}
 8011a2a:	6902      	ldr	r2, [r0, #16]
 8011a2c:	690c      	ldr	r4, [r1, #16]
 8011a2e:	1b12      	subs	r2, r2, r4
 8011a30:	d10e      	bne.n	8011a50 <__mcmp+0x28>
 8011a32:	f100 0314 	add.w	r3, r0, #20
 8011a36:	3114      	adds	r1, #20
 8011a38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a48:	42a5      	cmp	r5, r4
 8011a4a:	d003      	beq.n	8011a54 <__mcmp+0x2c>
 8011a4c:	d305      	bcc.n	8011a5a <__mcmp+0x32>
 8011a4e:	2201      	movs	r2, #1
 8011a50:	4610      	mov	r0, r2
 8011a52:	bd30      	pop	{r4, r5, pc}
 8011a54:	4283      	cmp	r3, r0
 8011a56:	d3f3      	bcc.n	8011a40 <__mcmp+0x18>
 8011a58:	e7fa      	b.n	8011a50 <__mcmp+0x28>
 8011a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5e:	e7f7      	b.n	8011a50 <__mcmp+0x28>

08011a60 <__mdiff>:
 8011a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a64:	460c      	mov	r4, r1
 8011a66:	4606      	mov	r6, r0
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	4690      	mov	r8, r2
 8011a6e:	f7ff ffdb 	bl	8011a28 <__mcmp>
 8011a72:	1e05      	subs	r5, r0, #0
 8011a74:	d110      	bne.n	8011a98 <__mdiff+0x38>
 8011a76:	4629      	mov	r1, r5
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ff fd0f 	bl	801149c <_Balloc>
 8011a7e:	b930      	cbnz	r0, 8011a8e <__mdiff+0x2e>
 8011a80:	4b3a      	ldr	r3, [pc, #232]	; (8011b6c <__mdiff+0x10c>)
 8011a82:	4602      	mov	r2, r0
 8011a84:	f240 2137 	movw	r1, #567	; 0x237
 8011a88:	4839      	ldr	r0, [pc, #228]	; (8011b70 <__mdiff+0x110>)
 8011a8a:	f7fe fd6d 	bl	8010568 <__assert_func>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a98:	bfa4      	itt	ge
 8011a9a:	4643      	movge	r3, r8
 8011a9c:	46a0      	movge	r8, r4
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011aa4:	bfa6      	itte	ge
 8011aa6:	461c      	movge	r4, r3
 8011aa8:	2500      	movge	r5, #0
 8011aaa:	2501      	movlt	r5, #1
 8011aac:	f7ff fcf6 	bl	801149c <_Balloc>
 8011ab0:	b920      	cbnz	r0, 8011abc <__mdiff+0x5c>
 8011ab2:	4b2e      	ldr	r3, [pc, #184]	; (8011b6c <__mdiff+0x10c>)
 8011ab4:	4602      	mov	r2, r0
 8011ab6:	f240 2145 	movw	r1, #581	; 0x245
 8011aba:	e7e5      	b.n	8011a88 <__mdiff+0x28>
 8011abc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011ac0:	6926      	ldr	r6, [r4, #16]
 8011ac2:	60c5      	str	r5, [r0, #12]
 8011ac4:	f104 0914 	add.w	r9, r4, #20
 8011ac8:	f108 0514 	add.w	r5, r8, #20
 8011acc:	f100 0e14 	add.w	lr, r0, #20
 8011ad0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011ad4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011ad8:	f108 0210 	add.w	r2, r8, #16
 8011adc:	46f2      	mov	sl, lr
 8011ade:	2100      	movs	r1, #0
 8011ae0:	f859 3b04 	ldr.w	r3, [r9], #4
 8011ae4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ae8:	fa11 f88b 	uxtah	r8, r1, fp
 8011aec:	b299      	uxth	r1, r3
 8011aee:	0c1b      	lsrs	r3, r3, #16
 8011af0:	eba8 0801 	sub.w	r8, r8, r1
 8011af4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011af8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011afc:	fa1f f888 	uxth.w	r8, r8
 8011b00:	1419      	asrs	r1, r3, #16
 8011b02:	454e      	cmp	r6, r9
 8011b04:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b08:	f84a 3b04 	str.w	r3, [sl], #4
 8011b0c:	d8e8      	bhi.n	8011ae0 <__mdiff+0x80>
 8011b0e:	1b33      	subs	r3, r6, r4
 8011b10:	3b15      	subs	r3, #21
 8011b12:	f023 0303 	bic.w	r3, r3, #3
 8011b16:	3304      	adds	r3, #4
 8011b18:	3415      	adds	r4, #21
 8011b1a:	42a6      	cmp	r6, r4
 8011b1c:	bf38      	it	cc
 8011b1e:	2304      	movcc	r3, #4
 8011b20:	441d      	add	r5, r3
 8011b22:	4473      	add	r3, lr
 8011b24:	469e      	mov	lr, r3
 8011b26:	462e      	mov	r6, r5
 8011b28:	4566      	cmp	r6, ip
 8011b2a:	d30e      	bcc.n	8011b4a <__mdiff+0xea>
 8011b2c:	f10c 0203 	add.w	r2, ip, #3
 8011b30:	1b52      	subs	r2, r2, r5
 8011b32:	f022 0203 	bic.w	r2, r2, #3
 8011b36:	3d03      	subs	r5, #3
 8011b38:	45ac      	cmp	ip, r5
 8011b3a:	bf38      	it	cc
 8011b3c:	2200      	movcc	r2, #0
 8011b3e:	4413      	add	r3, r2
 8011b40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011b44:	b17a      	cbz	r2, 8011b66 <__mdiff+0x106>
 8011b46:	6107      	str	r7, [r0, #16]
 8011b48:	e7a4      	b.n	8011a94 <__mdiff+0x34>
 8011b4a:	f856 8b04 	ldr.w	r8, [r6], #4
 8011b4e:	fa11 f288 	uxtah	r2, r1, r8
 8011b52:	1414      	asrs	r4, r2, #16
 8011b54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011b58:	b292      	uxth	r2, r2
 8011b5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011b5e:	f84e 2b04 	str.w	r2, [lr], #4
 8011b62:	1421      	asrs	r1, r4, #16
 8011b64:	e7e0      	b.n	8011b28 <__mdiff+0xc8>
 8011b66:	3f01      	subs	r7, #1
 8011b68:	e7ea      	b.n	8011b40 <__mdiff+0xe0>
 8011b6a:	bf00      	nop
 8011b6c:	0801406b 	.word	0x0801406b
 8011b70:	0801407c 	.word	0x0801407c

08011b74 <__ulp>:
 8011b74:	b082      	sub	sp, #8
 8011b76:	ed8d 0b00 	vstr	d0, [sp]
 8011b7a:	9a01      	ldr	r2, [sp, #4]
 8011b7c:	4b0f      	ldr	r3, [pc, #60]	; (8011bbc <__ulp+0x48>)
 8011b7e:	4013      	ands	r3, r2
 8011b80:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	dc08      	bgt.n	8011b9a <__ulp+0x26>
 8011b88:	425b      	negs	r3, r3
 8011b8a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011b8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011b92:	da04      	bge.n	8011b9e <__ulp+0x2a>
 8011b94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011b98:	4113      	asrs	r3, r2
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	e008      	b.n	8011bb0 <__ulp+0x3c>
 8011b9e:	f1a2 0314 	sub.w	r3, r2, #20
 8011ba2:	2b1e      	cmp	r3, #30
 8011ba4:	bfda      	itte	le
 8011ba6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011baa:	40da      	lsrle	r2, r3
 8011bac:	2201      	movgt	r2, #1
 8011bae:	2300      	movs	r3, #0
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	4610      	mov	r0, r2
 8011bb4:	ec41 0b10 	vmov	d0, r0, r1
 8011bb8:	b002      	add	sp, #8
 8011bba:	4770      	bx	lr
 8011bbc:	7ff00000 	.word	0x7ff00000

08011bc0 <__b2d>:
 8011bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc4:	6906      	ldr	r6, [r0, #16]
 8011bc6:	f100 0814 	add.w	r8, r0, #20
 8011bca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011bce:	1f37      	subs	r7, r6, #4
 8011bd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011bd4:	4610      	mov	r0, r2
 8011bd6:	f7ff fd53 	bl	8011680 <__hi0bits>
 8011bda:	f1c0 0320 	rsb	r3, r0, #32
 8011bde:	280a      	cmp	r0, #10
 8011be0:	600b      	str	r3, [r1, #0]
 8011be2:	491b      	ldr	r1, [pc, #108]	; (8011c50 <__b2d+0x90>)
 8011be4:	dc15      	bgt.n	8011c12 <__b2d+0x52>
 8011be6:	f1c0 0c0b 	rsb	ip, r0, #11
 8011bea:	fa22 f30c 	lsr.w	r3, r2, ip
 8011bee:	45b8      	cmp	r8, r7
 8011bf0:	ea43 0501 	orr.w	r5, r3, r1
 8011bf4:	bf34      	ite	cc
 8011bf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011bfa:	2300      	movcs	r3, #0
 8011bfc:	3015      	adds	r0, #21
 8011bfe:	fa02 f000 	lsl.w	r0, r2, r0
 8011c02:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c06:	4303      	orrs	r3, r0
 8011c08:	461c      	mov	r4, r3
 8011c0a:	ec45 4b10 	vmov	d0, r4, r5
 8011c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c12:	45b8      	cmp	r8, r7
 8011c14:	bf3a      	itte	cc
 8011c16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c1a:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c1e:	2300      	movcs	r3, #0
 8011c20:	380b      	subs	r0, #11
 8011c22:	d012      	beq.n	8011c4a <__b2d+0x8a>
 8011c24:	f1c0 0120 	rsb	r1, r0, #32
 8011c28:	fa23 f401 	lsr.w	r4, r3, r1
 8011c2c:	4082      	lsls	r2, r0
 8011c2e:	4322      	orrs	r2, r4
 8011c30:	4547      	cmp	r7, r8
 8011c32:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011c36:	bf8c      	ite	hi
 8011c38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c3c:	2200      	movls	r2, #0
 8011c3e:	4083      	lsls	r3, r0
 8011c40:	40ca      	lsrs	r2, r1
 8011c42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011c46:	4313      	orrs	r3, r2
 8011c48:	e7de      	b.n	8011c08 <__b2d+0x48>
 8011c4a:	ea42 0501 	orr.w	r5, r2, r1
 8011c4e:	e7db      	b.n	8011c08 <__b2d+0x48>
 8011c50:	3ff00000 	.word	0x3ff00000

08011c54 <__d2b>:
 8011c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c58:	460f      	mov	r7, r1
 8011c5a:	2101      	movs	r1, #1
 8011c5c:	ec59 8b10 	vmov	r8, r9, d0
 8011c60:	4616      	mov	r6, r2
 8011c62:	f7ff fc1b 	bl	801149c <_Balloc>
 8011c66:	4604      	mov	r4, r0
 8011c68:	b930      	cbnz	r0, 8011c78 <__d2b+0x24>
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	4b24      	ldr	r3, [pc, #144]	; (8011d00 <__d2b+0xac>)
 8011c6e:	4825      	ldr	r0, [pc, #148]	; (8011d04 <__d2b+0xb0>)
 8011c70:	f240 310f 	movw	r1, #783	; 0x30f
 8011c74:	f7fe fc78 	bl	8010568 <__assert_func>
 8011c78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c80:	bb2d      	cbnz	r5, 8011cce <__d2b+0x7a>
 8011c82:	9301      	str	r3, [sp, #4]
 8011c84:	f1b8 0300 	subs.w	r3, r8, #0
 8011c88:	d026      	beq.n	8011cd8 <__d2b+0x84>
 8011c8a:	4668      	mov	r0, sp
 8011c8c:	9300      	str	r3, [sp, #0]
 8011c8e:	f7ff fd17 	bl	80116c0 <__lo0bits>
 8011c92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011c96:	b1e8      	cbz	r0, 8011cd4 <__d2b+0x80>
 8011c98:	f1c0 0320 	rsb	r3, r0, #32
 8011c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8011ca0:	430b      	orrs	r3, r1
 8011ca2:	40c2      	lsrs	r2, r0
 8011ca4:	6163      	str	r3, [r4, #20]
 8011ca6:	9201      	str	r2, [sp, #4]
 8011ca8:	9b01      	ldr	r3, [sp, #4]
 8011caa:	61a3      	str	r3, [r4, #24]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	bf14      	ite	ne
 8011cb0:	2202      	movne	r2, #2
 8011cb2:	2201      	moveq	r2, #1
 8011cb4:	6122      	str	r2, [r4, #16]
 8011cb6:	b1bd      	cbz	r5, 8011ce8 <__d2b+0x94>
 8011cb8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011cbc:	4405      	add	r5, r0
 8011cbe:	603d      	str	r5, [r7, #0]
 8011cc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011cc4:	6030      	str	r0, [r6, #0]
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	b003      	add	sp, #12
 8011cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011cd2:	e7d6      	b.n	8011c82 <__d2b+0x2e>
 8011cd4:	6161      	str	r1, [r4, #20]
 8011cd6:	e7e7      	b.n	8011ca8 <__d2b+0x54>
 8011cd8:	a801      	add	r0, sp, #4
 8011cda:	f7ff fcf1 	bl	80116c0 <__lo0bits>
 8011cde:	9b01      	ldr	r3, [sp, #4]
 8011ce0:	6163      	str	r3, [r4, #20]
 8011ce2:	3020      	adds	r0, #32
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	e7e5      	b.n	8011cb4 <__d2b+0x60>
 8011ce8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011cf0:	6038      	str	r0, [r7, #0]
 8011cf2:	6918      	ldr	r0, [r3, #16]
 8011cf4:	f7ff fcc4 	bl	8011680 <__hi0bits>
 8011cf8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011cfc:	e7e2      	b.n	8011cc4 <__d2b+0x70>
 8011cfe:	bf00      	nop
 8011d00:	0801406b 	.word	0x0801406b
 8011d04:	0801407c 	.word	0x0801407c

08011d08 <__ratio>:
 8011d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d0c:	4688      	mov	r8, r1
 8011d0e:	4669      	mov	r1, sp
 8011d10:	4681      	mov	r9, r0
 8011d12:	f7ff ff55 	bl	8011bc0 <__b2d>
 8011d16:	a901      	add	r1, sp, #4
 8011d18:	4640      	mov	r0, r8
 8011d1a:	ec55 4b10 	vmov	r4, r5, d0
 8011d1e:	f7ff ff4f 	bl	8011bc0 <__b2d>
 8011d22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011d26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011d2a:	eba3 0c02 	sub.w	ip, r3, r2
 8011d2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011d32:	1a9b      	subs	r3, r3, r2
 8011d34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011d38:	ec51 0b10 	vmov	r0, r1, d0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	bfd6      	itet	le
 8011d40:	460a      	movle	r2, r1
 8011d42:	462a      	movgt	r2, r5
 8011d44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d48:	468b      	mov	fp, r1
 8011d4a:	462f      	mov	r7, r5
 8011d4c:	bfd4      	ite	le
 8011d4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011d52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d56:	4620      	mov	r0, r4
 8011d58:	ee10 2a10 	vmov	r2, s0
 8011d5c:	465b      	mov	r3, fp
 8011d5e:	4639      	mov	r1, r7
 8011d60:	f7ee fdac 	bl	80008bc <__aeabi_ddiv>
 8011d64:	ec41 0b10 	vmov	d0, r0, r1
 8011d68:	b003      	add	sp, #12
 8011d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d6e <__copybits>:
 8011d6e:	3901      	subs	r1, #1
 8011d70:	b570      	push	{r4, r5, r6, lr}
 8011d72:	1149      	asrs	r1, r1, #5
 8011d74:	6914      	ldr	r4, [r2, #16]
 8011d76:	3101      	adds	r1, #1
 8011d78:	f102 0314 	add.w	r3, r2, #20
 8011d7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d84:	1f05      	subs	r5, r0, #4
 8011d86:	42a3      	cmp	r3, r4
 8011d88:	d30c      	bcc.n	8011da4 <__copybits+0x36>
 8011d8a:	1aa3      	subs	r3, r4, r2
 8011d8c:	3b11      	subs	r3, #17
 8011d8e:	f023 0303 	bic.w	r3, r3, #3
 8011d92:	3211      	adds	r2, #17
 8011d94:	42a2      	cmp	r2, r4
 8011d96:	bf88      	it	hi
 8011d98:	2300      	movhi	r3, #0
 8011d9a:	4418      	add	r0, r3
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	4288      	cmp	r0, r1
 8011da0:	d305      	bcc.n	8011dae <__copybits+0x40>
 8011da2:	bd70      	pop	{r4, r5, r6, pc}
 8011da4:	f853 6b04 	ldr.w	r6, [r3], #4
 8011da8:	f845 6f04 	str.w	r6, [r5, #4]!
 8011dac:	e7eb      	b.n	8011d86 <__copybits+0x18>
 8011dae:	f840 3b04 	str.w	r3, [r0], #4
 8011db2:	e7f4      	b.n	8011d9e <__copybits+0x30>

08011db4 <__any_on>:
 8011db4:	f100 0214 	add.w	r2, r0, #20
 8011db8:	6900      	ldr	r0, [r0, #16]
 8011dba:	114b      	asrs	r3, r1, #5
 8011dbc:	4298      	cmp	r0, r3
 8011dbe:	b510      	push	{r4, lr}
 8011dc0:	db11      	blt.n	8011de6 <__any_on+0x32>
 8011dc2:	dd0a      	ble.n	8011dda <__any_on+0x26>
 8011dc4:	f011 011f 	ands.w	r1, r1, #31
 8011dc8:	d007      	beq.n	8011dda <__any_on+0x26>
 8011dca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011dce:	fa24 f001 	lsr.w	r0, r4, r1
 8011dd2:	fa00 f101 	lsl.w	r1, r0, r1
 8011dd6:	428c      	cmp	r4, r1
 8011dd8:	d10b      	bne.n	8011df2 <__any_on+0x3e>
 8011dda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d803      	bhi.n	8011dea <__any_on+0x36>
 8011de2:	2000      	movs	r0, #0
 8011de4:	bd10      	pop	{r4, pc}
 8011de6:	4603      	mov	r3, r0
 8011de8:	e7f7      	b.n	8011dda <__any_on+0x26>
 8011dea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011dee:	2900      	cmp	r1, #0
 8011df0:	d0f5      	beq.n	8011dde <__any_on+0x2a>
 8011df2:	2001      	movs	r0, #1
 8011df4:	e7f6      	b.n	8011de4 <__any_on+0x30>

08011df6 <sulp>:
 8011df6:	b570      	push	{r4, r5, r6, lr}
 8011df8:	4604      	mov	r4, r0
 8011dfa:	460d      	mov	r5, r1
 8011dfc:	ec45 4b10 	vmov	d0, r4, r5
 8011e00:	4616      	mov	r6, r2
 8011e02:	f7ff feb7 	bl	8011b74 <__ulp>
 8011e06:	ec51 0b10 	vmov	r0, r1, d0
 8011e0a:	b17e      	cbz	r6, 8011e2c <sulp+0x36>
 8011e0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011e10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	dd09      	ble.n	8011e2c <sulp+0x36>
 8011e18:	051b      	lsls	r3, r3, #20
 8011e1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011e1e:	2400      	movs	r4, #0
 8011e20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011e24:	4622      	mov	r2, r4
 8011e26:	462b      	mov	r3, r5
 8011e28:	f7ee fc1e 	bl	8000668 <__aeabi_dmul>
 8011e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011e30 <_strtod_l>:
 8011e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e34:	ed2d 8b02 	vpush	{d8}
 8011e38:	b09b      	sub	sp, #108	; 0x6c
 8011e3a:	4604      	mov	r4, r0
 8011e3c:	9213      	str	r2, [sp, #76]	; 0x4c
 8011e3e:	2200      	movs	r2, #0
 8011e40:	9216      	str	r2, [sp, #88]	; 0x58
 8011e42:	460d      	mov	r5, r1
 8011e44:	f04f 0800 	mov.w	r8, #0
 8011e48:	f04f 0900 	mov.w	r9, #0
 8011e4c:	460a      	mov	r2, r1
 8011e4e:	9215      	str	r2, [sp, #84]	; 0x54
 8011e50:	7811      	ldrb	r1, [r2, #0]
 8011e52:	292b      	cmp	r1, #43	; 0x2b
 8011e54:	d04c      	beq.n	8011ef0 <_strtod_l+0xc0>
 8011e56:	d83a      	bhi.n	8011ece <_strtod_l+0x9e>
 8011e58:	290d      	cmp	r1, #13
 8011e5a:	d834      	bhi.n	8011ec6 <_strtod_l+0x96>
 8011e5c:	2908      	cmp	r1, #8
 8011e5e:	d834      	bhi.n	8011eca <_strtod_l+0x9a>
 8011e60:	2900      	cmp	r1, #0
 8011e62:	d03d      	beq.n	8011ee0 <_strtod_l+0xb0>
 8011e64:	2200      	movs	r2, #0
 8011e66:	920a      	str	r2, [sp, #40]	; 0x28
 8011e68:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011e6a:	7832      	ldrb	r2, [r6, #0]
 8011e6c:	2a30      	cmp	r2, #48	; 0x30
 8011e6e:	f040 80b4 	bne.w	8011fda <_strtod_l+0x1aa>
 8011e72:	7872      	ldrb	r2, [r6, #1]
 8011e74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011e78:	2a58      	cmp	r2, #88	; 0x58
 8011e7a:	d170      	bne.n	8011f5e <_strtod_l+0x12e>
 8011e7c:	9302      	str	r3, [sp, #8]
 8011e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e80:	9301      	str	r3, [sp, #4]
 8011e82:	ab16      	add	r3, sp, #88	; 0x58
 8011e84:	9300      	str	r3, [sp, #0]
 8011e86:	4a8e      	ldr	r2, [pc, #568]	; (80120c0 <_strtod_l+0x290>)
 8011e88:	ab17      	add	r3, sp, #92	; 0x5c
 8011e8a:	a915      	add	r1, sp, #84	; 0x54
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	f001 fb03 	bl	8013498 <__gethex>
 8011e92:	f010 070f 	ands.w	r7, r0, #15
 8011e96:	4605      	mov	r5, r0
 8011e98:	d005      	beq.n	8011ea6 <_strtod_l+0x76>
 8011e9a:	2f06      	cmp	r7, #6
 8011e9c:	d12a      	bne.n	8011ef4 <_strtod_l+0xc4>
 8011e9e:	3601      	adds	r6, #1
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	9615      	str	r6, [sp, #84]	; 0x54
 8011ea4:	930a      	str	r3, [sp, #40]	; 0x28
 8011ea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	f040 857f 	bne.w	80129ac <_strtod_l+0xb7c>
 8011eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eb0:	b1db      	cbz	r3, 8011eea <_strtod_l+0xba>
 8011eb2:	4642      	mov	r2, r8
 8011eb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011eb8:	ec43 2b10 	vmov	d0, r2, r3
 8011ebc:	b01b      	add	sp, #108	; 0x6c
 8011ebe:	ecbd 8b02 	vpop	{d8}
 8011ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec6:	2920      	cmp	r1, #32
 8011ec8:	d1cc      	bne.n	8011e64 <_strtod_l+0x34>
 8011eca:	3201      	adds	r2, #1
 8011ecc:	e7bf      	b.n	8011e4e <_strtod_l+0x1e>
 8011ece:	292d      	cmp	r1, #45	; 0x2d
 8011ed0:	d1c8      	bne.n	8011e64 <_strtod_l+0x34>
 8011ed2:	2101      	movs	r1, #1
 8011ed4:	910a      	str	r1, [sp, #40]	; 0x28
 8011ed6:	1c51      	adds	r1, r2, #1
 8011ed8:	9115      	str	r1, [sp, #84]	; 0x54
 8011eda:	7852      	ldrb	r2, [r2, #1]
 8011edc:	2a00      	cmp	r2, #0
 8011ede:	d1c3      	bne.n	8011e68 <_strtod_l+0x38>
 8011ee0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ee2:	9515      	str	r5, [sp, #84]	; 0x54
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	f040 855f 	bne.w	80129a8 <_strtod_l+0xb78>
 8011eea:	4642      	mov	r2, r8
 8011eec:	464b      	mov	r3, r9
 8011eee:	e7e3      	b.n	8011eb8 <_strtod_l+0x88>
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	e7ef      	b.n	8011ed4 <_strtod_l+0xa4>
 8011ef4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011ef6:	b13a      	cbz	r2, 8011f08 <_strtod_l+0xd8>
 8011ef8:	2135      	movs	r1, #53	; 0x35
 8011efa:	a818      	add	r0, sp, #96	; 0x60
 8011efc:	f7ff ff37 	bl	8011d6e <__copybits>
 8011f00:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011f02:	4620      	mov	r0, r4
 8011f04:	f7ff fb0a 	bl	801151c <_Bfree>
 8011f08:	3f01      	subs	r7, #1
 8011f0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f0c:	2f04      	cmp	r7, #4
 8011f0e:	d806      	bhi.n	8011f1e <_strtod_l+0xee>
 8011f10:	e8df f007 	tbb	[pc, r7]
 8011f14:	201d0314 	.word	0x201d0314
 8011f18:	14          	.byte	0x14
 8011f19:	00          	.byte	0x00
 8011f1a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8011f1e:	05e9      	lsls	r1, r5, #23
 8011f20:	bf48      	it	mi
 8011f22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011f26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011f2a:	0d1b      	lsrs	r3, r3, #20
 8011f2c:	051b      	lsls	r3, r3, #20
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d1b9      	bne.n	8011ea6 <_strtod_l+0x76>
 8011f32:	f7fe facf 	bl	80104d4 <__errno>
 8011f36:	2322      	movs	r3, #34	; 0x22
 8011f38:	6003      	str	r3, [r0, #0]
 8011f3a:	e7b4      	b.n	8011ea6 <_strtod_l+0x76>
 8011f3c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011f40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011f44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011f48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011f4c:	e7e7      	b.n	8011f1e <_strtod_l+0xee>
 8011f4e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80120c8 <_strtod_l+0x298>
 8011f52:	e7e4      	b.n	8011f1e <_strtod_l+0xee>
 8011f54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011f58:	f04f 38ff 	mov.w	r8, #4294967295
 8011f5c:	e7df      	b.n	8011f1e <_strtod_l+0xee>
 8011f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f60:	1c5a      	adds	r2, r3, #1
 8011f62:	9215      	str	r2, [sp, #84]	; 0x54
 8011f64:	785b      	ldrb	r3, [r3, #1]
 8011f66:	2b30      	cmp	r3, #48	; 0x30
 8011f68:	d0f9      	beq.n	8011f5e <_strtod_l+0x12e>
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d09b      	beq.n	8011ea6 <_strtod_l+0x76>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	f04f 0a00 	mov.w	sl, #0
 8011f74:	9304      	str	r3, [sp, #16]
 8011f76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f7a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011f7e:	46d3      	mov	fp, sl
 8011f80:	220a      	movs	r2, #10
 8011f82:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011f84:	7806      	ldrb	r6, [r0, #0]
 8011f86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011f8a:	b2d9      	uxtb	r1, r3
 8011f8c:	2909      	cmp	r1, #9
 8011f8e:	d926      	bls.n	8011fde <_strtod_l+0x1ae>
 8011f90:	494c      	ldr	r1, [pc, #304]	; (80120c4 <_strtod_l+0x294>)
 8011f92:	2201      	movs	r2, #1
 8011f94:	f001 f9d2 	bl	801333c <strncmp>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d030      	beq.n	8011ffe <_strtod_l+0x1ce>
 8011f9c:	2000      	movs	r0, #0
 8011f9e:	4632      	mov	r2, r6
 8011fa0:	9005      	str	r0, [sp, #20]
 8011fa2:	465e      	mov	r6, fp
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2a65      	cmp	r2, #101	; 0x65
 8011fa8:	d001      	beq.n	8011fae <_strtod_l+0x17e>
 8011faa:	2a45      	cmp	r2, #69	; 0x45
 8011fac:	d113      	bne.n	8011fd6 <_strtod_l+0x1a6>
 8011fae:	b91e      	cbnz	r6, 8011fb8 <_strtod_l+0x188>
 8011fb0:	9a04      	ldr	r2, [sp, #16]
 8011fb2:	4302      	orrs	r2, r0
 8011fb4:	d094      	beq.n	8011ee0 <_strtod_l+0xb0>
 8011fb6:	2600      	movs	r6, #0
 8011fb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011fba:	1c6a      	adds	r2, r5, #1
 8011fbc:	9215      	str	r2, [sp, #84]	; 0x54
 8011fbe:	786a      	ldrb	r2, [r5, #1]
 8011fc0:	2a2b      	cmp	r2, #43	; 0x2b
 8011fc2:	d074      	beq.n	80120ae <_strtod_l+0x27e>
 8011fc4:	2a2d      	cmp	r2, #45	; 0x2d
 8011fc6:	d078      	beq.n	80120ba <_strtod_l+0x28a>
 8011fc8:	f04f 0c00 	mov.w	ip, #0
 8011fcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011fd0:	2909      	cmp	r1, #9
 8011fd2:	d97f      	bls.n	80120d4 <_strtod_l+0x2a4>
 8011fd4:	9515      	str	r5, [sp, #84]	; 0x54
 8011fd6:	2700      	movs	r7, #0
 8011fd8:	e09e      	b.n	8012118 <_strtod_l+0x2e8>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	e7c8      	b.n	8011f70 <_strtod_l+0x140>
 8011fde:	f1bb 0f08 	cmp.w	fp, #8
 8011fe2:	bfd8      	it	le
 8011fe4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011fe6:	f100 0001 	add.w	r0, r0, #1
 8011fea:	bfda      	itte	le
 8011fec:	fb02 3301 	mlale	r3, r2, r1, r3
 8011ff0:	9309      	strle	r3, [sp, #36]	; 0x24
 8011ff2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011ff6:	f10b 0b01 	add.w	fp, fp, #1
 8011ffa:	9015      	str	r0, [sp, #84]	; 0x54
 8011ffc:	e7c1      	b.n	8011f82 <_strtod_l+0x152>
 8011ffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012000:	1c5a      	adds	r2, r3, #1
 8012002:	9215      	str	r2, [sp, #84]	; 0x54
 8012004:	785a      	ldrb	r2, [r3, #1]
 8012006:	f1bb 0f00 	cmp.w	fp, #0
 801200a:	d037      	beq.n	801207c <_strtod_l+0x24c>
 801200c:	9005      	str	r0, [sp, #20]
 801200e:	465e      	mov	r6, fp
 8012010:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012014:	2b09      	cmp	r3, #9
 8012016:	d912      	bls.n	801203e <_strtod_l+0x20e>
 8012018:	2301      	movs	r3, #1
 801201a:	e7c4      	b.n	8011fa6 <_strtod_l+0x176>
 801201c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801201e:	1c5a      	adds	r2, r3, #1
 8012020:	9215      	str	r2, [sp, #84]	; 0x54
 8012022:	785a      	ldrb	r2, [r3, #1]
 8012024:	3001      	adds	r0, #1
 8012026:	2a30      	cmp	r2, #48	; 0x30
 8012028:	d0f8      	beq.n	801201c <_strtod_l+0x1ec>
 801202a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801202e:	2b08      	cmp	r3, #8
 8012030:	f200 84c1 	bhi.w	80129b6 <_strtod_l+0xb86>
 8012034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012036:	9005      	str	r0, [sp, #20]
 8012038:	2000      	movs	r0, #0
 801203a:	930b      	str	r3, [sp, #44]	; 0x2c
 801203c:	4606      	mov	r6, r0
 801203e:	3a30      	subs	r2, #48	; 0x30
 8012040:	f100 0301 	add.w	r3, r0, #1
 8012044:	d014      	beq.n	8012070 <_strtod_l+0x240>
 8012046:	9905      	ldr	r1, [sp, #20]
 8012048:	4419      	add	r1, r3
 801204a:	9105      	str	r1, [sp, #20]
 801204c:	4633      	mov	r3, r6
 801204e:	eb00 0c06 	add.w	ip, r0, r6
 8012052:	210a      	movs	r1, #10
 8012054:	4563      	cmp	r3, ip
 8012056:	d113      	bne.n	8012080 <_strtod_l+0x250>
 8012058:	1833      	adds	r3, r6, r0
 801205a:	2b08      	cmp	r3, #8
 801205c:	f106 0601 	add.w	r6, r6, #1
 8012060:	4406      	add	r6, r0
 8012062:	dc1a      	bgt.n	801209a <_strtod_l+0x26a>
 8012064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012066:	230a      	movs	r3, #10
 8012068:	fb03 2301 	mla	r3, r3, r1, r2
 801206c:	9309      	str	r3, [sp, #36]	; 0x24
 801206e:	2300      	movs	r3, #0
 8012070:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012072:	1c51      	adds	r1, r2, #1
 8012074:	9115      	str	r1, [sp, #84]	; 0x54
 8012076:	7852      	ldrb	r2, [r2, #1]
 8012078:	4618      	mov	r0, r3
 801207a:	e7c9      	b.n	8012010 <_strtod_l+0x1e0>
 801207c:	4658      	mov	r0, fp
 801207e:	e7d2      	b.n	8012026 <_strtod_l+0x1f6>
 8012080:	2b08      	cmp	r3, #8
 8012082:	f103 0301 	add.w	r3, r3, #1
 8012086:	dc03      	bgt.n	8012090 <_strtod_l+0x260>
 8012088:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801208a:	434f      	muls	r7, r1
 801208c:	9709      	str	r7, [sp, #36]	; 0x24
 801208e:	e7e1      	b.n	8012054 <_strtod_l+0x224>
 8012090:	2b10      	cmp	r3, #16
 8012092:	bfd8      	it	le
 8012094:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012098:	e7dc      	b.n	8012054 <_strtod_l+0x224>
 801209a:	2e10      	cmp	r6, #16
 801209c:	bfdc      	itt	le
 801209e:	230a      	movle	r3, #10
 80120a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80120a4:	e7e3      	b.n	801206e <_strtod_l+0x23e>
 80120a6:	2300      	movs	r3, #0
 80120a8:	9305      	str	r3, [sp, #20]
 80120aa:	2301      	movs	r3, #1
 80120ac:	e780      	b.n	8011fb0 <_strtod_l+0x180>
 80120ae:	f04f 0c00 	mov.w	ip, #0
 80120b2:	1caa      	adds	r2, r5, #2
 80120b4:	9215      	str	r2, [sp, #84]	; 0x54
 80120b6:	78aa      	ldrb	r2, [r5, #2]
 80120b8:	e788      	b.n	8011fcc <_strtod_l+0x19c>
 80120ba:	f04f 0c01 	mov.w	ip, #1
 80120be:	e7f8      	b.n	80120b2 <_strtod_l+0x282>
 80120c0:	080141d8 	.word	0x080141d8
 80120c4:	080141d4 	.word	0x080141d4
 80120c8:	7ff00000 	.word	0x7ff00000
 80120cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80120ce:	1c51      	adds	r1, r2, #1
 80120d0:	9115      	str	r1, [sp, #84]	; 0x54
 80120d2:	7852      	ldrb	r2, [r2, #1]
 80120d4:	2a30      	cmp	r2, #48	; 0x30
 80120d6:	d0f9      	beq.n	80120cc <_strtod_l+0x29c>
 80120d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80120dc:	2908      	cmp	r1, #8
 80120de:	f63f af7a 	bhi.w	8011fd6 <_strtod_l+0x1a6>
 80120e2:	3a30      	subs	r2, #48	; 0x30
 80120e4:	9208      	str	r2, [sp, #32]
 80120e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80120e8:	920c      	str	r2, [sp, #48]	; 0x30
 80120ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80120ec:	1c57      	adds	r7, r2, #1
 80120ee:	9715      	str	r7, [sp, #84]	; 0x54
 80120f0:	7852      	ldrb	r2, [r2, #1]
 80120f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80120f6:	f1be 0f09 	cmp.w	lr, #9
 80120fa:	d938      	bls.n	801216e <_strtod_l+0x33e>
 80120fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80120fe:	1a7f      	subs	r7, r7, r1
 8012100:	2f08      	cmp	r7, #8
 8012102:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012106:	dc03      	bgt.n	8012110 <_strtod_l+0x2e0>
 8012108:	9908      	ldr	r1, [sp, #32]
 801210a:	428f      	cmp	r7, r1
 801210c:	bfa8      	it	ge
 801210e:	460f      	movge	r7, r1
 8012110:	f1bc 0f00 	cmp.w	ip, #0
 8012114:	d000      	beq.n	8012118 <_strtod_l+0x2e8>
 8012116:	427f      	negs	r7, r7
 8012118:	2e00      	cmp	r6, #0
 801211a:	d14f      	bne.n	80121bc <_strtod_l+0x38c>
 801211c:	9904      	ldr	r1, [sp, #16]
 801211e:	4301      	orrs	r1, r0
 8012120:	f47f aec1 	bne.w	8011ea6 <_strtod_l+0x76>
 8012124:	2b00      	cmp	r3, #0
 8012126:	f47f aedb 	bne.w	8011ee0 <_strtod_l+0xb0>
 801212a:	2a69      	cmp	r2, #105	; 0x69
 801212c:	d029      	beq.n	8012182 <_strtod_l+0x352>
 801212e:	dc26      	bgt.n	801217e <_strtod_l+0x34e>
 8012130:	2a49      	cmp	r2, #73	; 0x49
 8012132:	d026      	beq.n	8012182 <_strtod_l+0x352>
 8012134:	2a4e      	cmp	r2, #78	; 0x4e
 8012136:	f47f aed3 	bne.w	8011ee0 <_strtod_l+0xb0>
 801213a:	499b      	ldr	r1, [pc, #620]	; (80123a8 <_strtod_l+0x578>)
 801213c:	a815      	add	r0, sp, #84	; 0x54
 801213e:	f001 fbeb 	bl	8013918 <__match>
 8012142:	2800      	cmp	r0, #0
 8012144:	f43f aecc 	beq.w	8011ee0 <_strtod_l+0xb0>
 8012148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	2b28      	cmp	r3, #40	; 0x28
 801214e:	d12f      	bne.n	80121b0 <_strtod_l+0x380>
 8012150:	4996      	ldr	r1, [pc, #600]	; (80123ac <_strtod_l+0x57c>)
 8012152:	aa18      	add	r2, sp, #96	; 0x60
 8012154:	a815      	add	r0, sp, #84	; 0x54
 8012156:	f001 fbf3 	bl	8013940 <__hexnan>
 801215a:	2805      	cmp	r0, #5
 801215c:	d128      	bne.n	80121b0 <_strtod_l+0x380>
 801215e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012160:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012164:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012168:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801216c:	e69b      	b.n	8011ea6 <_strtod_l+0x76>
 801216e:	9f08      	ldr	r7, [sp, #32]
 8012170:	210a      	movs	r1, #10
 8012172:	fb01 2107 	mla	r1, r1, r7, r2
 8012176:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801217a:	9208      	str	r2, [sp, #32]
 801217c:	e7b5      	b.n	80120ea <_strtod_l+0x2ba>
 801217e:	2a6e      	cmp	r2, #110	; 0x6e
 8012180:	e7d9      	b.n	8012136 <_strtod_l+0x306>
 8012182:	498b      	ldr	r1, [pc, #556]	; (80123b0 <_strtod_l+0x580>)
 8012184:	a815      	add	r0, sp, #84	; 0x54
 8012186:	f001 fbc7 	bl	8013918 <__match>
 801218a:	2800      	cmp	r0, #0
 801218c:	f43f aea8 	beq.w	8011ee0 <_strtod_l+0xb0>
 8012190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012192:	4988      	ldr	r1, [pc, #544]	; (80123b4 <_strtod_l+0x584>)
 8012194:	3b01      	subs	r3, #1
 8012196:	a815      	add	r0, sp, #84	; 0x54
 8012198:	9315      	str	r3, [sp, #84]	; 0x54
 801219a:	f001 fbbd 	bl	8013918 <__match>
 801219e:	b910      	cbnz	r0, 80121a6 <_strtod_l+0x376>
 80121a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121a2:	3301      	adds	r3, #1
 80121a4:	9315      	str	r3, [sp, #84]	; 0x54
 80121a6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80123c4 <_strtod_l+0x594>
 80121aa:	f04f 0800 	mov.w	r8, #0
 80121ae:	e67a      	b.n	8011ea6 <_strtod_l+0x76>
 80121b0:	4881      	ldr	r0, [pc, #516]	; (80123b8 <_strtod_l+0x588>)
 80121b2:	f001 f8e5 	bl	8013380 <nan>
 80121b6:	ec59 8b10 	vmov	r8, r9, d0
 80121ba:	e674      	b.n	8011ea6 <_strtod_l+0x76>
 80121bc:	9b05      	ldr	r3, [sp, #20]
 80121be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121c0:	1afb      	subs	r3, r7, r3
 80121c2:	f1bb 0f00 	cmp.w	fp, #0
 80121c6:	bf08      	it	eq
 80121c8:	46b3      	moveq	fp, r6
 80121ca:	2e10      	cmp	r6, #16
 80121cc:	9308      	str	r3, [sp, #32]
 80121ce:	4635      	mov	r5, r6
 80121d0:	bfa8      	it	ge
 80121d2:	2510      	movge	r5, #16
 80121d4:	f7ee f9ce 	bl	8000574 <__aeabi_ui2d>
 80121d8:	2e09      	cmp	r6, #9
 80121da:	4680      	mov	r8, r0
 80121dc:	4689      	mov	r9, r1
 80121de:	dd13      	ble.n	8012208 <_strtod_l+0x3d8>
 80121e0:	4b76      	ldr	r3, [pc, #472]	; (80123bc <_strtod_l+0x58c>)
 80121e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80121e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80121ea:	f7ee fa3d 	bl	8000668 <__aeabi_dmul>
 80121ee:	4680      	mov	r8, r0
 80121f0:	4650      	mov	r0, sl
 80121f2:	4689      	mov	r9, r1
 80121f4:	f7ee f9be 	bl	8000574 <__aeabi_ui2d>
 80121f8:	4602      	mov	r2, r0
 80121fa:	460b      	mov	r3, r1
 80121fc:	4640      	mov	r0, r8
 80121fe:	4649      	mov	r1, r9
 8012200:	f7ee f87c 	bl	80002fc <__adddf3>
 8012204:	4680      	mov	r8, r0
 8012206:	4689      	mov	r9, r1
 8012208:	2e0f      	cmp	r6, #15
 801220a:	dc38      	bgt.n	801227e <_strtod_l+0x44e>
 801220c:	9b08      	ldr	r3, [sp, #32]
 801220e:	2b00      	cmp	r3, #0
 8012210:	f43f ae49 	beq.w	8011ea6 <_strtod_l+0x76>
 8012214:	dd24      	ble.n	8012260 <_strtod_l+0x430>
 8012216:	2b16      	cmp	r3, #22
 8012218:	dc0b      	bgt.n	8012232 <_strtod_l+0x402>
 801221a:	4968      	ldr	r1, [pc, #416]	; (80123bc <_strtod_l+0x58c>)
 801221c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012224:	4642      	mov	r2, r8
 8012226:	464b      	mov	r3, r9
 8012228:	f7ee fa1e 	bl	8000668 <__aeabi_dmul>
 801222c:	4680      	mov	r8, r0
 801222e:	4689      	mov	r9, r1
 8012230:	e639      	b.n	8011ea6 <_strtod_l+0x76>
 8012232:	9a08      	ldr	r2, [sp, #32]
 8012234:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012238:	4293      	cmp	r3, r2
 801223a:	db20      	blt.n	801227e <_strtod_l+0x44e>
 801223c:	4c5f      	ldr	r4, [pc, #380]	; (80123bc <_strtod_l+0x58c>)
 801223e:	f1c6 060f 	rsb	r6, r6, #15
 8012242:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012246:	4642      	mov	r2, r8
 8012248:	464b      	mov	r3, r9
 801224a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801224e:	f7ee fa0b 	bl	8000668 <__aeabi_dmul>
 8012252:	9b08      	ldr	r3, [sp, #32]
 8012254:	1b9e      	subs	r6, r3, r6
 8012256:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801225a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801225e:	e7e3      	b.n	8012228 <_strtod_l+0x3f8>
 8012260:	9b08      	ldr	r3, [sp, #32]
 8012262:	3316      	adds	r3, #22
 8012264:	db0b      	blt.n	801227e <_strtod_l+0x44e>
 8012266:	9b05      	ldr	r3, [sp, #20]
 8012268:	1bdf      	subs	r7, r3, r7
 801226a:	4b54      	ldr	r3, [pc, #336]	; (80123bc <_strtod_l+0x58c>)
 801226c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012274:	4640      	mov	r0, r8
 8012276:	4649      	mov	r1, r9
 8012278:	f7ee fb20 	bl	80008bc <__aeabi_ddiv>
 801227c:	e7d6      	b.n	801222c <_strtod_l+0x3fc>
 801227e:	9b08      	ldr	r3, [sp, #32]
 8012280:	1b75      	subs	r5, r6, r5
 8012282:	441d      	add	r5, r3
 8012284:	2d00      	cmp	r5, #0
 8012286:	dd70      	ble.n	801236a <_strtod_l+0x53a>
 8012288:	f015 030f 	ands.w	r3, r5, #15
 801228c:	d00a      	beq.n	80122a4 <_strtod_l+0x474>
 801228e:	494b      	ldr	r1, [pc, #300]	; (80123bc <_strtod_l+0x58c>)
 8012290:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012294:	4642      	mov	r2, r8
 8012296:	464b      	mov	r3, r9
 8012298:	e9d1 0100 	ldrd	r0, r1, [r1]
 801229c:	f7ee f9e4 	bl	8000668 <__aeabi_dmul>
 80122a0:	4680      	mov	r8, r0
 80122a2:	4689      	mov	r9, r1
 80122a4:	f035 050f 	bics.w	r5, r5, #15
 80122a8:	d04d      	beq.n	8012346 <_strtod_l+0x516>
 80122aa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80122ae:	dd22      	ble.n	80122f6 <_strtod_l+0x4c6>
 80122b0:	2500      	movs	r5, #0
 80122b2:	46ab      	mov	fp, r5
 80122b4:	9509      	str	r5, [sp, #36]	; 0x24
 80122b6:	9505      	str	r5, [sp, #20]
 80122b8:	2322      	movs	r3, #34	; 0x22
 80122ba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80123c4 <_strtod_l+0x594>
 80122be:	6023      	str	r3, [r4, #0]
 80122c0:	f04f 0800 	mov.w	r8, #0
 80122c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	f43f aded 	beq.w	8011ea6 <_strtod_l+0x76>
 80122cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80122ce:	4620      	mov	r0, r4
 80122d0:	f7ff f924 	bl	801151c <_Bfree>
 80122d4:	9905      	ldr	r1, [sp, #20]
 80122d6:	4620      	mov	r0, r4
 80122d8:	f7ff f920 	bl	801151c <_Bfree>
 80122dc:	4659      	mov	r1, fp
 80122de:	4620      	mov	r0, r4
 80122e0:	f7ff f91c 	bl	801151c <_Bfree>
 80122e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80122e6:	4620      	mov	r0, r4
 80122e8:	f7ff f918 	bl	801151c <_Bfree>
 80122ec:	4629      	mov	r1, r5
 80122ee:	4620      	mov	r0, r4
 80122f0:	f7ff f914 	bl	801151c <_Bfree>
 80122f4:	e5d7      	b.n	8011ea6 <_strtod_l+0x76>
 80122f6:	4b32      	ldr	r3, [pc, #200]	; (80123c0 <_strtod_l+0x590>)
 80122f8:	9304      	str	r3, [sp, #16]
 80122fa:	2300      	movs	r3, #0
 80122fc:	112d      	asrs	r5, r5, #4
 80122fe:	4640      	mov	r0, r8
 8012300:	4649      	mov	r1, r9
 8012302:	469a      	mov	sl, r3
 8012304:	2d01      	cmp	r5, #1
 8012306:	dc21      	bgt.n	801234c <_strtod_l+0x51c>
 8012308:	b10b      	cbz	r3, 801230e <_strtod_l+0x4de>
 801230a:	4680      	mov	r8, r0
 801230c:	4689      	mov	r9, r1
 801230e:	492c      	ldr	r1, [pc, #176]	; (80123c0 <_strtod_l+0x590>)
 8012310:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012314:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012318:	4642      	mov	r2, r8
 801231a:	464b      	mov	r3, r9
 801231c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012320:	f7ee f9a2 	bl	8000668 <__aeabi_dmul>
 8012324:	4b27      	ldr	r3, [pc, #156]	; (80123c4 <_strtod_l+0x594>)
 8012326:	460a      	mov	r2, r1
 8012328:	400b      	ands	r3, r1
 801232a:	4927      	ldr	r1, [pc, #156]	; (80123c8 <_strtod_l+0x598>)
 801232c:	428b      	cmp	r3, r1
 801232e:	4680      	mov	r8, r0
 8012330:	d8be      	bhi.n	80122b0 <_strtod_l+0x480>
 8012332:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012336:	428b      	cmp	r3, r1
 8012338:	bf86      	itte	hi
 801233a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80123cc <_strtod_l+0x59c>
 801233e:	f04f 38ff 	movhi.w	r8, #4294967295
 8012342:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012346:	2300      	movs	r3, #0
 8012348:	9304      	str	r3, [sp, #16]
 801234a:	e07b      	b.n	8012444 <_strtod_l+0x614>
 801234c:	07ea      	lsls	r2, r5, #31
 801234e:	d505      	bpl.n	801235c <_strtod_l+0x52c>
 8012350:	9b04      	ldr	r3, [sp, #16]
 8012352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012356:	f7ee f987 	bl	8000668 <__aeabi_dmul>
 801235a:	2301      	movs	r3, #1
 801235c:	9a04      	ldr	r2, [sp, #16]
 801235e:	3208      	adds	r2, #8
 8012360:	f10a 0a01 	add.w	sl, sl, #1
 8012364:	106d      	asrs	r5, r5, #1
 8012366:	9204      	str	r2, [sp, #16]
 8012368:	e7cc      	b.n	8012304 <_strtod_l+0x4d4>
 801236a:	d0ec      	beq.n	8012346 <_strtod_l+0x516>
 801236c:	426d      	negs	r5, r5
 801236e:	f015 020f 	ands.w	r2, r5, #15
 8012372:	d00a      	beq.n	801238a <_strtod_l+0x55a>
 8012374:	4b11      	ldr	r3, [pc, #68]	; (80123bc <_strtod_l+0x58c>)
 8012376:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801237a:	4640      	mov	r0, r8
 801237c:	4649      	mov	r1, r9
 801237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012382:	f7ee fa9b 	bl	80008bc <__aeabi_ddiv>
 8012386:	4680      	mov	r8, r0
 8012388:	4689      	mov	r9, r1
 801238a:	112d      	asrs	r5, r5, #4
 801238c:	d0db      	beq.n	8012346 <_strtod_l+0x516>
 801238e:	2d1f      	cmp	r5, #31
 8012390:	dd1e      	ble.n	80123d0 <_strtod_l+0x5a0>
 8012392:	2500      	movs	r5, #0
 8012394:	46ab      	mov	fp, r5
 8012396:	9509      	str	r5, [sp, #36]	; 0x24
 8012398:	9505      	str	r5, [sp, #20]
 801239a:	2322      	movs	r3, #34	; 0x22
 801239c:	f04f 0800 	mov.w	r8, #0
 80123a0:	f04f 0900 	mov.w	r9, #0
 80123a4:	6023      	str	r3, [r4, #0]
 80123a6:	e78d      	b.n	80122c4 <_strtod_l+0x494>
 80123a8:	08013f2d 	.word	0x08013f2d
 80123ac:	080141ec 	.word	0x080141ec
 80123b0:	08013f25 	.word	0x08013f25
 80123b4:	08014009 	.word	0x08014009
 80123b8:	08014005 	.word	0x08014005
 80123bc:	08014100 	.word	0x08014100
 80123c0:	080140d8 	.word	0x080140d8
 80123c4:	7ff00000 	.word	0x7ff00000
 80123c8:	7ca00000 	.word	0x7ca00000
 80123cc:	7fefffff 	.word	0x7fefffff
 80123d0:	f015 0310 	ands.w	r3, r5, #16
 80123d4:	bf18      	it	ne
 80123d6:	236a      	movne	r3, #106	; 0x6a
 80123d8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801277c <_strtod_l+0x94c>
 80123dc:	9304      	str	r3, [sp, #16]
 80123de:	4640      	mov	r0, r8
 80123e0:	4649      	mov	r1, r9
 80123e2:	2300      	movs	r3, #0
 80123e4:	07ea      	lsls	r2, r5, #31
 80123e6:	d504      	bpl.n	80123f2 <_strtod_l+0x5c2>
 80123e8:	e9da 2300 	ldrd	r2, r3, [sl]
 80123ec:	f7ee f93c 	bl	8000668 <__aeabi_dmul>
 80123f0:	2301      	movs	r3, #1
 80123f2:	106d      	asrs	r5, r5, #1
 80123f4:	f10a 0a08 	add.w	sl, sl, #8
 80123f8:	d1f4      	bne.n	80123e4 <_strtod_l+0x5b4>
 80123fa:	b10b      	cbz	r3, 8012400 <_strtod_l+0x5d0>
 80123fc:	4680      	mov	r8, r0
 80123fe:	4689      	mov	r9, r1
 8012400:	9b04      	ldr	r3, [sp, #16]
 8012402:	b1bb      	cbz	r3, 8012434 <_strtod_l+0x604>
 8012404:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012408:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801240c:	2b00      	cmp	r3, #0
 801240e:	4649      	mov	r1, r9
 8012410:	dd10      	ble.n	8012434 <_strtod_l+0x604>
 8012412:	2b1f      	cmp	r3, #31
 8012414:	f340 811e 	ble.w	8012654 <_strtod_l+0x824>
 8012418:	2b34      	cmp	r3, #52	; 0x34
 801241a:	bfde      	ittt	le
 801241c:	f04f 33ff 	movle.w	r3, #4294967295
 8012420:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012424:	4093      	lslle	r3, r2
 8012426:	f04f 0800 	mov.w	r8, #0
 801242a:	bfcc      	ite	gt
 801242c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012430:	ea03 0901 	andle.w	r9, r3, r1
 8012434:	2200      	movs	r2, #0
 8012436:	2300      	movs	r3, #0
 8012438:	4640      	mov	r0, r8
 801243a:	4649      	mov	r1, r9
 801243c:	f7ee fb7c 	bl	8000b38 <__aeabi_dcmpeq>
 8012440:	2800      	cmp	r0, #0
 8012442:	d1a6      	bne.n	8012392 <_strtod_l+0x562>
 8012444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012446:	9300      	str	r3, [sp, #0]
 8012448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801244a:	4633      	mov	r3, r6
 801244c:	465a      	mov	r2, fp
 801244e:	4620      	mov	r0, r4
 8012450:	f7ff f8cc 	bl	80115ec <__s2b>
 8012454:	9009      	str	r0, [sp, #36]	; 0x24
 8012456:	2800      	cmp	r0, #0
 8012458:	f43f af2a 	beq.w	80122b0 <_strtod_l+0x480>
 801245c:	9a08      	ldr	r2, [sp, #32]
 801245e:	9b05      	ldr	r3, [sp, #20]
 8012460:	2a00      	cmp	r2, #0
 8012462:	eba3 0307 	sub.w	r3, r3, r7
 8012466:	bfa8      	it	ge
 8012468:	2300      	movge	r3, #0
 801246a:	930c      	str	r3, [sp, #48]	; 0x30
 801246c:	2500      	movs	r5, #0
 801246e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012472:	9312      	str	r3, [sp, #72]	; 0x48
 8012474:	46ab      	mov	fp, r5
 8012476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012478:	4620      	mov	r0, r4
 801247a:	6859      	ldr	r1, [r3, #4]
 801247c:	f7ff f80e 	bl	801149c <_Balloc>
 8012480:	9005      	str	r0, [sp, #20]
 8012482:	2800      	cmp	r0, #0
 8012484:	f43f af18 	beq.w	80122b8 <_strtod_l+0x488>
 8012488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801248a:	691a      	ldr	r2, [r3, #16]
 801248c:	3202      	adds	r2, #2
 801248e:	f103 010c 	add.w	r1, r3, #12
 8012492:	0092      	lsls	r2, r2, #2
 8012494:	300c      	adds	r0, #12
 8012496:	f7fe f852 	bl	801053e <memcpy>
 801249a:	ec49 8b10 	vmov	d0, r8, r9
 801249e:	aa18      	add	r2, sp, #96	; 0x60
 80124a0:	a917      	add	r1, sp, #92	; 0x5c
 80124a2:	4620      	mov	r0, r4
 80124a4:	f7ff fbd6 	bl	8011c54 <__d2b>
 80124a8:	ec49 8b18 	vmov	d8, r8, r9
 80124ac:	9016      	str	r0, [sp, #88]	; 0x58
 80124ae:	2800      	cmp	r0, #0
 80124b0:	f43f af02 	beq.w	80122b8 <_strtod_l+0x488>
 80124b4:	2101      	movs	r1, #1
 80124b6:	4620      	mov	r0, r4
 80124b8:	f7ff f930 	bl	801171c <__i2b>
 80124bc:	4683      	mov	fp, r0
 80124be:	2800      	cmp	r0, #0
 80124c0:	f43f aefa 	beq.w	80122b8 <_strtod_l+0x488>
 80124c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80124c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80124c8:	2e00      	cmp	r6, #0
 80124ca:	bfab      	itete	ge
 80124cc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80124ce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80124d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80124d2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80124d6:	bfac      	ite	ge
 80124d8:	eb06 0a03 	addge.w	sl, r6, r3
 80124dc:	1b9f      	sublt	r7, r3, r6
 80124de:	9b04      	ldr	r3, [sp, #16]
 80124e0:	1af6      	subs	r6, r6, r3
 80124e2:	4416      	add	r6, r2
 80124e4:	4ba0      	ldr	r3, [pc, #640]	; (8012768 <_strtod_l+0x938>)
 80124e6:	3e01      	subs	r6, #1
 80124e8:	429e      	cmp	r6, r3
 80124ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80124ee:	f280 80c4 	bge.w	801267a <_strtod_l+0x84a>
 80124f2:	1b9b      	subs	r3, r3, r6
 80124f4:	2b1f      	cmp	r3, #31
 80124f6:	eba2 0203 	sub.w	r2, r2, r3
 80124fa:	f04f 0101 	mov.w	r1, #1
 80124fe:	f300 80b0 	bgt.w	8012662 <_strtod_l+0x832>
 8012502:	fa01 f303 	lsl.w	r3, r1, r3
 8012506:	930e      	str	r3, [sp, #56]	; 0x38
 8012508:	2300      	movs	r3, #0
 801250a:	930d      	str	r3, [sp, #52]	; 0x34
 801250c:	eb0a 0602 	add.w	r6, sl, r2
 8012510:	9b04      	ldr	r3, [sp, #16]
 8012512:	45b2      	cmp	sl, r6
 8012514:	4417      	add	r7, r2
 8012516:	441f      	add	r7, r3
 8012518:	4653      	mov	r3, sl
 801251a:	bfa8      	it	ge
 801251c:	4633      	movge	r3, r6
 801251e:	42bb      	cmp	r3, r7
 8012520:	bfa8      	it	ge
 8012522:	463b      	movge	r3, r7
 8012524:	2b00      	cmp	r3, #0
 8012526:	bfc2      	ittt	gt
 8012528:	1af6      	subgt	r6, r6, r3
 801252a:	1aff      	subgt	r7, r7, r3
 801252c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012532:	2b00      	cmp	r3, #0
 8012534:	dd17      	ble.n	8012566 <_strtod_l+0x736>
 8012536:	4659      	mov	r1, fp
 8012538:	461a      	mov	r2, r3
 801253a:	4620      	mov	r0, r4
 801253c:	f7ff f9ae 	bl	801189c <__pow5mult>
 8012540:	4683      	mov	fp, r0
 8012542:	2800      	cmp	r0, #0
 8012544:	f43f aeb8 	beq.w	80122b8 <_strtod_l+0x488>
 8012548:	4601      	mov	r1, r0
 801254a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801254c:	4620      	mov	r0, r4
 801254e:	f7ff f8fb 	bl	8011748 <__multiply>
 8012552:	900b      	str	r0, [sp, #44]	; 0x2c
 8012554:	2800      	cmp	r0, #0
 8012556:	f43f aeaf 	beq.w	80122b8 <_strtod_l+0x488>
 801255a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801255c:	4620      	mov	r0, r4
 801255e:	f7fe ffdd 	bl	801151c <_Bfree>
 8012562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012564:	9316      	str	r3, [sp, #88]	; 0x58
 8012566:	2e00      	cmp	r6, #0
 8012568:	f300 808c 	bgt.w	8012684 <_strtod_l+0x854>
 801256c:	9b08      	ldr	r3, [sp, #32]
 801256e:	2b00      	cmp	r3, #0
 8012570:	dd08      	ble.n	8012584 <_strtod_l+0x754>
 8012572:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012574:	9905      	ldr	r1, [sp, #20]
 8012576:	4620      	mov	r0, r4
 8012578:	f7ff f990 	bl	801189c <__pow5mult>
 801257c:	9005      	str	r0, [sp, #20]
 801257e:	2800      	cmp	r0, #0
 8012580:	f43f ae9a 	beq.w	80122b8 <_strtod_l+0x488>
 8012584:	2f00      	cmp	r7, #0
 8012586:	dd08      	ble.n	801259a <_strtod_l+0x76a>
 8012588:	9905      	ldr	r1, [sp, #20]
 801258a:	463a      	mov	r2, r7
 801258c:	4620      	mov	r0, r4
 801258e:	f7ff f9df 	bl	8011950 <__lshift>
 8012592:	9005      	str	r0, [sp, #20]
 8012594:	2800      	cmp	r0, #0
 8012596:	f43f ae8f 	beq.w	80122b8 <_strtod_l+0x488>
 801259a:	f1ba 0f00 	cmp.w	sl, #0
 801259e:	dd08      	ble.n	80125b2 <_strtod_l+0x782>
 80125a0:	4659      	mov	r1, fp
 80125a2:	4652      	mov	r2, sl
 80125a4:	4620      	mov	r0, r4
 80125a6:	f7ff f9d3 	bl	8011950 <__lshift>
 80125aa:	4683      	mov	fp, r0
 80125ac:	2800      	cmp	r0, #0
 80125ae:	f43f ae83 	beq.w	80122b8 <_strtod_l+0x488>
 80125b2:	9a05      	ldr	r2, [sp, #20]
 80125b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80125b6:	4620      	mov	r0, r4
 80125b8:	f7ff fa52 	bl	8011a60 <__mdiff>
 80125bc:	4605      	mov	r5, r0
 80125be:	2800      	cmp	r0, #0
 80125c0:	f43f ae7a 	beq.w	80122b8 <_strtod_l+0x488>
 80125c4:	68c3      	ldr	r3, [r0, #12]
 80125c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80125c8:	2300      	movs	r3, #0
 80125ca:	60c3      	str	r3, [r0, #12]
 80125cc:	4659      	mov	r1, fp
 80125ce:	f7ff fa2b 	bl	8011a28 <__mcmp>
 80125d2:	2800      	cmp	r0, #0
 80125d4:	da60      	bge.n	8012698 <_strtod_l+0x868>
 80125d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125d8:	ea53 0308 	orrs.w	r3, r3, r8
 80125dc:	f040 8084 	bne.w	80126e8 <_strtod_l+0x8b8>
 80125e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d17f      	bne.n	80126e8 <_strtod_l+0x8b8>
 80125e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80125ec:	0d1b      	lsrs	r3, r3, #20
 80125ee:	051b      	lsls	r3, r3, #20
 80125f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80125f4:	d978      	bls.n	80126e8 <_strtod_l+0x8b8>
 80125f6:	696b      	ldr	r3, [r5, #20]
 80125f8:	b913      	cbnz	r3, 8012600 <_strtod_l+0x7d0>
 80125fa:	692b      	ldr	r3, [r5, #16]
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	dd73      	ble.n	80126e8 <_strtod_l+0x8b8>
 8012600:	4629      	mov	r1, r5
 8012602:	2201      	movs	r2, #1
 8012604:	4620      	mov	r0, r4
 8012606:	f7ff f9a3 	bl	8011950 <__lshift>
 801260a:	4659      	mov	r1, fp
 801260c:	4605      	mov	r5, r0
 801260e:	f7ff fa0b 	bl	8011a28 <__mcmp>
 8012612:	2800      	cmp	r0, #0
 8012614:	dd68      	ble.n	80126e8 <_strtod_l+0x8b8>
 8012616:	9904      	ldr	r1, [sp, #16]
 8012618:	4a54      	ldr	r2, [pc, #336]	; (801276c <_strtod_l+0x93c>)
 801261a:	464b      	mov	r3, r9
 801261c:	2900      	cmp	r1, #0
 801261e:	f000 8084 	beq.w	801272a <_strtod_l+0x8fa>
 8012622:	ea02 0109 	and.w	r1, r2, r9
 8012626:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801262a:	dc7e      	bgt.n	801272a <_strtod_l+0x8fa>
 801262c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012630:	f77f aeb3 	ble.w	801239a <_strtod_l+0x56a>
 8012634:	4b4e      	ldr	r3, [pc, #312]	; (8012770 <_strtod_l+0x940>)
 8012636:	4640      	mov	r0, r8
 8012638:	4649      	mov	r1, r9
 801263a:	2200      	movs	r2, #0
 801263c:	f7ee f814 	bl	8000668 <__aeabi_dmul>
 8012640:	4b4a      	ldr	r3, [pc, #296]	; (801276c <_strtod_l+0x93c>)
 8012642:	400b      	ands	r3, r1
 8012644:	4680      	mov	r8, r0
 8012646:	4689      	mov	r9, r1
 8012648:	2b00      	cmp	r3, #0
 801264a:	f47f ae3f 	bne.w	80122cc <_strtod_l+0x49c>
 801264e:	2322      	movs	r3, #34	; 0x22
 8012650:	6023      	str	r3, [r4, #0]
 8012652:	e63b      	b.n	80122cc <_strtod_l+0x49c>
 8012654:	f04f 32ff 	mov.w	r2, #4294967295
 8012658:	fa02 f303 	lsl.w	r3, r2, r3
 801265c:	ea03 0808 	and.w	r8, r3, r8
 8012660:	e6e8      	b.n	8012434 <_strtod_l+0x604>
 8012662:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012666:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801266a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801266e:	36e2      	adds	r6, #226	; 0xe2
 8012670:	fa01 f306 	lsl.w	r3, r1, r6
 8012674:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012678:	e748      	b.n	801250c <_strtod_l+0x6dc>
 801267a:	2100      	movs	r1, #0
 801267c:	2301      	movs	r3, #1
 801267e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012682:	e743      	b.n	801250c <_strtod_l+0x6dc>
 8012684:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012686:	4632      	mov	r2, r6
 8012688:	4620      	mov	r0, r4
 801268a:	f7ff f961 	bl	8011950 <__lshift>
 801268e:	9016      	str	r0, [sp, #88]	; 0x58
 8012690:	2800      	cmp	r0, #0
 8012692:	f47f af6b 	bne.w	801256c <_strtod_l+0x73c>
 8012696:	e60f      	b.n	80122b8 <_strtod_l+0x488>
 8012698:	46ca      	mov	sl, r9
 801269a:	d171      	bne.n	8012780 <_strtod_l+0x950>
 801269c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801269e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80126a2:	b352      	cbz	r2, 80126fa <_strtod_l+0x8ca>
 80126a4:	4a33      	ldr	r2, [pc, #204]	; (8012774 <_strtod_l+0x944>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d12a      	bne.n	8012700 <_strtod_l+0x8d0>
 80126aa:	9b04      	ldr	r3, [sp, #16]
 80126ac:	4641      	mov	r1, r8
 80126ae:	b1fb      	cbz	r3, 80126f0 <_strtod_l+0x8c0>
 80126b0:	4b2e      	ldr	r3, [pc, #184]	; (801276c <_strtod_l+0x93c>)
 80126b2:	ea09 0303 	and.w	r3, r9, r3
 80126b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80126ba:	f04f 32ff 	mov.w	r2, #4294967295
 80126be:	d81a      	bhi.n	80126f6 <_strtod_l+0x8c6>
 80126c0:	0d1b      	lsrs	r3, r3, #20
 80126c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80126c6:	fa02 f303 	lsl.w	r3, r2, r3
 80126ca:	4299      	cmp	r1, r3
 80126cc:	d118      	bne.n	8012700 <_strtod_l+0x8d0>
 80126ce:	4b2a      	ldr	r3, [pc, #168]	; (8012778 <_strtod_l+0x948>)
 80126d0:	459a      	cmp	sl, r3
 80126d2:	d102      	bne.n	80126da <_strtod_l+0x8aa>
 80126d4:	3101      	adds	r1, #1
 80126d6:	f43f adef 	beq.w	80122b8 <_strtod_l+0x488>
 80126da:	4b24      	ldr	r3, [pc, #144]	; (801276c <_strtod_l+0x93c>)
 80126dc:	ea0a 0303 	and.w	r3, sl, r3
 80126e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80126e4:	f04f 0800 	mov.w	r8, #0
 80126e8:	9b04      	ldr	r3, [sp, #16]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1a2      	bne.n	8012634 <_strtod_l+0x804>
 80126ee:	e5ed      	b.n	80122cc <_strtod_l+0x49c>
 80126f0:	f04f 33ff 	mov.w	r3, #4294967295
 80126f4:	e7e9      	b.n	80126ca <_strtod_l+0x89a>
 80126f6:	4613      	mov	r3, r2
 80126f8:	e7e7      	b.n	80126ca <_strtod_l+0x89a>
 80126fa:	ea53 0308 	orrs.w	r3, r3, r8
 80126fe:	d08a      	beq.n	8012616 <_strtod_l+0x7e6>
 8012700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012702:	b1e3      	cbz	r3, 801273e <_strtod_l+0x90e>
 8012704:	ea13 0f0a 	tst.w	r3, sl
 8012708:	d0ee      	beq.n	80126e8 <_strtod_l+0x8b8>
 801270a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801270c:	9a04      	ldr	r2, [sp, #16]
 801270e:	4640      	mov	r0, r8
 8012710:	4649      	mov	r1, r9
 8012712:	b1c3      	cbz	r3, 8012746 <_strtod_l+0x916>
 8012714:	f7ff fb6f 	bl	8011df6 <sulp>
 8012718:	4602      	mov	r2, r0
 801271a:	460b      	mov	r3, r1
 801271c:	ec51 0b18 	vmov	r0, r1, d8
 8012720:	f7ed fdec 	bl	80002fc <__adddf3>
 8012724:	4680      	mov	r8, r0
 8012726:	4689      	mov	r9, r1
 8012728:	e7de      	b.n	80126e8 <_strtod_l+0x8b8>
 801272a:	4013      	ands	r3, r2
 801272c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012730:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012734:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012738:	f04f 38ff 	mov.w	r8, #4294967295
 801273c:	e7d4      	b.n	80126e8 <_strtod_l+0x8b8>
 801273e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012740:	ea13 0f08 	tst.w	r3, r8
 8012744:	e7e0      	b.n	8012708 <_strtod_l+0x8d8>
 8012746:	f7ff fb56 	bl	8011df6 <sulp>
 801274a:	4602      	mov	r2, r0
 801274c:	460b      	mov	r3, r1
 801274e:	ec51 0b18 	vmov	r0, r1, d8
 8012752:	f7ed fdd1 	bl	80002f8 <__aeabi_dsub>
 8012756:	2200      	movs	r2, #0
 8012758:	2300      	movs	r3, #0
 801275a:	4680      	mov	r8, r0
 801275c:	4689      	mov	r9, r1
 801275e:	f7ee f9eb 	bl	8000b38 <__aeabi_dcmpeq>
 8012762:	2800      	cmp	r0, #0
 8012764:	d0c0      	beq.n	80126e8 <_strtod_l+0x8b8>
 8012766:	e618      	b.n	801239a <_strtod_l+0x56a>
 8012768:	fffffc02 	.word	0xfffffc02
 801276c:	7ff00000 	.word	0x7ff00000
 8012770:	39500000 	.word	0x39500000
 8012774:	000fffff 	.word	0x000fffff
 8012778:	7fefffff 	.word	0x7fefffff
 801277c:	08014200 	.word	0x08014200
 8012780:	4659      	mov	r1, fp
 8012782:	4628      	mov	r0, r5
 8012784:	f7ff fac0 	bl	8011d08 <__ratio>
 8012788:	ec57 6b10 	vmov	r6, r7, d0
 801278c:	ee10 0a10 	vmov	r0, s0
 8012790:	2200      	movs	r2, #0
 8012792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012796:	4639      	mov	r1, r7
 8012798:	f7ee f9e2 	bl	8000b60 <__aeabi_dcmple>
 801279c:	2800      	cmp	r0, #0
 801279e:	d071      	beq.n	8012884 <_strtod_l+0xa54>
 80127a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d17c      	bne.n	80128a0 <_strtod_l+0xa70>
 80127a6:	f1b8 0f00 	cmp.w	r8, #0
 80127aa:	d15a      	bne.n	8012862 <_strtod_l+0xa32>
 80127ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d15d      	bne.n	8012870 <_strtod_l+0xa40>
 80127b4:	4b90      	ldr	r3, [pc, #576]	; (80129f8 <_strtod_l+0xbc8>)
 80127b6:	2200      	movs	r2, #0
 80127b8:	4630      	mov	r0, r6
 80127ba:	4639      	mov	r1, r7
 80127bc:	f7ee f9c6 	bl	8000b4c <__aeabi_dcmplt>
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d15c      	bne.n	801287e <_strtod_l+0xa4e>
 80127c4:	4630      	mov	r0, r6
 80127c6:	4639      	mov	r1, r7
 80127c8:	4b8c      	ldr	r3, [pc, #560]	; (80129fc <_strtod_l+0xbcc>)
 80127ca:	2200      	movs	r2, #0
 80127cc:	f7ed ff4c 	bl	8000668 <__aeabi_dmul>
 80127d0:	4606      	mov	r6, r0
 80127d2:	460f      	mov	r7, r1
 80127d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80127d8:	9606      	str	r6, [sp, #24]
 80127da:	9307      	str	r3, [sp, #28]
 80127dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80127e4:	4b86      	ldr	r3, [pc, #536]	; (8012a00 <_strtod_l+0xbd0>)
 80127e6:	ea0a 0303 	and.w	r3, sl, r3
 80127ea:	930d      	str	r3, [sp, #52]	; 0x34
 80127ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80127ee:	4b85      	ldr	r3, [pc, #532]	; (8012a04 <_strtod_l+0xbd4>)
 80127f0:	429a      	cmp	r2, r3
 80127f2:	f040 8090 	bne.w	8012916 <_strtod_l+0xae6>
 80127f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80127fa:	ec49 8b10 	vmov	d0, r8, r9
 80127fe:	f7ff f9b9 	bl	8011b74 <__ulp>
 8012802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012806:	ec51 0b10 	vmov	r0, r1, d0
 801280a:	f7ed ff2d 	bl	8000668 <__aeabi_dmul>
 801280e:	4642      	mov	r2, r8
 8012810:	464b      	mov	r3, r9
 8012812:	f7ed fd73 	bl	80002fc <__adddf3>
 8012816:	460b      	mov	r3, r1
 8012818:	4979      	ldr	r1, [pc, #484]	; (8012a00 <_strtod_l+0xbd0>)
 801281a:	4a7b      	ldr	r2, [pc, #492]	; (8012a08 <_strtod_l+0xbd8>)
 801281c:	4019      	ands	r1, r3
 801281e:	4291      	cmp	r1, r2
 8012820:	4680      	mov	r8, r0
 8012822:	d944      	bls.n	80128ae <_strtod_l+0xa7e>
 8012824:	ee18 2a90 	vmov	r2, s17
 8012828:	4b78      	ldr	r3, [pc, #480]	; (8012a0c <_strtod_l+0xbdc>)
 801282a:	429a      	cmp	r2, r3
 801282c:	d104      	bne.n	8012838 <_strtod_l+0xa08>
 801282e:	ee18 3a10 	vmov	r3, s16
 8012832:	3301      	adds	r3, #1
 8012834:	f43f ad40 	beq.w	80122b8 <_strtod_l+0x488>
 8012838:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012a0c <_strtod_l+0xbdc>
 801283c:	f04f 38ff 	mov.w	r8, #4294967295
 8012840:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012842:	4620      	mov	r0, r4
 8012844:	f7fe fe6a 	bl	801151c <_Bfree>
 8012848:	9905      	ldr	r1, [sp, #20]
 801284a:	4620      	mov	r0, r4
 801284c:	f7fe fe66 	bl	801151c <_Bfree>
 8012850:	4659      	mov	r1, fp
 8012852:	4620      	mov	r0, r4
 8012854:	f7fe fe62 	bl	801151c <_Bfree>
 8012858:	4629      	mov	r1, r5
 801285a:	4620      	mov	r0, r4
 801285c:	f7fe fe5e 	bl	801151c <_Bfree>
 8012860:	e609      	b.n	8012476 <_strtod_l+0x646>
 8012862:	f1b8 0f01 	cmp.w	r8, #1
 8012866:	d103      	bne.n	8012870 <_strtod_l+0xa40>
 8012868:	f1b9 0f00 	cmp.w	r9, #0
 801286c:	f43f ad95 	beq.w	801239a <_strtod_l+0x56a>
 8012870:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80129c8 <_strtod_l+0xb98>
 8012874:	4f60      	ldr	r7, [pc, #384]	; (80129f8 <_strtod_l+0xbc8>)
 8012876:	ed8d 7b06 	vstr	d7, [sp, #24]
 801287a:	2600      	movs	r6, #0
 801287c:	e7ae      	b.n	80127dc <_strtod_l+0x9ac>
 801287e:	4f5f      	ldr	r7, [pc, #380]	; (80129fc <_strtod_l+0xbcc>)
 8012880:	2600      	movs	r6, #0
 8012882:	e7a7      	b.n	80127d4 <_strtod_l+0x9a4>
 8012884:	4b5d      	ldr	r3, [pc, #372]	; (80129fc <_strtod_l+0xbcc>)
 8012886:	4630      	mov	r0, r6
 8012888:	4639      	mov	r1, r7
 801288a:	2200      	movs	r2, #0
 801288c:	f7ed feec 	bl	8000668 <__aeabi_dmul>
 8012890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012892:	4606      	mov	r6, r0
 8012894:	460f      	mov	r7, r1
 8012896:	2b00      	cmp	r3, #0
 8012898:	d09c      	beq.n	80127d4 <_strtod_l+0x9a4>
 801289a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801289e:	e79d      	b.n	80127dc <_strtod_l+0x9ac>
 80128a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80129d0 <_strtod_l+0xba0>
 80128a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80128a8:	ec57 6b17 	vmov	r6, r7, d7
 80128ac:	e796      	b.n	80127dc <_strtod_l+0x9ac>
 80128ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80128b2:	9b04      	ldr	r3, [sp, #16]
 80128b4:	46ca      	mov	sl, r9
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d1c2      	bne.n	8012840 <_strtod_l+0xa10>
 80128ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80128be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128c0:	0d1b      	lsrs	r3, r3, #20
 80128c2:	051b      	lsls	r3, r3, #20
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d1bb      	bne.n	8012840 <_strtod_l+0xa10>
 80128c8:	4630      	mov	r0, r6
 80128ca:	4639      	mov	r1, r7
 80128cc:	f7ee fa2c 	bl	8000d28 <__aeabi_d2lz>
 80128d0:	f7ed fe9c 	bl	800060c <__aeabi_l2d>
 80128d4:	4602      	mov	r2, r0
 80128d6:	460b      	mov	r3, r1
 80128d8:	4630      	mov	r0, r6
 80128da:	4639      	mov	r1, r7
 80128dc:	f7ed fd0c 	bl	80002f8 <__aeabi_dsub>
 80128e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80128e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80128e6:	ea43 0308 	orr.w	r3, r3, r8
 80128ea:	4313      	orrs	r3, r2
 80128ec:	4606      	mov	r6, r0
 80128ee:	460f      	mov	r7, r1
 80128f0:	d054      	beq.n	801299c <_strtod_l+0xb6c>
 80128f2:	a339      	add	r3, pc, #228	; (adr r3, 80129d8 <_strtod_l+0xba8>)
 80128f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f8:	f7ee f928 	bl	8000b4c <__aeabi_dcmplt>
 80128fc:	2800      	cmp	r0, #0
 80128fe:	f47f ace5 	bne.w	80122cc <_strtod_l+0x49c>
 8012902:	a337      	add	r3, pc, #220	; (adr r3, 80129e0 <_strtod_l+0xbb0>)
 8012904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012908:	4630      	mov	r0, r6
 801290a:	4639      	mov	r1, r7
 801290c:	f7ee f93c 	bl	8000b88 <__aeabi_dcmpgt>
 8012910:	2800      	cmp	r0, #0
 8012912:	d095      	beq.n	8012840 <_strtod_l+0xa10>
 8012914:	e4da      	b.n	80122cc <_strtod_l+0x49c>
 8012916:	9b04      	ldr	r3, [sp, #16]
 8012918:	b333      	cbz	r3, 8012968 <_strtod_l+0xb38>
 801291a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801291c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012920:	d822      	bhi.n	8012968 <_strtod_l+0xb38>
 8012922:	a331      	add	r3, pc, #196	; (adr r3, 80129e8 <_strtod_l+0xbb8>)
 8012924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012928:	4630      	mov	r0, r6
 801292a:	4639      	mov	r1, r7
 801292c:	f7ee f918 	bl	8000b60 <__aeabi_dcmple>
 8012930:	b1a0      	cbz	r0, 801295c <_strtod_l+0xb2c>
 8012932:	4639      	mov	r1, r7
 8012934:	4630      	mov	r0, r6
 8012936:	f7ee f96f 	bl	8000c18 <__aeabi_d2uiz>
 801293a:	2801      	cmp	r0, #1
 801293c:	bf38      	it	cc
 801293e:	2001      	movcc	r0, #1
 8012940:	f7ed fe18 	bl	8000574 <__aeabi_ui2d>
 8012944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012946:	4606      	mov	r6, r0
 8012948:	460f      	mov	r7, r1
 801294a:	bb23      	cbnz	r3, 8012996 <_strtod_l+0xb66>
 801294c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012950:	9010      	str	r0, [sp, #64]	; 0x40
 8012952:	9311      	str	r3, [sp, #68]	; 0x44
 8012954:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012958:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801295c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801295e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012960:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012964:	1a9b      	subs	r3, r3, r2
 8012966:	930f      	str	r3, [sp, #60]	; 0x3c
 8012968:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801296c:	eeb0 0a48 	vmov.f32	s0, s16
 8012970:	eef0 0a68 	vmov.f32	s1, s17
 8012974:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012978:	f7ff f8fc 	bl	8011b74 <__ulp>
 801297c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012980:	ec53 2b10 	vmov	r2, r3, d0
 8012984:	f7ed fe70 	bl	8000668 <__aeabi_dmul>
 8012988:	ec53 2b18 	vmov	r2, r3, d8
 801298c:	f7ed fcb6 	bl	80002fc <__adddf3>
 8012990:	4680      	mov	r8, r0
 8012992:	4689      	mov	r9, r1
 8012994:	e78d      	b.n	80128b2 <_strtod_l+0xa82>
 8012996:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801299a:	e7db      	b.n	8012954 <_strtod_l+0xb24>
 801299c:	a314      	add	r3, pc, #80	; (adr r3, 80129f0 <_strtod_l+0xbc0>)
 801299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a2:	f7ee f8d3 	bl	8000b4c <__aeabi_dcmplt>
 80129a6:	e7b3      	b.n	8012910 <_strtod_l+0xae0>
 80129a8:	2300      	movs	r3, #0
 80129aa:	930a      	str	r3, [sp, #40]	; 0x28
 80129ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80129ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129b0:	6013      	str	r3, [r2, #0]
 80129b2:	f7ff ba7c 	b.w	8011eae <_strtod_l+0x7e>
 80129b6:	2a65      	cmp	r2, #101	; 0x65
 80129b8:	f43f ab75 	beq.w	80120a6 <_strtod_l+0x276>
 80129bc:	2a45      	cmp	r2, #69	; 0x45
 80129be:	f43f ab72 	beq.w	80120a6 <_strtod_l+0x276>
 80129c2:	2301      	movs	r3, #1
 80129c4:	f7ff bbaa 	b.w	801211c <_strtod_l+0x2ec>
 80129c8:	00000000 	.word	0x00000000
 80129cc:	bff00000 	.word	0xbff00000
 80129d0:	00000000 	.word	0x00000000
 80129d4:	3ff00000 	.word	0x3ff00000
 80129d8:	94a03595 	.word	0x94a03595
 80129dc:	3fdfffff 	.word	0x3fdfffff
 80129e0:	35afe535 	.word	0x35afe535
 80129e4:	3fe00000 	.word	0x3fe00000
 80129e8:	ffc00000 	.word	0xffc00000
 80129ec:	41dfffff 	.word	0x41dfffff
 80129f0:	94a03595 	.word	0x94a03595
 80129f4:	3fcfffff 	.word	0x3fcfffff
 80129f8:	3ff00000 	.word	0x3ff00000
 80129fc:	3fe00000 	.word	0x3fe00000
 8012a00:	7ff00000 	.word	0x7ff00000
 8012a04:	7fe00000 	.word	0x7fe00000
 8012a08:	7c9fffff 	.word	0x7c9fffff
 8012a0c:	7fefffff 	.word	0x7fefffff

08012a10 <_strtod_r>:
 8012a10:	4b01      	ldr	r3, [pc, #4]	; (8012a18 <_strtod_r+0x8>)
 8012a12:	f7ff ba0d 	b.w	8011e30 <_strtod_l>
 8012a16:	bf00      	nop
 8012a18:	2000028c 	.word	0x2000028c

08012a1c <_strtol_l.constprop.0>:
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a22:	d001      	beq.n	8012a28 <_strtol_l.constprop.0+0xc>
 8012a24:	2b24      	cmp	r3, #36	; 0x24
 8012a26:	d906      	bls.n	8012a36 <_strtol_l.constprop.0+0x1a>
 8012a28:	f7fd fd54 	bl	80104d4 <__errno>
 8012a2c:	2316      	movs	r3, #22
 8012a2e:	6003      	str	r3, [r0, #0]
 8012a30:	2000      	movs	r0, #0
 8012a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012b1c <_strtol_l.constprop.0+0x100>
 8012a3a:	460d      	mov	r5, r1
 8012a3c:	462e      	mov	r6, r5
 8012a3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a42:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012a46:	f017 0708 	ands.w	r7, r7, #8
 8012a4a:	d1f7      	bne.n	8012a3c <_strtol_l.constprop.0+0x20>
 8012a4c:	2c2d      	cmp	r4, #45	; 0x2d
 8012a4e:	d132      	bne.n	8012ab6 <_strtol_l.constprop.0+0x9a>
 8012a50:	782c      	ldrb	r4, [r5, #0]
 8012a52:	2701      	movs	r7, #1
 8012a54:	1cb5      	adds	r5, r6, #2
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d05b      	beq.n	8012b12 <_strtol_l.constprop.0+0xf6>
 8012a5a:	2b10      	cmp	r3, #16
 8012a5c:	d109      	bne.n	8012a72 <_strtol_l.constprop.0+0x56>
 8012a5e:	2c30      	cmp	r4, #48	; 0x30
 8012a60:	d107      	bne.n	8012a72 <_strtol_l.constprop.0+0x56>
 8012a62:	782c      	ldrb	r4, [r5, #0]
 8012a64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012a68:	2c58      	cmp	r4, #88	; 0x58
 8012a6a:	d14d      	bne.n	8012b08 <_strtol_l.constprop.0+0xec>
 8012a6c:	786c      	ldrb	r4, [r5, #1]
 8012a6e:	2310      	movs	r3, #16
 8012a70:	3502      	adds	r5, #2
 8012a72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012a76:	f108 38ff 	add.w	r8, r8, #4294967295
 8012a7a:	f04f 0e00 	mov.w	lr, #0
 8012a7e:	fbb8 f9f3 	udiv	r9, r8, r3
 8012a82:	4676      	mov	r6, lr
 8012a84:	fb03 8a19 	mls	sl, r3, r9, r8
 8012a88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012a8c:	f1bc 0f09 	cmp.w	ip, #9
 8012a90:	d816      	bhi.n	8012ac0 <_strtol_l.constprop.0+0xa4>
 8012a92:	4664      	mov	r4, ip
 8012a94:	42a3      	cmp	r3, r4
 8012a96:	dd24      	ble.n	8012ae2 <_strtol_l.constprop.0+0xc6>
 8012a98:	f1be 3fff 	cmp.w	lr, #4294967295
 8012a9c:	d008      	beq.n	8012ab0 <_strtol_l.constprop.0+0x94>
 8012a9e:	45b1      	cmp	r9, r6
 8012aa0:	d31c      	bcc.n	8012adc <_strtol_l.constprop.0+0xc0>
 8012aa2:	d101      	bne.n	8012aa8 <_strtol_l.constprop.0+0x8c>
 8012aa4:	45a2      	cmp	sl, r4
 8012aa6:	db19      	blt.n	8012adc <_strtol_l.constprop.0+0xc0>
 8012aa8:	fb06 4603 	mla	r6, r6, r3, r4
 8012aac:	f04f 0e01 	mov.w	lr, #1
 8012ab0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ab4:	e7e8      	b.n	8012a88 <_strtol_l.constprop.0+0x6c>
 8012ab6:	2c2b      	cmp	r4, #43	; 0x2b
 8012ab8:	bf04      	itt	eq
 8012aba:	782c      	ldrbeq	r4, [r5, #0]
 8012abc:	1cb5      	addeq	r5, r6, #2
 8012abe:	e7ca      	b.n	8012a56 <_strtol_l.constprop.0+0x3a>
 8012ac0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012ac4:	f1bc 0f19 	cmp.w	ip, #25
 8012ac8:	d801      	bhi.n	8012ace <_strtol_l.constprop.0+0xb2>
 8012aca:	3c37      	subs	r4, #55	; 0x37
 8012acc:	e7e2      	b.n	8012a94 <_strtol_l.constprop.0+0x78>
 8012ace:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012ad2:	f1bc 0f19 	cmp.w	ip, #25
 8012ad6:	d804      	bhi.n	8012ae2 <_strtol_l.constprop.0+0xc6>
 8012ad8:	3c57      	subs	r4, #87	; 0x57
 8012ada:	e7db      	b.n	8012a94 <_strtol_l.constprop.0+0x78>
 8012adc:	f04f 3eff 	mov.w	lr, #4294967295
 8012ae0:	e7e6      	b.n	8012ab0 <_strtol_l.constprop.0+0x94>
 8012ae2:	f1be 3fff 	cmp.w	lr, #4294967295
 8012ae6:	d105      	bne.n	8012af4 <_strtol_l.constprop.0+0xd8>
 8012ae8:	2322      	movs	r3, #34	; 0x22
 8012aea:	6003      	str	r3, [r0, #0]
 8012aec:	4646      	mov	r6, r8
 8012aee:	b942      	cbnz	r2, 8012b02 <_strtol_l.constprop.0+0xe6>
 8012af0:	4630      	mov	r0, r6
 8012af2:	e79e      	b.n	8012a32 <_strtol_l.constprop.0+0x16>
 8012af4:	b107      	cbz	r7, 8012af8 <_strtol_l.constprop.0+0xdc>
 8012af6:	4276      	negs	r6, r6
 8012af8:	2a00      	cmp	r2, #0
 8012afa:	d0f9      	beq.n	8012af0 <_strtol_l.constprop.0+0xd4>
 8012afc:	f1be 0f00 	cmp.w	lr, #0
 8012b00:	d000      	beq.n	8012b04 <_strtol_l.constprop.0+0xe8>
 8012b02:	1e69      	subs	r1, r5, #1
 8012b04:	6011      	str	r1, [r2, #0]
 8012b06:	e7f3      	b.n	8012af0 <_strtol_l.constprop.0+0xd4>
 8012b08:	2430      	movs	r4, #48	; 0x30
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d1b1      	bne.n	8012a72 <_strtol_l.constprop.0+0x56>
 8012b0e:	2308      	movs	r3, #8
 8012b10:	e7af      	b.n	8012a72 <_strtol_l.constprop.0+0x56>
 8012b12:	2c30      	cmp	r4, #48	; 0x30
 8012b14:	d0a5      	beq.n	8012a62 <_strtol_l.constprop.0+0x46>
 8012b16:	230a      	movs	r3, #10
 8012b18:	e7ab      	b.n	8012a72 <_strtol_l.constprop.0+0x56>
 8012b1a:	bf00      	nop
 8012b1c:	08014229 	.word	0x08014229

08012b20 <_strtol_r>:
 8012b20:	f7ff bf7c 	b.w	8012a1c <_strtol_l.constprop.0>

08012b24 <__ssputs_r>:
 8012b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b28:	688e      	ldr	r6, [r1, #8]
 8012b2a:	461f      	mov	r7, r3
 8012b2c:	42be      	cmp	r6, r7
 8012b2e:	680b      	ldr	r3, [r1, #0]
 8012b30:	4682      	mov	sl, r0
 8012b32:	460c      	mov	r4, r1
 8012b34:	4690      	mov	r8, r2
 8012b36:	d82c      	bhi.n	8012b92 <__ssputs_r+0x6e>
 8012b38:	898a      	ldrh	r2, [r1, #12]
 8012b3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b3e:	d026      	beq.n	8012b8e <__ssputs_r+0x6a>
 8012b40:	6965      	ldr	r5, [r4, #20]
 8012b42:	6909      	ldr	r1, [r1, #16]
 8012b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b48:	eba3 0901 	sub.w	r9, r3, r1
 8012b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b50:	1c7b      	adds	r3, r7, #1
 8012b52:	444b      	add	r3, r9
 8012b54:	106d      	asrs	r5, r5, #1
 8012b56:	429d      	cmp	r5, r3
 8012b58:	bf38      	it	cc
 8012b5a:	461d      	movcc	r5, r3
 8012b5c:	0553      	lsls	r3, r2, #21
 8012b5e:	d527      	bpl.n	8012bb0 <__ssputs_r+0x8c>
 8012b60:	4629      	mov	r1, r5
 8012b62:	f7fe fc0f 	bl	8011384 <_malloc_r>
 8012b66:	4606      	mov	r6, r0
 8012b68:	b360      	cbz	r0, 8012bc4 <__ssputs_r+0xa0>
 8012b6a:	6921      	ldr	r1, [r4, #16]
 8012b6c:	464a      	mov	r2, r9
 8012b6e:	f7fd fce6 	bl	801053e <memcpy>
 8012b72:	89a3      	ldrh	r3, [r4, #12]
 8012b74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b7c:	81a3      	strh	r3, [r4, #12]
 8012b7e:	6126      	str	r6, [r4, #16]
 8012b80:	6165      	str	r5, [r4, #20]
 8012b82:	444e      	add	r6, r9
 8012b84:	eba5 0509 	sub.w	r5, r5, r9
 8012b88:	6026      	str	r6, [r4, #0]
 8012b8a:	60a5      	str	r5, [r4, #8]
 8012b8c:	463e      	mov	r6, r7
 8012b8e:	42be      	cmp	r6, r7
 8012b90:	d900      	bls.n	8012b94 <__ssputs_r+0x70>
 8012b92:	463e      	mov	r6, r7
 8012b94:	6820      	ldr	r0, [r4, #0]
 8012b96:	4632      	mov	r2, r6
 8012b98:	4641      	mov	r1, r8
 8012b9a:	f000 fbb5 	bl	8013308 <memmove>
 8012b9e:	68a3      	ldr	r3, [r4, #8]
 8012ba0:	1b9b      	subs	r3, r3, r6
 8012ba2:	60a3      	str	r3, [r4, #8]
 8012ba4:	6823      	ldr	r3, [r4, #0]
 8012ba6:	4433      	add	r3, r6
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	2000      	movs	r0, #0
 8012bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bb0:	462a      	mov	r2, r5
 8012bb2:	f000 ff72 	bl	8013a9a <_realloc_r>
 8012bb6:	4606      	mov	r6, r0
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d1e0      	bne.n	8012b7e <__ssputs_r+0x5a>
 8012bbc:	6921      	ldr	r1, [r4, #16]
 8012bbe:	4650      	mov	r0, sl
 8012bc0:	f7fe fb6c 	bl	801129c <_free_r>
 8012bc4:	230c      	movs	r3, #12
 8012bc6:	f8ca 3000 	str.w	r3, [sl]
 8012bca:	89a3      	ldrh	r3, [r4, #12]
 8012bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bd0:	81a3      	strh	r3, [r4, #12]
 8012bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd6:	e7e9      	b.n	8012bac <__ssputs_r+0x88>

08012bd8 <_svfiprintf_r>:
 8012bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bdc:	4698      	mov	r8, r3
 8012bde:	898b      	ldrh	r3, [r1, #12]
 8012be0:	061b      	lsls	r3, r3, #24
 8012be2:	b09d      	sub	sp, #116	; 0x74
 8012be4:	4607      	mov	r7, r0
 8012be6:	460d      	mov	r5, r1
 8012be8:	4614      	mov	r4, r2
 8012bea:	d50e      	bpl.n	8012c0a <_svfiprintf_r+0x32>
 8012bec:	690b      	ldr	r3, [r1, #16]
 8012bee:	b963      	cbnz	r3, 8012c0a <_svfiprintf_r+0x32>
 8012bf0:	2140      	movs	r1, #64	; 0x40
 8012bf2:	f7fe fbc7 	bl	8011384 <_malloc_r>
 8012bf6:	6028      	str	r0, [r5, #0]
 8012bf8:	6128      	str	r0, [r5, #16]
 8012bfa:	b920      	cbnz	r0, 8012c06 <_svfiprintf_r+0x2e>
 8012bfc:	230c      	movs	r3, #12
 8012bfe:	603b      	str	r3, [r7, #0]
 8012c00:	f04f 30ff 	mov.w	r0, #4294967295
 8012c04:	e0d0      	b.n	8012da8 <_svfiprintf_r+0x1d0>
 8012c06:	2340      	movs	r3, #64	; 0x40
 8012c08:	616b      	str	r3, [r5, #20]
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c0e:	2320      	movs	r3, #32
 8012c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c18:	2330      	movs	r3, #48	; 0x30
 8012c1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012dc0 <_svfiprintf_r+0x1e8>
 8012c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c22:	f04f 0901 	mov.w	r9, #1
 8012c26:	4623      	mov	r3, r4
 8012c28:	469a      	mov	sl, r3
 8012c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c2e:	b10a      	cbz	r2, 8012c34 <_svfiprintf_r+0x5c>
 8012c30:	2a25      	cmp	r2, #37	; 0x25
 8012c32:	d1f9      	bne.n	8012c28 <_svfiprintf_r+0x50>
 8012c34:	ebba 0b04 	subs.w	fp, sl, r4
 8012c38:	d00b      	beq.n	8012c52 <_svfiprintf_r+0x7a>
 8012c3a:	465b      	mov	r3, fp
 8012c3c:	4622      	mov	r2, r4
 8012c3e:	4629      	mov	r1, r5
 8012c40:	4638      	mov	r0, r7
 8012c42:	f7ff ff6f 	bl	8012b24 <__ssputs_r>
 8012c46:	3001      	adds	r0, #1
 8012c48:	f000 80a9 	beq.w	8012d9e <_svfiprintf_r+0x1c6>
 8012c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c4e:	445a      	add	r2, fp
 8012c50:	9209      	str	r2, [sp, #36]	; 0x24
 8012c52:	f89a 3000 	ldrb.w	r3, [sl]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f000 80a1 	beq.w	8012d9e <_svfiprintf_r+0x1c6>
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c66:	f10a 0a01 	add.w	sl, sl, #1
 8012c6a:	9304      	str	r3, [sp, #16]
 8012c6c:	9307      	str	r3, [sp, #28]
 8012c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c72:	931a      	str	r3, [sp, #104]	; 0x68
 8012c74:	4654      	mov	r4, sl
 8012c76:	2205      	movs	r2, #5
 8012c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c7c:	4850      	ldr	r0, [pc, #320]	; (8012dc0 <_svfiprintf_r+0x1e8>)
 8012c7e:	f7ed fadf 	bl	8000240 <memchr>
 8012c82:	9a04      	ldr	r2, [sp, #16]
 8012c84:	b9d8      	cbnz	r0, 8012cbe <_svfiprintf_r+0xe6>
 8012c86:	06d0      	lsls	r0, r2, #27
 8012c88:	bf44      	itt	mi
 8012c8a:	2320      	movmi	r3, #32
 8012c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c90:	0711      	lsls	r1, r2, #28
 8012c92:	bf44      	itt	mi
 8012c94:	232b      	movmi	r3, #43	; 0x2b
 8012c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8012c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8012ca0:	d015      	beq.n	8012cce <_svfiprintf_r+0xf6>
 8012ca2:	9a07      	ldr	r2, [sp, #28]
 8012ca4:	4654      	mov	r4, sl
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	f04f 0c0a 	mov.w	ip, #10
 8012cac:	4621      	mov	r1, r4
 8012cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cb2:	3b30      	subs	r3, #48	; 0x30
 8012cb4:	2b09      	cmp	r3, #9
 8012cb6:	d94d      	bls.n	8012d54 <_svfiprintf_r+0x17c>
 8012cb8:	b1b0      	cbz	r0, 8012ce8 <_svfiprintf_r+0x110>
 8012cba:	9207      	str	r2, [sp, #28]
 8012cbc:	e014      	b.n	8012ce8 <_svfiprintf_r+0x110>
 8012cbe:	eba0 0308 	sub.w	r3, r0, r8
 8012cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	9304      	str	r3, [sp, #16]
 8012cca:	46a2      	mov	sl, r4
 8012ccc:	e7d2      	b.n	8012c74 <_svfiprintf_r+0x9c>
 8012cce:	9b03      	ldr	r3, [sp, #12]
 8012cd0:	1d19      	adds	r1, r3, #4
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	9103      	str	r1, [sp, #12]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	bfbb      	ittet	lt
 8012cda:	425b      	neglt	r3, r3
 8012cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8012ce0:	9307      	strge	r3, [sp, #28]
 8012ce2:	9307      	strlt	r3, [sp, #28]
 8012ce4:	bfb8      	it	lt
 8012ce6:	9204      	strlt	r2, [sp, #16]
 8012ce8:	7823      	ldrb	r3, [r4, #0]
 8012cea:	2b2e      	cmp	r3, #46	; 0x2e
 8012cec:	d10c      	bne.n	8012d08 <_svfiprintf_r+0x130>
 8012cee:	7863      	ldrb	r3, [r4, #1]
 8012cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8012cf2:	d134      	bne.n	8012d5e <_svfiprintf_r+0x186>
 8012cf4:	9b03      	ldr	r3, [sp, #12]
 8012cf6:	1d1a      	adds	r2, r3, #4
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	9203      	str	r2, [sp, #12]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	bfb8      	it	lt
 8012d00:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d04:	3402      	adds	r4, #2
 8012d06:	9305      	str	r3, [sp, #20]
 8012d08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012dd0 <_svfiprintf_r+0x1f8>
 8012d0c:	7821      	ldrb	r1, [r4, #0]
 8012d0e:	2203      	movs	r2, #3
 8012d10:	4650      	mov	r0, sl
 8012d12:	f7ed fa95 	bl	8000240 <memchr>
 8012d16:	b138      	cbz	r0, 8012d28 <_svfiprintf_r+0x150>
 8012d18:	9b04      	ldr	r3, [sp, #16]
 8012d1a:	eba0 000a 	sub.w	r0, r0, sl
 8012d1e:	2240      	movs	r2, #64	; 0x40
 8012d20:	4082      	lsls	r2, r0
 8012d22:	4313      	orrs	r3, r2
 8012d24:	3401      	adds	r4, #1
 8012d26:	9304      	str	r3, [sp, #16]
 8012d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d2c:	4825      	ldr	r0, [pc, #148]	; (8012dc4 <_svfiprintf_r+0x1ec>)
 8012d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d32:	2206      	movs	r2, #6
 8012d34:	f7ed fa84 	bl	8000240 <memchr>
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	d038      	beq.n	8012dae <_svfiprintf_r+0x1d6>
 8012d3c:	4b22      	ldr	r3, [pc, #136]	; (8012dc8 <_svfiprintf_r+0x1f0>)
 8012d3e:	bb1b      	cbnz	r3, 8012d88 <_svfiprintf_r+0x1b0>
 8012d40:	9b03      	ldr	r3, [sp, #12]
 8012d42:	3307      	adds	r3, #7
 8012d44:	f023 0307 	bic.w	r3, r3, #7
 8012d48:	3308      	adds	r3, #8
 8012d4a:	9303      	str	r3, [sp, #12]
 8012d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d4e:	4433      	add	r3, r6
 8012d50:	9309      	str	r3, [sp, #36]	; 0x24
 8012d52:	e768      	b.n	8012c26 <_svfiprintf_r+0x4e>
 8012d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d58:	460c      	mov	r4, r1
 8012d5a:	2001      	movs	r0, #1
 8012d5c:	e7a6      	b.n	8012cac <_svfiprintf_r+0xd4>
 8012d5e:	2300      	movs	r3, #0
 8012d60:	3401      	adds	r4, #1
 8012d62:	9305      	str	r3, [sp, #20]
 8012d64:	4619      	mov	r1, r3
 8012d66:	f04f 0c0a 	mov.w	ip, #10
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d70:	3a30      	subs	r2, #48	; 0x30
 8012d72:	2a09      	cmp	r2, #9
 8012d74:	d903      	bls.n	8012d7e <_svfiprintf_r+0x1a6>
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d0c6      	beq.n	8012d08 <_svfiprintf_r+0x130>
 8012d7a:	9105      	str	r1, [sp, #20]
 8012d7c:	e7c4      	b.n	8012d08 <_svfiprintf_r+0x130>
 8012d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d82:	4604      	mov	r4, r0
 8012d84:	2301      	movs	r3, #1
 8012d86:	e7f0      	b.n	8012d6a <_svfiprintf_r+0x192>
 8012d88:	ab03      	add	r3, sp, #12
 8012d8a:	9300      	str	r3, [sp, #0]
 8012d8c:	462a      	mov	r2, r5
 8012d8e:	4b0f      	ldr	r3, [pc, #60]	; (8012dcc <_svfiprintf_r+0x1f4>)
 8012d90:	a904      	add	r1, sp, #16
 8012d92:	4638      	mov	r0, r7
 8012d94:	f7fc fba6 	bl	800f4e4 <_printf_float>
 8012d98:	1c42      	adds	r2, r0, #1
 8012d9a:	4606      	mov	r6, r0
 8012d9c:	d1d6      	bne.n	8012d4c <_svfiprintf_r+0x174>
 8012d9e:	89ab      	ldrh	r3, [r5, #12]
 8012da0:	065b      	lsls	r3, r3, #25
 8012da2:	f53f af2d 	bmi.w	8012c00 <_svfiprintf_r+0x28>
 8012da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012da8:	b01d      	add	sp, #116	; 0x74
 8012daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dae:	ab03      	add	r3, sp, #12
 8012db0:	9300      	str	r3, [sp, #0]
 8012db2:	462a      	mov	r2, r5
 8012db4:	4b05      	ldr	r3, [pc, #20]	; (8012dcc <_svfiprintf_r+0x1f4>)
 8012db6:	a904      	add	r1, sp, #16
 8012db8:	4638      	mov	r0, r7
 8012dba:	f7fc fe37 	bl	800fa2c <_printf_i>
 8012dbe:	e7eb      	b.n	8012d98 <_svfiprintf_r+0x1c0>
 8012dc0:	08014329 	.word	0x08014329
 8012dc4:	08014333 	.word	0x08014333
 8012dc8:	0800f4e5 	.word	0x0800f4e5
 8012dcc:	08012b25 	.word	0x08012b25
 8012dd0:	0801432f 	.word	0x0801432f

08012dd4 <__sfputc_r>:
 8012dd4:	6893      	ldr	r3, [r2, #8]
 8012dd6:	3b01      	subs	r3, #1
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	b410      	push	{r4}
 8012ddc:	6093      	str	r3, [r2, #8]
 8012dde:	da08      	bge.n	8012df2 <__sfputc_r+0x1e>
 8012de0:	6994      	ldr	r4, [r2, #24]
 8012de2:	42a3      	cmp	r3, r4
 8012de4:	db01      	blt.n	8012dea <__sfputc_r+0x16>
 8012de6:	290a      	cmp	r1, #10
 8012de8:	d103      	bne.n	8012df2 <__sfputc_r+0x1e>
 8012dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dee:	f000 b9f5 	b.w	80131dc <__swbuf_r>
 8012df2:	6813      	ldr	r3, [r2, #0]
 8012df4:	1c58      	adds	r0, r3, #1
 8012df6:	6010      	str	r0, [r2, #0]
 8012df8:	7019      	strb	r1, [r3, #0]
 8012dfa:	4608      	mov	r0, r1
 8012dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e00:	4770      	bx	lr

08012e02 <__sfputs_r>:
 8012e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e04:	4606      	mov	r6, r0
 8012e06:	460f      	mov	r7, r1
 8012e08:	4614      	mov	r4, r2
 8012e0a:	18d5      	adds	r5, r2, r3
 8012e0c:	42ac      	cmp	r4, r5
 8012e0e:	d101      	bne.n	8012e14 <__sfputs_r+0x12>
 8012e10:	2000      	movs	r0, #0
 8012e12:	e007      	b.n	8012e24 <__sfputs_r+0x22>
 8012e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e18:	463a      	mov	r2, r7
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f7ff ffda 	bl	8012dd4 <__sfputc_r>
 8012e20:	1c43      	adds	r3, r0, #1
 8012e22:	d1f3      	bne.n	8012e0c <__sfputs_r+0xa>
 8012e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e28 <_vfiprintf_r>:
 8012e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2c:	460d      	mov	r5, r1
 8012e2e:	b09d      	sub	sp, #116	; 0x74
 8012e30:	4614      	mov	r4, r2
 8012e32:	4698      	mov	r8, r3
 8012e34:	4606      	mov	r6, r0
 8012e36:	b118      	cbz	r0, 8012e40 <_vfiprintf_r+0x18>
 8012e38:	6a03      	ldr	r3, [r0, #32]
 8012e3a:	b90b      	cbnz	r3, 8012e40 <_vfiprintf_r+0x18>
 8012e3c:	f7fd f9b4 	bl	80101a8 <__sinit>
 8012e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e42:	07d9      	lsls	r1, r3, #31
 8012e44:	d405      	bmi.n	8012e52 <_vfiprintf_r+0x2a>
 8012e46:	89ab      	ldrh	r3, [r5, #12]
 8012e48:	059a      	lsls	r2, r3, #22
 8012e4a:	d402      	bmi.n	8012e52 <_vfiprintf_r+0x2a>
 8012e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e4e:	f7fd fb6c 	bl	801052a <__retarget_lock_acquire_recursive>
 8012e52:	89ab      	ldrh	r3, [r5, #12]
 8012e54:	071b      	lsls	r3, r3, #28
 8012e56:	d501      	bpl.n	8012e5c <_vfiprintf_r+0x34>
 8012e58:	692b      	ldr	r3, [r5, #16]
 8012e5a:	b99b      	cbnz	r3, 8012e84 <_vfiprintf_r+0x5c>
 8012e5c:	4629      	mov	r1, r5
 8012e5e:	4630      	mov	r0, r6
 8012e60:	f000 f9fa 	bl	8013258 <__swsetup_r>
 8012e64:	b170      	cbz	r0, 8012e84 <_vfiprintf_r+0x5c>
 8012e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e68:	07dc      	lsls	r4, r3, #31
 8012e6a:	d504      	bpl.n	8012e76 <_vfiprintf_r+0x4e>
 8012e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e70:	b01d      	add	sp, #116	; 0x74
 8012e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e76:	89ab      	ldrh	r3, [r5, #12]
 8012e78:	0598      	lsls	r0, r3, #22
 8012e7a:	d4f7      	bmi.n	8012e6c <_vfiprintf_r+0x44>
 8012e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e7e:	f7fd fb55 	bl	801052c <__retarget_lock_release_recursive>
 8012e82:	e7f3      	b.n	8012e6c <_vfiprintf_r+0x44>
 8012e84:	2300      	movs	r3, #0
 8012e86:	9309      	str	r3, [sp, #36]	; 0x24
 8012e88:	2320      	movs	r3, #32
 8012e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e92:	2330      	movs	r3, #48	; 0x30
 8012e94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013048 <_vfiprintf_r+0x220>
 8012e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e9c:	f04f 0901 	mov.w	r9, #1
 8012ea0:	4623      	mov	r3, r4
 8012ea2:	469a      	mov	sl, r3
 8012ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ea8:	b10a      	cbz	r2, 8012eae <_vfiprintf_r+0x86>
 8012eaa:	2a25      	cmp	r2, #37	; 0x25
 8012eac:	d1f9      	bne.n	8012ea2 <_vfiprintf_r+0x7a>
 8012eae:	ebba 0b04 	subs.w	fp, sl, r4
 8012eb2:	d00b      	beq.n	8012ecc <_vfiprintf_r+0xa4>
 8012eb4:	465b      	mov	r3, fp
 8012eb6:	4622      	mov	r2, r4
 8012eb8:	4629      	mov	r1, r5
 8012eba:	4630      	mov	r0, r6
 8012ebc:	f7ff ffa1 	bl	8012e02 <__sfputs_r>
 8012ec0:	3001      	adds	r0, #1
 8012ec2:	f000 80a9 	beq.w	8013018 <_vfiprintf_r+0x1f0>
 8012ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ec8:	445a      	add	r2, fp
 8012eca:	9209      	str	r2, [sp, #36]	; 0x24
 8012ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f000 80a1 	beq.w	8013018 <_vfiprintf_r+0x1f0>
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8012edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ee0:	f10a 0a01 	add.w	sl, sl, #1
 8012ee4:	9304      	str	r3, [sp, #16]
 8012ee6:	9307      	str	r3, [sp, #28]
 8012ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012eec:	931a      	str	r3, [sp, #104]	; 0x68
 8012eee:	4654      	mov	r4, sl
 8012ef0:	2205      	movs	r2, #5
 8012ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ef6:	4854      	ldr	r0, [pc, #336]	; (8013048 <_vfiprintf_r+0x220>)
 8012ef8:	f7ed f9a2 	bl	8000240 <memchr>
 8012efc:	9a04      	ldr	r2, [sp, #16]
 8012efe:	b9d8      	cbnz	r0, 8012f38 <_vfiprintf_r+0x110>
 8012f00:	06d1      	lsls	r1, r2, #27
 8012f02:	bf44      	itt	mi
 8012f04:	2320      	movmi	r3, #32
 8012f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f0a:	0713      	lsls	r3, r2, #28
 8012f0c:	bf44      	itt	mi
 8012f0e:	232b      	movmi	r3, #43	; 0x2b
 8012f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f14:	f89a 3000 	ldrb.w	r3, [sl]
 8012f18:	2b2a      	cmp	r3, #42	; 0x2a
 8012f1a:	d015      	beq.n	8012f48 <_vfiprintf_r+0x120>
 8012f1c:	9a07      	ldr	r2, [sp, #28]
 8012f1e:	4654      	mov	r4, sl
 8012f20:	2000      	movs	r0, #0
 8012f22:	f04f 0c0a 	mov.w	ip, #10
 8012f26:	4621      	mov	r1, r4
 8012f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f2c:	3b30      	subs	r3, #48	; 0x30
 8012f2e:	2b09      	cmp	r3, #9
 8012f30:	d94d      	bls.n	8012fce <_vfiprintf_r+0x1a6>
 8012f32:	b1b0      	cbz	r0, 8012f62 <_vfiprintf_r+0x13a>
 8012f34:	9207      	str	r2, [sp, #28]
 8012f36:	e014      	b.n	8012f62 <_vfiprintf_r+0x13a>
 8012f38:	eba0 0308 	sub.w	r3, r0, r8
 8012f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8012f40:	4313      	orrs	r3, r2
 8012f42:	9304      	str	r3, [sp, #16]
 8012f44:	46a2      	mov	sl, r4
 8012f46:	e7d2      	b.n	8012eee <_vfiprintf_r+0xc6>
 8012f48:	9b03      	ldr	r3, [sp, #12]
 8012f4a:	1d19      	adds	r1, r3, #4
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	9103      	str	r1, [sp, #12]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	bfbb      	ittet	lt
 8012f54:	425b      	neglt	r3, r3
 8012f56:	f042 0202 	orrlt.w	r2, r2, #2
 8012f5a:	9307      	strge	r3, [sp, #28]
 8012f5c:	9307      	strlt	r3, [sp, #28]
 8012f5e:	bfb8      	it	lt
 8012f60:	9204      	strlt	r2, [sp, #16]
 8012f62:	7823      	ldrb	r3, [r4, #0]
 8012f64:	2b2e      	cmp	r3, #46	; 0x2e
 8012f66:	d10c      	bne.n	8012f82 <_vfiprintf_r+0x15a>
 8012f68:	7863      	ldrb	r3, [r4, #1]
 8012f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8012f6c:	d134      	bne.n	8012fd8 <_vfiprintf_r+0x1b0>
 8012f6e:	9b03      	ldr	r3, [sp, #12]
 8012f70:	1d1a      	adds	r2, r3, #4
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	9203      	str	r2, [sp, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	bfb8      	it	lt
 8012f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8012f7e:	3402      	adds	r4, #2
 8012f80:	9305      	str	r3, [sp, #20]
 8012f82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013058 <_vfiprintf_r+0x230>
 8012f86:	7821      	ldrb	r1, [r4, #0]
 8012f88:	2203      	movs	r2, #3
 8012f8a:	4650      	mov	r0, sl
 8012f8c:	f7ed f958 	bl	8000240 <memchr>
 8012f90:	b138      	cbz	r0, 8012fa2 <_vfiprintf_r+0x17a>
 8012f92:	9b04      	ldr	r3, [sp, #16]
 8012f94:	eba0 000a 	sub.w	r0, r0, sl
 8012f98:	2240      	movs	r2, #64	; 0x40
 8012f9a:	4082      	lsls	r2, r0
 8012f9c:	4313      	orrs	r3, r2
 8012f9e:	3401      	adds	r4, #1
 8012fa0:	9304      	str	r3, [sp, #16]
 8012fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fa6:	4829      	ldr	r0, [pc, #164]	; (801304c <_vfiprintf_r+0x224>)
 8012fa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012fac:	2206      	movs	r2, #6
 8012fae:	f7ed f947 	bl	8000240 <memchr>
 8012fb2:	2800      	cmp	r0, #0
 8012fb4:	d03f      	beq.n	8013036 <_vfiprintf_r+0x20e>
 8012fb6:	4b26      	ldr	r3, [pc, #152]	; (8013050 <_vfiprintf_r+0x228>)
 8012fb8:	bb1b      	cbnz	r3, 8013002 <_vfiprintf_r+0x1da>
 8012fba:	9b03      	ldr	r3, [sp, #12]
 8012fbc:	3307      	adds	r3, #7
 8012fbe:	f023 0307 	bic.w	r3, r3, #7
 8012fc2:	3308      	adds	r3, #8
 8012fc4:	9303      	str	r3, [sp, #12]
 8012fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fc8:	443b      	add	r3, r7
 8012fca:	9309      	str	r3, [sp, #36]	; 0x24
 8012fcc:	e768      	b.n	8012ea0 <_vfiprintf_r+0x78>
 8012fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fd2:	460c      	mov	r4, r1
 8012fd4:	2001      	movs	r0, #1
 8012fd6:	e7a6      	b.n	8012f26 <_vfiprintf_r+0xfe>
 8012fd8:	2300      	movs	r3, #0
 8012fda:	3401      	adds	r4, #1
 8012fdc:	9305      	str	r3, [sp, #20]
 8012fde:	4619      	mov	r1, r3
 8012fe0:	f04f 0c0a 	mov.w	ip, #10
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fea:	3a30      	subs	r2, #48	; 0x30
 8012fec:	2a09      	cmp	r2, #9
 8012fee:	d903      	bls.n	8012ff8 <_vfiprintf_r+0x1d0>
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d0c6      	beq.n	8012f82 <_vfiprintf_r+0x15a>
 8012ff4:	9105      	str	r1, [sp, #20]
 8012ff6:	e7c4      	b.n	8012f82 <_vfiprintf_r+0x15a>
 8012ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	2301      	movs	r3, #1
 8013000:	e7f0      	b.n	8012fe4 <_vfiprintf_r+0x1bc>
 8013002:	ab03      	add	r3, sp, #12
 8013004:	9300      	str	r3, [sp, #0]
 8013006:	462a      	mov	r2, r5
 8013008:	4b12      	ldr	r3, [pc, #72]	; (8013054 <_vfiprintf_r+0x22c>)
 801300a:	a904      	add	r1, sp, #16
 801300c:	4630      	mov	r0, r6
 801300e:	f7fc fa69 	bl	800f4e4 <_printf_float>
 8013012:	4607      	mov	r7, r0
 8013014:	1c78      	adds	r0, r7, #1
 8013016:	d1d6      	bne.n	8012fc6 <_vfiprintf_r+0x19e>
 8013018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801301a:	07d9      	lsls	r1, r3, #31
 801301c:	d405      	bmi.n	801302a <_vfiprintf_r+0x202>
 801301e:	89ab      	ldrh	r3, [r5, #12]
 8013020:	059a      	lsls	r2, r3, #22
 8013022:	d402      	bmi.n	801302a <_vfiprintf_r+0x202>
 8013024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013026:	f7fd fa81 	bl	801052c <__retarget_lock_release_recursive>
 801302a:	89ab      	ldrh	r3, [r5, #12]
 801302c:	065b      	lsls	r3, r3, #25
 801302e:	f53f af1d 	bmi.w	8012e6c <_vfiprintf_r+0x44>
 8013032:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013034:	e71c      	b.n	8012e70 <_vfiprintf_r+0x48>
 8013036:	ab03      	add	r3, sp, #12
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	462a      	mov	r2, r5
 801303c:	4b05      	ldr	r3, [pc, #20]	; (8013054 <_vfiprintf_r+0x22c>)
 801303e:	a904      	add	r1, sp, #16
 8013040:	4630      	mov	r0, r6
 8013042:	f7fc fcf3 	bl	800fa2c <_printf_i>
 8013046:	e7e4      	b.n	8013012 <_vfiprintf_r+0x1ea>
 8013048:	08014329 	.word	0x08014329
 801304c:	08014333 	.word	0x08014333
 8013050:	0800f4e5 	.word	0x0800f4e5
 8013054:	08012e03 	.word	0x08012e03
 8013058:	0801432f 	.word	0x0801432f

0801305c <__sflush_r>:
 801305c:	898a      	ldrh	r2, [r1, #12]
 801305e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013062:	4605      	mov	r5, r0
 8013064:	0710      	lsls	r0, r2, #28
 8013066:	460c      	mov	r4, r1
 8013068:	d458      	bmi.n	801311c <__sflush_r+0xc0>
 801306a:	684b      	ldr	r3, [r1, #4]
 801306c:	2b00      	cmp	r3, #0
 801306e:	dc05      	bgt.n	801307c <__sflush_r+0x20>
 8013070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013072:	2b00      	cmp	r3, #0
 8013074:	dc02      	bgt.n	801307c <__sflush_r+0x20>
 8013076:	2000      	movs	r0, #0
 8013078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801307e:	2e00      	cmp	r6, #0
 8013080:	d0f9      	beq.n	8013076 <__sflush_r+0x1a>
 8013082:	2300      	movs	r3, #0
 8013084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013088:	682f      	ldr	r7, [r5, #0]
 801308a:	6a21      	ldr	r1, [r4, #32]
 801308c:	602b      	str	r3, [r5, #0]
 801308e:	d032      	beq.n	80130f6 <__sflush_r+0x9a>
 8013090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	075a      	lsls	r2, r3, #29
 8013096:	d505      	bpl.n	80130a4 <__sflush_r+0x48>
 8013098:	6863      	ldr	r3, [r4, #4]
 801309a:	1ac0      	subs	r0, r0, r3
 801309c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801309e:	b10b      	cbz	r3, 80130a4 <__sflush_r+0x48>
 80130a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80130a2:	1ac0      	subs	r0, r0, r3
 80130a4:	2300      	movs	r3, #0
 80130a6:	4602      	mov	r2, r0
 80130a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130aa:	6a21      	ldr	r1, [r4, #32]
 80130ac:	4628      	mov	r0, r5
 80130ae:	47b0      	blx	r6
 80130b0:	1c43      	adds	r3, r0, #1
 80130b2:	89a3      	ldrh	r3, [r4, #12]
 80130b4:	d106      	bne.n	80130c4 <__sflush_r+0x68>
 80130b6:	6829      	ldr	r1, [r5, #0]
 80130b8:	291d      	cmp	r1, #29
 80130ba:	d82b      	bhi.n	8013114 <__sflush_r+0xb8>
 80130bc:	4a29      	ldr	r2, [pc, #164]	; (8013164 <__sflush_r+0x108>)
 80130be:	410a      	asrs	r2, r1
 80130c0:	07d6      	lsls	r6, r2, #31
 80130c2:	d427      	bmi.n	8013114 <__sflush_r+0xb8>
 80130c4:	2200      	movs	r2, #0
 80130c6:	6062      	str	r2, [r4, #4]
 80130c8:	04d9      	lsls	r1, r3, #19
 80130ca:	6922      	ldr	r2, [r4, #16]
 80130cc:	6022      	str	r2, [r4, #0]
 80130ce:	d504      	bpl.n	80130da <__sflush_r+0x7e>
 80130d0:	1c42      	adds	r2, r0, #1
 80130d2:	d101      	bne.n	80130d8 <__sflush_r+0x7c>
 80130d4:	682b      	ldr	r3, [r5, #0]
 80130d6:	b903      	cbnz	r3, 80130da <__sflush_r+0x7e>
 80130d8:	6560      	str	r0, [r4, #84]	; 0x54
 80130da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130dc:	602f      	str	r7, [r5, #0]
 80130de:	2900      	cmp	r1, #0
 80130e0:	d0c9      	beq.n	8013076 <__sflush_r+0x1a>
 80130e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130e6:	4299      	cmp	r1, r3
 80130e8:	d002      	beq.n	80130f0 <__sflush_r+0x94>
 80130ea:	4628      	mov	r0, r5
 80130ec:	f7fe f8d6 	bl	801129c <_free_r>
 80130f0:	2000      	movs	r0, #0
 80130f2:	6360      	str	r0, [r4, #52]	; 0x34
 80130f4:	e7c0      	b.n	8013078 <__sflush_r+0x1c>
 80130f6:	2301      	movs	r3, #1
 80130f8:	4628      	mov	r0, r5
 80130fa:	47b0      	blx	r6
 80130fc:	1c41      	adds	r1, r0, #1
 80130fe:	d1c8      	bne.n	8013092 <__sflush_r+0x36>
 8013100:	682b      	ldr	r3, [r5, #0]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d0c5      	beq.n	8013092 <__sflush_r+0x36>
 8013106:	2b1d      	cmp	r3, #29
 8013108:	d001      	beq.n	801310e <__sflush_r+0xb2>
 801310a:	2b16      	cmp	r3, #22
 801310c:	d101      	bne.n	8013112 <__sflush_r+0xb6>
 801310e:	602f      	str	r7, [r5, #0]
 8013110:	e7b1      	b.n	8013076 <__sflush_r+0x1a>
 8013112:	89a3      	ldrh	r3, [r4, #12]
 8013114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013118:	81a3      	strh	r3, [r4, #12]
 801311a:	e7ad      	b.n	8013078 <__sflush_r+0x1c>
 801311c:	690f      	ldr	r7, [r1, #16]
 801311e:	2f00      	cmp	r7, #0
 8013120:	d0a9      	beq.n	8013076 <__sflush_r+0x1a>
 8013122:	0793      	lsls	r3, r2, #30
 8013124:	680e      	ldr	r6, [r1, #0]
 8013126:	bf08      	it	eq
 8013128:	694b      	ldreq	r3, [r1, #20]
 801312a:	600f      	str	r7, [r1, #0]
 801312c:	bf18      	it	ne
 801312e:	2300      	movne	r3, #0
 8013130:	eba6 0807 	sub.w	r8, r6, r7
 8013134:	608b      	str	r3, [r1, #8]
 8013136:	f1b8 0f00 	cmp.w	r8, #0
 801313a:	dd9c      	ble.n	8013076 <__sflush_r+0x1a>
 801313c:	6a21      	ldr	r1, [r4, #32]
 801313e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013140:	4643      	mov	r3, r8
 8013142:	463a      	mov	r2, r7
 8013144:	4628      	mov	r0, r5
 8013146:	47b0      	blx	r6
 8013148:	2800      	cmp	r0, #0
 801314a:	dc06      	bgt.n	801315a <__sflush_r+0xfe>
 801314c:	89a3      	ldrh	r3, [r4, #12]
 801314e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013152:	81a3      	strh	r3, [r4, #12]
 8013154:	f04f 30ff 	mov.w	r0, #4294967295
 8013158:	e78e      	b.n	8013078 <__sflush_r+0x1c>
 801315a:	4407      	add	r7, r0
 801315c:	eba8 0800 	sub.w	r8, r8, r0
 8013160:	e7e9      	b.n	8013136 <__sflush_r+0xda>
 8013162:	bf00      	nop
 8013164:	dfbffffe 	.word	0xdfbffffe

08013168 <_fflush_r>:
 8013168:	b538      	push	{r3, r4, r5, lr}
 801316a:	690b      	ldr	r3, [r1, #16]
 801316c:	4605      	mov	r5, r0
 801316e:	460c      	mov	r4, r1
 8013170:	b913      	cbnz	r3, 8013178 <_fflush_r+0x10>
 8013172:	2500      	movs	r5, #0
 8013174:	4628      	mov	r0, r5
 8013176:	bd38      	pop	{r3, r4, r5, pc}
 8013178:	b118      	cbz	r0, 8013182 <_fflush_r+0x1a>
 801317a:	6a03      	ldr	r3, [r0, #32]
 801317c:	b90b      	cbnz	r3, 8013182 <_fflush_r+0x1a>
 801317e:	f7fd f813 	bl	80101a8 <__sinit>
 8013182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d0f3      	beq.n	8013172 <_fflush_r+0xa>
 801318a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801318c:	07d0      	lsls	r0, r2, #31
 801318e:	d404      	bmi.n	801319a <_fflush_r+0x32>
 8013190:	0599      	lsls	r1, r3, #22
 8013192:	d402      	bmi.n	801319a <_fflush_r+0x32>
 8013194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013196:	f7fd f9c8 	bl	801052a <__retarget_lock_acquire_recursive>
 801319a:	4628      	mov	r0, r5
 801319c:	4621      	mov	r1, r4
 801319e:	f7ff ff5d 	bl	801305c <__sflush_r>
 80131a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131a4:	07da      	lsls	r2, r3, #31
 80131a6:	4605      	mov	r5, r0
 80131a8:	d4e4      	bmi.n	8013174 <_fflush_r+0xc>
 80131aa:	89a3      	ldrh	r3, [r4, #12]
 80131ac:	059b      	lsls	r3, r3, #22
 80131ae:	d4e1      	bmi.n	8013174 <_fflush_r+0xc>
 80131b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131b2:	f7fd f9bb 	bl	801052c <__retarget_lock_release_recursive>
 80131b6:	e7dd      	b.n	8013174 <_fflush_r+0xc>

080131b8 <fiprintf>:
 80131b8:	b40e      	push	{r1, r2, r3}
 80131ba:	b503      	push	{r0, r1, lr}
 80131bc:	4601      	mov	r1, r0
 80131be:	ab03      	add	r3, sp, #12
 80131c0:	4805      	ldr	r0, [pc, #20]	; (80131d8 <fiprintf+0x20>)
 80131c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80131c6:	6800      	ldr	r0, [r0, #0]
 80131c8:	9301      	str	r3, [sp, #4]
 80131ca:	f7ff fe2d 	bl	8012e28 <_vfiprintf_r>
 80131ce:	b002      	add	sp, #8
 80131d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80131d4:	b003      	add	sp, #12
 80131d6:	4770      	bx	lr
 80131d8:	20000288 	.word	0x20000288

080131dc <__swbuf_r>:
 80131dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131de:	460e      	mov	r6, r1
 80131e0:	4614      	mov	r4, r2
 80131e2:	4605      	mov	r5, r0
 80131e4:	b118      	cbz	r0, 80131ee <__swbuf_r+0x12>
 80131e6:	6a03      	ldr	r3, [r0, #32]
 80131e8:	b90b      	cbnz	r3, 80131ee <__swbuf_r+0x12>
 80131ea:	f7fc ffdd 	bl	80101a8 <__sinit>
 80131ee:	69a3      	ldr	r3, [r4, #24]
 80131f0:	60a3      	str	r3, [r4, #8]
 80131f2:	89a3      	ldrh	r3, [r4, #12]
 80131f4:	071a      	lsls	r2, r3, #28
 80131f6:	d525      	bpl.n	8013244 <__swbuf_r+0x68>
 80131f8:	6923      	ldr	r3, [r4, #16]
 80131fa:	b31b      	cbz	r3, 8013244 <__swbuf_r+0x68>
 80131fc:	6823      	ldr	r3, [r4, #0]
 80131fe:	6922      	ldr	r2, [r4, #16]
 8013200:	1a98      	subs	r0, r3, r2
 8013202:	6963      	ldr	r3, [r4, #20]
 8013204:	b2f6      	uxtb	r6, r6
 8013206:	4283      	cmp	r3, r0
 8013208:	4637      	mov	r7, r6
 801320a:	dc04      	bgt.n	8013216 <__swbuf_r+0x3a>
 801320c:	4621      	mov	r1, r4
 801320e:	4628      	mov	r0, r5
 8013210:	f7ff ffaa 	bl	8013168 <_fflush_r>
 8013214:	b9e0      	cbnz	r0, 8013250 <__swbuf_r+0x74>
 8013216:	68a3      	ldr	r3, [r4, #8]
 8013218:	3b01      	subs	r3, #1
 801321a:	60a3      	str	r3, [r4, #8]
 801321c:	6823      	ldr	r3, [r4, #0]
 801321e:	1c5a      	adds	r2, r3, #1
 8013220:	6022      	str	r2, [r4, #0]
 8013222:	701e      	strb	r6, [r3, #0]
 8013224:	6962      	ldr	r2, [r4, #20]
 8013226:	1c43      	adds	r3, r0, #1
 8013228:	429a      	cmp	r2, r3
 801322a:	d004      	beq.n	8013236 <__swbuf_r+0x5a>
 801322c:	89a3      	ldrh	r3, [r4, #12]
 801322e:	07db      	lsls	r3, r3, #31
 8013230:	d506      	bpl.n	8013240 <__swbuf_r+0x64>
 8013232:	2e0a      	cmp	r6, #10
 8013234:	d104      	bne.n	8013240 <__swbuf_r+0x64>
 8013236:	4621      	mov	r1, r4
 8013238:	4628      	mov	r0, r5
 801323a:	f7ff ff95 	bl	8013168 <_fflush_r>
 801323e:	b938      	cbnz	r0, 8013250 <__swbuf_r+0x74>
 8013240:	4638      	mov	r0, r7
 8013242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013244:	4621      	mov	r1, r4
 8013246:	4628      	mov	r0, r5
 8013248:	f000 f806 	bl	8013258 <__swsetup_r>
 801324c:	2800      	cmp	r0, #0
 801324e:	d0d5      	beq.n	80131fc <__swbuf_r+0x20>
 8013250:	f04f 37ff 	mov.w	r7, #4294967295
 8013254:	e7f4      	b.n	8013240 <__swbuf_r+0x64>
	...

08013258 <__swsetup_r>:
 8013258:	b538      	push	{r3, r4, r5, lr}
 801325a:	4b2a      	ldr	r3, [pc, #168]	; (8013304 <__swsetup_r+0xac>)
 801325c:	4605      	mov	r5, r0
 801325e:	6818      	ldr	r0, [r3, #0]
 8013260:	460c      	mov	r4, r1
 8013262:	b118      	cbz	r0, 801326c <__swsetup_r+0x14>
 8013264:	6a03      	ldr	r3, [r0, #32]
 8013266:	b90b      	cbnz	r3, 801326c <__swsetup_r+0x14>
 8013268:	f7fc ff9e 	bl	80101a8 <__sinit>
 801326c:	89a3      	ldrh	r3, [r4, #12]
 801326e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013272:	0718      	lsls	r0, r3, #28
 8013274:	d422      	bmi.n	80132bc <__swsetup_r+0x64>
 8013276:	06d9      	lsls	r1, r3, #27
 8013278:	d407      	bmi.n	801328a <__swsetup_r+0x32>
 801327a:	2309      	movs	r3, #9
 801327c:	602b      	str	r3, [r5, #0]
 801327e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013282:	81a3      	strh	r3, [r4, #12]
 8013284:	f04f 30ff 	mov.w	r0, #4294967295
 8013288:	e034      	b.n	80132f4 <__swsetup_r+0x9c>
 801328a:	0758      	lsls	r0, r3, #29
 801328c:	d512      	bpl.n	80132b4 <__swsetup_r+0x5c>
 801328e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013290:	b141      	cbz	r1, 80132a4 <__swsetup_r+0x4c>
 8013292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013296:	4299      	cmp	r1, r3
 8013298:	d002      	beq.n	80132a0 <__swsetup_r+0x48>
 801329a:	4628      	mov	r0, r5
 801329c:	f7fd fffe 	bl	801129c <_free_r>
 80132a0:	2300      	movs	r3, #0
 80132a2:	6363      	str	r3, [r4, #52]	; 0x34
 80132a4:	89a3      	ldrh	r3, [r4, #12]
 80132a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80132aa:	81a3      	strh	r3, [r4, #12]
 80132ac:	2300      	movs	r3, #0
 80132ae:	6063      	str	r3, [r4, #4]
 80132b0:	6923      	ldr	r3, [r4, #16]
 80132b2:	6023      	str	r3, [r4, #0]
 80132b4:	89a3      	ldrh	r3, [r4, #12]
 80132b6:	f043 0308 	orr.w	r3, r3, #8
 80132ba:	81a3      	strh	r3, [r4, #12]
 80132bc:	6923      	ldr	r3, [r4, #16]
 80132be:	b94b      	cbnz	r3, 80132d4 <__swsetup_r+0x7c>
 80132c0:	89a3      	ldrh	r3, [r4, #12]
 80132c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80132c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132ca:	d003      	beq.n	80132d4 <__swsetup_r+0x7c>
 80132cc:	4621      	mov	r1, r4
 80132ce:	4628      	mov	r0, r5
 80132d0:	f000 fc45 	bl	8013b5e <__smakebuf_r>
 80132d4:	89a0      	ldrh	r0, [r4, #12]
 80132d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132da:	f010 0301 	ands.w	r3, r0, #1
 80132de:	d00a      	beq.n	80132f6 <__swsetup_r+0x9e>
 80132e0:	2300      	movs	r3, #0
 80132e2:	60a3      	str	r3, [r4, #8]
 80132e4:	6963      	ldr	r3, [r4, #20]
 80132e6:	425b      	negs	r3, r3
 80132e8:	61a3      	str	r3, [r4, #24]
 80132ea:	6923      	ldr	r3, [r4, #16]
 80132ec:	b943      	cbnz	r3, 8013300 <__swsetup_r+0xa8>
 80132ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132f2:	d1c4      	bne.n	801327e <__swsetup_r+0x26>
 80132f4:	bd38      	pop	{r3, r4, r5, pc}
 80132f6:	0781      	lsls	r1, r0, #30
 80132f8:	bf58      	it	pl
 80132fa:	6963      	ldrpl	r3, [r4, #20]
 80132fc:	60a3      	str	r3, [r4, #8]
 80132fe:	e7f4      	b.n	80132ea <__swsetup_r+0x92>
 8013300:	2000      	movs	r0, #0
 8013302:	e7f7      	b.n	80132f4 <__swsetup_r+0x9c>
 8013304:	20000288 	.word	0x20000288

08013308 <memmove>:
 8013308:	4288      	cmp	r0, r1
 801330a:	b510      	push	{r4, lr}
 801330c:	eb01 0402 	add.w	r4, r1, r2
 8013310:	d902      	bls.n	8013318 <memmove+0x10>
 8013312:	4284      	cmp	r4, r0
 8013314:	4623      	mov	r3, r4
 8013316:	d807      	bhi.n	8013328 <memmove+0x20>
 8013318:	1e43      	subs	r3, r0, #1
 801331a:	42a1      	cmp	r1, r4
 801331c:	d008      	beq.n	8013330 <memmove+0x28>
 801331e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013326:	e7f8      	b.n	801331a <memmove+0x12>
 8013328:	4402      	add	r2, r0
 801332a:	4601      	mov	r1, r0
 801332c:	428a      	cmp	r2, r1
 801332e:	d100      	bne.n	8013332 <memmove+0x2a>
 8013330:	bd10      	pop	{r4, pc}
 8013332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801333a:	e7f7      	b.n	801332c <memmove+0x24>

0801333c <strncmp>:
 801333c:	b510      	push	{r4, lr}
 801333e:	b16a      	cbz	r2, 801335c <strncmp+0x20>
 8013340:	3901      	subs	r1, #1
 8013342:	1884      	adds	r4, r0, r2
 8013344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013348:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801334c:	429a      	cmp	r2, r3
 801334e:	d103      	bne.n	8013358 <strncmp+0x1c>
 8013350:	42a0      	cmp	r0, r4
 8013352:	d001      	beq.n	8013358 <strncmp+0x1c>
 8013354:	2a00      	cmp	r2, #0
 8013356:	d1f5      	bne.n	8013344 <strncmp+0x8>
 8013358:	1ad0      	subs	r0, r2, r3
 801335a:	bd10      	pop	{r4, pc}
 801335c:	4610      	mov	r0, r2
 801335e:	e7fc      	b.n	801335a <strncmp+0x1e>

08013360 <_sbrk_r>:
 8013360:	b538      	push	{r3, r4, r5, lr}
 8013362:	4d06      	ldr	r5, [pc, #24]	; (801337c <_sbrk_r+0x1c>)
 8013364:	2300      	movs	r3, #0
 8013366:	4604      	mov	r4, r0
 8013368:	4608      	mov	r0, r1
 801336a:	602b      	str	r3, [r5, #0]
 801336c:	f7ee f9b4 	bl	80016d8 <_sbrk>
 8013370:	1c43      	adds	r3, r0, #1
 8013372:	d102      	bne.n	801337a <_sbrk_r+0x1a>
 8013374:	682b      	ldr	r3, [r5, #0]
 8013376:	b103      	cbz	r3, 801337a <_sbrk_r+0x1a>
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	bd38      	pop	{r3, r4, r5, pc}
 801337c:	20002388 	.word	0x20002388

08013380 <nan>:
 8013380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013388 <nan+0x8>
 8013384:	4770      	bx	lr
 8013386:	bf00      	nop
 8013388:	00000000 	.word	0x00000000
 801338c:	7ff80000 	.word	0x7ff80000

08013390 <abort>:
 8013390:	b508      	push	{r3, lr}
 8013392:	2006      	movs	r0, #6
 8013394:	f000 fc48 	bl	8013c28 <raise>
 8013398:	2001      	movs	r0, #1
 801339a:	f7ee f925 	bl	80015e8 <_exit>

0801339e <_calloc_r>:
 801339e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80133a0:	fba1 2402 	umull	r2, r4, r1, r2
 80133a4:	b94c      	cbnz	r4, 80133ba <_calloc_r+0x1c>
 80133a6:	4611      	mov	r1, r2
 80133a8:	9201      	str	r2, [sp, #4]
 80133aa:	f7fd ffeb 	bl	8011384 <_malloc_r>
 80133ae:	9a01      	ldr	r2, [sp, #4]
 80133b0:	4605      	mov	r5, r0
 80133b2:	b930      	cbnz	r0, 80133c2 <_calloc_r+0x24>
 80133b4:	4628      	mov	r0, r5
 80133b6:	b003      	add	sp, #12
 80133b8:	bd30      	pop	{r4, r5, pc}
 80133ba:	220c      	movs	r2, #12
 80133bc:	6002      	str	r2, [r0, #0]
 80133be:	2500      	movs	r5, #0
 80133c0:	e7f8      	b.n	80133b4 <_calloc_r+0x16>
 80133c2:	4621      	mov	r1, r4
 80133c4:	f7fc ffc2 	bl	801034c <memset>
 80133c8:	e7f4      	b.n	80133b4 <_calloc_r+0x16>

080133ca <rshift>:
 80133ca:	6903      	ldr	r3, [r0, #16]
 80133cc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80133d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133d4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80133d8:	f100 0414 	add.w	r4, r0, #20
 80133dc:	dd45      	ble.n	801346a <rshift+0xa0>
 80133de:	f011 011f 	ands.w	r1, r1, #31
 80133e2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80133e6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80133ea:	d10c      	bne.n	8013406 <rshift+0x3c>
 80133ec:	f100 0710 	add.w	r7, r0, #16
 80133f0:	4629      	mov	r1, r5
 80133f2:	42b1      	cmp	r1, r6
 80133f4:	d334      	bcc.n	8013460 <rshift+0x96>
 80133f6:	1a9b      	subs	r3, r3, r2
 80133f8:	009b      	lsls	r3, r3, #2
 80133fa:	1eea      	subs	r2, r5, #3
 80133fc:	4296      	cmp	r6, r2
 80133fe:	bf38      	it	cc
 8013400:	2300      	movcc	r3, #0
 8013402:	4423      	add	r3, r4
 8013404:	e015      	b.n	8013432 <rshift+0x68>
 8013406:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801340a:	f1c1 0820 	rsb	r8, r1, #32
 801340e:	40cf      	lsrs	r7, r1
 8013410:	f105 0e04 	add.w	lr, r5, #4
 8013414:	46a1      	mov	r9, r4
 8013416:	4576      	cmp	r6, lr
 8013418:	46f4      	mov	ip, lr
 801341a:	d815      	bhi.n	8013448 <rshift+0x7e>
 801341c:	1a9a      	subs	r2, r3, r2
 801341e:	0092      	lsls	r2, r2, #2
 8013420:	3a04      	subs	r2, #4
 8013422:	3501      	adds	r5, #1
 8013424:	42ae      	cmp	r6, r5
 8013426:	bf38      	it	cc
 8013428:	2200      	movcc	r2, #0
 801342a:	18a3      	adds	r3, r4, r2
 801342c:	50a7      	str	r7, [r4, r2]
 801342e:	b107      	cbz	r7, 8013432 <rshift+0x68>
 8013430:	3304      	adds	r3, #4
 8013432:	1b1a      	subs	r2, r3, r4
 8013434:	42a3      	cmp	r3, r4
 8013436:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801343a:	bf08      	it	eq
 801343c:	2300      	moveq	r3, #0
 801343e:	6102      	str	r2, [r0, #16]
 8013440:	bf08      	it	eq
 8013442:	6143      	streq	r3, [r0, #20]
 8013444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013448:	f8dc c000 	ldr.w	ip, [ip]
 801344c:	fa0c fc08 	lsl.w	ip, ip, r8
 8013450:	ea4c 0707 	orr.w	r7, ip, r7
 8013454:	f849 7b04 	str.w	r7, [r9], #4
 8013458:	f85e 7b04 	ldr.w	r7, [lr], #4
 801345c:	40cf      	lsrs	r7, r1
 801345e:	e7da      	b.n	8013416 <rshift+0x4c>
 8013460:	f851 cb04 	ldr.w	ip, [r1], #4
 8013464:	f847 cf04 	str.w	ip, [r7, #4]!
 8013468:	e7c3      	b.n	80133f2 <rshift+0x28>
 801346a:	4623      	mov	r3, r4
 801346c:	e7e1      	b.n	8013432 <rshift+0x68>

0801346e <__hexdig_fun>:
 801346e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013472:	2b09      	cmp	r3, #9
 8013474:	d802      	bhi.n	801347c <__hexdig_fun+0xe>
 8013476:	3820      	subs	r0, #32
 8013478:	b2c0      	uxtb	r0, r0
 801347a:	4770      	bx	lr
 801347c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013480:	2b05      	cmp	r3, #5
 8013482:	d801      	bhi.n	8013488 <__hexdig_fun+0x1a>
 8013484:	3847      	subs	r0, #71	; 0x47
 8013486:	e7f7      	b.n	8013478 <__hexdig_fun+0xa>
 8013488:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801348c:	2b05      	cmp	r3, #5
 801348e:	d801      	bhi.n	8013494 <__hexdig_fun+0x26>
 8013490:	3827      	subs	r0, #39	; 0x27
 8013492:	e7f1      	b.n	8013478 <__hexdig_fun+0xa>
 8013494:	2000      	movs	r0, #0
 8013496:	4770      	bx	lr

08013498 <__gethex>:
 8013498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349c:	4617      	mov	r7, r2
 801349e:	680a      	ldr	r2, [r1, #0]
 80134a0:	b085      	sub	sp, #20
 80134a2:	f102 0b02 	add.w	fp, r2, #2
 80134a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80134aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80134ae:	4681      	mov	r9, r0
 80134b0:	468a      	mov	sl, r1
 80134b2:	9302      	str	r3, [sp, #8]
 80134b4:	32fe      	adds	r2, #254	; 0xfe
 80134b6:	eb02 030b 	add.w	r3, r2, fp
 80134ba:	46d8      	mov	r8, fp
 80134bc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80134c0:	9301      	str	r3, [sp, #4]
 80134c2:	2830      	cmp	r0, #48	; 0x30
 80134c4:	d0f7      	beq.n	80134b6 <__gethex+0x1e>
 80134c6:	f7ff ffd2 	bl	801346e <__hexdig_fun>
 80134ca:	4604      	mov	r4, r0
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d138      	bne.n	8013542 <__gethex+0xaa>
 80134d0:	49a7      	ldr	r1, [pc, #668]	; (8013770 <__gethex+0x2d8>)
 80134d2:	2201      	movs	r2, #1
 80134d4:	4640      	mov	r0, r8
 80134d6:	f7ff ff31 	bl	801333c <strncmp>
 80134da:	4606      	mov	r6, r0
 80134dc:	2800      	cmp	r0, #0
 80134de:	d169      	bne.n	80135b4 <__gethex+0x11c>
 80134e0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80134e4:	465d      	mov	r5, fp
 80134e6:	f7ff ffc2 	bl	801346e <__hexdig_fun>
 80134ea:	2800      	cmp	r0, #0
 80134ec:	d064      	beq.n	80135b8 <__gethex+0x120>
 80134ee:	465a      	mov	r2, fp
 80134f0:	7810      	ldrb	r0, [r2, #0]
 80134f2:	2830      	cmp	r0, #48	; 0x30
 80134f4:	4690      	mov	r8, r2
 80134f6:	f102 0201 	add.w	r2, r2, #1
 80134fa:	d0f9      	beq.n	80134f0 <__gethex+0x58>
 80134fc:	f7ff ffb7 	bl	801346e <__hexdig_fun>
 8013500:	2301      	movs	r3, #1
 8013502:	fab0 f480 	clz	r4, r0
 8013506:	0964      	lsrs	r4, r4, #5
 8013508:	465e      	mov	r6, fp
 801350a:	9301      	str	r3, [sp, #4]
 801350c:	4642      	mov	r2, r8
 801350e:	4615      	mov	r5, r2
 8013510:	3201      	adds	r2, #1
 8013512:	7828      	ldrb	r0, [r5, #0]
 8013514:	f7ff ffab 	bl	801346e <__hexdig_fun>
 8013518:	2800      	cmp	r0, #0
 801351a:	d1f8      	bne.n	801350e <__gethex+0x76>
 801351c:	4994      	ldr	r1, [pc, #592]	; (8013770 <__gethex+0x2d8>)
 801351e:	2201      	movs	r2, #1
 8013520:	4628      	mov	r0, r5
 8013522:	f7ff ff0b 	bl	801333c <strncmp>
 8013526:	b978      	cbnz	r0, 8013548 <__gethex+0xb0>
 8013528:	b946      	cbnz	r6, 801353c <__gethex+0xa4>
 801352a:	1c6e      	adds	r6, r5, #1
 801352c:	4632      	mov	r2, r6
 801352e:	4615      	mov	r5, r2
 8013530:	3201      	adds	r2, #1
 8013532:	7828      	ldrb	r0, [r5, #0]
 8013534:	f7ff ff9b 	bl	801346e <__hexdig_fun>
 8013538:	2800      	cmp	r0, #0
 801353a:	d1f8      	bne.n	801352e <__gethex+0x96>
 801353c:	1b73      	subs	r3, r6, r5
 801353e:	009e      	lsls	r6, r3, #2
 8013540:	e004      	b.n	801354c <__gethex+0xb4>
 8013542:	2400      	movs	r4, #0
 8013544:	4626      	mov	r6, r4
 8013546:	e7e1      	b.n	801350c <__gethex+0x74>
 8013548:	2e00      	cmp	r6, #0
 801354a:	d1f7      	bne.n	801353c <__gethex+0xa4>
 801354c:	782b      	ldrb	r3, [r5, #0]
 801354e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013552:	2b50      	cmp	r3, #80	; 0x50
 8013554:	d13d      	bne.n	80135d2 <__gethex+0x13a>
 8013556:	786b      	ldrb	r3, [r5, #1]
 8013558:	2b2b      	cmp	r3, #43	; 0x2b
 801355a:	d02f      	beq.n	80135bc <__gethex+0x124>
 801355c:	2b2d      	cmp	r3, #45	; 0x2d
 801355e:	d031      	beq.n	80135c4 <__gethex+0x12c>
 8013560:	1c69      	adds	r1, r5, #1
 8013562:	f04f 0b00 	mov.w	fp, #0
 8013566:	7808      	ldrb	r0, [r1, #0]
 8013568:	f7ff ff81 	bl	801346e <__hexdig_fun>
 801356c:	1e42      	subs	r2, r0, #1
 801356e:	b2d2      	uxtb	r2, r2
 8013570:	2a18      	cmp	r2, #24
 8013572:	d82e      	bhi.n	80135d2 <__gethex+0x13a>
 8013574:	f1a0 0210 	sub.w	r2, r0, #16
 8013578:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801357c:	f7ff ff77 	bl	801346e <__hexdig_fun>
 8013580:	f100 3cff 	add.w	ip, r0, #4294967295
 8013584:	fa5f fc8c 	uxtb.w	ip, ip
 8013588:	f1bc 0f18 	cmp.w	ip, #24
 801358c:	d91d      	bls.n	80135ca <__gethex+0x132>
 801358e:	f1bb 0f00 	cmp.w	fp, #0
 8013592:	d000      	beq.n	8013596 <__gethex+0xfe>
 8013594:	4252      	negs	r2, r2
 8013596:	4416      	add	r6, r2
 8013598:	f8ca 1000 	str.w	r1, [sl]
 801359c:	b1dc      	cbz	r4, 80135d6 <__gethex+0x13e>
 801359e:	9b01      	ldr	r3, [sp, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	bf14      	ite	ne
 80135a4:	f04f 0800 	movne.w	r8, #0
 80135a8:	f04f 0806 	moveq.w	r8, #6
 80135ac:	4640      	mov	r0, r8
 80135ae:	b005      	add	sp, #20
 80135b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b4:	4645      	mov	r5, r8
 80135b6:	4626      	mov	r6, r4
 80135b8:	2401      	movs	r4, #1
 80135ba:	e7c7      	b.n	801354c <__gethex+0xb4>
 80135bc:	f04f 0b00 	mov.w	fp, #0
 80135c0:	1ca9      	adds	r1, r5, #2
 80135c2:	e7d0      	b.n	8013566 <__gethex+0xce>
 80135c4:	f04f 0b01 	mov.w	fp, #1
 80135c8:	e7fa      	b.n	80135c0 <__gethex+0x128>
 80135ca:	230a      	movs	r3, #10
 80135cc:	fb03 0002 	mla	r0, r3, r2, r0
 80135d0:	e7d0      	b.n	8013574 <__gethex+0xdc>
 80135d2:	4629      	mov	r1, r5
 80135d4:	e7e0      	b.n	8013598 <__gethex+0x100>
 80135d6:	eba5 0308 	sub.w	r3, r5, r8
 80135da:	3b01      	subs	r3, #1
 80135dc:	4621      	mov	r1, r4
 80135de:	2b07      	cmp	r3, #7
 80135e0:	dc0a      	bgt.n	80135f8 <__gethex+0x160>
 80135e2:	4648      	mov	r0, r9
 80135e4:	f7fd ff5a 	bl	801149c <_Balloc>
 80135e8:	4604      	mov	r4, r0
 80135ea:	b940      	cbnz	r0, 80135fe <__gethex+0x166>
 80135ec:	4b61      	ldr	r3, [pc, #388]	; (8013774 <__gethex+0x2dc>)
 80135ee:	4602      	mov	r2, r0
 80135f0:	21e4      	movs	r1, #228	; 0xe4
 80135f2:	4861      	ldr	r0, [pc, #388]	; (8013778 <__gethex+0x2e0>)
 80135f4:	f7fc ffb8 	bl	8010568 <__assert_func>
 80135f8:	3101      	adds	r1, #1
 80135fa:	105b      	asrs	r3, r3, #1
 80135fc:	e7ef      	b.n	80135de <__gethex+0x146>
 80135fe:	f100 0a14 	add.w	sl, r0, #20
 8013602:	2300      	movs	r3, #0
 8013604:	495a      	ldr	r1, [pc, #360]	; (8013770 <__gethex+0x2d8>)
 8013606:	f8cd a004 	str.w	sl, [sp, #4]
 801360a:	469b      	mov	fp, r3
 801360c:	45a8      	cmp	r8, r5
 801360e:	d342      	bcc.n	8013696 <__gethex+0x1fe>
 8013610:	9801      	ldr	r0, [sp, #4]
 8013612:	f840 bb04 	str.w	fp, [r0], #4
 8013616:	eba0 000a 	sub.w	r0, r0, sl
 801361a:	1080      	asrs	r0, r0, #2
 801361c:	6120      	str	r0, [r4, #16]
 801361e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013622:	4658      	mov	r0, fp
 8013624:	f7fe f82c 	bl	8011680 <__hi0bits>
 8013628:	683d      	ldr	r5, [r7, #0]
 801362a:	eba8 0000 	sub.w	r0, r8, r0
 801362e:	42a8      	cmp	r0, r5
 8013630:	dd59      	ble.n	80136e6 <__gethex+0x24e>
 8013632:	eba0 0805 	sub.w	r8, r0, r5
 8013636:	4641      	mov	r1, r8
 8013638:	4620      	mov	r0, r4
 801363a:	f7fe fbbb 	bl	8011db4 <__any_on>
 801363e:	4683      	mov	fp, r0
 8013640:	b1b8      	cbz	r0, 8013672 <__gethex+0x1da>
 8013642:	f108 33ff 	add.w	r3, r8, #4294967295
 8013646:	1159      	asrs	r1, r3, #5
 8013648:	f003 021f 	and.w	r2, r3, #31
 801364c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013650:	f04f 0b01 	mov.w	fp, #1
 8013654:	fa0b f202 	lsl.w	r2, fp, r2
 8013658:	420a      	tst	r2, r1
 801365a:	d00a      	beq.n	8013672 <__gethex+0x1da>
 801365c:	455b      	cmp	r3, fp
 801365e:	dd06      	ble.n	801366e <__gethex+0x1d6>
 8013660:	f1a8 0102 	sub.w	r1, r8, #2
 8013664:	4620      	mov	r0, r4
 8013666:	f7fe fba5 	bl	8011db4 <__any_on>
 801366a:	2800      	cmp	r0, #0
 801366c:	d138      	bne.n	80136e0 <__gethex+0x248>
 801366e:	f04f 0b02 	mov.w	fp, #2
 8013672:	4641      	mov	r1, r8
 8013674:	4620      	mov	r0, r4
 8013676:	f7ff fea8 	bl	80133ca <rshift>
 801367a:	4446      	add	r6, r8
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	42b3      	cmp	r3, r6
 8013680:	da41      	bge.n	8013706 <__gethex+0x26e>
 8013682:	4621      	mov	r1, r4
 8013684:	4648      	mov	r0, r9
 8013686:	f7fd ff49 	bl	801151c <_Bfree>
 801368a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801368c:	2300      	movs	r3, #0
 801368e:	6013      	str	r3, [r2, #0]
 8013690:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013694:	e78a      	b.n	80135ac <__gethex+0x114>
 8013696:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801369a:	2a2e      	cmp	r2, #46	; 0x2e
 801369c:	d014      	beq.n	80136c8 <__gethex+0x230>
 801369e:	2b20      	cmp	r3, #32
 80136a0:	d106      	bne.n	80136b0 <__gethex+0x218>
 80136a2:	9b01      	ldr	r3, [sp, #4]
 80136a4:	f843 bb04 	str.w	fp, [r3], #4
 80136a8:	f04f 0b00 	mov.w	fp, #0
 80136ac:	9301      	str	r3, [sp, #4]
 80136ae:	465b      	mov	r3, fp
 80136b0:	7828      	ldrb	r0, [r5, #0]
 80136b2:	9303      	str	r3, [sp, #12]
 80136b4:	f7ff fedb 	bl	801346e <__hexdig_fun>
 80136b8:	9b03      	ldr	r3, [sp, #12]
 80136ba:	f000 000f 	and.w	r0, r0, #15
 80136be:	4098      	lsls	r0, r3
 80136c0:	ea4b 0b00 	orr.w	fp, fp, r0
 80136c4:	3304      	adds	r3, #4
 80136c6:	e7a1      	b.n	801360c <__gethex+0x174>
 80136c8:	45a8      	cmp	r8, r5
 80136ca:	d8e8      	bhi.n	801369e <__gethex+0x206>
 80136cc:	2201      	movs	r2, #1
 80136ce:	4628      	mov	r0, r5
 80136d0:	9303      	str	r3, [sp, #12]
 80136d2:	f7ff fe33 	bl	801333c <strncmp>
 80136d6:	4926      	ldr	r1, [pc, #152]	; (8013770 <__gethex+0x2d8>)
 80136d8:	9b03      	ldr	r3, [sp, #12]
 80136da:	2800      	cmp	r0, #0
 80136dc:	d1df      	bne.n	801369e <__gethex+0x206>
 80136de:	e795      	b.n	801360c <__gethex+0x174>
 80136e0:	f04f 0b03 	mov.w	fp, #3
 80136e4:	e7c5      	b.n	8013672 <__gethex+0x1da>
 80136e6:	da0b      	bge.n	8013700 <__gethex+0x268>
 80136e8:	eba5 0800 	sub.w	r8, r5, r0
 80136ec:	4621      	mov	r1, r4
 80136ee:	4642      	mov	r2, r8
 80136f0:	4648      	mov	r0, r9
 80136f2:	f7fe f92d 	bl	8011950 <__lshift>
 80136f6:	eba6 0608 	sub.w	r6, r6, r8
 80136fa:	4604      	mov	r4, r0
 80136fc:	f100 0a14 	add.w	sl, r0, #20
 8013700:	f04f 0b00 	mov.w	fp, #0
 8013704:	e7ba      	b.n	801367c <__gethex+0x1e4>
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	42b3      	cmp	r3, r6
 801370a:	dd73      	ble.n	80137f4 <__gethex+0x35c>
 801370c:	1b9e      	subs	r6, r3, r6
 801370e:	42b5      	cmp	r5, r6
 8013710:	dc34      	bgt.n	801377c <__gethex+0x2e4>
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	2b02      	cmp	r3, #2
 8013716:	d023      	beq.n	8013760 <__gethex+0x2c8>
 8013718:	2b03      	cmp	r3, #3
 801371a:	d025      	beq.n	8013768 <__gethex+0x2d0>
 801371c:	2b01      	cmp	r3, #1
 801371e:	d115      	bne.n	801374c <__gethex+0x2b4>
 8013720:	42b5      	cmp	r5, r6
 8013722:	d113      	bne.n	801374c <__gethex+0x2b4>
 8013724:	2d01      	cmp	r5, #1
 8013726:	d10b      	bne.n	8013740 <__gethex+0x2a8>
 8013728:	9a02      	ldr	r2, [sp, #8]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6013      	str	r3, [r2, #0]
 801372e:	2301      	movs	r3, #1
 8013730:	6123      	str	r3, [r4, #16]
 8013732:	f8ca 3000 	str.w	r3, [sl]
 8013736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013738:	f04f 0862 	mov.w	r8, #98	; 0x62
 801373c:	601c      	str	r4, [r3, #0]
 801373e:	e735      	b.n	80135ac <__gethex+0x114>
 8013740:	1e69      	subs	r1, r5, #1
 8013742:	4620      	mov	r0, r4
 8013744:	f7fe fb36 	bl	8011db4 <__any_on>
 8013748:	2800      	cmp	r0, #0
 801374a:	d1ed      	bne.n	8013728 <__gethex+0x290>
 801374c:	4621      	mov	r1, r4
 801374e:	4648      	mov	r0, r9
 8013750:	f7fd fee4 	bl	801151c <_Bfree>
 8013754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013756:	2300      	movs	r3, #0
 8013758:	6013      	str	r3, [r2, #0]
 801375a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801375e:	e725      	b.n	80135ac <__gethex+0x114>
 8013760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013762:	2b00      	cmp	r3, #0
 8013764:	d1f2      	bne.n	801374c <__gethex+0x2b4>
 8013766:	e7df      	b.n	8013728 <__gethex+0x290>
 8013768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801376a:	2b00      	cmp	r3, #0
 801376c:	d1dc      	bne.n	8013728 <__gethex+0x290>
 801376e:	e7ed      	b.n	801374c <__gethex+0x2b4>
 8013770:	080141d4 	.word	0x080141d4
 8013774:	0801406b 	.word	0x0801406b
 8013778:	08014342 	.word	0x08014342
 801377c:	f106 38ff 	add.w	r8, r6, #4294967295
 8013780:	f1bb 0f00 	cmp.w	fp, #0
 8013784:	d133      	bne.n	80137ee <__gethex+0x356>
 8013786:	f1b8 0f00 	cmp.w	r8, #0
 801378a:	d004      	beq.n	8013796 <__gethex+0x2fe>
 801378c:	4641      	mov	r1, r8
 801378e:	4620      	mov	r0, r4
 8013790:	f7fe fb10 	bl	8011db4 <__any_on>
 8013794:	4683      	mov	fp, r0
 8013796:	ea4f 1268 	mov.w	r2, r8, asr #5
 801379a:	2301      	movs	r3, #1
 801379c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80137a0:	f008 081f 	and.w	r8, r8, #31
 80137a4:	fa03 f308 	lsl.w	r3, r3, r8
 80137a8:	4213      	tst	r3, r2
 80137aa:	4631      	mov	r1, r6
 80137ac:	4620      	mov	r0, r4
 80137ae:	bf18      	it	ne
 80137b0:	f04b 0b02 	orrne.w	fp, fp, #2
 80137b4:	1bad      	subs	r5, r5, r6
 80137b6:	f7ff fe08 	bl	80133ca <rshift>
 80137ba:	687e      	ldr	r6, [r7, #4]
 80137bc:	f04f 0802 	mov.w	r8, #2
 80137c0:	f1bb 0f00 	cmp.w	fp, #0
 80137c4:	d04a      	beq.n	801385c <__gethex+0x3c4>
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2b02      	cmp	r3, #2
 80137ca:	d016      	beq.n	80137fa <__gethex+0x362>
 80137cc:	2b03      	cmp	r3, #3
 80137ce:	d018      	beq.n	8013802 <__gethex+0x36a>
 80137d0:	2b01      	cmp	r3, #1
 80137d2:	d109      	bne.n	80137e8 <__gethex+0x350>
 80137d4:	f01b 0f02 	tst.w	fp, #2
 80137d8:	d006      	beq.n	80137e8 <__gethex+0x350>
 80137da:	f8da 3000 	ldr.w	r3, [sl]
 80137de:	ea4b 0b03 	orr.w	fp, fp, r3
 80137e2:	f01b 0f01 	tst.w	fp, #1
 80137e6:	d10f      	bne.n	8013808 <__gethex+0x370>
 80137e8:	f048 0810 	orr.w	r8, r8, #16
 80137ec:	e036      	b.n	801385c <__gethex+0x3c4>
 80137ee:	f04f 0b01 	mov.w	fp, #1
 80137f2:	e7d0      	b.n	8013796 <__gethex+0x2fe>
 80137f4:	f04f 0801 	mov.w	r8, #1
 80137f8:	e7e2      	b.n	80137c0 <__gethex+0x328>
 80137fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137fc:	f1c3 0301 	rsb	r3, r3, #1
 8013800:	930f      	str	r3, [sp, #60]	; 0x3c
 8013802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013804:	2b00      	cmp	r3, #0
 8013806:	d0ef      	beq.n	80137e8 <__gethex+0x350>
 8013808:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801380c:	f104 0214 	add.w	r2, r4, #20
 8013810:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013814:	9301      	str	r3, [sp, #4]
 8013816:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801381a:	2300      	movs	r3, #0
 801381c:	4694      	mov	ip, r2
 801381e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013822:	f1b1 3fff 	cmp.w	r1, #4294967295
 8013826:	d01e      	beq.n	8013866 <__gethex+0x3ce>
 8013828:	3101      	adds	r1, #1
 801382a:	f8cc 1000 	str.w	r1, [ip]
 801382e:	f1b8 0f02 	cmp.w	r8, #2
 8013832:	f104 0214 	add.w	r2, r4, #20
 8013836:	d13d      	bne.n	80138b4 <__gethex+0x41c>
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	3b01      	subs	r3, #1
 801383c:	42ab      	cmp	r3, r5
 801383e:	d10b      	bne.n	8013858 <__gethex+0x3c0>
 8013840:	1169      	asrs	r1, r5, #5
 8013842:	2301      	movs	r3, #1
 8013844:	f005 051f 	and.w	r5, r5, #31
 8013848:	fa03 f505 	lsl.w	r5, r3, r5
 801384c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013850:	421d      	tst	r5, r3
 8013852:	bf18      	it	ne
 8013854:	f04f 0801 	movne.w	r8, #1
 8013858:	f048 0820 	orr.w	r8, r8, #32
 801385c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801385e:	601c      	str	r4, [r3, #0]
 8013860:	9b02      	ldr	r3, [sp, #8]
 8013862:	601e      	str	r6, [r3, #0]
 8013864:	e6a2      	b.n	80135ac <__gethex+0x114>
 8013866:	4290      	cmp	r0, r2
 8013868:	f842 3c04 	str.w	r3, [r2, #-4]
 801386c:	d8d6      	bhi.n	801381c <__gethex+0x384>
 801386e:	68a2      	ldr	r2, [r4, #8]
 8013870:	4593      	cmp	fp, r2
 8013872:	db17      	blt.n	80138a4 <__gethex+0x40c>
 8013874:	6861      	ldr	r1, [r4, #4]
 8013876:	4648      	mov	r0, r9
 8013878:	3101      	adds	r1, #1
 801387a:	f7fd fe0f 	bl	801149c <_Balloc>
 801387e:	4682      	mov	sl, r0
 8013880:	b918      	cbnz	r0, 801388a <__gethex+0x3f2>
 8013882:	4b1b      	ldr	r3, [pc, #108]	; (80138f0 <__gethex+0x458>)
 8013884:	4602      	mov	r2, r0
 8013886:	2184      	movs	r1, #132	; 0x84
 8013888:	e6b3      	b.n	80135f2 <__gethex+0x15a>
 801388a:	6922      	ldr	r2, [r4, #16]
 801388c:	3202      	adds	r2, #2
 801388e:	f104 010c 	add.w	r1, r4, #12
 8013892:	0092      	lsls	r2, r2, #2
 8013894:	300c      	adds	r0, #12
 8013896:	f7fc fe52 	bl	801053e <memcpy>
 801389a:	4621      	mov	r1, r4
 801389c:	4648      	mov	r0, r9
 801389e:	f7fd fe3d 	bl	801151c <_Bfree>
 80138a2:	4654      	mov	r4, sl
 80138a4:	6922      	ldr	r2, [r4, #16]
 80138a6:	1c51      	adds	r1, r2, #1
 80138a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80138ac:	6121      	str	r1, [r4, #16]
 80138ae:	2101      	movs	r1, #1
 80138b0:	6151      	str	r1, [r2, #20]
 80138b2:	e7bc      	b.n	801382e <__gethex+0x396>
 80138b4:	6921      	ldr	r1, [r4, #16]
 80138b6:	4559      	cmp	r1, fp
 80138b8:	dd0b      	ble.n	80138d2 <__gethex+0x43a>
 80138ba:	2101      	movs	r1, #1
 80138bc:	4620      	mov	r0, r4
 80138be:	f7ff fd84 	bl	80133ca <rshift>
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	3601      	adds	r6, #1
 80138c6:	42b3      	cmp	r3, r6
 80138c8:	f6ff aedb 	blt.w	8013682 <__gethex+0x1ea>
 80138cc:	f04f 0801 	mov.w	r8, #1
 80138d0:	e7c2      	b.n	8013858 <__gethex+0x3c0>
 80138d2:	f015 051f 	ands.w	r5, r5, #31
 80138d6:	d0f9      	beq.n	80138cc <__gethex+0x434>
 80138d8:	9b01      	ldr	r3, [sp, #4]
 80138da:	441a      	add	r2, r3
 80138dc:	f1c5 0520 	rsb	r5, r5, #32
 80138e0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80138e4:	f7fd fecc 	bl	8011680 <__hi0bits>
 80138e8:	42a8      	cmp	r0, r5
 80138ea:	dbe6      	blt.n	80138ba <__gethex+0x422>
 80138ec:	e7ee      	b.n	80138cc <__gethex+0x434>
 80138ee:	bf00      	nop
 80138f0:	0801406b 	.word	0x0801406b

080138f4 <L_shift>:
 80138f4:	f1c2 0208 	rsb	r2, r2, #8
 80138f8:	0092      	lsls	r2, r2, #2
 80138fa:	b570      	push	{r4, r5, r6, lr}
 80138fc:	f1c2 0620 	rsb	r6, r2, #32
 8013900:	6843      	ldr	r3, [r0, #4]
 8013902:	6804      	ldr	r4, [r0, #0]
 8013904:	fa03 f506 	lsl.w	r5, r3, r6
 8013908:	432c      	orrs	r4, r5
 801390a:	40d3      	lsrs	r3, r2
 801390c:	6004      	str	r4, [r0, #0]
 801390e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013912:	4288      	cmp	r0, r1
 8013914:	d3f4      	bcc.n	8013900 <L_shift+0xc>
 8013916:	bd70      	pop	{r4, r5, r6, pc}

08013918 <__match>:
 8013918:	b530      	push	{r4, r5, lr}
 801391a:	6803      	ldr	r3, [r0, #0]
 801391c:	3301      	adds	r3, #1
 801391e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013922:	b914      	cbnz	r4, 801392a <__match+0x12>
 8013924:	6003      	str	r3, [r0, #0]
 8013926:	2001      	movs	r0, #1
 8013928:	bd30      	pop	{r4, r5, pc}
 801392a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801392e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013932:	2d19      	cmp	r5, #25
 8013934:	bf98      	it	ls
 8013936:	3220      	addls	r2, #32
 8013938:	42a2      	cmp	r2, r4
 801393a:	d0f0      	beq.n	801391e <__match+0x6>
 801393c:	2000      	movs	r0, #0
 801393e:	e7f3      	b.n	8013928 <__match+0x10>

08013940 <__hexnan>:
 8013940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013944:	680b      	ldr	r3, [r1, #0]
 8013946:	6801      	ldr	r1, [r0, #0]
 8013948:	115e      	asrs	r6, r3, #5
 801394a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801394e:	f013 031f 	ands.w	r3, r3, #31
 8013952:	b087      	sub	sp, #28
 8013954:	bf18      	it	ne
 8013956:	3604      	addne	r6, #4
 8013958:	2500      	movs	r5, #0
 801395a:	1f37      	subs	r7, r6, #4
 801395c:	4682      	mov	sl, r0
 801395e:	4690      	mov	r8, r2
 8013960:	9301      	str	r3, [sp, #4]
 8013962:	f846 5c04 	str.w	r5, [r6, #-4]
 8013966:	46b9      	mov	r9, r7
 8013968:	463c      	mov	r4, r7
 801396a:	9502      	str	r5, [sp, #8]
 801396c:	46ab      	mov	fp, r5
 801396e:	784a      	ldrb	r2, [r1, #1]
 8013970:	1c4b      	adds	r3, r1, #1
 8013972:	9303      	str	r3, [sp, #12]
 8013974:	b342      	cbz	r2, 80139c8 <__hexnan+0x88>
 8013976:	4610      	mov	r0, r2
 8013978:	9105      	str	r1, [sp, #20]
 801397a:	9204      	str	r2, [sp, #16]
 801397c:	f7ff fd77 	bl	801346e <__hexdig_fun>
 8013980:	2800      	cmp	r0, #0
 8013982:	d14f      	bne.n	8013a24 <__hexnan+0xe4>
 8013984:	9a04      	ldr	r2, [sp, #16]
 8013986:	9905      	ldr	r1, [sp, #20]
 8013988:	2a20      	cmp	r2, #32
 801398a:	d818      	bhi.n	80139be <__hexnan+0x7e>
 801398c:	9b02      	ldr	r3, [sp, #8]
 801398e:	459b      	cmp	fp, r3
 8013990:	dd13      	ble.n	80139ba <__hexnan+0x7a>
 8013992:	454c      	cmp	r4, r9
 8013994:	d206      	bcs.n	80139a4 <__hexnan+0x64>
 8013996:	2d07      	cmp	r5, #7
 8013998:	dc04      	bgt.n	80139a4 <__hexnan+0x64>
 801399a:	462a      	mov	r2, r5
 801399c:	4649      	mov	r1, r9
 801399e:	4620      	mov	r0, r4
 80139a0:	f7ff ffa8 	bl	80138f4 <L_shift>
 80139a4:	4544      	cmp	r4, r8
 80139a6:	d950      	bls.n	8013a4a <__hexnan+0x10a>
 80139a8:	2300      	movs	r3, #0
 80139aa:	f1a4 0904 	sub.w	r9, r4, #4
 80139ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80139b2:	f8cd b008 	str.w	fp, [sp, #8]
 80139b6:	464c      	mov	r4, r9
 80139b8:	461d      	mov	r5, r3
 80139ba:	9903      	ldr	r1, [sp, #12]
 80139bc:	e7d7      	b.n	801396e <__hexnan+0x2e>
 80139be:	2a29      	cmp	r2, #41	; 0x29
 80139c0:	d155      	bne.n	8013a6e <__hexnan+0x12e>
 80139c2:	3102      	adds	r1, #2
 80139c4:	f8ca 1000 	str.w	r1, [sl]
 80139c8:	f1bb 0f00 	cmp.w	fp, #0
 80139cc:	d04f      	beq.n	8013a6e <__hexnan+0x12e>
 80139ce:	454c      	cmp	r4, r9
 80139d0:	d206      	bcs.n	80139e0 <__hexnan+0xa0>
 80139d2:	2d07      	cmp	r5, #7
 80139d4:	dc04      	bgt.n	80139e0 <__hexnan+0xa0>
 80139d6:	462a      	mov	r2, r5
 80139d8:	4649      	mov	r1, r9
 80139da:	4620      	mov	r0, r4
 80139dc:	f7ff ff8a 	bl	80138f4 <L_shift>
 80139e0:	4544      	cmp	r4, r8
 80139e2:	d934      	bls.n	8013a4e <__hexnan+0x10e>
 80139e4:	f1a8 0204 	sub.w	r2, r8, #4
 80139e8:	4623      	mov	r3, r4
 80139ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80139ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80139f2:	429f      	cmp	r7, r3
 80139f4:	d2f9      	bcs.n	80139ea <__hexnan+0xaa>
 80139f6:	1b3b      	subs	r3, r7, r4
 80139f8:	f023 0303 	bic.w	r3, r3, #3
 80139fc:	3304      	adds	r3, #4
 80139fe:	3e03      	subs	r6, #3
 8013a00:	3401      	adds	r4, #1
 8013a02:	42a6      	cmp	r6, r4
 8013a04:	bf38      	it	cc
 8013a06:	2304      	movcc	r3, #4
 8013a08:	4443      	add	r3, r8
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	f843 2b04 	str.w	r2, [r3], #4
 8013a10:	429f      	cmp	r7, r3
 8013a12:	d2fb      	bcs.n	8013a0c <__hexnan+0xcc>
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	b91b      	cbnz	r3, 8013a20 <__hexnan+0xe0>
 8013a18:	4547      	cmp	r7, r8
 8013a1a:	d126      	bne.n	8013a6a <__hexnan+0x12a>
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	603b      	str	r3, [r7, #0]
 8013a20:	2005      	movs	r0, #5
 8013a22:	e025      	b.n	8013a70 <__hexnan+0x130>
 8013a24:	3501      	adds	r5, #1
 8013a26:	2d08      	cmp	r5, #8
 8013a28:	f10b 0b01 	add.w	fp, fp, #1
 8013a2c:	dd06      	ble.n	8013a3c <__hexnan+0xfc>
 8013a2e:	4544      	cmp	r4, r8
 8013a30:	d9c3      	bls.n	80139ba <__hexnan+0x7a>
 8013a32:	2300      	movs	r3, #0
 8013a34:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a38:	2501      	movs	r5, #1
 8013a3a:	3c04      	subs	r4, #4
 8013a3c:	6822      	ldr	r2, [r4, #0]
 8013a3e:	f000 000f 	and.w	r0, r0, #15
 8013a42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013a46:	6020      	str	r0, [r4, #0]
 8013a48:	e7b7      	b.n	80139ba <__hexnan+0x7a>
 8013a4a:	2508      	movs	r5, #8
 8013a4c:	e7b5      	b.n	80139ba <__hexnan+0x7a>
 8013a4e:	9b01      	ldr	r3, [sp, #4]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d0df      	beq.n	8013a14 <__hexnan+0xd4>
 8013a54:	f1c3 0320 	rsb	r3, r3, #32
 8013a58:	f04f 32ff 	mov.w	r2, #4294967295
 8013a5c:	40da      	lsrs	r2, r3
 8013a5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013a62:	4013      	ands	r3, r2
 8013a64:	f846 3c04 	str.w	r3, [r6, #-4]
 8013a68:	e7d4      	b.n	8013a14 <__hexnan+0xd4>
 8013a6a:	3f04      	subs	r7, #4
 8013a6c:	e7d2      	b.n	8013a14 <__hexnan+0xd4>
 8013a6e:	2004      	movs	r0, #4
 8013a70:	b007      	add	sp, #28
 8013a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a76 <__ascii_mbtowc>:
 8013a76:	b082      	sub	sp, #8
 8013a78:	b901      	cbnz	r1, 8013a7c <__ascii_mbtowc+0x6>
 8013a7a:	a901      	add	r1, sp, #4
 8013a7c:	b142      	cbz	r2, 8013a90 <__ascii_mbtowc+0x1a>
 8013a7e:	b14b      	cbz	r3, 8013a94 <__ascii_mbtowc+0x1e>
 8013a80:	7813      	ldrb	r3, [r2, #0]
 8013a82:	600b      	str	r3, [r1, #0]
 8013a84:	7812      	ldrb	r2, [r2, #0]
 8013a86:	1e10      	subs	r0, r2, #0
 8013a88:	bf18      	it	ne
 8013a8a:	2001      	movne	r0, #1
 8013a8c:	b002      	add	sp, #8
 8013a8e:	4770      	bx	lr
 8013a90:	4610      	mov	r0, r2
 8013a92:	e7fb      	b.n	8013a8c <__ascii_mbtowc+0x16>
 8013a94:	f06f 0001 	mvn.w	r0, #1
 8013a98:	e7f8      	b.n	8013a8c <__ascii_mbtowc+0x16>

08013a9a <_realloc_r>:
 8013a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a9e:	4680      	mov	r8, r0
 8013aa0:	4614      	mov	r4, r2
 8013aa2:	460e      	mov	r6, r1
 8013aa4:	b921      	cbnz	r1, 8013ab0 <_realloc_r+0x16>
 8013aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aaa:	4611      	mov	r1, r2
 8013aac:	f7fd bc6a 	b.w	8011384 <_malloc_r>
 8013ab0:	b92a      	cbnz	r2, 8013abe <_realloc_r+0x24>
 8013ab2:	f7fd fbf3 	bl	801129c <_free_r>
 8013ab6:	4625      	mov	r5, r4
 8013ab8:	4628      	mov	r0, r5
 8013aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013abe:	f000 f8f1 	bl	8013ca4 <_malloc_usable_size_r>
 8013ac2:	4284      	cmp	r4, r0
 8013ac4:	4607      	mov	r7, r0
 8013ac6:	d802      	bhi.n	8013ace <_realloc_r+0x34>
 8013ac8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013acc:	d812      	bhi.n	8013af4 <_realloc_r+0x5a>
 8013ace:	4621      	mov	r1, r4
 8013ad0:	4640      	mov	r0, r8
 8013ad2:	f7fd fc57 	bl	8011384 <_malloc_r>
 8013ad6:	4605      	mov	r5, r0
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	d0ed      	beq.n	8013ab8 <_realloc_r+0x1e>
 8013adc:	42bc      	cmp	r4, r7
 8013ade:	4622      	mov	r2, r4
 8013ae0:	4631      	mov	r1, r6
 8013ae2:	bf28      	it	cs
 8013ae4:	463a      	movcs	r2, r7
 8013ae6:	f7fc fd2a 	bl	801053e <memcpy>
 8013aea:	4631      	mov	r1, r6
 8013aec:	4640      	mov	r0, r8
 8013aee:	f7fd fbd5 	bl	801129c <_free_r>
 8013af2:	e7e1      	b.n	8013ab8 <_realloc_r+0x1e>
 8013af4:	4635      	mov	r5, r6
 8013af6:	e7df      	b.n	8013ab8 <_realloc_r+0x1e>

08013af8 <__ascii_wctomb>:
 8013af8:	b149      	cbz	r1, 8013b0e <__ascii_wctomb+0x16>
 8013afa:	2aff      	cmp	r2, #255	; 0xff
 8013afc:	bf85      	ittet	hi
 8013afe:	238a      	movhi	r3, #138	; 0x8a
 8013b00:	6003      	strhi	r3, [r0, #0]
 8013b02:	700a      	strbls	r2, [r1, #0]
 8013b04:	f04f 30ff 	movhi.w	r0, #4294967295
 8013b08:	bf98      	it	ls
 8013b0a:	2001      	movls	r0, #1
 8013b0c:	4770      	bx	lr
 8013b0e:	4608      	mov	r0, r1
 8013b10:	4770      	bx	lr

08013b12 <__swhatbuf_r>:
 8013b12:	b570      	push	{r4, r5, r6, lr}
 8013b14:	460c      	mov	r4, r1
 8013b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b1a:	2900      	cmp	r1, #0
 8013b1c:	b096      	sub	sp, #88	; 0x58
 8013b1e:	4615      	mov	r5, r2
 8013b20:	461e      	mov	r6, r3
 8013b22:	da0d      	bge.n	8013b40 <__swhatbuf_r+0x2e>
 8013b24:	89a3      	ldrh	r3, [r4, #12]
 8013b26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013b2a:	f04f 0100 	mov.w	r1, #0
 8013b2e:	bf0c      	ite	eq
 8013b30:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013b34:	2340      	movne	r3, #64	; 0x40
 8013b36:	2000      	movs	r0, #0
 8013b38:	6031      	str	r1, [r6, #0]
 8013b3a:	602b      	str	r3, [r5, #0]
 8013b3c:	b016      	add	sp, #88	; 0x58
 8013b3e:	bd70      	pop	{r4, r5, r6, pc}
 8013b40:	466a      	mov	r2, sp
 8013b42:	f000 f879 	bl	8013c38 <_fstat_r>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	dbec      	blt.n	8013b24 <__swhatbuf_r+0x12>
 8013b4a:	9901      	ldr	r1, [sp, #4]
 8013b4c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013b50:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013b54:	4259      	negs	r1, r3
 8013b56:	4159      	adcs	r1, r3
 8013b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b5c:	e7eb      	b.n	8013b36 <__swhatbuf_r+0x24>

08013b5e <__smakebuf_r>:
 8013b5e:	898b      	ldrh	r3, [r1, #12]
 8013b60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b62:	079d      	lsls	r5, r3, #30
 8013b64:	4606      	mov	r6, r0
 8013b66:	460c      	mov	r4, r1
 8013b68:	d507      	bpl.n	8013b7a <__smakebuf_r+0x1c>
 8013b6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b6e:	6023      	str	r3, [r4, #0]
 8013b70:	6123      	str	r3, [r4, #16]
 8013b72:	2301      	movs	r3, #1
 8013b74:	6163      	str	r3, [r4, #20]
 8013b76:	b002      	add	sp, #8
 8013b78:	bd70      	pop	{r4, r5, r6, pc}
 8013b7a:	ab01      	add	r3, sp, #4
 8013b7c:	466a      	mov	r2, sp
 8013b7e:	f7ff ffc8 	bl	8013b12 <__swhatbuf_r>
 8013b82:	9900      	ldr	r1, [sp, #0]
 8013b84:	4605      	mov	r5, r0
 8013b86:	4630      	mov	r0, r6
 8013b88:	f7fd fbfc 	bl	8011384 <_malloc_r>
 8013b8c:	b948      	cbnz	r0, 8013ba2 <__smakebuf_r+0x44>
 8013b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b92:	059a      	lsls	r2, r3, #22
 8013b94:	d4ef      	bmi.n	8013b76 <__smakebuf_r+0x18>
 8013b96:	f023 0303 	bic.w	r3, r3, #3
 8013b9a:	f043 0302 	orr.w	r3, r3, #2
 8013b9e:	81a3      	strh	r3, [r4, #12]
 8013ba0:	e7e3      	b.n	8013b6a <__smakebuf_r+0xc>
 8013ba2:	89a3      	ldrh	r3, [r4, #12]
 8013ba4:	6020      	str	r0, [r4, #0]
 8013ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013baa:	81a3      	strh	r3, [r4, #12]
 8013bac:	9b00      	ldr	r3, [sp, #0]
 8013bae:	6163      	str	r3, [r4, #20]
 8013bb0:	9b01      	ldr	r3, [sp, #4]
 8013bb2:	6120      	str	r0, [r4, #16]
 8013bb4:	b15b      	cbz	r3, 8013bce <__smakebuf_r+0x70>
 8013bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bba:	4630      	mov	r0, r6
 8013bbc:	f000 f84e 	bl	8013c5c <_isatty_r>
 8013bc0:	b128      	cbz	r0, 8013bce <__smakebuf_r+0x70>
 8013bc2:	89a3      	ldrh	r3, [r4, #12]
 8013bc4:	f023 0303 	bic.w	r3, r3, #3
 8013bc8:	f043 0301 	orr.w	r3, r3, #1
 8013bcc:	81a3      	strh	r3, [r4, #12]
 8013bce:	89a3      	ldrh	r3, [r4, #12]
 8013bd0:	431d      	orrs	r5, r3
 8013bd2:	81a5      	strh	r5, [r4, #12]
 8013bd4:	e7cf      	b.n	8013b76 <__smakebuf_r+0x18>

08013bd6 <_raise_r>:
 8013bd6:	291f      	cmp	r1, #31
 8013bd8:	b538      	push	{r3, r4, r5, lr}
 8013bda:	4604      	mov	r4, r0
 8013bdc:	460d      	mov	r5, r1
 8013bde:	d904      	bls.n	8013bea <_raise_r+0x14>
 8013be0:	2316      	movs	r3, #22
 8013be2:	6003      	str	r3, [r0, #0]
 8013be4:	f04f 30ff 	mov.w	r0, #4294967295
 8013be8:	bd38      	pop	{r3, r4, r5, pc}
 8013bea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013bec:	b112      	cbz	r2, 8013bf4 <_raise_r+0x1e>
 8013bee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013bf2:	b94b      	cbnz	r3, 8013c08 <_raise_r+0x32>
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	f000 f853 	bl	8013ca0 <_getpid_r>
 8013bfa:	462a      	mov	r2, r5
 8013bfc:	4601      	mov	r1, r0
 8013bfe:	4620      	mov	r0, r4
 8013c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c04:	f000 b83a 	b.w	8013c7c <_kill_r>
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	d00a      	beq.n	8013c22 <_raise_r+0x4c>
 8013c0c:	1c59      	adds	r1, r3, #1
 8013c0e:	d103      	bne.n	8013c18 <_raise_r+0x42>
 8013c10:	2316      	movs	r3, #22
 8013c12:	6003      	str	r3, [r0, #0]
 8013c14:	2001      	movs	r0, #1
 8013c16:	e7e7      	b.n	8013be8 <_raise_r+0x12>
 8013c18:	2400      	movs	r4, #0
 8013c1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c1e:	4628      	mov	r0, r5
 8013c20:	4798      	blx	r3
 8013c22:	2000      	movs	r0, #0
 8013c24:	e7e0      	b.n	8013be8 <_raise_r+0x12>
	...

08013c28 <raise>:
 8013c28:	4b02      	ldr	r3, [pc, #8]	; (8013c34 <raise+0xc>)
 8013c2a:	4601      	mov	r1, r0
 8013c2c:	6818      	ldr	r0, [r3, #0]
 8013c2e:	f7ff bfd2 	b.w	8013bd6 <_raise_r>
 8013c32:	bf00      	nop
 8013c34:	20000288 	.word	0x20000288

08013c38 <_fstat_r>:
 8013c38:	b538      	push	{r3, r4, r5, lr}
 8013c3a:	4d07      	ldr	r5, [pc, #28]	; (8013c58 <_fstat_r+0x20>)
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	4604      	mov	r4, r0
 8013c40:	4608      	mov	r0, r1
 8013c42:	4611      	mov	r1, r2
 8013c44:	602b      	str	r3, [r5, #0]
 8013c46:	f7ed fd1e 	bl	8001686 <_fstat>
 8013c4a:	1c43      	adds	r3, r0, #1
 8013c4c:	d102      	bne.n	8013c54 <_fstat_r+0x1c>
 8013c4e:	682b      	ldr	r3, [r5, #0]
 8013c50:	b103      	cbz	r3, 8013c54 <_fstat_r+0x1c>
 8013c52:	6023      	str	r3, [r4, #0]
 8013c54:	bd38      	pop	{r3, r4, r5, pc}
 8013c56:	bf00      	nop
 8013c58:	20002388 	.word	0x20002388

08013c5c <_isatty_r>:
 8013c5c:	b538      	push	{r3, r4, r5, lr}
 8013c5e:	4d06      	ldr	r5, [pc, #24]	; (8013c78 <_isatty_r+0x1c>)
 8013c60:	2300      	movs	r3, #0
 8013c62:	4604      	mov	r4, r0
 8013c64:	4608      	mov	r0, r1
 8013c66:	602b      	str	r3, [r5, #0]
 8013c68:	f7ed fd1d 	bl	80016a6 <_isatty>
 8013c6c:	1c43      	adds	r3, r0, #1
 8013c6e:	d102      	bne.n	8013c76 <_isatty_r+0x1a>
 8013c70:	682b      	ldr	r3, [r5, #0]
 8013c72:	b103      	cbz	r3, 8013c76 <_isatty_r+0x1a>
 8013c74:	6023      	str	r3, [r4, #0]
 8013c76:	bd38      	pop	{r3, r4, r5, pc}
 8013c78:	20002388 	.word	0x20002388

08013c7c <_kill_r>:
 8013c7c:	b538      	push	{r3, r4, r5, lr}
 8013c7e:	4d07      	ldr	r5, [pc, #28]	; (8013c9c <_kill_r+0x20>)
 8013c80:	2300      	movs	r3, #0
 8013c82:	4604      	mov	r4, r0
 8013c84:	4608      	mov	r0, r1
 8013c86:	4611      	mov	r1, r2
 8013c88:	602b      	str	r3, [r5, #0]
 8013c8a:	f7ed fc9d 	bl	80015c8 <_kill>
 8013c8e:	1c43      	adds	r3, r0, #1
 8013c90:	d102      	bne.n	8013c98 <_kill_r+0x1c>
 8013c92:	682b      	ldr	r3, [r5, #0]
 8013c94:	b103      	cbz	r3, 8013c98 <_kill_r+0x1c>
 8013c96:	6023      	str	r3, [r4, #0]
 8013c98:	bd38      	pop	{r3, r4, r5, pc}
 8013c9a:	bf00      	nop
 8013c9c:	20002388 	.word	0x20002388

08013ca0 <_getpid_r>:
 8013ca0:	f7ed bc8a 	b.w	80015b8 <_getpid>

08013ca4 <_malloc_usable_size_r>:
 8013ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ca8:	1f18      	subs	r0, r3, #4
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	bfbc      	itt	lt
 8013cae:	580b      	ldrlt	r3, [r1, r0]
 8013cb0:	18c0      	addlt	r0, r0, r3
 8013cb2:	4770      	bx	lr

08013cb4 <_init>:
 8013cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cb6:	bf00      	nop
 8013cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cba:	bc08      	pop	{r3}
 8013cbc:	469e      	mov	lr, r3
 8013cbe:	4770      	bx	lr

08013cc0 <_fini>:
 8013cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cc2:	bf00      	nop
 8013cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cc6:	bc08      	pop	{r3}
 8013cc8:	469e      	mov	lr, r3
 8013cca:	4770      	bx	lr
