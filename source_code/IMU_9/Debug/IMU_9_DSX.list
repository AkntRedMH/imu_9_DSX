
IMU_9_DSX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013abc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  08013ca0  08013ca0  00023ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014374  08014374  000303f8  2**0
                  CONTENTS
  4 .ARM          00000008  08014374  08014374  00024374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801437c  0801437c  000303f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801437c  0801437c  0002437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014380  08014380  00024380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  08014384  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa0  200003f8  0801477c  000303f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20002398  0801477c  00032398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027031  00000000  00000000  0003046b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006343  00000000  00000000  0005749c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f38  00000000  00000000  0005d7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e6  00000000  00000000  0005f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bd4  00000000  00000000  00060efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d1df  00000000  00000000  00086ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2585  00000000  00000000  000b3cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000095ec  00000000  00000000  00186238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0018f824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003f8 	.word	0x200003f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013c84 	.word	0x08013c84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003fc 	.word	0x200003fc
 800021c:	08013c84 	.word	0x08013c84

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a6 	b.w	800105c <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9e08      	ldr	r6, [sp, #32]
 8000d9a:	460d      	mov	r5, r1
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	460f      	mov	r7, r1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d14a      	bne.n	8000e3a <__udivmoddi4+0xa6>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4694      	mov	ip, r2
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0xe2>
 8000daa:	fab2 f382 	clz	r3, r2
 8000dae:	b143      	cbz	r3, 8000dc2 <__udivmoddi4+0x2e>
 8000db0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db4:	f1c3 0220 	rsb	r2, r3, #32
 8000db8:	409f      	lsls	r7, r3
 8000dba:	fa20 f202 	lsr.w	r2, r0, r2
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	409c      	lsls	r4, r3
 8000dc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dc6:	fa1f f58c 	uxth.w	r5, ip
 8000dca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dce:	0c22      	lsrs	r2, r4, #16
 8000dd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dd8:	fb01 f005 	mul.w	r0, r1, r5
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x62>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000de8:	f080 811c 	bcs.w	8001024 <__udivmoddi4+0x290>
 8000dec:	4290      	cmp	r0, r2
 8000dee:	f240 8119 	bls.w	8001024 <__udivmoddi4+0x290>
 8000df2:	3902      	subs	r1, #2
 8000df4:	4462      	add	r2, ip
 8000df6:	1a12      	subs	r2, r2, r0
 8000df8:	b2a4      	uxth	r4, r4
 8000dfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e06:	fb00 f505 	mul.w	r5, r0, r5
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	d90a      	bls.n	8000e24 <__udivmoddi4+0x90>
 8000e0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e16:	f080 8107 	bcs.w	8001028 <__udivmoddi4+0x294>
 8000e1a:	42a5      	cmp	r5, r4
 8000e1c:	f240 8104 	bls.w	8001028 <__udivmoddi4+0x294>
 8000e20:	4464      	add	r4, ip
 8000e22:	3802      	subs	r0, #2
 8000e24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	b11e      	cbz	r6, 8000e36 <__udivmoddi4+0xa2>
 8000e2e:	40dc      	lsrs	r4, r3
 8000e30:	2300      	movs	r3, #0
 8000e32:	e9c6 4300 	strd	r4, r3, [r6]
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0xbc>
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	f000 80ed 	beq.w	800101e <__udivmoddi4+0x28a>
 8000e44:	2100      	movs	r1, #0
 8000e46:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e50:	fab3 f183 	clz	r1, r3
 8000e54:	2900      	cmp	r1, #0
 8000e56:	d149      	bne.n	8000eec <__udivmoddi4+0x158>
 8000e58:	42ab      	cmp	r3, r5
 8000e5a:	d302      	bcc.n	8000e62 <__udivmoddi4+0xce>
 8000e5c:	4282      	cmp	r2, r0
 8000e5e:	f200 80f8 	bhi.w	8001052 <__udivmoddi4+0x2be>
 8000e62:	1a84      	subs	r4, r0, r2
 8000e64:	eb65 0203 	sbc.w	r2, r5, r3
 8000e68:	2001      	movs	r0, #1
 8000e6a:	4617      	mov	r7, r2
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d0e2      	beq.n	8000e36 <__udivmoddi4+0xa2>
 8000e70:	e9c6 4700 	strd	r4, r7, [r6]
 8000e74:	e7df      	b.n	8000e36 <__udivmoddi4+0xa2>
 8000e76:	b902      	cbnz	r2, 8000e7a <__udivmoddi4+0xe6>
 8000e78:	deff      	udf	#255	; 0xff
 8000e7a:	fab2 f382 	clz	r3, r2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f040 8090 	bne.w	8000fa4 <__udivmoddi4+0x210>
 8000e84:	1a8a      	subs	r2, r1, r2
 8000e86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8a:	fa1f fe8c 	uxth.w	lr, ip
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e94:	fb07 2015 	mls	r0, r7, r5, r2
 8000e98:	0c22      	lsrs	r2, r4, #16
 8000e9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x124>
 8000ea6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eaa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x122>
 8000eb0:	4290      	cmp	r0, r2
 8000eb2:	f200 80cb 	bhi.w	800104c <__udivmoddi4+0x2b8>
 8000eb6:	4645      	mov	r5, r8
 8000eb8:	1a12      	subs	r2, r2, r0
 8000eba:	b2a4      	uxth	r4, r4
 8000ebc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ec8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x14e>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ed8:	d202      	bcs.n	8000ee0 <__udivmoddi4+0x14c>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f200 80bb 	bhi.w	8001056 <__udivmoddi4+0x2c2>
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	eba4 040e 	sub.w	r4, r4, lr
 8000ee6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eea:	e79f      	b.n	8000e2c <__udivmoddi4+0x98>
 8000eec:	f1c1 0720 	rsb	r7, r1, #32
 8000ef0:	408b      	lsls	r3, r1
 8000ef2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ef6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efa:	fa05 f401 	lsl.w	r4, r5, r1
 8000efe:	fa20 f307 	lsr.w	r3, r0, r7
 8000f02:	40fd      	lsrs	r5, r7
 8000f04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f08:	4323      	orrs	r3, r4
 8000f0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f0e:	fa1f fe8c 	uxth.w	lr, ip
 8000f12:	fb09 5518 	mls	r5, r9, r8, r5
 8000f16:	0c1c      	lsrs	r4, r3, #16
 8000f18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f20:	42a5      	cmp	r5, r4
 8000f22:	fa02 f201 	lsl.w	r2, r2, r1
 8000f26:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2a:	d90b      	bls.n	8000f44 <__udivmoddi4+0x1b0>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f34:	f080 8088 	bcs.w	8001048 <__udivmoddi4+0x2b4>
 8000f38:	42a5      	cmp	r5, r4
 8000f3a:	f240 8085 	bls.w	8001048 <__udivmoddi4+0x2b4>
 8000f3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f42:	4464      	add	r4, ip
 8000f44:	1b64      	subs	r4, r4, r5
 8000f46:	b29d      	uxth	r5, r3
 8000f48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x1da>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f64:	d26c      	bcs.n	8001040 <__udivmoddi4+0x2ac>
 8000f66:	45a6      	cmp	lr, r4
 8000f68:	d96a      	bls.n	8001040 <__udivmoddi4+0x2ac>
 8000f6a:	3b02      	subs	r3, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f72:	fba3 9502 	umull	r9, r5, r3, r2
 8000f76:	eba4 040e 	sub.w	r4, r4, lr
 8000f7a:	42ac      	cmp	r4, r5
 8000f7c:	46c8      	mov	r8, r9
 8000f7e:	46ae      	mov	lr, r5
 8000f80:	d356      	bcc.n	8001030 <__udivmoddi4+0x29c>
 8000f82:	d053      	beq.n	800102c <__udivmoddi4+0x298>
 8000f84:	b156      	cbz	r6, 8000f9c <__udivmoddi4+0x208>
 8000f86:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f92:	40ca      	lsrs	r2, r1
 8000f94:	40cc      	lsrs	r4, r1
 8000f96:	4317      	orrs	r7, r2
 8000f98:	e9c6 7400 	strd	r7, r4, [r6]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa4:	f1c3 0120 	rsb	r1, r3, #32
 8000fa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fac:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb4:	409d      	lsls	r5, r3
 8000fb6:	432a      	orrs	r2, r5
 8000fb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fbc:	fa1f fe8c 	uxth.w	lr, ip
 8000fc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fce:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd2:	428d      	cmp	r5, r1
 8000fd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fd8:	d908      	bls.n	8000fec <__udivmoddi4+0x258>
 8000fda:	eb1c 0101 	adds.w	r1, ip, r1
 8000fde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe2:	d22f      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8000fe4:	428d      	cmp	r5, r1
 8000fe6:	d92d      	bls.n	8001044 <__udivmoddi4+0x2b0>
 8000fe8:	3802      	subs	r0, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	1b49      	subs	r1, r1, r5
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ff8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ffc:	fb05 f10e 	mul.w	r1, r5, lr
 8001000:	4291      	cmp	r1, r2
 8001002:	d908      	bls.n	8001016 <__udivmoddi4+0x282>
 8001004:	eb1c 0202 	adds.w	r2, ip, r2
 8001008:	f105 38ff 	add.w	r8, r5, #4294967295
 800100c:	d216      	bcs.n	800103c <__udivmoddi4+0x2a8>
 800100e:	4291      	cmp	r1, r2
 8001010:	d914      	bls.n	800103c <__udivmoddi4+0x2a8>
 8001012:	3d02      	subs	r5, #2
 8001014:	4462      	add	r2, ip
 8001016:	1a52      	subs	r2, r2, r1
 8001018:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800101c:	e738      	b.n	8000e90 <__udivmoddi4+0xfc>
 800101e:	4631      	mov	r1, r6
 8001020:	4630      	mov	r0, r6
 8001022:	e708      	b.n	8000e36 <__udivmoddi4+0xa2>
 8001024:	4639      	mov	r1, r7
 8001026:	e6e6      	b.n	8000df6 <__udivmoddi4+0x62>
 8001028:	4610      	mov	r0, r2
 800102a:	e6fb      	b.n	8000e24 <__udivmoddi4+0x90>
 800102c:	4548      	cmp	r0, r9
 800102e:	d2a9      	bcs.n	8000f84 <__udivmoddi4+0x1f0>
 8001030:	ebb9 0802 	subs.w	r8, r9, r2
 8001034:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001038:	3b01      	subs	r3, #1
 800103a:	e7a3      	b.n	8000f84 <__udivmoddi4+0x1f0>
 800103c:	4645      	mov	r5, r8
 800103e:	e7ea      	b.n	8001016 <__udivmoddi4+0x282>
 8001040:	462b      	mov	r3, r5
 8001042:	e794      	b.n	8000f6e <__udivmoddi4+0x1da>
 8001044:	4640      	mov	r0, r8
 8001046:	e7d1      	b.n	8000fec <__udivmoddi4+0x258>
 8001048:	46d0      	mov	r8, sl
 800104a:	e77b      	b.n	8000f44 <__udivmoddi4+0x1b0>
 800104c:	3d02      	subs	r5, #2
 800104e:	4462      	add	r2, ip
 8001050:	e732      	b.n	8000eb8 <__udivmoddi4+0x124>
 8001052:	4608      	mov	r0, r1
 8001054:	e70a      	b.n	8000e6c <__udivmoddi4+0xd8>
 8001056:	4464      	add	r4, ip
 8001058:	3802      	subs	r0, #2
 800105a:	e742      	b.n	8000ee2 <__udivmoddi4+0x14e>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <MX_GPIO_Init+0xd0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <MX_GPIO_Init+0xd0>)
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_GPIO_Init+0xd0>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_GPIO_Init+0xd0>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <MX_GPIO_Init+0xd0>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <MX_GPIO_Init+0xd0>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_GPIO_Init+0xd0>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_R_Pin|RGB_G_Pin|RGB_B_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2107      	movs	r1, #7
 80010da:	4816      	ldr	r0, [pc, #88]	; (8001134 <MX_GPIO_Init+0xd4>)
 80010dc:	f001 faea 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f001 fae4 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin;
 80010ec:	2307      	movs	r3, #7
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <MX_GPIO_Init+0xd4>)
 8001104:	f001 f954 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f001 f945 	bl	80023b0 <HAL_GPIO_Init>

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	48000800 	.word	0x48000800

08001138 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_I2C1_Init+0x80>)
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <MX_I2C1_Init+0x84>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802172;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001144:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <MX_I2C1_Init+0x88>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_I2C1_Init+0x80>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001150:	2201      	movs	r2, #1
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_I2C1_Init+0x80>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x80>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001172:	4811      	ldr	r0, [pc, #68]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001174:	f001 fad0 	bl	8002718 <HAL_I2C_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117e:	f000 f9a5 	bl	80014cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001186:	f002 f853 	bl	8003230 <HAL_I2CEx_ConfigAnalogFilter>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001190:	f000 f99c 	bl	80014cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <MX_I2C1_Init+0x80>)
 8001198:	f002 f895 	bl	80032c6 <HAL_I2CEx_ConfigDigitalFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 f993 	bl	80014cc <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_I2C1_Init+0x8c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <MX_I2C1_Init+0x8c>)
 80011ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011b0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000414 	.word	0x20000414
 80011bc:	40005400 	.word	0x40005400
 80011c0:	00802172 	.word	0x00802172
 80011c4:	40010000 	.word	0x40010000

080011c8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_I2C3_Init+0x80>)
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <MX_I2C3_Init+0x84>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00802C78;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <MX_I2C3_Init+0x80>)
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <MX_I2C3_Init+0x88>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_I2C3_Init+0x80>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_I2C3_Init+0x80>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_I2C3_Init+0x80>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_I2C3_Init+0x80>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_I2C3_Init+0x80>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_I2C3_Init+0x80>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C3_Init+0x80>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <MX_I2C3_Init+0x80>)
 8001204:	f001 fa88 	bl	8002718 <HAL_I2C_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800120e:	f000 f95d 	bl	80014cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_I2C3_Init+0x80>)
 8001218:	f002 f80a 	bl	8003230 <HAL_I2CEx_ConfigAnalogFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001222:	f000 f953 	bl	80014cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001226:	2100      	movs	r1, #0
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <MX_I2C3_Init+0x80>)
 800122a:	f002 f84c 	bl	80032c6 <HAL_I2CEx_ConfigDigitalFilter>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001234:	f000 f94a 	bl	80014cc <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C3);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_I2C3_Init+0x8c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <MX_I2C3_Init+0x8c>)
 800123e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001242:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000468 	.word	0x20000468
 800124c:	40007800 	.word	0x40007800
 8001250:	00802c78 	.word	0x00802c78
 8001254:	40010000 	.word	0x40010000

08001258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09e      	sub	sp, #120	; 0x78
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	2244      	movs	r2, #68	; 0x44
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f00f f851 	bl	8010320 <memset>
  if(i2cHandle->Instance==I2C1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <HAL_I2C_MspInit+0x198>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d154      	bne.n	8001332 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001288:	2340      	movs	r3, #64	; 0x40
 800128a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800128c:	2300      	movs	r3, #0
 800128e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f004 fb79 	bl	800598c <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012a0:	f000 f914 	bl	80014cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	4a4c      	ldr	r2, [pc, #304]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c8:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 80012d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012da:	2312      	movs	r3, #18
 80012dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e6:	2304      	movs	r3, #4
 80012e8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f001 f85c 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fc:	2312      	movs	r3, #18
 80012fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001308:	2304      	movs	r3, #4
 800130a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001310:	4619      	mov	r1, r3
 8001312:	4839      	ldr	r0, [pc, #228]	; (80013f8 <HAL_I2C_MspInit+0x1a0>)
 8001314:	f001 f84c 	bl	80023b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 800131e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001322:	6593      	str	r3, [r2, #88]	; 0x58
 8001324:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001330:	e05a      	b.n	80013e8 <HAL_I2C_MspInit+0x190>
  else if(i2cHandle->Instance==I2C3)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a31      	ldr	r2, [pc, #196]	; (80013fc <HAL_I2C_MspInit+0x1a4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d155      	bne.n	80013e8 <HAL_I2C_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800133c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001340:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001342:	2300      	movs	r3, #0
 8001344:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fb1e 	bl	800598c <HAL_RCCEx_PeriphCLKConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_MspInit+0x102>
      Error_Handler();
 8001356:	f000 f8b9 	bl	80014cc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a25      	ldr	r2, [pc, #148]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AG_SDA_Pin;
 800138a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800139c:	2308      	movs	r3, #8
 800139e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(AG_SDA_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013a4:	4619      	mov	r1, r3
 80013a6:	4816      	ldr	r0, [pc, #88]	; (8001400 <HAL_I2C_MspInit+0x1a8>)
 80013a8:	f001 f802 	bl	80023b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AG_SCL_Pin;
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80013be:	2302      	movs	r3, #2
 80013c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(AG_SCL_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f000 fff0 	bl	80023b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80013d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013da:	6593      	str	r3, [r2, #88]	; 0x58
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_I2C_MspInit+0x19c>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
}
 80013e8:	bf00      	nop
 80013ea:	3778      	adds	r7, #120	; 0x78
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	40007800 	.word	0x40007800
 8001400:	48000800 	.word	0x48000800

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 faf3 	bl	80019f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f813 	bl	8001436 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f7ff fe26 	bl	8001060 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001414:	f7ff fe90 	bl	8001138 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001418:	f7ff fed6 	bl	80011c8 <MX_I2C3_Init>
  MX_TIM2_Init();
 800141c:	f000 f9a0 	bl	8001760 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001420:	f000 fa10 	bl	8001844 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001424:	f00a fb78 	bl	800bb18 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  user_shell_init();
 8001428:	f00d fb46 	bl	800eab8 <user_shell_init>
  imu_init();
 800142c:	f00d fc68 	bl	800ed00 <imu_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  imu_9_shell_cmd_to_do();
 8001430:	f00d fde0 	bl	800eff4 <imu_9_shell_cmd_to_do>
 8001434:	e7fc      	b.n	8001430 <main+0x2c>

08001436 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b094      	sub	sp, #80	; 0x50
 800143a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	2238      	movs	r2, #56	; 0x38
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00e ff6b 	bl	8010320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001458:	2000      	movs	r0, #0
 800145a:	f003 fcb5 	bl	8004dc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800145e:	2321      	movs	r3, #33	; 0x21
 8001460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001466:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001468:	2301      	movs	r3, #1
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146c:	2302      	movs	r3, #2
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001470:	2303      	movs	r3, #3
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001474:	2306      	movs	r3, #6
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001478:	2355      	movs	r3, #85	; 0x55
 800147a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001480:	2302      	movs	r3, #2
 8001482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001484:	2302      	movs	r3, #2
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fd4f 	bl	8004f30 <HAL_RCC_OscConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001498:	f000 f818 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149c:	230f      	movs	r3, #15
 800149e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a0:	2303      	movs	r3, #3
 80014a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2104      	movs	r1, #4
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 f84d 	bl	8005554 <HAL_RCC_ClockConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014c0:	f000 f804 	bl	80014cc <Error_Handler>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3750      	adds	r7, #80	; 0x50
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <HAL_MspInit+0x44>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_MspInit+0x44>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_MspInit+0x44>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_MspInit+0x44>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800150e:	f003 fcff 	bl	8004f10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001524:	e7fe      	b.n	8001524 <NMI_Handler+0x4>

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 fa94 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <USB_LP_IRQHandler+0x10>)
 800157a:	f001 ffe0 	bl	800353e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000127c 	.word	0x2000127c

08001588 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <TIM2_IRQHandler+0x10>)
 800158e:	f004 fcaf 	bl	8005ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200004c0 	.word	0x200004c0

0800159c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <USART1_IRQHandler+0x10>)
 80015a2:	f005 f967 	bl	8006874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000050c 	.word	0x2000050c

080015b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_kill>:

int _kill(int pid, int sig)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ca:	f00e ff6d 	bl	80104a8 <__errno>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2216      	movs	r2, #22
 80015d2:	601a      	str	r2, [r3, #0]
  return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_exit>:

void _exit (int status)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffe7 	bl	80015c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015f2:	e7fe      	b.n	80015f2 <_exit+0x12>

080015f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e00a      	b.n	800161c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001606:	f3af 8000 	nop.w
 800160a:	4601      	mov	r1, r0
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	60ba      	str	r2, [r7, #8]
 8001612:	b2ca      	uxtb	r2, r1
 8001614:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf0      	blt.n	8001606 <_read+0x12>
  }

  return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e009      	b.n	8001654 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf1      	blt.n	8001640 <_write+0x12>
  }
  return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_close>:

int _close(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168e:	605a      	str	r2, [r3, #4]
  return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_isatty>:

int _isatty(int file)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f00e fed2 	bl	80104a8 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20008000 	.word	0x20008000
 8001730:	00000800 	.word	0x00000800
 8001734:	200004bc 	.word	0x200004bc
 8001738:	20002398 	.word	0x20002398

0800173c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_TIM2_Init+0x98>)
 8001780:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001784:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_TIM2_Init+0x98>)
 8001788:	22a9      	movs	r2, #169	; 0xa9
 800178a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_TIM2_Init+0x98>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_TIM2_Init+0x98>)
 8001794:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001798:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_TIM2_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017a8:	f004 fae0 	bl	8005d6c <HAL_TIM_Base_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017b2:	f7ff fe8b 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017c4:	f004 fce4 	bl	8006190 <HAL_TIM_ConfigClockSource>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017ce:	f7ff fe7d 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017e0:	f004 ff30 	bl	8006644 <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017ea:	f7ff fe6f 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200004c0 	.word	0x200004c0

080017fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d113      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_TIM_Base_MspInit+0x44>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_TIM_Base_MspInit+0x44>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x44>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	201c      	movs	r0, #28
 800182c:	f000 fa4f 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001830:	201c      	movs	r0, #28
 8001832:	f000 fa66 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000

08001844 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800184a:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <MX_USART1_UART_Init+0x94>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001850:	4a22      	ldr	r2, [pc, #136]	; (80018dc <MX_USART1_UART_Init+0x98>)
 8001852:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001868:	220c      	movs	r2, #12
 800186a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188a:	4812      	ldr	r0, [pc, #72]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800188c:	f004 ffa2 	bl	80067d4 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001896:	f7ff fe19 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800189a:	2100      	movs	r1, #0
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800189e:	f006 f8b0 	bl	8007a02 <HAL_UARTEx_SetTxFifoThreshold>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80018a8:	f7ff fe10 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ac:	2100      	movs	r1, #0
 80018ae:	4809      	ldr	r0, [pc, #36]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 80018b0:	f006 f8e5 	bl	8007a7e <HAL_UARTEx_SetRxFifoThreshold>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80018ba:	f7ff fe07 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 80018c0:	f006 f866 	bl	8007990 <HAL_UARTEx_DisableFifoMode>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80018ca:	f7ff fdff 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000050c 	.word	0x2000050c
 80018d8:	40013800 	.word	0x40013800
 80018dc:	001e8480 	.word	0x001e8480

080018e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b09a      	sub	sp, #104	; 0x68
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	2244      	movs	r2, #68	; 0x44
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f00e fd0d 	bl	8010320 <memset>
  if(uartHandle->Instance==USART1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a23      	ldr	r2, [pc, #140]	; (8001998 <HAL_UART_MspInit+0xb8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d13f      	bne.n	8001990 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4618      	mov	r0, r3
 800191e:	f004 f835 	bl	800598c <HAL_RCCEx_PeriphCLKConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001928:	f7ff fdd0 	bl	80014cc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_UART_MspInit+0xbc>)
 800192e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_UART_MspInit+0xbc>)
 8001932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001936:	6613      	str	r3, [r2, #96]	; 0x60
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_UART_MspInit+0xbc>)
 800193a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_UART_MspInit+0xbc>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_UART_MspInit+0xbc>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_UART_MspInit+0xbc>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800195c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001960:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800196e:	2307      	movs	r3, #7
 8001970:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f000 fd18 	bl	80023b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2101      	movs	r1, #1
 8001984:	2025      	movs	r0, #37	; 0x25
 8001986:	f000 f9a2 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800198a:	2025      	movs	r0, #37	; 0x25
 800198c:	f000 f9b9 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001990:	bf00      	nop
 8001992:	3768      	adds	r7, #104	; 0x68
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40013800 	.word	0x40013800
 800199c:	40021000 	.word	0x40021000

080019a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a4:	f7ff feca 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopForever+0x6>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopForever+0xe>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopForever+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f00e fd71 	bl	80104b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d2:	f7ff fd17 	bl	8001404 <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
  ldr   r0, =_estack
 80019d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200003f8 	.word	0x200003f8
  ldr r2, =_sidata
 80019e4:	08014384 	.word	0x08014384
  ldr r2, =_sbss
 80019e8:	200003f8 	.word	0x200003f8
  ldr r4, =_ebss
 80019ec:	20002398 	.word	0x20002398

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>

080019f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 f95b 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a02:	200f      	movs	r0, #15
 8001a04:	f000 f80e 	bl	8001a24 <HAL_InitTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	e001      	b.n	8001a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a14:	f7ff fd60 	bl	80014d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a18:	79fb      	ldrb	r3, [r7, #7]

}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_InitTick+0x68>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d022      	beq.n	8001a7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_InitTick+0x6c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_InitTick+0x68>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 f966 	bl	8001d1e <HAL_SYSTICK_Config>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10f      	bne.n	8001a78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	d809      	bhi.n	8001a72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	f04f 30ff 	mov.w	r0, #4294967295
 8001a66:	f000 f932 	bl	8001cce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_InitTick+0x70>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e007      	b.n	8001a82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e004      	b.n	8001a82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e001      	b.n	8001a82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001aa8:	6013      	str	r3, [r2, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	200005a0 	.word	0x200005a0
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200005a0 	.word	0x200005a0

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff ffee 	bl	8001abc <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d004      	beq.n	8001af8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_Delay+0x40>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af8:	bf00      	nop
 8001afa:	f7ff ffdf 	bl	8001abc <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d8f7      	bhi.n	8001afa <HAL_Delay+0x26>
  {
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000008 	.word	0x20000008

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff40 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff90 	bl	8001c0c <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5f 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff33 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa4 	bl	8001c74 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d005      	beq.n	8001d5a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2204      	movs	r2, #4
 8001d52:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e037      	b.n	8001dca <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 020e 	bic.w	r2, r2, #14
 8001d68:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d78:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f003 021f 	and.w	r2, r3, #31
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001da6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00c      	beq.n	8001dca <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dbe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dc8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d00d      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2204      	movs	r2, #4
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	e047      	b.n	8001eac <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 020e 	bic.w	r2, r2, #14
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e68:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00c      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
    }
  }
  return status;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_FLASH_Program+0xd0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_FLASH_Program+0x1e>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e053      	b.n	8001f7e <HAL_FLASH_Program+0xc6>
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <HAL_FLASH_Program+0xd0>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001edc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ee0:	f000 f892 	bl	8002008 <FLASH_WaitForLastOperation>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d143      	bne.n	8001f76 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_FLASH_Program+0xd0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_FLASH_Program+0xd4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_FLASH_Program+0xd4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_FLASH_Program+0xd4>)
 8001f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f0a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_FLASH_Program+0xd0>)
 8001f0e:	2202      	movs	r2, #2
 8001f10:	771a      	strb	r2, [r3, #28]
 8001f12:	e002      	b.n	8001f1a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_FLASH_Program+0xd0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f24:	68b8      	ldr	r0, [r7, #8]
 8001f26:	f000 f8c3 	bl	80020b0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e010      	b.n	8001f52 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d002      	beq.n	8001f3c <HAL_FLASH_Program+0x84>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d10a      	bne.n	8001f52 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	68b8      	ldr	r0, [r7, #8]
 8001f42:	f000 f8db 	bl	80020fc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d102      	bne.n	8001f52 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001f4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f50:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f56:	f000 f857 	bl	8002008 <FLASH_WaitForLastOperation>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_FLASH_Program+0xd4>)
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	4907      	ldr	r1, [pc, #28]	; (8001f8c <HAL_FLASH_Program+0xd4>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001f72:	f000 f9d3 	bl	800231c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_FLASH_Program+0xd0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000000c 	.word	0x2000000c
 8001f8c:	40022000 	.word	0x40022000

08001f90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_FLASH_Unlock+0x38>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da0b      	bge.n	8001fba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_FLASH_Unlock+0x38>)
 8001fa4:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_FLASH_Unlock+0x3c>)
 8001fa6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_FLASH_Unlock+0x38>)
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_FLASH_Unlock+0x40>)
 8001fac:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_FLASH_Unlock+0x38>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da01      	bge.n	8001fba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001fba:	79fb      	ldrb	r3, [r7, #7]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	45670123 	.word	0x45670123
 8001fd0:	cdef89ab 	.word	0xcdef89ab

08001fd4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_FLASH_Lock+0x30>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_FLASH_Lock+0x30>)
 8001fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fe8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_FLASH_Lock+0x30>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da01      	bge.n	8001ff6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40022000 	.word	0x40022000

08002008 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff fd54 	bl	8001abc <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002016:	e009      	b.n	800202c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002018:	f7ff fd50 	bl	8001abc <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d201      	bcs.n	800202c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e038      	b.n	800209e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <FLASH_WaitForLastOperation+0xa0>)
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d0ee      	beq.n	8002018 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <FLASH_WaitForLastOperation+0xa0>)
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002042:	4013      	ands	r3, r2
 8002044:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01e      	beq.n	800208a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <FLASH_WaitForLastOperation+0xa4>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <FLASH_WaitForLastOperation+0xa4>)
 8002056:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <FLASH_WaitForLastOperation+0x6a>
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <FLASH_WaitForLastOperation+0xa0>)
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <FLASH_WaitForLastOperation+0xa0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	618b      	str	r3, [r1, #24]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <FLASH_WaitForLastOperation+0x7e>
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <FLASH_WaitForLastOperation+0xa0>)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002084:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e009      	b.n	800209e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <FLASH_WaitForLastOperation+0xa0>)
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d102      	bne.n	800209c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <FLASH_WaitForLastOperation+0xa0>)
 8002098:	2201      	movs	r2, #1
 800209a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40022000 	.word	0x40022000
 80020ac:	2000000c 	.word	0x2000000c

080020b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <FLASH_Program_DoubleWord+0x48>)
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <FLASH_Program_DoubleWord+0x48>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80020ce:	f3bf 8f6f 	isb	sy
}
 80020d2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80020d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	000a      	movs	r2, r1
 80020e2:	2300      	movs	r3, #0
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	3104      	adds	r1, #4
 80020e8:	4613      	mov	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40022000 	.word	0x40022000

080020fc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002106:	2340      	movs	r3, #64	; 0x40
 8002108:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <FLASH_Program_Fast+0x68>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <FLASH_Program_Fast+0x68>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211e:	f3ef 8310 	mrs	r3, PRIMASK
 8002122:	60fb      	str	r3, [r7, #12]
  return(result);
 8002124:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002128:	b672      	cpsid	i
}
 800212a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	3304      	adds	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3304      	adds	r3, #4
 800213e:	617b      	str	r3, [r7, #20]
    row_index--;
 8002140:	7ffb      	ldrb	r3, [r7, #31]
 8002142:	3b01      	subs	r3, #1
 8002144:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8002146:	7ffb      	ldrb	r3, [r7, #31]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ef      	bne.n	800212c <FLASH_Program_Fast+0x30>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f383 8810 	msr	PRIMASK, r3
}
 8002156:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002158:	bf00      	nop
 800215a:	3724      	adds	r7, #36	; 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_FLASHEx_Erase+0x128>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_FLASHEx_Erase+0x16>
 800217a:	2302      	movs	r3, #2
 800217c:	e083      	b.n	8002286 <HAL_FLASHEx_Erase+0x11e>
 800217e:	4b44      	ldr	r3, [pc, #272]	; (8002290 <HAL_FLASHEx_Erase+0x128>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002188:	f7ff ff3e 	bl	8002008 <FLASH_WaitForLastOperation>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d173      	bne.n	800227e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002196:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_FLASHEx_Erase+0x128>)
 8002198:	2200      	movs	r2, #0
 800219a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800219c:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80021b4:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a36      	ldr	r2, [pc, #216]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 80021ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021be:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_FLASHEx_Erase+0x128>)
 80021c2:	2203      	movs	r2, #3
 80021c4:	771a      	strb	r2, [r3, #28]
 80021c6:	e016      	b.n	80021f6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_FLASHEx_Erase+0x128>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	771a      	strb	r2, [r3, #28]
 80021ce:	e012      	b.n	80021f6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2c      	ldr	r2, [pc, #176]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 80021e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_FLASHEx_Erase+0x128>)
 80021ea:	2202      	movs	r2, #2
 80021ec:	771a      	strb	r2, [r3, #28]
 80021ee:	e002      	b.n	80021f6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_FLASHEx_Erase+0x128>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d111      	bne.n	8002222 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f848 	bl	8002298 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800220c:	f7ff fefc 	bl	8002008 <FLASH_WaitForLastOperation>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 800221a:	f023 0304 	bic.w	r3, r3, #4
 800221e:	6153      	str	r3, [r2, #20]
 8002220:	e02b      	b.n	800227a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	e01b      	b.n	800226a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4619      	mov	r1, r3
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f000 f84b 	bl	80022d4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800223e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002242:	f7ff fee1 	bl	8002008 <FLASH_WaitForLastOperation>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HAL_FLASHEx_Erase+0x12c>)
 8002250:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8002254:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	601a      	str	r2, [r3, #0]
          break;
 8002262:	e00a      	b.n	800227a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	3301      	adds	r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4413      	add	r3, r2
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d3db      	bcc.n	8002232 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800227a:	f000 f84f 	bl	800231c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_FLASHEx_Erase+0x128>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]

  return status;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000000c 	.word	0x2000000c
 8002294:	40022000 	.word	0x40022000

08002298 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <FLASH_MassErase+0x38>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <FLASH_MassErase+0x38>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <FLASH_MassErase+0x38>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <FLASH_MassErase+0x38>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6153      	str	r3, [r2, #20]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000

080022d4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <FLASH_PageErase+0x44>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80022ee:	490a      	ldr	r1, [pc, #40]	; (8002318 <FLASH_PageErase+0x44>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <FLASH_PageErase+0x44>)
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	4a07      	ldr	r2, [pc, #28]	; (8002318 <FLASH_PageErase+0x44>)
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <FLASH_PageErase+0x44>)
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <FLASH_PageErase+0x44>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230a:	6153      	str	r3, [r2, #20]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40022000 	.word	0x40022000

0800231c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <FLASH_FlushCaches+0x8c>)
 8002324:	7f1b      	ldrb	r3, [r3, #28]
 8002326:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d002      	beq.n	8002334 <FLASH_FlushCaches+0x18>
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d117      	bne.n	8002364 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <FLASH_FlushCaches+0x90>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <FLASH_FlushCaches+0x90>)
 800233a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800233e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <FLASH_FlushCaches+0x90>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <FLASH_FlushCaches+0x90>)
 8002346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <FLASH_FlushCaches+0x90>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a16      	ldr	r2, [pc, #88]	; (80023ac <FLASH_FlushCaches+0x90>)
 8002352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002356:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <FLASH_FlushCaches+0x90>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a13      	ldr	r2, [pc, #76]	; (80023ac <FLASH_FlushCaches+0x90>)
 800235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002362:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d002      	beq.n	8002370 <FLASH_FlushCaches+0x54>
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d111      	bne.n	8002394 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <FLASH_FlushCaches+0x90>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <FLASH_FlushCaches+0x90>)
 8002376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <FLASH_FlushCaches+0x90>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <FLASH_FlushCaches+0x90>)
 8002382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002386:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <FLASH_FlushCaches+0x90>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <FLASH_FlushCaches+0x90>)
 800238e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002392:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <FLASH_FlushCaches+0x8c>)
 8002396:	2200      	movs	r2, #0
 8002398:	771a      	strb	r2, [r3, #28]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	40022000 	.word	0x40022000

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023be:	e15a      	b.n	8002676 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 814c 	beq.w	8002670 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d005      	beq.n	80023f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d130      	bne.n	8002452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002426:	2201      	movs	r2, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0201 	and.w	r2, r3, #1
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b03      	cmp	r3, #3
 800245c:	d017      	beq.n	800248e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d123      	bne.n	80024e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80a6 	beq.w	8002670 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002524:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <HAL_GPIO_Init+0x2e4>)
 8002526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002528:	4a5a      	ldr	r2, [pc, #360]	; (8002694 <HAL_GPIO_Init+0x2e4>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6613      	str	r3, [r2, #96]	; 0x60
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <HAL_GPIO_Init+0x2e4>)
 8002532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800253c:	4a56      	ldr	r2, [pc, #344]	; (8002698 <HAL_GPIO_Init+0x2e8>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002566:	d01f      	beq.n	80025a8 <HAL_GPIO_Init+0x1f8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a4c      	ldr	r2, [pc, #304]	; (800269c <HAL_GPIO_Init+0x2ec>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d019      	beq.n	80025a4 <HAL_GPIO_Init+0x1f4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a4b      	ldr	r2, [pc, #300]	; (80026a0 <HAL_GPIO_Init+0x2f0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d013      	beq.n	80025a0 <HAL_GPIO_Init+0x1f0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <HAL_GPIO_Init+0x2f4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00d      	beq.n	800259c <HAL_GPIO_Init+0x1ec>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a49      	ldr	r2, [pc, #292]	; (80026a8 <HAL_GPIO_Init+0x2f8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <HAL_GPIO_Init+0x1e8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a48      	ldr	r2, [pc, #288]	; (80026ac <HAL_GPIO_Init+0x2fc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_GPIO_Init+0x1e4>
 8002590:	2305      	movs	r3, #5
 8002592:	e00a      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 8002594:	2306      	movs	r3, #6
 8002596:	e008      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 8002598:	2304      	movs	r3, #4
 800259a:	e006      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 800259c:	2303      	movs	r3, #3
 800259e:	e004      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e002      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 80025a8:	2300      	movs	r3, #0
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	f002 0203 	and.w	r2, r2, #3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4093      	lsls	r3, r2
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ba:	4937      	ldr	r1, [pc, #220]	; (8002698 <HAL_GPIO_Init+0x2e8>)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c8:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <HAL_GPIO_Init+0x300>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ec:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <HAL_GPIO_Init+0x300>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_GPIO_Init+0x300>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002616:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <HAL_GPIO_Init+0x300>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_GPIO_Init+0x300>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002640:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <HAL_GPIO_Init+0x300>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_GPIO_Init+0x300>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800266a:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <HAL_GPIO_Init+0x300>)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f ae9d 	bne.w	80023c0 <HAL_GPIO_Init+0x10>
  }
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	48000400 	.word	0x48000400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	48000c00 	.word	0x48000c00
 80026a8:	48001000 	.word	0x48001000
 80026ac:	48001400 	.word	0x48001400
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	041a      	lsls	r2, r3, #16
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43d9      	mvns	r1, r3
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	400b      	ands	r3, r1
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e08d      	b.n	8002846 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe fd8a 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002768:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002778:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e006      	b.n	80027a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800279e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d108      	bne.n	80027ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	e007      	b.n	80027ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69d9      	ldr	r1, [r3, #28]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	4608      	mov	r0, r1
 800285a:	4611      	mov	r1, r2
 800285c:	461a      	mov	r2, r3
 800285e:	4603      	mov	r3, r0
 8002860:	817b      	strh	r3, [r7, #10]
 8002862:	460b      	mov	r3, r1
 8002864:	813b      	strh	r3, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	f040 80f9 	bne.w	8002a6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_I2C_Mem_Write+0x34>
 800287e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0ed      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_I2C_Mem_Write+0x4e>
 800289a:	2302      	movs	r3, #2
 800289c:	e0e6      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a6:	f7ff f909 	bl	8001abc <HAL_GetTick>
 80028aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2319      	movs	r3, #25
 80028b2:	2201      	movs	r2, #1
 80028b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fac3 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0d1      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2221      	movs	r2, #33	; 0x21
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f0:	88f8      	ldrh	r0, [r7, #6]
 80028f2:	893a      	ldrh	r2, [r7, #8]
 80028f4:	8979      	ldrh	r1, [r7, #10]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4603      	mov	r3, r0
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f9d3 	bl	8002cac <I2C_RequestMemoryWrite>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0a9      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2bff      	cmp	r3, #255	; 0xff
 8002920:	d90e      	bls.n	8002940 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	22ff      	movs	r2, #255	; 0xff
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	b2da      	uxtb	r2, r3
 800292e:	8979      	ldrh	r1, [r7, #10]
 8002930:	2300      	movs	r3, #0
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fc47 	bl	80031cc <I2C_TransferConfig>
 800293e:	e00f      	b.n	8002960 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294e:	b2da      	uxtb	r2, r3
 8002950:	8979      	ldrh	r1, [r7, #10]
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fc36 	bl	80031cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fac6 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e07b      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d034      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x1c8>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d130      	bne.n	8002a18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	2200      	movs	r2, #0
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fa3f 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e04d      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2bff      	cmp	r3, #255	; 0xff
 80029d8:	d90e      	bls.n	80029f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	8979      	ldrh	r1, [r7, #10]
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fbeb 	bl	80031cc <I2C_TransferConfig>
 80029f6:	e00f      	b.n	8002a18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fbda 	bl	80031cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d19e      	bne.n	8002960 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 faac 	bl	8002f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e01a      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_I2C_Mem_Write+0x224>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	fe00e800 	.word	0xfe00e800

08002a78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	f040 80fd 	bne.w	8002c9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_I2C_Mem_Read+0x34>
 8002aa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0f1      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x4e>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e0ea      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ace:	f7fe fff5 	bl	8001abc <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2319      	movs	r3, #25
 8002ada:	2201      	movs	r2, #1
 8002adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f9af 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0d5      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2222      	movs	r2, #34	; 0x22
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2240      	movs	r2, #64	; 0x40
 8002afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a3a      	ldr	r2, [r7, #32]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b18:	88f8      	ldrh	r0, [r7, #6]
 8002b1a:	893a      	ldrh	r2, [r7, #8]
 8002b1c:	8979      	ldrh	r1, [r7, #10]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4603      	mov	r3, r0
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f913 	bl	8002d54 <I2C_RequestMemoryRead>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0ad      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2bff      	cmp	r3, #255	; 0xff
 8002b48:	d90e      	bls.n	8002b68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	22ff      	movs	r2, #255	; 0xff
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	8979      	ldrh	r1, [r7, #10]
 8002b58:	4b52      	ldr	r3, [pc, #328]	; (8002ca4 <HAL_I2C_Mem_Read+0x22c>)
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fb33 	bl	80031cc <I2C_TransferConfig>
 8002b66:	e00f      	b.n	8002b88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <HAL_I2C_Mem_Read+0x22c>)
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fb22 	bl	80031cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2104      	movs	r1, #4
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f956 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e07c      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d034      	beq.n	8002c48 <HAL_I2C_Mem_Read+0x1d0>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d130      	bne.n	8002c48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f927 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e04d      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2bff      	cmp	r3, #255	; 0xff
 8002c08:	d90e      	bls.n	8002c28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	22ff      	movs	r2, #255	; 0xff
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	8979      	ldrh	r1, [r7, #10]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fad3 	bl	80031cc <I2C_TransferConfig>
 8002c26:	e00f      	b.n	8002c48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	8979      	ldrh	r1, [r7, #10]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fac2 	bl	80031cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d19a      	bne.n	8002b88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f994 	bl	8002f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e01a      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_I2C_Mem_Read+0x230>)
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	80002400 	.word	0x80002400
 8002ca8:	fe00e800 	.word	0xfe00e800

08002cac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	817b      	strh	r3, [r7, #10]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	813b      	strh	r3, [r7, #8]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <I2C_RequestMemoryWrite+0xa4>)
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fa79 	bl	80031cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f909 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e02c      	b.n	8002d48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf4:	893b      	ldrh	r3, [r7, #8]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
 8002cfe:	e015      	b.n	8002d2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	69b9      	ldr	r1, [r7, #24]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f8ef 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e012      	b.n	8002d48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d22:	893b      	ldrh	r3, [r7, #8]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f884 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	80002000 	.word	0x80002000

08002d54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	817b      	strh	r3, [r7, #10]
 8002d66:	460b      	mov	r3, r1
 8002d68:	813b      	strh	r3, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	8979      	ldrh	r1, [r7, #10]
 8002d74:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <I2C_RequestMemoryRead+0xa4>)
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa26 	bl	80031cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f8b6 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e02c      	b.n	8002dee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9a:	893b      	ldrh	r3, [r7, #8]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
 8002da4:	e015      	b.n	8002dd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f89c 	bl	8002ef6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e012      	b.n	8002dee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2140      	movs	r1, #64	; 0x40
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f831 	bl	8002e44 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	80002000 	.word	0x80002000

08002dfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d103      	bne.n	8002e1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d007      	beq.n	8002e38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	619a      	str	r2, [r3, #24]
  }
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e54:	e03b      	b.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f8d6 	bl	800300c <I2C_IsErrorOccurred>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e041      	b.n	8002eee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d02d      	beq.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7fe fe23 	bl	8001abc <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d122      	bne.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d113      	bne.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f043 0220 	orr.w	r2, r3, #32
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00f      	b.n	8002eee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d0b4      	beq.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f02:	e033      	b.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f87f 	bl	800300c <I2C_IsErrorOccurred>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e031      	b.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d025      	beq.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7fe fdcc 	bl	8001abc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d11a      	bne.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d013      	beq.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d1c4      	bne.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f90:	e02f      	b.n	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f838 	bl	800300c <I2C_IsErrorOccurred>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e02d      	b.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe fd89 	bl	8001abc <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d11a      	bne.n	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d013      	beq.n	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e007      	b.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d1c8      	bne.n	8002f92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d068      	beq.n	800310a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2210      	movs	r2, #16
 800303e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003040:	e049      	b.n	80030d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d045      	beq.n	80030d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe fd37 	bl	8001abc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_IsErrorOccurred+0x54>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d13a      	bne.n	80030d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003072:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800307e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003082:	d121      	bne.n	80030c8 <I2C_IsErrorOccurred+0xbc>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308a:	d01d      	beq.n	80030c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	2b20      	cmp	r3, #32
 8003090:	d01a      	beq.n	80030c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030a2:	f7fe fd0b 	bl	8001abc <HAL_GetTick>
 80030a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030a8:	e00e      	b.n	80030c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030aa:	f7fe fd07 	bl	8001abc <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b19      	cmp	r3, #25
 80030b6:	d907      	bls.n	80030c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f043 0320 	orr.w	r3, r3, #32
 80030be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80030c6:	e006      	b.n	80030d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d1e9      	bne.n	80030aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d003      	beq.n	80030ec <I2C_IsErrorOccurred+0xe0>
 80030e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0aa      	beq.n	8003042 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2220      	movs	r2, #32
 80030fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800312c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800314e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003170:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01c      	beq.n	80031ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7ff fe3b 	bl	8002dfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <I2C_IsErrorOccurred+0x1bc>)
 8003192:	400b      	ands	r3, r1
 8003194:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	fe00e800 	.word	0xfe00e800

080031cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	817b      	strh	r3, [r7, #10]
 80031da:	4613      	mov	r3, r2
 80031dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031e4:	7a7b      	ldrb	r3, [r7, #9]
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	0d5b      	lsrs	r3, r3, #21
 8003206:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <I2C_TransferConfig+0x60>)
 800320c:	430b      	orrs	r3, r1
 800320e:	43db      	mvns	r3, r3
 8003210:	ea02 0103 	and.w	r1, r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	03ff63ff 	.word	0x03ff63ff

08003230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	d138      	bne.n	80032b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003250:	2302      	movs	r3, #2
 8003252:	e032      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6819      	ldr	r1, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d139      	bne.n	8003350 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e033      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2224      	movs	r2, #36	; 0x24
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003318:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0c0      	b.n	80034f2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f008 fddb 	bl	800bf40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2203      	movs	r2, #3
 800338e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f004 fc15 	bl	8007bc6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e03e      	b.n	8003420 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	440b      	add	r3, r1
 80033b0:	3311      	adds	r3, #17
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	3310      	adds	r3, #16
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	3313      	adds	r3, #19
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	3320      	adds	r3, #32
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	440b      	add	r3, r1
 8003400:	3324      	adds	r3, #36	; 0x24
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	3301      	adds	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	791b      	ldrb	r3, [r3, #4]
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	429a      	cmp	r2, r3
 8003428:	d3bb      	bcc.n	80033a2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	e044      	b.n	80034ba <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	f203 1353 	addw	r3, r3, #339	; 0x153
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	440b      	add	r3, r1
 80034ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	3301      	adds	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	791b      	ldrb	r3, [r3, #4]
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3b5      	bcc.n	8003430 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034d0:	f004 fb94 	bl	8007bfc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7a9b      	ldrb	r3, [r3, #10]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d102      	bne.n	80034f0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f001 fc41 	bl	8004d72 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_PCD_Start+0x16>
 800350c:	2302      	movs	r3, #2
 800350e:	e012      	b.n	8003536 <HAL_PCD_Start+0x3c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f004 fb3b 	bl	8007b98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f006 fdfb 	bl	800a122 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f006 fe00 	bl	800a150 <USB_ReadInterrupts>
 8003550:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fb04 	bl	8003b6a <PCD_EP_ISR_Handler>

    return;
 8003562:	e110      	b.n	8003786 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	2b00      	cmp	r3, #0
 800356c:	d013      	beq.n	8003596 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003580:	b292      	uxth	r2, r2
 8003582:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f008 fd6b 	bl	800c062 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800358c:	2100      	movs	r1, #0
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8fc 	bl	800378c <HAL_PCD_SetAddress>

    return;
 8003594:	e0f7      	b.n	8003786 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00c      	beq.n	80035ba <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035b2:	b292      	uxth	r2, r2
 80035b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80035b8:	e0e5      	b.n	8003786 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d6:	b292      	uxth	r2, r2
 80035d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80035dc:	e0d3      	b.n	8003786 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d034      	beq.n	8003652 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0204 	bic.w	r2, r2, #4
 80035fa:	b292      	uxth	r2, r2
 80035fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003608:	b29a      	uxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0208 	bic.w	r2, r2, #8
 8003612:	b292      	uxth	r2, r2
 8003614:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800362a:	2100      	movs	r1, #0
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f008 ff0b 	bl	800c448 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f008 fd4e 	bl	800c0d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800364a:	b292      	uxth	r2, r2
 800364c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003650:	e099      	b.n	8003786 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003658:	2b00      	cmp	r3, #0
 800365a:	d027      	beq.n	80036ac <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003664:	b29a      	uxth	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0208 	orr.w	r2, r2, #8
 800366e:	b292      	uxth	r2, r2
 8003670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003686:	b292      	uxth	r2, r2
 8003688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0204 	orr.w	r2, r2, #4
 800369e:	b292      	uxth	r2, r2
 80036a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f008 fcfb 	bl	800c0a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80036aa:	e06c      	b.n	8003786 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d040      	beq.n	8003738 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c8:	b292      	uxth	r2, r2
 80036ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d12b      	bne.n	8003730 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0204 	orr.w	r2, r2, #4
 80036ea:	b292      	uxth	r2, r2
 80036ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	b292      	uxth	r2, r2
 8003704:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003718:	b29b      	uxth	r3, r3
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003726:	2101      	movs	r1, #1
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f008 fe8d 	bl	800c448 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800372e:	e02a      	b.n	8003786 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f008 fcb5 	bl	800c0a0 <HAL_PCD_SuspendCallback>
    return;
 8003736:	e026      	b.n	8003786 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00f      	beq.n	8003762 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800374a:	b29a      	uxth	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003754:	b292      	uxth	r2, r2
 8003756:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f008 fc73 	bl	800c046 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003760:	e011      	b.n	8003786 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00c      	beq.n	8003786 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003774:	b29a      	uxth	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800377e:	b292      	uxth	r2, r2
 8003780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003784:	bf00      	nop
  }
}
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_PCD_SetAddress+0x1a>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e012      	b.n	80037cc <HAL_PCD_SetAddress+0x40>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f006 fc9c 	bl	800a0fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	70fb      	strb	r3, [r7, #3]
 80037e6:	460b      	mov	r3, r1
 80037e8:	803b      	strh	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	da0e      	bge.n	8003818 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 0207 	and.w	r2, r3, #7
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	3310      	adds	r3, #16
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	705a      	strb	r2, [r3, #1]
 8003816:	e00e      	b.n	8003836 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 0207 	and.w	r2, r3, #7
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003842:	883a      	ldrh	r2, [r7, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	78ba      	ldrb	r2, [r7, #2]
 800384c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800384e:	78bb      	ldrb	r3, [r7, #2]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d102      	bne.n	800385a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_PCD_EP_Open+0x94>
 8003864:	2302      	movs	r3, #2
 8003866:	e00e      	b.n	8003886 <HAL_PCD_EP_Open+0xb2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68f9      	ldr	r1, [r7, #12]
 8003876:	4618      	mov	r0, r3
 8003878:	f004 f9de 	bl	8007c38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003884:	7afb      	ldrb	r3, [r7, #11]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800389a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	da0e      	bge.n	80038c0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	f003 0207 	and.w	r2, r3, #7
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	3310      	adds	r3, #16
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	705a      	strb	r2, [r3, #1]
 80038be:	e00e      	b.n	80038de <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 0207 	and.w	r2, r3, #7
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_PCD_EP_Close+0x6a>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e00e      	b.n	8003916 <HAL_PCD_EP_Close+0x88>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	4618      	mov	r0, r3
 8003908:	f004 fd5a 	bl	80083c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	460b      	mov	r3, r1
 800392c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392e:	7afb      	ldrb	r3, [r7, #11]
 8003930:	f003 0207 	and.w	r2, r3, #7
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2200      	movs	r2, #0
 800395c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	b2da      	uxtb	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6979      	ldr	r1, [r7, #20]
 8003970:	4618      	mov	r0, r3
 8003972:	f004 ff12 	bl	800879a <USB_EPStartXfer>

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	f003 0207 	and.w	r2, r3, #7
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	440b      	add	r3, r1
 800399e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	460b      	mov	r3, r1
 80039be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	f003 0207 	and.w	r2, r3, #7
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	3310      	adds	r3, #16
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2201      	movs	r2, #1
 80039fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039fc:	7afb      	ldrb	r3, [r7, #11]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6979      	ldr	r1, [r7, #20]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 fec3 	bl	800879a <USB_EPStartXfer>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	7912      	ldrb	r2, [r2, #4]
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e03e      	b.n	8003aba <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da0e      	bge.n	8003a62 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	f003 0207 	and.w	r2, r3, #7
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	3310      	adds	r3, #16
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	4413      	add	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	705a      	strb	r2, [r3, #1]
 8003a60:	e00c      	b.n	8003a7c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_PCD_EP_SetStall+0x7e>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e00e      	b.n	8003aba <HAL_PCD_EP_SetStall+0x9c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f006 fa26 	bl	8009efc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	460b      	mov	r3, r1
 8003acc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	7912      	ldrb	r2, [r2, #4]
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e040      	b.n	8003b62 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	da0e      	bge.n	8003b06 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	f003 0207 	and.w	r2, r3, #7
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	3310      	adds	r3, #16
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	705a      	strb	r2, [r3, #1]
 8003b04:	e00e      	b.n	8003b24 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 0207 	and.w	r2, r3, #7
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_PCD_EP_ClrStall+0x82>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e00e      	b.n	8003b62 <HAL_PCD_EP_ClrStall+0xa0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68f9      	ldr	r1, [r7, #12]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f006 fa23 	bl	8009f9e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b096      	sub	sp, #88	; 0x58
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b72:	e3ae      	b.n	80042d2 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003b8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 8170 	bne.w	8003e78 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d14d      	bne.n	8003c40 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	81fb      	strh	r3, [r7, #14]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3310      	adds	r3, #16
 8003bcc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	441a      	add	r2, r3
 8003c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c02:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c04:	2100      	movs	r1, #0
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f008 fa03 	bl	800c012 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	7b1b      	ldrb	r3, [r3, #12]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 835d 	beq.w	80042d2 <PCD_EP_ISR_Handler+0x768>
 8003c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 8358 	bne.w	80042d2 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7b1b      	ldrb	r3, [r3, #12]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	b292      	uxth	r2, r2
 8003c34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	731a      	strb	r2, [r3, #12]
 8003c3e:	e348      	b.n	80042d2 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c46:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d032      	beq.n	8003cc4 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c84:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c92:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c96:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f006 faab 	bl	800a1f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003caa:	4013      	ands	r3, r2
 8003cac:	823b      	strh	r3, [r7, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	8a3a      	ldrh	r2, [r7, #16]
 8003cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f008 f97b 	bl	800bfb8 <HAL_PCD_SetupStageCallback>
 8003cc2:	e306      	b.n	80042d2 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cc4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f280 8302 	bge.w	80042d2 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cda:	4013      	ands	r3, r2
 8003cdc:	83fb      	strh	r3, [r7, #30]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	8bfa      	ldrh	r2, [r7, #30]
 8003ce4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	4413      	add	r3, r2
 8003d06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d12:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d019      	beq.n	8003d50 <PCD_EP_ISR_Handler+0x1e6>
 8003d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2a:	6959      	ldr	r1, [r3, #20]
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d32:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f006 fa5d 	bl	800a1f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	441a      	add	r2, r3
 8003d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d46:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d48:	2100      	movs	r1, #0
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f008 f946 	bl	800bfdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 82b5 	bne.w	80042d2 <PCD_EP_ISR_Handler+0x768>
 8003d68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d74:	f000 82ad 	beq.w	80042d2 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b3e      	cmp	r3, #62	; 0x3e
 8003dae:	d91d      	bls.n	8003dec <PCD_EP_ISR_Handler+0x282>
 8003db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	647b      	str	r3, [r7, #68]	; 0x44
 8003db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d102      	bne.n	8003dca <PCD_EP_ISR_Handler+0x260>
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	029b      	lsls	r3, r3, #10
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	e026      	b.n	8003e3a <PCD_EP_ISR_Handler+0x2d0>
 8003dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <PCD_EP_ISR_Handler+0x2a0>
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	801a      	strh	r2, [r3, #0]
 8003e08:	e017      	b.n	8003e3a <PCD_EP_ISR_Handler+0x2d0>
 8003e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	647b      	str	r3, [r7, #68]	; 0x44
 8003e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <PCD_EP_ISR_Handler+0x2ba>
 8003e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e20:	3301      	adds	r3, #1
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	4313      	orrs	r3, r2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	827b      	strh	r3, [r7, #18]
 8003e4c:	8a7b      	ldrh	r3, [r7, #18]
 8003e4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e52:	827b      	strh	r3, [r7, #18]
 8003e54:	8a7b      	ldrh	r3, [r7, #18]
 8003e56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e5a:	827b      	strh	r3, [r7, #18]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	8a7b      	ldrh	r3, [r7, #18]
 8003e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	8013      	strh	r3, [r2, #0]
 8003e76:	e22c      	b.n	80042d2 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e8c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f280 80f6 	bge.w	8004082 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003eac:	4013      	ands	r3, r2
 8003eae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003ec4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ecc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee4:	7b1b      	ldrb	r3, [r3, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d123      	bne.n	8003f32 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	4413      	add	r3, r2
 8003f04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003f12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 808e 	beq.w	8004038 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f22:	6959      	ldr	r1, [r3, #20]
 8003f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f26:	88da      	ldrh	r2, [r3, #6]
 8003f28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f2c:	f006 f962 	bl	800a1f4 <USB_ReadPMA>
 8003f30:	e082      	b.n	8004038 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d10a      	bne.n	8003f50 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f3e:	461a      	mov	r2, r3
 8003f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f9d3 	bl	80042ee <HAL_PCD_EP_DB_Receive>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003f4e:	e073      	b.n	8004038 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	441a      	add	r2, r3
 8003f7c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d022      	beq.n	8003ff4 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003fd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02c      	beq.n	8004038 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe4:	6959      	ldr	r1, [r3, #20]
 8003fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe8:	891a      	ldrh	r2, [r3, #8]
 8003fea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fee:	f006 f901 	bl	800a1f4 <USB_ReadPMA>
 8003ff2:	e021      	b.n	8004038 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	4413      	add	r3, r2
 800400e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004018:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800401c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402a:	6959      	ldr	r1, [r3, #20]
 800402c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402e:	895a      	ldrh	r2, [r3, #10]
 8004030:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004034:	f006 f8de 	bl	800a1f4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004040:	441a      	add	r2, r3
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800404e:	441a      	add	r2, r3
 8004050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004052:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <PCD_EP_ISR_Handler+0x4fe>
 800405c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d206      	bcs.n	8004076 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f007 ffb4 	bl	800bfdc <HAL_PCD_DataOutStageCallback>
 8004074:	e005      	b.n	8004082 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800407c:	4618      	mov	r0, r3
 800407e:	f004 fb8c 	bl	800879a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004082:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8121 	beq.w	80042d2 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8004090:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	3310      	adds	r3, #16
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80040ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80040d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040dc:	b29b      	uxth	r3, r3
 80040de:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80040e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e2:	78db      	ldrb	r3, [r3, #3]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	f040 80a2 	bne.w	800422e <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80040ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ec:	2200      	movs	r2, #0
 80040ee:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80040f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f2:	7b1b      	ldrb	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8093 	beq.w	8004220 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d046      	beq.n	8004194 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d126      	bne.n	800415c <PCD_EP_ISR_Handler+0x5f2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	4413      	add	r3, r2
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	00da      	lsls	r2, r3, #3
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	4413      	add	r3, r2
 8004130:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004134:	623b      	str	r3, [r7, #32]
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004140:	b29a      	uxth	r2, r3
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004154:	b29a      	uxth	r2, r3
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	e061      	b.n	8004220 <PCD_EP_ISR_Handler+0x6b6>
 800415c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d15d      	bne.n	8004220 <PCD_EP_ISR_Handler+0x6b6>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004172:	b29b      	uxth	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	4413      	add	r3, r2
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	00da      	lsls	r2, r3, #3
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	4413      	add	r3, r2
 8004186:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	2200      	movs	r2, #0
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e045      	b.n	8004220 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800419a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d126      	bne.n	80041f0 <PCD_EP_ISR_Handler+0x686>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	637b      	str	r3, [r7, #52]	; 0x34
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	4413      	add	r3, r2
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	00da      	lsls	r2, r3, #3
 80041c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c2:	4413      	add	r3, r2
 80041c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	e017      	b.n	8004220 <PCD_EP_ISR_Handler+0x6b6>
 80041f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f2:	785b      	ldrb	r3, [r3, #1]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d113      	bne.n	8004220 <PCD_EP_ISR_Handler+0x6b6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004200:	b29b      	uxth	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004206:	4413      	add	r3, r2
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800420a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	00da      	lsls	r2, r3, #3
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	4413      	add	r3, r2
 8004214:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2200      	movs	r2, #0
 800421e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f007 fef3 	bl	800c012 <HAL_PCD_DataInStageCallback>
 800422c:	e051      	b.n	80042d2 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800422e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d144      	bne.n	80042c4 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	4413      	add	r3, r2
 8004254:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800425e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800426a:	429a      	cmp	r2, r3
 800426c:	d907      	bls.n	800427e <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800426e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004276:	1ad2      	subs	r2, r2, r3
 8004278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427a:	619a      	str	r2, [r3, #24]
 800427c:	e002      	b.n	8004284 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800427e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d106      	bne.n	800429a <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800428c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f007 febd 	bl	800c012 <HAL_PCD_DataInStageCallback>
 8004298:	e01b      	b.n	80042d2 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800429a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429c:	695a      	ldr	r2, [r3, #20]
 800429e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042a2:	441a      	add	r2, r3
 80042a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80042a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042b0:	441a      	add	r2, r3
 80042b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042bc:	4618      	mov	r0, r3
 80042be:	f004 fa6c 	bl	800879a <USB_EPStartXfer>
 80042c2:	e006      	b.n	80042d2 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042c8:	461a      	mov	r2, r3
 80042ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f917 	bl	8004500 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042da:	b29b      	uxth	r3, r3
 80042dc:	b21b      	sxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f6ff ac48 	blt.w	8003b74 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3758      	adds	r7, #88	; 0x58
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b088      	sub	sp, #32
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d07c      	beq.n	8004400 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430e:	b29b      	uxth	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	4413      	add	r3, r2
 8004320:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800432a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	8b7b      	ldrh	r3, [r7, #26]
 8004332:	429a      	cmp	r2, r3
 8004334:	d306      	bcc.n	8004344 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	8b7b      	ldrh	r3, [r7, #26]
 800433c:	1ad2      	subs	r2, r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	619a      	str	r2, [r3, #24]
 8004342:	e002      	b.n	800434a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2200      	movs	r2, #0
 8004348:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d123      	bne.n	800439a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436c:	833b      	strh	r3, [r7, #24]
 800436e:	8b3b      	ldrh	r3, [r7, #24]
 8004370:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004374:	833b      	strh	r3, [r7, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	441a      	add	r2, r3
 8004384:	8b3b      	ldrh	r3, [r7, #24]
 8004386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01f      	beq.n	80043e4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	82fb      	strh	r3, [r7, #22]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	8afb      	ldrh	r3, [r7, #22]
 80043d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043e4:	8b7b      	ldrh	r3, [r7, #26]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 8085 	beq.w	80044f6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6959      	ldr	r1, [r3, #20]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	891a      	ldrh	r2, [r3, #8]
 80043f8:	8b7b      	ldrh	r3, [r7, #26]
 80043fa:	f005 fefb 	bl	800a1f4 <USB_ReadPMA>
 80043fe:	e07a      	b.n	80044f6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004408:	b29b      	uxth	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4413      	add	r3, r2
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	4413      	add	r3, r2
 800441a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004424:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	8b7b      	ldrh	r3, [r7, #26]
 800442c:	429a      	cmp	r2, r3
 800442e:	d306      	bcc.n	800443e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	8b7b      	ldrh	r3, [r7, #26]
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	619a      	str	r2, [r3, #24]
 800443c:	e002      	b.n	8004444 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d123      	bne.n	8004494 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	83fb      	strh	r3, [r7, #30]
 8004468:	8bfb      	ldrh	r3, [r7, #30]
 800446a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800446e:	83fb      	strh	r3, [r7, #30]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	8bfb      	ldrh	r3, [r7, #30]
 8004480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004490:	b29b      	uxth	r3, r3
 8004492:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11f      	bne.n	80044de <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b8:	83bb      	strh	r3, [r7, #28]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	441a      	add	r2, r3
 80044c8:	8bbb      	ldrh	r3, [r7, #28]
 80044ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044da:	b29b      	uxth	r3, r3
 80044dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044de:	8b7b      	ldrh	r3, [r7, #26]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6959      	ldr	r1, [r3, #20]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	895a      	ldrh	r2, [r3, #10]
 80044f0:	8b7b      	ldrh	r3, [r7, #26]
 80044f2:	f005 fe7f 	bl	800a1f4 <USB_ReadPMA>
    }
  }

  return count;
 80044f6:	8b7b      	ldrh	r3, [r7, #26]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b0a4      	sub	sp, #144	; 0x90
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 81db 	beq.w	80048d0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4413      	add	r3, r2
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4413      	add	r3, r2
 8004534:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800453e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800454a:	429a      	cmp	r2, r3
 800454c:	d907      	bls.n	800455e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004556:	1ad2      	subs	r2, r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	619a      	str	r2, [r3, #24]
 800455c:	e002      	b.n	8004564 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2200      	movs	r2, #0
 8004562:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f040 80b9 	bne.w	80046e0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d126      	bne.n	80045c4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004584:	b29b      	uxth	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	4413      	add	r3, r2
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	00da      	lsls	r2, r3, #3
 8004594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004596:	4413      	add	r3, r2
 8004598:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	801a      	strh	r2, [r3, #0]
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	e01a      	b.n	80045fa <HAL_PCD_EP_DB_Transmit+0xfa>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d116      	bne.n	80045fa <HAL_PCD_EP_DB_Transmit+0xfa>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e0:	4413      	add	r3, r2
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	00da      	lsls	r2, r3, #3
 80045ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ec:	4413      	add	r3, r2
 80045ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	2200      	movs	r2, #0
 80045f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d126      	bne.n	8004656 <HAL_PCD_EP_DB_Transmit+0x156>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	00da      	lsls	r2, r3, #3
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800463a:	b29a      	uxth	r2, r3
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800464e:	b29a      	uxth	r2, r3
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	e017      	b.n	8004686 <HAL_PCD_EP_DB_Transmit+0x186>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d113      	bne.n	8004686 <HAL_PCD_EP_DB_Transmit+0x186>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004666:	b29b      	uxth	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	4413      	add	r3, r2
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	00da      	lsls	r2, r3, #3
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	4413      	add	r3, r2
 800467a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2200      	movs	r2, #0
 8004684:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	4619      	mov	r1, r3
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f007 fcc0 	bl	800c012 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 82fa 	beq.w	8004c92 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	82fb      	strh	r3, [r7, #22]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	441a      	add	r2, r3
 80046c8:	8afb      	ldrh	r3, [r7, #22]
 80046ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046da:	b29b      	uxth	r3, r3
 80046dc:	8013      	strh	r3, [r2, #0]
 80046de:	e2d8      	b.n	8004c92 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d021      	beq.n	800472e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004704:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004734:	2b01      	cmp	r3, #1
 8004736:	f040 82ac 	bne.w	8004c92 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004742:	441a      	add	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004750:	441a      	add	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6a1a      	ldr	r2, [r3, #32]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	429a      	cmp	r2, r3
 8004760:	d30b      	bcc.n	800477a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	621a      	str	r2, [r3, #32]
 8004778:	e017      	b.n	80047aa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d108      	bne.n	8004794 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004782:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004792:	e00a      	b.n	80047aa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2200      	movs	r2, #0
 80047a8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d165      	bne.n	800487e <HAL_PCD_EP_DB_Transmit+0x37e>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c6:	4413      	add	r3, r2
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	00da      	lsls	r2, r3, #3
 80047d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d2:	4413      	add	r3, r2
 80047d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047ee:	2b3e      	cmp	r3, #62	; 0x3e
 80047f0:	d91d      	bls.n	800482e <HAL_PCD_EP_DB_Transmit+0x32e>
 80047f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <HAL_PCD_EP_DB_Transmit+0x30c>
 8004806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004808:	3b01      	subs	r3, #1
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29a      	uxth	r2, r3
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004814:	b29b      	uxth	r3, r3
 8004816:	029b      	lsls	r3, r3, #10
 8004818:	b29b      	uxth	r3, r3
 800481a:	4313      	orrs	r3, r2
 800481c:	b29b      	uxth	r3, r3
 800481e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004826:	b29a      	uxth	r2, r3
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	e044      	b.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800482e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <HAL_PCD_EP_DB_Transmit+0x34c>
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004844:	b29a      	uxth	r2, r3
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	e035      	b.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800484c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	64bb      	str	r3, [r7, #72]	; 0x48
 8004854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_PCD_EP_DB_Transmit+0x366>
 8004860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004862:	3301      	adds	r3, #1
 8004864:	64bb      	str	r3, [r7, #72]	; 0x48
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29a      	uxth	r2, r3
 800486c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486e:	b29b      	uxth	r3, r3
 8004870:	029b      	lsls	r3, r3, #10
 8004872:	b29b      	uxth	r3, r3
 8004874:	4313      	orrs	r3, r2
 8004876:	b29a      	uxth	r2, r3
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	801a      	strh	r2, [r3, #0]
 800487c:	e01c      	b.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d118      	bne.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	647b      	str	r3, [r7, #68]	; 0x44
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004894:	b29b      	uxth	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489a:	4413      	add	r3, r2
 800489c:	647b      	str	r3, [r7, #68]	; 0x44
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	00da      	lsls	r2, r3, #3
 80048a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048ac:	643b      	str	r3, [r7, #64]	; 0x40
 80048ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6959      	ldr	r1, [r3, #20]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	891a      	ldrh	r2, [r3, #8]
 80048c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f005 fc51 	bl	800a170 <USB_WritePMA>
 80048ce:	e1e0      	b.n	8004c92 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d8:	b29b      	uxth	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	4413      	add	r3, r2
 80048ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	699a      	ldr	r2, [r3, #24]
 80048fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004900:	429a      	cmp	r2, r3
 8004902:	d307      	bcc.n	8004914 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	699a      	ldr	r2, [r3, #24]
 8004908:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800490c:	1ad2      	subs	r2, r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	619a      	str	r2, [r3, #24]
 8004912:	e002      	b.n	800491a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f040 80c0 	bne.w	8004aa4 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d126      	bne.n	800497a <HAL_PCD_EP_DB_Transmit+0x47a>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004940:	4413      	add	r3, r2
 8004942:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	00da      	lsls	r2, r3, #3
 800494a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800494c:	4413      	add	r3, r2
 800494e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004952:	67bb      	str	r3, [r7, #120]	; 0x78
 8004954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800495e:	b29a      	uxth	r2, r3
 8004960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800496e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004972:	b29a      	uxth	r2, r3
 8004974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	e01a      	b.n	80049b0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	785b      	ldrb	r3, [r3, #1]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d116      	bne.n	80049b0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	667b      	str	r3, [r7, #100]	; 0x64
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004990:	b29b      	uxth	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004996:	4413      	add	r3, r2
 8004998:	667b      	str	r3, [r7, #100]	; 0x64
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	00da      	lsls	r2, r3, #3
 80049a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a2:	4413      	add	r3, r2
 80049a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049a8:	663b      	str	r3, [r7, #96]	; 0x60
 80049aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ac:	2200      	movs	r2, #0
 80049ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	677b      	str	r3, [r7, #116]	; 0x74
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d12b      	bne.n	8004a16 <HAL_PCD_EP_DB_Transmit+0x516>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d2:	4413      	add	r3, r2
 80049d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	00da      	lsls	r2, r3, #3
 80049dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049de:	4413      	add	r3, r2
 80049e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	e017      	b.n	8004a46 <HAL_PCD_EP_DB_Transmit+0x546>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	785b      	ldrb	r3, [r3, #1]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d113      	bne.n	8004a46 <HAL_PCD_EP_DB_Transmit+0x546>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2c:	4413      	add	r3, r2
 8004a2e:	677b      	str	r3, [r7, #116]	; 0x74
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	00da      	lsls	r2, r3, #3
 8004a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a38:	4413      	add	r3, r2
 8004a3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a3e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a42:	2200      	movs	r2, #0
 8004a44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f007 fae0 	bl	800c012 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f040 811a 	bne.w	8004c92 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a78:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]
 8004aa2:	e0f6      	b.n	8004c92 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004aa4:	88fb      	ldrh	r3, [r7, #6]
 8004aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d121      	bne.n	8004af2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	f040 80ca 	bne.w	8004c92 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b06:	441a      	add	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b14:	441a      	add	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6a1a      	ldr	r2, [r3, #32]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d30b      	bcc.n	8004b3e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b36:	1ad2      	subs	r2, r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	621a      	str	r2, [r3, #32]
 8004b3c:	e017      	b.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004b46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b56:	e00a      	b.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	657b      	str	r3, [r7, #84]	; 0x54
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d165      	bne.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x748>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b90:	4413      	add	r3, r2
 8004b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	00da      	lsls	r2, r3, #3
 8004b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bb2:	801a      	strh	r2, [r3, #0]
 8004bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8004bba:	d91d      	bls.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	029b      	lsls	r3, r3, #10
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf4:	801a      	strh	r2, [r3, #0]
 8004bf6:	e041      	b.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x77c>
 8004bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <HAL_PCD_EP_DB_Transmit+0x716>
 8004c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c12:	801a      	strh	r2, [r3, #0]
 8004c14:	e032      	b.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_PCD_EP_DB_Transmit+0x730>
 8004c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	029b      	lsls	r3, r3, #10
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	e019      	b.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d115      	bne.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c5e:	4413      	add	r3, r2
 8004c60:	657b      	str	r3, [r7, #84]	; 0x54
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	00da      	lsls	r2, r3, #3
 8004c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c70:	653b      	str	r3, [r7, #80]	; 0x50
 8004c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c7a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6959      	ldr	r1, [r3, #20]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	895a      	ldrh	r2, [r3, #10]
 8004c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f005 fa6f 	bl	800a170 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	82bb      	strh	r3, [r7, #20]
 8004cae:	8abb      	ldrh	r3, [r7, #20]
 8004cb0:	f083 0310 	eor.w	r3, r3, #16
 8004cb4:	82bb      	strh	r3, [r7, #20]
 8004cb6:	8abb      	ldrh	r3, [r7, #20]
 8004cb8:	f083 0320 	eor.w	r3, r3, #32
 8004cbc:	82bb      	strh	r3, [r7, #20]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	8abb      	ldrh	r3, [r7, #20]
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3790      	adds	r7, #144	; 0x90
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d0a:	897b      	ldrh	r3, [r7, #10]
 8004d0c:	f003 0207 	and.w	r2, r3, #7
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	3310      	adds	r3, #16
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e009      	b.n	8004d36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d22:	897a      	ldrh	r2, [r7, #10]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d36:	893b      	ldrh	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d107      	bne.n	8004d4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	80da      	strh	r2, [r3, #6]
 8004d4a:	e00b      	b.n	8004d64 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d141      	bne.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dd6:	4b4b      	ldr	r3, [pc, #300]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de2:	d131      	bne.n	8004e48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004de4:	4b47      	ldr	r3, [pc, #284]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dea:	4a46      	ldr	r2, [pc, #280]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004df4:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dfc:	4a41      	ldr	r2, [pc, #260]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e04:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2232      	movs	r2, #50	; 0x32
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	4a3f      	ldr	r2, [pc, #252]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	0c9b      	lsrs	r3, r3, #18
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e1a:	e002      	b.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e22:	4b38      	ldr	r3, [pc, #224]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2e:	d102      	bne.n	8004e36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f2      	bne.n	8004e1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e36:	4b33      	ldr	r3, [pc, #204]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e42:	d158      	bne.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e057      	b.n	8004ef8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e48:	4b2e      	ldr	r3, [pc, #184]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e4e:	4a2d      	ldr	r2, [pc, #180]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e58:	e04d      	b.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e60:	d141      	bne.n	8004ee6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e62:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d131      	bne.n	8004ed4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e70:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e76:	4a23      	ldr	r2, [pc, #140]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e80:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e88:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e90:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2232      	movs	r2, #50	; 0x32
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	4a1c      	ldr	r2, [pc, #112]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	0c9b      	lsrs	r3, r3, #18
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ea6:	e002      	b.n	8004eae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eae:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eba:	d102      	bne.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f2      	bne.n	8004ea8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ece:	d112      	bne.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e011      	b.n	8004ef8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eda:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ee4:	e007      	b.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ee6:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004eee:	4a05      	ldr	r2, [pc, #20]	; (8004f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ef4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40007000 	.word	0x40007000
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	431bde83 	.word	0x431bde83

08004f10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f1e:	6093      	str	r3, [r2, #8]
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40007000 	.word	0x40007000

08004f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e2fe      	b.n	8005540 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d075      	beq.n	800503a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f4e:	4b97      	ldr	r3, [pc, #604]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f58:	4b94      	ldr	r3, [pc, #592]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	d102      	bne.n	8004f6e <HAL_RCC_OscConfig+0x3e>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d002      	beq.n	8004f74 <HAL_RCC_OscConfig+0x44>
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d10b      	bne.n	8004f8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f74:	4b8d      	ldr	r3, [pc, #564]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d05b      	beq.n	8005038 <HAL_RCC_OscConfig+0x108>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d157      	bne.n	8005038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e2d9      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f94:	d106      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x74>
 8004f96:	4b85      	ldr	r3, [pc, #532]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a84      	ldr	r2, [pc, #528]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	e01d      	b.n	8004fe0 <HAL_RCC_OscConfig+0xb0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x98>
 8004fae:	4b7f      	ldr	r3, [pc, #508]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a7e      	ldr	r2, [pc, #504]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	4b7c      	ldr	r3, [pc, #496]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a7b      	ldr	r2, [pc, #492]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e00b      	b.n	8004fe0 <HAL_RCC_OscConfig+0xb0>
 8004fc8:	4b78      	ldr	r3, [pc, #480]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a77      	ldr	r2, [pc, #476]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	4b75      	ldr	r3, [pc, #468]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a74      	ldr	r2, [pc, #464]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8004fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d013      	beq.n	8005010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fc fd68 	bl	8001abc <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff0:	f7fc fd64 	bl	8001abc <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b64      	cmp	r3, #100	; 0x64
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e29e      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005002:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0xc0>
 800500e:	e014      	b.n	800503a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fc fd54 	bl	8001abc <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005018:	f7fc fd50 	bl	8001abc <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b64      	cmp	r3, #100	; 0x64
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e28a      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800502a:	4b60      	ldr	r3, [pc, #384]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0xe8>
 8005036:	e000      	b.n	800503a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d075      	beq.n	8005132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005046:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005050:	4b56      	ldr	r3, [pc, #344]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b0c      	cmp	r3, #12
 800505e:	d102      	bne.n	8005066 <HAL_RCC_OscConfig+0x136>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d002      	beq.n	800506c <HAL_RCC_OscConfig+0x13c>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d11f      	bne.n	80050ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800506c:	4b4f      	ldr	r3, [pc, #316]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_OscConfig+0x154>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e25d      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005084:	4b49      	ldr	r3, [pc, #292]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	061b      	lsls	r3, r3, #24
 8005092:	4946      	ldr	r1, [pc, #280]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005098:	4b45      	ldr	r3, [pc, #276]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7fc fcc1 	bl	8001a24 <HAL_InitTick>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d043      	beq.n	8005130 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e249      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d023      	beq.n	80050fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b4:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a3c      	ldr	r2, [pc, #240]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 80050ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fc fcfc 	bl	8001abc <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c8:	f7fc fcf8 	bl	8001abc <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e232      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050da:	4b34      	ldr	r3, [pc, #208]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e6:	4b31      	ldr	r3, [pc, #196]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	061b      	lsls	r3, r3, #24
 80050f4:	492d      	ldr	r1, [pc, #180]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	604b      	str	r3, [r1, #4]
 80050fa:	e01a      	b.n	8005132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050fc:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2a      	ldr	r2, [pc, #168]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fc fcd8 	bl	8001abc <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005110:	f7fc fcd4 	bl	8001abc <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e20e      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x1e0>
 800512e:	e000      	b.n	8005132 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005130:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d041      	beq.n	80051c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01c      	beq.n	8005180 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005146:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514c:	4a17      	ldr	r2, [pc, #92]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 800514e:	f043 0301 	orr.w	r3, r3, #1
 8005152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005156:	f7fc fcb1 	bl	8001abc <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800515e:	f7fc fcad 	bl	8001abc <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e1e7      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0ef      	beq.n	800515e <HAL_RCC_OscConfig+0x22e>
 800517e:	e020      	b.n	80051c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <HAL_RCC_OscConfig+0x27c>)
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005190:	f7fc fc94 	bl	8001abc <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005196:	e00d      	b.n	80051b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005198:	f7fc fc90 	bl	8001abc <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d906      	bls.n	80051b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e1ca      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051b4:	4b8c      	ldr	r3, [pc, #560]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ea      	bne.n	8005198 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80a6 	beq.w	800531c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d0:	2300      	movs	r3, #0
 80051d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051d4:	4b84      	ldr	r3, [pc, #528]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_OscConfig+0x2b4>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <HAL_RCC_OscConfig+0x2b6>
 80051e4:	2300      	movs	r3, #0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ea:	4b7f      	ldr	r3, [pc, #508]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	4a7e      	ldr	r2, [pc, #504]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80051f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6593      	str	r3, [r2, #88]	; 0x58
 80051f6:	4b7c      	ldr	r3, [pc, #496]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005202:	2301      	movs	r3, #1
 8005204:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005206:	4b79      	ldr	r3, [pc, #484]	; (80053ec <HAL_RCC_OscConfig+0x4bc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d118      	bne.n	8005244 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005212:	4b76      	ldr	r3, [pc, #472]	; (80053ec <HAL_RCC_OscConfig+0x4bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a75      	ldr	r2, [pc, #468]	; (80053ec <HAL_RCC_OscConfig+0x4bc>)
 8005218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800521e:	f7fc fc4d 	bl	8001abc <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005226:	f7fc fc49 	bl	8001abc <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e183      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005238:	4b6c      	ldr	r3, [pc, #432]	; (80053ec <HAL_RCC_OscConfig+0x4bc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d108      	bne.n	800525e <HAL_RCC_OscConfig+0x32e>
 800524c:	4b66      	ldr	r3, [pc, #408]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005252:	4a65      	ldr	r2, [pc, #404]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800525c:	e024      	b.n	80052a8 <HAL_RCC_OscConfig+0x378>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b05      	cmp	r3, #5
 8005264:	d110      	bne.n	8005288 <HAL_RCC_OscConfig+0x358>
 8005266:	4b60      	ldr	r3, [pc, #384]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	4a5e      	ldr	r2, [pc, #376]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 800526e:	f043 0304 	orr.w	r3, r3, #4
 8005272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005276:	4b5c      	ldr	r3, [pc, #368]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527c:	4a5a      	ldr	r2, [pc, #360]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005286:	e00f      	b.n	80052a8 <HAL_RCC_OscConfig+0x378>
 8005288:	4b57      	ldr	r3, [pc, #348]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	4a56      	ldr	r2, [pc, #344]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005298:	4b53      	ldr	r3, [pc, #332]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	4a52      	ldr	r2, [pc, #328]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80052a0:	f023 0304 	bic.w	r3, r3, #4
 80052a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d016      	beq.n	80052de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fc fc04 	bl	8001abc <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b8:	f7fc fc00 	bl	8001abc <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e138      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ce:	4b46      	ldr	r3, [pc, #280]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ed      	beq.n	80052b8 <HAL_RCC_OscConfig+0x388>
 80052dc:	e015      	b.n	800530a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7fc fbed 	bl	8001abc <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fc fbe9 	bl	8001abc <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e121      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052fc:	4b3a      	ldr	r3, [pc, #232]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ed      	bne.n	80052e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800530a:	7ffb      	ldrb	r3, [r7, #31]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d105      	bne.n	800531c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005310:	4b35      	ldr	r3, [pc, #212]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	4a34      	ldr	r2, [pc, #208]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d03c      	beq.n	80053a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01c      	beq.n	800536a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005330:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005336:	4a2c      	ldr	r2, [pc, #176]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005340:	f7fc fbbc 	bl	8001abc <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005348:	f7fc fbb8 	bl	8001abc <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0f2      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800535a:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 800535c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0ef      	beq.n	8005348 <HAL_RCC_OscConfig+0x418>
 8005368:	e01b      	b.n	80053a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800536a:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 800536c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537a:	f7fc fb9f 	bl	8001abc <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005382:	f7fc fb9b 	bl	8001abc <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e0d5      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005394:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 8005396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1ef      	bne.n	8005382 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80c9 	beq.w	800553e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ac:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 030c 	and.w	r3, r3, #12
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	f000 8083 	beq.w	80054c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d15e      	bne.n	8005480 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c2:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a08      	ldr	r2, [pc, #32]	; (80053e8 <HAL_RCC_OscConfig+0x4b8>)
 80053c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ce:	f7fc fb75 	bl	8001abc <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d4:	e00c      	b.n	80053f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fc fb71 	bl	8001abc <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d905      	bls.n	80053f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0ab      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f0:	4b55      	ldr	r3, [pc, #340]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1ec      	bne.n	80053d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053fc:	4b52      	ldr	r3, [pc, #328]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	4b52      	ldr	r3, [pc, #328]	; (800554c <HAL_RCC_OscConfig+0x61c>)
 8005402:	4013      	ands	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6a11      	ldr	r1, [r2, #32]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800540c:	3a01      	subs	r2, #1
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	4311      	orrs	r1, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005416:	0212      	lsls	r2, r2, #8
 8005418:	4311      	orrs	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800541e:	0852      	lsrs	r2, r2, #1
 8005420:	3a01      	subs	r2, #1
 8005422:	0552      	lsls	r2, r2, #21
 8005424:	4311      	orrs	r1, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800542a:	0852      	lsrs	r2, r2, #1
 800542c:	3a01      	subs	r2, #1
 800542e:	0652      	lsls	r2, r2, #25
 8005430:	4311      	orrs	r1, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005436:	06d2      	lsls	r2, r2, #27
 8005438:	430a      	orrs	r2, r1
 800543a:	4943      	ldr	r1, [pc, #268]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 800543c:	4313      	orrs	r3, r2
 800543e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005440:	4b41      	ldr	r3, [pc, #260]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a40      	ldr	r2, [pc, #256]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 8005446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800544a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800544c:	4b3e      	ldr	r3, [pc, #248]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4a3d      	ldr	r2, [pc, #244]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 8005452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fc fb30 	bl	8001abc <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fc fb2c 	bl	8001abc <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e066      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005472:	4b35      	ldr	r3, [pc, #212]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0x530>
 800547e:	e05e      	b.n	800553e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005480:	4b31      	ldr	r3, [pc, #196]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a30      	ldr	r2, [pc, #192]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 8005486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800548a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fc fb16 	bl	8001abc <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005494:	f7fc fb12 	bl	8001abc <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e04c      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a6:	4b28      	ldr	r3, [pc, #160]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80054b2:	4b25      	ldr	r3, [pc, #148]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	4924      	ldr	r1, [pc, #144]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_OscConfig+0x620>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	60cb      	str	r3, [r1, #12]
 80054be:	e03e      	b.n	800553e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e039      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80054cc:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <HAL_RCC_OscConfig+0x618>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f003 0203 	and.w	r2, r3, #3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d12c      	bne.n	800553a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	3b01      	subs	r3, #1
 80054ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d123      	bne.n	800553a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d11b      	bne.n	800553a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d113      	bne.n	800553a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	3b01      	subs	r3, #1
 8005520:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d109      	bne.n	800553a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005530:	085b      	lsrs	r3, r3, #1
 8005532:	3b01      	subs	r3, #1
 8005534:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005536:	429a      	cmp	r2, r3
 8005538:	d001      	beq.n	800553e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40021000 	.word	0x40021000
 800554c:	019f800c 	.word	0x019f800c
 8005550:	feeefffc 	.word	0xfeeefffc

08005554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e11e      	b.n	80057aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800556c:	4b91      	ldr	r3, [pc, #580]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d910      	bls.n	800559c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b8e      	ldr	r3, [pc, #568]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 020f 	bic.w	r2, r3, #15
 8005582:	498c      	ldr	r1, [pc, #560]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b8a      	ldr	r3, [pc, #552]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e106      	b.n	80057aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d073      	beq.n	8005690 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d129      	bne.n	8005604 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b0:	4b81      	ldr	r3, [pc, #516]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0f4      	b.n	80057aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80055c0:	f000 f99e 	bl	8005900 <RCC_GetSysClockFreqFromPLLSource>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4a7c      	ldr	r2, [pc, #496]	; (80057bc <HAL_RCC_ClockConfig+0x268>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d93f      	bls.n	800564e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055ce:	4b7a      	ldr	r3, [pc, #488]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d033      	beq.n	800564e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d12f      	bne.n	800564e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055ee:	4b72      	ldr	r3, [pc, #456]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f6:	4a70      	ldr	r2, [pc, #448]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80055f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055fe:	2380      	movs	r3, #128	; 0x80
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e024      	b.n	800564e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d107      	bne.n	800561c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800560c:	4b6a      	ldr	r3, [pc, #424]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d109      	bne.n	800562c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0c6      	b.n	80057aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800561c:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0be      	b.n	80057aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800562c:	f000 f8ce 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 8005630:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4a61      	ldr	r2, [pc, #388]	; (80057bc <HAL_RCC_ClockConfig+0x268>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d909      	bls.n	800564e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800563a:	4b5f      	ldr	r3, [pc, #380]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005642:	4a5d      	ldr	r2, [pc, #372]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 8005644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005648:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800564e:	4b5a      	ldr	r3, [pc, #360]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f023 0203 	bic.w	r2, r3, #3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4957      	ldr	r1, [pc, #348]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 800565c:	4313      	orrs	r3, r2
 800565e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005660:	f7fc fa2c 	bl	8001abc <HAL_GetTick>
 8005664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	e00a      	b.n	800567e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005668:	f7fc fa28 	bl	8001abc <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	f241 3288 	movw	r2, #5000	; 0x1388
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e095      	b.n	80057aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567e:	4b4e      	ldr	r3, [pc, #312]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 020c 	and.w	r2, r3, #12
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	429a      	cmp	r2, r3
 800568e:	d1eb      	bne.n	8005668 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d023      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a8:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	4a42      	ldr	r2, [pc, #264]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80056ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80056c0:	4b3d      	ldr	r3, [pc, #244]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80056c8:	4a3b      	ldr	r2, [pc, #236]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80056ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d0:	4b39      	ldr	r3, [pc, #228]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	4936      	ldr	r1, [pc, #216]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b80      	cmp	r3, #128	; 0x80
 80056e8:	d105      	bne.n	80056f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056ea:	4b33      	ldr	r3, [pc, #204]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	4a32      	ldr	r2, [pc, #200]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 80056f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f6:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d21d      	bcs.n	8005740 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005704:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 020f 	bic.w	r2, r3, #15
 800570c:	4929      	ldr	r1, [pc, #164]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	4313      	orrs	r3, r2
 8005712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005714:	f7fc f9d2 	bl	8001abc <HAL_GetTick>
 8005718:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800571a:	e00a      	b.n	8005732 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800571c:	f7fc f9ce 	bl	8001abc <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	; 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e03b      	b.n	80057aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b20      	ldr	r3, [pc, #128]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d1ed      	bne.n	800571c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800574c:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	4917      	ldr	r1, [pc, #92]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800576a:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	490f      	ldr	r1, [pc, #60]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800577e:	f000 f825 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 8005782:	4602      	mov	r2, r0
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <HAL_RCC_ClockConfig+0x264>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	490c      	ldr	r1, [pc, #48]	; (80057c0 <HAL_RCC_ClockConfig+0x26c>)
 8005790:	5ccb      	ldrb	r3, [r1, r3]
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <HAL_RCC_ClockConfig+0x270>)
 800579c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800579e:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <HAL_RCC_ClockConfig+0x274>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fc f93e 	bl	8001a24 <HAL_InitTick>
 80057a8:	4603      	mov	r3, r0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40022000 	.word	0x40022000
 80057b8:	40021000 	.word	0x40021000
 80057bc:	04c4b400 	.word	0x04c4b400
 80057c0:	08013eb0 	.word	0x08013eb0
 80057c4:	20000000 	.word	0x20000000
 80057c8:	20000004 	.word	0x20000004

080057cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057d2:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d102      	bne.n	80057e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057de:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	e047      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057e4:	4b27      	ldr	r3, [pc, #156]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d102      	bne.n	80057f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057f0:	4b26      	ldr	r3, [pc, #152]	; (800588c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	e03e      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057f6:	4b23      	ldr	r3, [pc, #140]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d136      	bne.n	8005870 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005802:	4b20      	ldr	r3, [pc, #128]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800580c:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	091b      	lsrs	r3, r3, #4
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	3301      	adds	r3, #1
 8005818:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d10c      	bne.n	800583a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005820:	4a1a      	ldr	r2, [pc, #104]	; (800588c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	fbb2 f3f3 	udiv	r3, r2, r3
 8005828:	4a16      	ldr	r2, [pc, #88]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800582a:	68d2      	ldr	r2, [r2, #12]
 800582c:	0a12      	lsrs	r2, r2, #8
 800582e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005832:	fb02 f303 	mul.w	r3, r2, r3
 8005836:	617b      	str	r3, [r7, #20]
      break;
 8005838:	e00c      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <HAL_RCC_GetSysClockFreq+0xbc>)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005844:	68d2      	ldr	r2, [r2, #12]
 8005846:	0a12      	lsrs	r2, r2, #8
 8005848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800584c:	fb02 f303 	mul.w	r3, r2, r3
 8005850:	617b      	str	r3, [r7, #20]
      break;
 8005852:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	0e5b      	lsrs	r3, r3, #25
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	3301      	adds	r3, #1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	e001      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005874:	693b      	ldr	r3, [r7, #16]
}
 8005876:	4618      	mov	r0, r3
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40021000 	.word	0x40021000
 8005888:	00f42400 	.word	0x00f42400
 800588c:	016e3600 	.word	0x016e3600

08005890 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005894:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005896:	681b      	ldr	r3, [r3, #0]
}
 8005898:	4618      	mov	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000000 	.word	0x20000000

080058a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058ac:	f7ff fff0 	bl	8005890 <HAL_RCC_GetHCLKFreq>
 80058b0:	4602      	mov	r2, r0
 80058b2:	4b06      	ldr	r3, [pc, #24]	; (80058cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	4904      	ldr	r1, [pc, #16]	; (80058d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058be:	5ccb      	ldrb	r3, [r1, r3]
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40021000 	.word	0x40021000
 80058d0:	08013ec0 	.word	0x08013ec0

080058d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058d8:	f7ff ffda 	bl	8005890 <HAL_RCC_GetHCLKFreq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	0adb      	lsrs	r3, r3, #11
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	4904      	ldr	r1, [pc, #16]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000
 80058fc:	08013ec0 	.word	0x08013ec0

08005900 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005906:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005910:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d10c      	bne.n	800593e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005924:	4a17      	ldr	r2, [pc, #92]	; (8005984 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	fbb2 f3f3 	udiv	r3, r2, r3
 800592c:	4a14      	ldr	r2, [pc, #80]	; (8005980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800592e:	68d2      	ldr	r2, [r2, #12]
 8005930:	0a12      	lsrs	r2, r2, #8
 8005932:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	617b      	str	r3, [r7, #20]
    break;
 800593c:	e00c      	b.n	8005958 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800593e:	4a12      	ldr	r2, [pc, #72]	; (8005988 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	4a0e      	ldr	r2, [pc, #56]	; (8005980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005948:	68d2      	ldr	r2, [r2, #12]
 800594a:	0a12      	lsrs	r2, r2, #8
 800594c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005950:	fb02 f303 	mul.w	r3, r2, r3
 8005954:	617b      	str	r3, [r7, #20]
    break;
 8005956:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005958:	4b09      	ldr	r3, [pc, #36]	; (8005980 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	0e5b      	lsrs	r3, r3, #25
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	3301      	adds	r3, #1
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005972:	687b      	ldr	r3, [r7, #4]
}
 8005974:	4618      	mov	r0, r3
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40021000 	.word	0x40021000
 8005984:	016e3600 	.word	0x016e3600
 8005988:	00f42400 	.word	0x00f42400

0800598c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005994:	2300      	movs	r3, #0
 8005996:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005998:	2300      	movs	r3, #0
 800599a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8098 	beq.w	8005ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ae:	4b43      	ldr	r3, [pc, #268]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10d      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ba:	4b40      	ldr	r3, [pc, #256]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	4a3f      	ldr	r2, [pc, #252]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c4:	6593      	str	r3, [r2, #88]	; 0x58
 80059c6:	4b3d      	ldr	r3, [pc, #244]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d2:	2301      	movs	r3, #1
 80059d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059d6:	4b3a      	ldr	r3, [pc, #232]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a39      	ldr	r2, [pc, #228]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059e2:	f7fc f86b 	bl	8001abc <HAL_GetTick>
 80059e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059e8:	e009      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ea:	f7fc f867 	bl	8001abc <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d902      	bls.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	74fb      	strb	r3, [r7, #19]
        break;
 80059fc:	e005      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059fe:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0ef      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a0a:	7cfb      	ldrb	r3, [r7, #19]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d159      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a10:	4b2a      	ldr	r3, [pc, #168]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01e      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d019      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a2c:	4b23      	ldr	r3, [pc, #140]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a38:	4b20      	ldr	r3, [pc, #128]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a48:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4e:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a58:	4a18      	ldr	r2, [pc, #96]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fc f827 	bl	8001abc <HAL_GetTick>
 8005a6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a70:	e00b      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a72:	f7fc f823 	bl	8001abc <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d902      	bls.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	74fb      	strb	r3, [r7, #19]
            break;
 8005a88:	e006      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0ec      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a9e:	4b07      	ldr	r3, [pc, #28]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	4903      	ldr	r1, [pc, #12]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ab6:	7cfb      	ldrb	r3, [r7, #19]
 8005ab8:	74bb      	strb	r3, [r7, #18]
 8005aba:	e005      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ac8:	7c7b      	ldrb	r3, [r7, #17]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d105      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ace:	4ba6      	ldr	r3, [pc, #664]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	4aa5      	ldr	r2, [pc, #660]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ae6:	4ba0      	ldr	r3, [pc, #640]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	f023 0203 	bic.w	r2, r3, #3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	499c      	ldr	r1, [pc, #624]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b08:	4b97      	ldr	r3, [pc, #604]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f023 020c 	bic.w	r2, r3, #12
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	4994      	ldr	r1, [pc, #592]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b2a:	4b8f      	ldr	r3, [pc, #572]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	498b      	ldr	r1, [pc, #556]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b4c:	4b86      	ldr	r3, [pc, #536]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	4983      	ldr	r1, [pc, #524]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b6e:	4b7e      	ldr	r3, [pc, #504]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	497a      	ldr	r1, [pc, #488]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b90:	4b75      	ldr	r3, [pc, #468]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	4972      	ldr	r1, [pc, #456]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bb2:	4b6d      	ldr	r3, [pc, #436]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	4969      	ldr	r1, [pc, #420]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bd4:	4b64      	ldr	r3, [pc, #400]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	4961      	ldr	r1, [pc, #388]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bf6:	4b5c      	ldr	r3, [pc, #368]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	4958      	ldr	r1, [pc, #352]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d015      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c18:	4b53      	ldr	r3, [pc, #332]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	4950      	ldr	r1, [pc, #320]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c36:	d105      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c38:	4b4b      	ldr	r3, [pc, #300]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4a4a      	ldr	r2, [pc, #296]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d015      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c50:	4b45      	ldr	r3, [pc, #276]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	4942      	ldr	r1, [pc, #264]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6e:	d105      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c70:	4b3d      	ldr	r3, [pc, #244]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4a3c      	ldr	r2, [pc, #240]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d015      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c88:	4b37      	ldr	r3, [pc, #220]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	4934      	ldr	r1, [pc, #208]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca8:	4b2f      	ldr	r3, [pc, #188]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d015      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cc0:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	4926      	ldr	r1, [pc, #152]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cde:	d105      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce0:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d015      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cf8:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	4918      	ldr	r1, [pc, #96]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d16:	d105      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d18:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d015      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d30:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	490a      	ldr	r1, [pc, #40]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d4e:	d105      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40021000 	.word	0x40021000

08005d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e049      	b.n	8005e12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fb fd32 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f000 fb12 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d001      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e04a      	b.n	8005eca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d018      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5e:	d013      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1d      	ldr	r2, [pc, #116]	; (8005edc <HAL_TIM_Base_Start_IT+0xc0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1a      	ldr	r2, [pc, #104]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x6c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d115      	bne.n	8005eb4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	4b17      	ldr	r3, [pc, #92]	; (8005eec <HAL_TIM_Base_Start_IT+0xd0>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b06      	cmp	r3, #6
 8005e98:	d015      	beq.n	8005ec6 <HAL_TIM_Base_Start_IT+0xaa>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea0:	d011      	beq.n	8005ec6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	e008      	b.n	8005ec6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e000      	b.n	8005ec8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40012c00 	.word	0x40012c00
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	00010007 	.word	0x00010007

08005ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d020      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01b      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0202 	mvn.w	r2, #2
 8005f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa2c 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa1e 	bl	8006384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa2f 	bl	80063ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d020      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01b      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0204 	mvn.w	r2, #4
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa06 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f9f8 	bl	8006384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fa09 	bl	80063ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d020      	beq.n	8005fec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01b      	beq.n	8005fec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0208 	mvn.w	r2, #8
 8005fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9e0 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8005fd8:	e005      	b.n	8005fe6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9d2 	bl	8006384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f9e3 	bl	80063ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d020      	beq.n	8006038 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01b      	beq.n	8006038 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0210 	mvn.w	r2, #16
 8006008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2208      	movs	r2, #8
 800600e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9ba 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8006024:	e005      	b.n	8006032 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9ac 	bl	8006384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f9bd 	bl	80063ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00c      	beq.n	800605c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0201 	mvn.w	r2, #1
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f009 f90e 	bl	800f278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fb69 	bl	800675c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00c      	beq.n	80060ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fb61 	bl	8006770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00c      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f977 	bl	80063c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00c      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f06f 0220 	mvn.w	r2, #32
 80060ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fb29 	bl	8006748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00c      	beq.n	800611a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fb35 	bl	8006784 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fb2d 	bl	8006798 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00c      	beq.n	8006162 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fb25 	bl	80067ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fb1d 	bl	80067c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_ConfigClockSource+0x1c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e0de      	b.n	800636a <HAL_TIM_ConfigClockSource+0x1da>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80061ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a63      	ldr	r2, [pc, #396]	; (8006374 <HAL_TIM_ConfigClockSource+0x1e4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	f000 80a9 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 80061ec:	4a61      	ldr	r2, [pc, #388]	; (8006374 <HAL_TIM_ConfigClockSource+0x1e4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	f200 80ae 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 80061f4:	4a60      	ldr	r2, [pc, #384]	; (8006378 <HAL_TIM_ConfigClockSource+0x1e8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	f000 80a1 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 80061fc:	4a5e      	ldr	r2, [pc, #376]	; (8006378 <HAL_TIM_ConfigClockSource+0x1e8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	f200 80a6 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006204:	4a5d      	ldr	r2, [pc, #372]	; (800637c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006206:	4293      	cmp	r3, r2
 8006208:	f000 8099 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 800620c:	4a5b      	ldr	r2, [pc, #364]	; (800637c <HAL_TIM_ConfigClockSource+0x1ec>)
 800620e:	4293      	cmp	r3, r2
 8006210:	f200 809e 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006214:	4a5a      	ldr	r2, [pc, #360]	; (8006380 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	f000 8091 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 800621c:	4a58      	ldr	r2, [pc, #352]	; (8006380 <HAL_TIM_ConfigClockSource+0x1f0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	f200 8096 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006224:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006228:	f000 8089 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 800622c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006230:	f200 808e 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006238:	d03e      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0x128>
 800623a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800623e:	f200 8087 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006246:	f000 8086 	beq.w	8006356 <HAL_TIM_ConfigClockSource+0x1c6>
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	d87f      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006250:	2b70      	cmp	r3, #112	; 0x70
 8006252:	d01a      	beq.n	800628a <HAL_TIM_ConfigClockSource+0xfa>
 8006254:	2b70      	cmp	r3, #112	; 0x70
 8006256:	d87b      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006258:	2b60      	cmp	r3, #96	; 0x60
 800625a:	d050      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0x16e>
 800625c:	2b60      	cmp	r3, #96	; 0x60
 800625e:	d877      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006260:	2b50      	cmp	r3, #80	; 0x50
 8006262:	d03c      	beq.n	80062de <HAL_TIM_ConfigClockSource+0x14e>
 8006264:	2b50      	cmp	r3, #80	; 0x50
 8006266:	d873      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d058      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x18e>
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	d86f      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006270:	2b30      	cmp	r3, #48	; 0x30
 8006272:	d064      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 8006274:	2b30      	cmp	r3, #48	; 0x30
 8006276:	d86b      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006278:	2b20      	cmp	r3, #32
 800627a:	d060      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 800627c:	2b20      	cmp	r3, #32
 800627e:	d867      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d05c      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 8006284:	2b10      	cmp	r3, #16
 8006286:	d05a      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 8006288:	e062      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800629a:	f000 f9b3 	bl	8006604 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	609a      	str	r2, [r3, #8]
      break;
 80062b6:	e04f      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062c8:	f000 f99c 	bl	8006604 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062da:	609a      	str	r2, [r3, #8]
      break;
 80062dc:	e03c      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ea:	461a      	mov	r2, r3
 80062ec:	f000 f90e 	bl	800650c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2150      	movs	r1, #80	; 0x50
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 f967 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 80062fc:	e02c      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800630a:	461a      	mov	r2, r3
 800630c:	f000 f92d 	bl	800656a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2160      	movs	r1, #96	; 0x60
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f957 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 800631c:	e01c      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800632a:	461a      	mov	r2, r3
 800632c:	f000 f8ee 	bl	800650c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2140      	movs	r1, #64	; 0x40
 8006336:	4618      	mov	r0, r3
 8006338:	f000 f947 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 800633c:	e00c      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f000 f93e 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 800634e:	e003      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
      break;
 8006354:	e000      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	00100070 	.word	0x00100070
 8006378:	00100040 	.word	0x00100040
 800637c:	00100030 	.word	0x00100030
 8006380:	00100020 	.word	0x00100020

08006384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a42      	ldr	r2, [pc, #264]	; (80064f0 <TIM_Base_SetConfig+0x11c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00f      	beq.n	800640c <TIM_Base_SetConfig+0x38>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f2:	d00b      	beq.n	800640c <TIM_Base_SetConfig+0x38>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a3f      	ldr	r2, [pc, #252]	; (80064f4 <TIM_Base_SetConfig+0x120>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d007      	beq.n	800640c <TIM_Base_SetConfig+0x38>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a3e      	ldr	r2, [pc, #248]	; (80064f8 <TIM_Base_SetConfig+0x124>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_Base_SetConfig+0x38>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3d      	ldr	r2, [pc, #244]	; (80064fc <TIM_Base_SetConfig+0x128>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d108      	bne.n	800641e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a33      	ldr	r2, [pc, #204]	; (80064f0 <TIM_Base_SetConfig+0x11c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d01b      	beq.n	800645e <TIM_Base_SetConfig+0x8a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642c:	d017      	beq.n	800645e <TIM_Base_SetConfig+0x8a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a30      	ldr	r2, [pc, #192]	; (80064f4 <TIM_Base_SetConfig+0x120>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <TIM_Base_SetConfig+0x8a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a2f      	ldr	r2, [pc, #188]	; (80064f8 <TIM_Base_SetConfig+0x124>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00f      	beq.n	800645e <TIM_Base_SetConfig+0x8a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <TIM_Base_SetConfig+0x128>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00b      	beq.n	800645e <TIM_Base_SetConfig+0x8a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a2d      	ldr	r2, [pc, #180]	; (8006500 <TIM_Base_SetConfig+0x12c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d007      	beq.n	800645e <TIM_Base_SetConfig+0x8a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a2c      	ldr	r2, [pc, #176]	; (8006504 <TIM_Base_SetConfig+0x130>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_Base_SetConfig+0x8a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a2b      	ldr	r2, [pc, #172]	; (8006508 <TIM_Base_SetConfig+0x134>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d108      	bne.n	8006470 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <TIM_Base_SetConfig+0x11c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00f      	beq.n	80064bc <TIM_Base_SetConfig+0xe8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a17      	ldr	r2, [pc, #92]	; (80064fc <TIM_Base_SetConfig+0x128>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_Base_SetConfig+0xe8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a16      	ldr	r2, [pc, #88]	; (8006500 <TIM_Base_SetConfig+0x12c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_Base_SetConfig+0xe8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a15      	ldr	r2, [pc, #84]	; (8006504 <TIM_Base_SetConfig+0x130>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_Base_SetConfig+0xe8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a14      	ldr	r2, [pc, #80]	; (8006508 <TIM_Base_SetConfig+0x134>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d103      	bne.n	80064c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d105      	bne.n	80064e2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f023 0201 	bic.w	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	611a      	str	r2, [r3, #16]
  }
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40013400 	.word	0x40013400
 8006500:	40014000 	.word	0x40014000
 8006504:	40014400 	.word	0x40014400
 8006508:	40014800 	.word	0x40014800

0800650c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f023 0201 	bic.w	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f023 030a 	bic.w	r3, r3, #10
 8006548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800656a:	b480      	push	{r7}
 800656c:	b087      	sub	sp, #28
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f023 0210 	bic.w	r2, r3, #16
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	031b      	lsls	r3, r3, #12
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f043 0307 	orr.w	r3, r3, #7
 80065f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	609a      	str	r2, [r3, #8]
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	021a      	lsls	r2, r3, #8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	431a      	orrs	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4313      	orrs	r3, r2
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	609a      	str	r2, [r3, #8]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006658:	2302      	movs	r3, #2
 800665a:	e065      	b.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a2c      	ldr	r2, [pc, #176]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a2b      	ldr	r2, [pc, #172]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d108      	bne.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006696:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1b      	ldr	r2, [pc, #108]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d018      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d2:	d013      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a18      	ldr	r2, [pc, #96]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00e      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a17      	ldr	r2, [pc, #92]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d009      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a12      	ldr	r2, [pc, #72]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d004      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a13      	ldr	r2, [pc, #76]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d10c      	bne.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006702:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	4313      	orrs	r3, r2
 800670c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40013400 	.word	0x40013400
 800673c:	40000400 	.word	0x40000400
 8006740:	40000800 	.word	0x40000800
 8006744:	40014000 	.word	0x40014000

08006748 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e042      	b.n	800686c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fb f871 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2224      	movs	r2, #36	; 0x24
 8006802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0201 	bic.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fe38 	bl	8007494 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fb69 	bl	8006efc <UART_SetConfig>
 800682a:	4603      	mov	r3, r0
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e01b      	b.n	800686c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 feb7 	bl	80075d8 <UART_CheckIdleState>
 800686a:	4603      	mov	r3, r0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b0ba      	sub	sp, #232	; 0xe8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800689a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800689e:	f640 030f 	movw	r3, #2063	; 0x80f
 80068a2:	4013      	ands	r3, r2
 80068a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d11b      	bne.n	80068e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d015      	beq.n	80068e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d105      	bne.n	80068d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d009      	beq.n	80068e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 82e3 	beq.w	8006ea4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
      }
      return;
 80068e6:	e2dd      	b.n	8006ea4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 8123 	beq.w	8006b38 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80068f6:	4b8d      	ldr	r3, [pc, #564]	; (8006b2c <HAL_UART_IRQHandler+0x2b8>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80068fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006902:	4b8b      	ldr	r3, [pc, #556]	; (8006b30 <HAL_UART_IRQHandler+0x2bc>)
 8006904:	4013      	ands	r3, r2
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 8116 	beq.w	8006b38 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800690c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d011      	beq.n	800693c <HAL_UART_IRQHandler+0xc8>
 8006918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2201      	movs	r2, #1
 800692a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006932:	f043 0201 	orr.w	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d011      	beq.n	800696c <HAL_UART_IRQHandler+0xf8>
 8006948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2202      	movs	r2, #2
 800695a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006962:	f043 0204 	orr.w	r2, r3, #4
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	d011      	beq.n	800699c <HAL_UART_IRQHandler+0x128>
 8006978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2204      	movs	r2, #4
 800698a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006992:	f043 0202 	orr.w	r2, r3, #2
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d017      	beq.n	80069d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069b8:	4b5c      	ldr	r3, [pc, #368]	; (8006b2c <HAL_UART_IRQHandler+0x2b8>)
 80069ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2208      	movs	r2, #8
 80069c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ce:	f043 0208 	orr.w	r2, r3, #8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d012      	beq.n	8006a0a <HAL_UART_IRQHandler+0x196>
 80069e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00c      	beq.n	8006a0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a00:	f043 0220 	orr.w	r2, r3, #32
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8249 	beq.w	8006ea8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d013      	beq.n	8006a4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d105      	bne.n	8006a3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d005      	beq.n	8006a6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d054      	beq.n	8006b18 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fec9 	bl	8007806 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d146      	bne.n	8006b10 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1d9      	bne.n	8006a82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d017      	beq.n	8006b08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ade:	4a15      	ldr	r2, [pc, #84]	; (8006b34 <HAL_UART_IRQHandler+0x2c0>)
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fb f97d 	bl	8001de8 <HAL_DMA_Abort_IT>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d019      	beq.n	8006b28 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006b02:	4610      	mov	r0, r2
 8006b04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b06:	e00f      	b.n	8006b28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f9e1 	bl	8006ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0e:	e00b      	b.n	8006b28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f9dd 	bl	8006ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b16:	e007      	b.n	8006b28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f9d9 	bl	8006ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006b26:	e1bf      	b.n	8006ea8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b28:	bf00      	nop
    return;
 8006b2a:	e1bd      	b.n	8006ea8 <HAL_UART_IRQHandler+0x634>
 8006b2c:	10000001 	.word	0x10000001
 8006b30:	04000120 	.word	0x04000120
 8006b34:	080078d3 	.word	0x080078d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	f040 8153 	bne.w	8006de8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f003 0310 	and.w	r3, r3, #16
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 814c 	beq.w	8006de8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 8145 	beq.w	8006de8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2210      	movs	r2, #16
 8006b64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	f040 80bb 	bne.w	8006cec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 818f 	beq.w	8006eac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	f080 8187 	bcs.w	8006eac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 8087 	bne.w	8006cca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006be6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1da      	bne.n	8006bbc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c18:	f023 0301 	bic.w	r3, r3, #1
 8006c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3308      	adds	r3, #8
 8006c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e1      	bne.n	8006c06 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3308      	adds	r3, #8
 8006c62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e3      	bne.n	8006c42 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c98:	f023 0310 	bic.w	r3, r3, #16
 8006c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006caa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e4      	bne.n	8006c88 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fb f836 	bl	8001d36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f8fd 	bl	8006ee4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cea:	e0df      	b.n	8006eac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80d1 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 80cc 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e4      	bne.n	8006d18 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d76:	633a      	str	r2, [r7, #48]	; 0x30
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e1      	bne.n	8006d4e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0310 	bic.w	r3, r3, #16
 8006db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	69b9      	ldr	r1, [r7, #24]
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e4      	bne.n	8006d9e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f87f 	bl	8006ee4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006de6:	e063      	b.n	8006eb0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00e      	beq.n	8006e12 <HAL_UART_IRQHandler+0x59e>
 8006df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fda2 	bl	8007954 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e10:	e051      	b.n	8006eb6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d014      	beq.n	8006e48 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d105      	bne.n	8006e36 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d008      	beq.n	8006e48 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d03a      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
    }
    return;
 8006e46:	e035      	b.n	8006eb4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d009      	beq.n	8006e68 <HAL_UART_IRQHandler+0x5f4>
 8006e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fd4c 	bl	80078fe <UART_EndTransmit_IT>
    return;
 8006e66:	e026      	b.n	8006eb6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <HAL_UART_IRQHandler+0x614>
 8006e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fd7b 	bl	800797c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e86:	e016      	b.n	8006eb6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d010      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x642>
 8006e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	da0c      	bge.n	8006eb6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fd63 	bl	8007968 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ea2:	e008      	b.n	8006eb6 <HAL_UART_IRQHandler+0x642>
      return;
 8006ea4:	bf00      	nop
 8006ea6:	e006      	b.n	8006eb6 <HAL_UART_IRQHandler+0x642>
    return;
 8006ea8:	bf00      	nop
 8006eaa:	e004      	b.n	8006eb6 <HAL_UART_IRQHandler+0x642>
      return;
 8006eac:	bf00      	nop
 8006eae:	e002      	b.n	8006eb6 <HAL_UART_IRQHandler+0x642>
      return;
 8006eb0:	bf00      	nop
 8006eb2:	e000      	b.n	8006eb6 <HAL_UART_IRQHandler+0x642>
    return;
 8006eb4:	bf00      	nop
  }
}
 8006eb6:	37e8      	adds	r7, #232	; 0xe8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f00:	b08c      	sub	sp, #48	; 0x30
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	431a      	orrs	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4bab      	ldr	r3, [pc, #684]	; (80071d8 <UART_SetConfig+0x2dc>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4aa0      	ldr	r2, [pc, #640]	; (80071dc <UART_SetConfig+0x2e0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f64:	4313      	orrs	r3, r2
 8006f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006f72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	f023 010f 	bic.w	r1, r3, #15
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a91      	ldr	r2, [pc, #580]	; (80071e0 <UART_SetConfig+0x2e4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d125      	bne.n	8006fec <UART_SetConfig+0xf0>
 8006fa0:	4b90      	ldr	r3, [pc, #576]	; (80071e4 <UART_SetConfig+0x2e8>)
 8006fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d81a      	bhi.n	8006fe4 <UART_SetConfig+0xe8>
 8006fae:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <UART_SetConfig+0xb8>)
 8006fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb4:	08006fc5 	.word	0x08006fc5
 8006fb8:	08006fd5 	.word	0x08006fd5
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006fdd 	.word	0x08006fdd
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fca:	e0d6      	b.n	800717a <UART_SetConfig+0x27e>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd2:	e0d2      	b.n	800717a <UART_SetConfig+0x27e>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fda:	e0ce      	b.n	800717a <UART_SetConfig+0x27e>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fe2:	e0ca      	b.n	800717a <UART_SetConfig+0x27e>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fea:	e0c6      	b.n	800717a <UART_SetConfig+0x27e>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a7d      	ldr	r2, [pc, #500]	; (80071e8 <UART_SetConfig+0x2ec>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d138      	bne.n	8007068 <UART_SetConfig+0x16c>
 8006ff6:	4b7b      	ldr	r3, [pc, #492]	; (80071e4 <UART_SetConfig+0x2e8>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffc:	f003 030c 	and.w	r3, r3, #12
 8007000:	2b0c      	cmp	r3, #12
 8007002:	d82d      	bhi.n	8007060 <UART_SetConfig+0x164>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <UART_SetConfig+0x110>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007041 	.word	0x08007041
 8007010:	08007061 	.word	0x08007061
 8007014:	08007061 	.word	0x08007061
 8007018:	08007061 	.word	0x08007061
 800701c:	08007051 	.word	0x08007051
 8007020:	08007061 	.word	0x08007061
 8007024:	08007061 	.word	0x08007061
 8007028:	08007061 	.word	0x08007061
 800702c:	08007049 	.word	0x08007049
 8007030:	08007061 	.word	0x08007061
 8007034:	08007061 	.word	0x08007061
 8007038:	08007061 	.word	0x08007061
 800703c:	08007059 	.word	0x08007059
 8007040:	2300      	movs	r3, #0
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007046:	e098      	b.n	800717a <UART_SetConfig+0x27e>
 8007048:	2302      	movs	r3, #2
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800704e:	e094      	b.n	800717a <UART_SetConfig+0x27e>
 8007050:	2304      	movs	r3, #4
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007056:	e090      	b.n	800717a <UART_SetConfig+0x27e>
 8007058:	2308      	movs	r3, #8
 800705a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800705e:	e08c      	b.n	800717a <UART_SetConfig+0x27e>
 8007060:	2310      	movs	r3, #16
 8007062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007066:	e088      	b.n	800717a <UART_SetConfig+0x27e>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a5f      	ldr	r2, [pc, #380]	; (80071ec <UART_SetConfig+0x2f0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d125      	bne.n	80070be <UART_SetConfig+0x1c2>
 8007072:	4b5c      	ldr	r3, [pc, #368]	; (80071e4 <UART_SetConfig+0x2e8>)
 8007074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007078:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800707c:	2b30      	cmp	r3, #48	; 0x30
 800707e:	d016      	beq.n	80070ae <UART_SetConfig+0x1b2>
 8007080:	2b30      	cmp	r3, #48	; 0x30
 8007082:	d818      	bhi.n	80070b6 <UART_SetConfig+0x1ba>
 8007084:	2b20      	cmp	r3, #32
 8007086:	d00a      	beq.n	800709e <UART_SetConfig+0x1a2>
 8007088:	2b20      	cmp	r3, #32
 800708a:	d814      	bhi.n	80070b6 <UART_SetConfig+0x1ba>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <UART_SetConfig+0x19a>
 8007090:	2b10      	cmp	r3, #16
 8007092:	d008      	beq.n	80070a6 <UART_SetConfig+0x1aa>
 8007094:	e00f      	b.n	80070b6 <UART_SetConfig+0x1ba>
 8007096:	2300      	movs	r3, #0
 8007098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709c:	e06d      	b.n	800717a <UART_SetConfig+0x27e>
 800709e:	2302      	movs	r3, #2
 80070a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a4:	e069      	b.n	800717a <UART_SetConfig+0x27e>
 80070a6:	2304      	movs	r3, #4
 80070a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ac:	e065      	b.n	800717a <UART_SetConfig+0x27e>
 80070ae:	2308      	movs	r3, #8
 80070b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b4:	e061      	b.n	800717a <UART_SetConfig+0x27e>
 80070b6:	2310      	movs	r3, #16
 80070b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070bc:	e05d      	b.n	800717a <UART_SetConfig+0x27e>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a4b      	ldr	r2, [pc, #300]	; (80071f0 <UART_SetConfig+0x2f4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d125      	bne.n	8007114 <UART_SetConfig+0x218>
 80070c8:	4b46      	ldr	r3, [pc, #280]	; (80071e4 <UART_SetConfig+0x2e8>)
 80070ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070d2:	2bc0      	cmp	r3, #192	; 0xc0
 80070d4:	d016      	beq.n	8007104 <UART_SetConfig+0x208>
 80070d6:	2bc0      	cmp	r3, #192	; 0xc0
 80070d8:	d818      	bhi.n	800710c <UART_SetConfig+0x210>
 80070da:	2b80      	cmp	r3, #128	; 0x80
 80070dc:	d00a      	beq.n	80070f4 <UART_SetConfig+0x1f8>
 80070de:	2b80      	cmp	r3, #128	; 0x80
 80070e0:	d814      	bhi.n	800710c <UART_SetConfig+0x210>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <UART_SetConfig+0x1f0>
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	d008      	beq.n	80070fc <UART_SetConfig+0x200>
 80070ea:	e00f      	b.n	800710c <UART_SetConfig+0x210>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f2:	e042      	b.n	800717a <UART_SetConfig+0x27e>
 80070f4:	2302      	movs	r3, #2
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fa:	e03e      	b.n	800717a <UART_SetConfig+0x27e>
 80070fc:	2304      	movs	r3, #4
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007102:	e03a      	b.n	800717a <UART_SetConfig+0x27e>
 8007104:	2308      	movs	r3, #8
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710a:	e036      	b.n	800717a <UART_SetConfig+0x27e>
 800710c:	2310      	movs	r3, #16
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007112:	e032      	b.n	800717a <UART_SetConfig+0x27e>
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a30      	ldr	r2, [pc, #192]	; (80071dc <UART_SetConfig+0x2e0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d12a      	bne.n	8007174 <UART_SetConfig+0x278>
 800711e:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <UART_SetConfig+0x2e8>)
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007124:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007128:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800712c:	d01a      	beq.n	8007164 <UART_SetConfig+0x268>
 800712e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007132:	d81b      	bhi.n	800716c <UART_SetConfig+0x270>
 8007134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007138:	d00c      	beq.n	8007154 <UART_SetConfig+0x258>
 800713a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800713e:	d815      	bhi.n	800716c <UART_SetConfig+0x270>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <UART_SetConfig+0x250>
 8007144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007148:	d008      	beq.n	800715c <UART_SetConfig+0x260>
 800714a:	e00f      	b.n	800716c <UART_SetConfig+0x270>
 800714c:	2300      	movs	r3, #0
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007152:	e012      	b.n	800717a <UART_SetConfig+0x27e>
 8007154:	2302      	movs	r3, #2
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e00e      	b.n	800717a <UART_SetConfig+0x27e>
 800715c:	2304      	movs	r3, #4
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007162:	e00a      	b.n	800717a <UART_SetConfig+0x27e>
 8007164:	2308      	movs	r3, #8
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716a:	e006      	b.n	800717a <UART_SetConfig+0x27e>
 800716c:	2310      	movs	r3, #16
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007172:	e002      	b.n	800717a <UART_SetConfig+0x27e>
 8007174:	2310      	movs	r3, #16
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a17      	ldr	r2, [pc, #92]	; (80071dc <UART_SetConfig+0x2e0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	f040 80a8 	bne.w	80072d6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800718a:	2b08      	cmp	r3, #8
 800718c:	d834      	bhi.n	80071f8 <UART_SetConfig+0x2fc>
 800718e:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <UART_SetConfig+0x298>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	080071b9 	.word	0x080071b9
 8007198:	080071f9 	.word	0x080071f9
 800719c:	080071c1 	.word	0x080071c1
 80071a0:	080071f9 	.word	0x080071f9
 80071a4:	080071c7 	.word	0x080071c7
 80071a8:	080071f9 	.word	0x080071f9
 80071ac:	080071f9 	.word	0x080071f9
 80071b0:	080071f9 	.word	0x080071f9
 80071b4:	080071cf 	.word	0x080071cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b8:	f7fe fb76 	bl	80058a8 <HAL_RCC_GetPCLK1Freq>
 80071bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071be:	e021      	b.n	8007204 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <UART_SetConfig+0x2f8>)
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071c4:	e01e      	b.n	8007204 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c6:	f7fe fb01 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 80071ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071cc:	e01a      	b.n	8007204 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071d4:	e016      	b.n	8007204 <UART_SetConfig+0x308>
 80071d6:	bf00      	nop
 80071d8:	cfff69f3 	.word	0xcfff69f3
 80071dc:	40008000 	.word	0x40008000
 80071e0:	40013800 	.word	0x40013800
 80071e4:	40021000 	.word	0x40021000
 80071e8:	40004400 	.word	0x40004400
 80071ec:	40004800 	.word	0x40004800
 80071f0:	40004c00 	.word	0x40004c00
 80071f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007202:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 812a 	beq.w	8007460 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	4a9e      	ldr	r2, [pc, #632]	; (800748c <UART_SetConfig+0x590>)
 8007212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007216:	461a      	mov	r2, r3
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	fbb3 f3f2 	udiv	r3, r3, r2
 800721e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	4613      	mov	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	4413      	add	r3, r2
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	429a      	cmp	r2, r3
 800722e:	d305      	bcc.n	800723c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	429a      	cmp	r2, r3
 800723a:	d903      	bls.n	8007244 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007242:	e10d      	b.n	8007460 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	2200      	movs	r2, #0
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	60fa      	str	r2, [r7, #12]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	4a8e      	ldr	r2, [pc, #568]	; (800748c <UART_SetConfig+0x590>)
 8007252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007256:	b29b      	uxth	r3, r3
 8007258:	2200      	movs	r2, #0
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007266:	f7f9 fd47 	bl	8000cf8 <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	020b      	lsls	r3, r1, #8
 800727c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007280:	0202      	lsls	r2, r0, #8
 8007282:	6979      	ldr	r1, [r7, #20]
 8007284:	6849      	ldr	r1, [r1, #4]
 8007286:	0849      	lsrs	r1, r1, #1
 8007288:	2000      	movs	r0, #0
 800728a:	460c      	mov	r4, r1
 800728c:	4605      	mov	r5, r0
 800728e:	eb12 0804 	adds.w	r8, r2, r4
 8007292:	eb43 0905 	adc.w	r9, r3, r5
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	469a      	mov	sl, r3
 800729e:	4693      	mov	fp, r2
 80072a0:	4652      	mov	r2, sl
 80072a2:	465b      	mov	r3, fp
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f9 fd26 	bl	8000cf8 <__aeabi_uldivmod>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4613      	mov	r3, r2
 80072b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ba:	d308      	bcc.n	80072ce <UART_SetConfig+0x3d2>
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072c2:	d204      	bcs.n	80072ce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6a3a      	ldr	r2, [r7, #32]
 80072ca:	60da      	str	r2, [r3, #12]
 80072cc:	e0c8      	b.n	8007460 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072d4:	e0c4      	b.n	8007460 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072de:	d167      	bne.n	80073b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80072e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d828      	bhi.n	800733a <UART_SetConfig+0x43e>
 80072e8:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0x3f4>)
 80072ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ee:	bf00      	nop
 80072f0:	08007315 	.word	0x08007315
 80072f4:	0800731d 	.word	0x0800731d
 80072f8:	08007325 	.word	0x08007325
 80072fc:	0800733b 	.word	0x0800733b
 8007300:	0800732b 	.word	0x0800732b
 8007304:	0800733b 	.word	0x0800733b
 8007308:	0800733b 	.word	0x0800733b
 800730c:	0800733b 	.word	0x0800733b
 8007310:	08007333 	.word	0x08007333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007314:	f7fe fac8 	bl	80058a8 <HAL_RCC_GetPCLK1Freq>
 8007318:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800731a:	e014      	b.n	8007346 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800731c:	f7fe fada 	bl	80058d4 <HAL_RCC_GetPCLK2Freq>
 8007320:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007322:	e010      	b.n	8007346 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007324:	4b5a      	ldr	r3, [pc, #360]	; (8007490 <UART_SetConfig+0x594>)
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007328:	e00d      	b.n	8007346 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800732a:	f7fe fa4f 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 800732e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007330:	e009      	b.n	8007346 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007338:	e005      	b.n	8007346 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8089 	beq.w	8007460 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	4a4e      	ldr	r2, [pc, #312]	; (800748c <UART_SetConfig+0x590>)
 8007354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007358:	461a      	mov	r2, r3
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007360:	005a      	lsls	r2, r3, #1
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	441a      	add	r2, r3
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007372:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	2b0f      	cmp	r3, #15
 8007378:	d916      	bls.n	80073a8 <UART_SetConfig+0x4ac>
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007380:	d212      	bcs.n	80073a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	b29b      	uxth	r3, r3
 8007386:	f023 030f 	bic.w	r3, r3, #15
 800738a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	085b      	lsrs	r3, r3, #1
 8007390:	b29b      	uxth	r3, r3
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	b29a      	uxth	r2, r3
 8007398:	8bfb      	ldrh	r3, [r7, #30]
 800739a:	4313      	orrs	r3, r2
 800739c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	8bfa      	ldrh	r2, [r7, #30]
 80073a4:	60da      	str	r2, [r3, #12]
 80073a6:	e05b      	b.n	8007460 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073ae:	e057      	b.n	8007460 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d828      	bhi.n	800740a <UART_SetConfig+0x50e>
 80073b8:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <UART_SetConfig+0x4c4>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073ed 	.word	0x080073ed
 80073c8:	080073f5 	.word	0x080073f5
 80073cc:	0800740b 	.word	0x0800740b
 80073d0:	080073fb 	.word	0x080073fb
 80073d4:	0800740b 	.word	0x0800740b
 80073d8:	0800740b 	.word	0x0800740b
 80073dc:	0800740b 	.word	0x0800740b
 80073e0:	08007403 	.word	0x08007403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e4:	f7fe fa60 	bl	80058a8 <HAL_RCC_GetPCLK1Freq>
 80073e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073ea:	e014      	b.n	8007416 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ec:	f7fe fa72 	bl	80058d4 <HAL_RCC_GetPCLK2Freq>
 80073f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073f2:	e010      	b.n	8007416 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073f4:	4b26      	ldr	r3, [pc, #152]	; (8007490 <UART_SetConfig+0x594>)
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073f8:	e00d      	b.n	8007416 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fa:	f7fe f9e7 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 80073fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007400:	e009      	b.n	8007416 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007408:	e005      	b.n	8007416 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007414:	bf00      	nop
    }

    if (pclk != 0U)
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	2b00      	cmp	r3, #0
 800741a:	d021      	beq.n	8007460 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	4a1a      	ldr	r2, [pc, #104]	; (800748c <UART_SetConfig+0x590>)
 8007422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007426:	461a      	mov	r2, r3
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	fbb3 f2f2 	udiv	r2, r3, r2
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	441a      	add	r2, r3
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	fbb2 f3f3 	udiv	r3, r2, r3
 800743e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	2b0f      	cmp	r3, #15
 8007444:	d909      	bls.n	800745a <UART_SetConfig+0x55e>
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744c:	d205      	bcs.n	800745a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	b29a      	uxth	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60da      	str	r2, [r3, #12]
 8007458:	e002      	b.n	8007460 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2201      	movs	r2, #1
 8007464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2201      	movs	r2, #1
 800746c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2200      	movs	r2, #0
 8007474:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2200      	movs	r2, #0
 800747a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800747c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007480:	4618      	mov	r0, r3
 8007482:	3730      	adds	r7, #48	; 0x30
 8007484:	46bd      	mov	sp, r7
 8007486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800748a:	bf00      	nop
 800748c:	08013ec8 	.word	0x08013ec8
 8007490:	00f42400 	.word	0x00f42400

08007494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01a      	beq.n	80075aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007592:	d10a      	bne.n	80075aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	605a      	str	r2, [r3, #4]
  }
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b098      	sub	sp, #96	; 0x60
 80075dc:	af02      	add	r7, sp, #8
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075e8:	f7fa fa68 	bl	8001abc <HAL_GetTick>
 80075ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d12f      	bne.n	800765c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007604:	2200      	movs	r2, #0
 8007606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f88e 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d022      	beq.n	800765c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800762a:	653b      	str	r3, [r7, #80]	; 0x50
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007634:	647b      	str	r3, [r7, #68]	; 0x44
 8007636:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e063      	b.n	8007724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b04      	cmp	r3, #4
 8007668:	d149      	bne.n	80076fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800766a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007672:	2200      	movs	r2, #0
 8007674:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f857 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d03c      	beq.n	80076fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	623b      	str	r3, [r7, #32]
   return(result);
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a2:	633b      	str	r3, [r7, #48]	; 0x30
 80076a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e6      	bne.n	8007684 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076d6:	61fa      	str	r2, [r7, #28]
 80076d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	69b9      	ldr	r1, [r7, #24]
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	617b      	str	r3, [r7, #20]
   return(result);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e5      	bne.n	80076b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e012      	b.n	8007724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3758      	adds	r7, #88	; 0x58
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773c:	e04f      	b.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d04b      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007746:	f7fa f9b9 	bl	8001abc <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <UART_WaitOnFlagUntilTimeout+0x30>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e04e      	b.n	80077fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d037      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b80      	cmp	r3, #128	; 0x80
 8007772:	d034      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d031      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b08      	cmp	r3, #8
 8007786:	d110      	bne.n	80077aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2208      	movs	r2, #8
 800778e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f838 	bl	8007806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2208      	movs	r2, #8
 800779a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e029      	b.n	80077fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b8:	d111      	bne.n	80077de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f81e 	bl	8007806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e00f      	b.n	80077fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4013      	ands	r3, r2
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	bf0c      	ite	eq
 80077ee:	2301      	moveq	r3, #1
 80077f0:	2300      	movne	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	461a      	mov	r2, r3
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d0a0      	beq.n	800773e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007806:	b480      	push	{r7}
 8007808:	b095      	sub	sp, #84	; 0x54
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782c:	643b      	str	r3, [r7, #64]	; 0x40
 800782e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e6      	bne.n	800780e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	64bb      	str	r3, [r7, #72]	; 0x48
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3308      	adds	r3, #8
 8007862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800786a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e3      	bne.n	8007840 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d118      	bne.n	80078b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	60bb      	str	r3, [r7, #8]
   return(result);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f023 0310 	bic.w	r3, r3, #16
 8007894:	647b      	str	r3, [r7, #68]	; 0x44
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6979      	ldr	r1, [r7, #20]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	613b      	str	r3, [r7, #16]
   return(result);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e6      	bne.n	8007880 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078c6:	bf00      	nop
 80078c8:	3754      	adds	r7, #84	; 0x54
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f7ff faed 	bl	8006ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b088      	sub	sp, #32
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	60bb      	str	r3, [r7, #8]
   return(result);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791a:	61fb      	str	r3, [r7, #28]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6979      	ldr	r1, [r7, #20]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	613b      	str	r3, [r7, #16]
   return(result);
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e6      	bne.n	8007906 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fab8 	bl	8006ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800794c:	bf00      	nop
 800794e:	3720      	adds	r7, #32
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80079a2:	2302      	movs	r3, #2
 80079a4:	e027      	b.n	80079f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2224      	movs	r2, #36	; 0x24
 80079b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0201 	bic.w	r2, r2, #1
 80079cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e02d      	b.n	8007a76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2224      	movs	r2, #36	; 0x24
 8007a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0201 	bic.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f850 	bl	8007afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a92:	2302      	movs	r3, #2
 8007a94:	e02d      	b.n	8007af2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2224      	movs	r2, #36	; 0x24
 8007aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f812 	bl	8007afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d108      	bne.n	8007b1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b1c:	e031      	b.n	8007b82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b1e:	2308      	movs	r3, #8
 8007b20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b22:	2308      	movs	r3, #8
 8007b24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	0e5b      	lsrs	r3, r3, #25
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	0f5b      	lsrs	r3, r3, #29
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	7b3a      	ldrb	r2, [r7, #12]
 8007b4a:	4911      	ldr	r1, [pc, #68]	; (8007b90 <UARTEx_SetNbDataToProcess+0x94>)
 8007b4c:	5c8a      	ldrb	r2, [r1, r2]
 8007b4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b52:	7b3a      	ldrb	r2, [r7, #12]
 8007b54:	490f      	ldr	r1, [pc, #60]	; (8007b94 <UARTEx_SetNbDataToProcess+0x98>)
 8007b56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b58:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	7b7a      	ldrb	r2, [r7, #13]
 8007b68:	4909      	ldr	r1, [pc, #36]	; (8007b90 <UARTEx_SetNbDataToProcess+0x94>)
 8007b6a:	5c8a      	ldrb	r2, [r1, r2]
 8007b6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b70:	7b7a      	ldrb	r2, [r7, #13]
 8007b72:	4908      	ldr	r1, [pc, #32]	; (8007b94 <UARTEx_SetNbDataToProcess+0x98>)
 8007b74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b76:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	08013ee0 	.word	0x08013ee0
 8007b94:	08013ee8 	.word	0x08013ee8

08007b98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ba8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007bac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007bce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007bd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	43db      	mvns	r3, r3
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	4013      	ands	r3, r2
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	1d3b      	adds	r3, r7, #4
 8007c06:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b09d      	sub	sp, #116	; 0x74
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	78db      	ldrb	r3, [r3, #3]
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d81f      	bhi.n	8007caa <USB_ActivateEndpoint+0x72>
 8007c6a:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <USB_ActivateEndpoint+0x38>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007c81 	.word	0x08007c81
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007cb3 	.word	0x08007cb3
 8007c7c:	08007c8f 	.word	0x08007c8f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007c80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007c8c:	e012      	b.n	8007cb4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007c8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007c92:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007c96:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007c9a:	e00b      	b.n	8007cb4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007c9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ca4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007ca8:	e004      	b.n	8007cb4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007cb0:	e000      	b.n	8007cb4 <USB_ActivateEndpoint+0x7c>
      break;
 8007cb2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	441a      	add	r2, r3
 8007cbe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	b21b      	sxth	r3, r3
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cee:	b21a      	sxth	r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	b21b      	sxth	r3, r3
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	b21b      	sxth	r3, r3
 8007cfa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	441a      	add	r2, r3
 8007d08:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	7b1b      	ldrb	r3, [r3, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 8178 	bne.w	800801a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8084 	beq.w	8007e3c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	61bb      	str	r3, [r7, #24]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	4413      	add	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	00da      	lsls	r2, r3, #3
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	88db      	ldrh	r3, [r3, #6]
 8007d5c:	085b      	lsrs	r3, r3, #1
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	827b      	strh	r3, [r7, #18]
 8007d76:	8a7b      	ldrh	r3, [r7, #18]
 8007d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01b      	beq.n	8007db8 <USB_ActivateEndpoint+0x180>
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d96:	823b      	strh	r3, [r7, #16]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	441a      	add	r2, r3
 8007da2:	8a3b      	ldrh	r3, [r7, #16]
 8007da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	78db      	ldrb	r3, [r3, #3]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d020      	beq.n	8007e02 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dd6:	81bb      	strh	r3, [r7, #12]
 8007dd8:	89bb      	ldrh	r3, [r7, #12]
 8007dda:	f083 0320 	eor.w	r3, r3, #32
 8007dde:	81bb      	strh	r3, [r7, #12]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	441a      	add	r2, r3
 8007dea:	89bb      	ldrh	r3, [r7, #12]
 8007dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	8013      	strh	r3, [r2, #0]
 8007e00:	e2d5      	b.n	80083ae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e18:	81fb      	strh	r3, [r7, #14]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	441a      	add	r2, r3
 8007e24:	89fb      	ldrh	r3, [r7, #14]
 8007e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	8013      	strh	r3, [r2, #0]
 8007e3a:	e2b8      	b.n	80083ae <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	4413      	add	r3, r2
 8007e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	00da      	lsls	r2, r3, #3
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	4413      	add	r3, r2
 8007e5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	88db      	ldrh	r3, [r3, #6]
 8007e64:	085b      	lsrs	r3, r3, #1
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	4413      	add	r3, r2
 8007e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	00da      	lsls	r2, r3, #3
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e92:	627b      	str	r3, [r7, #36]	; 0x24
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	801a      	strh	r2, [r3, #0]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8007eaa:	d91d      	bls.n	8007ee8 <USB_ActivateEndpoint+0x2b0>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	f003 031f 	and.w	r3, r3, #31
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <USB_ActivateEndpoint+0x28e>
 8007ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	029b      	lsls	r3, r3, #10
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	801a      	strh	r2, [r3, #0]
 8007ee6:	e026      	b.n	8007f36 <USB_ActivateEndpoint+0x2fe>
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <USB_ActivateEndpoint+0x2ce>
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	801a      	strh	r2, [r3, #0]
 8007f04:	e017      	b.n	8007f36 <USB_ActivateEndpoint+0x2fe>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	085b      	lsrs	r3, r3, #1
 8007f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <USB_ActivateEndpoint+0x2e8>
 8007f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	029b      	lsls	r3, r3, #10
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	847b      	strh	r3, [r7, #34]	; 0x22
 8007f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01b      	beq.n	8007f86 <USB_ActivateEndpoint+0x34e>
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f64:	843b      	strh	r3, [r7, #32]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	441a      	add	r2, r3
 8007f70:	8c3b      	ldrh	r3, [r7, #32]
 8007f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d124      	bne.n	8007fd8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa4:	83bb      	strh	r3, [r7, #28]
 8007fa6:	8bbb      	ldrh	r3, [r7, #28]
 8007fa8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fac:	83bb      	strh	r3, [r7, #28]
 8007fae:	8bbb      	ldrh	r3, [r7, #28]
 8007fb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fb4:	83bb      	strh	r3, [r7, #28]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	441a      	add	r2, r3
 8007fc0:	8bbb      	ldrh	r3, [r7, #28]
 8007fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	8013      	strh	r3, [r2, #0]
 8007fd6:	e1ea      	b.n	80083ae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fee:	83fb      	strh	r3, [r7, #30]
 8007ff0:	8bfb      	ldrh	r3, [r7, #30]
 8007ff2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ff6:	83fb      	strh	r3, [r7, #30]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	441a      	add	r2, r3
 8008002:	8bfb      	ldrh	r3, [r7, #30]
 8008004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008014:	b29b      	uxth	r3, r3
 8008016:	8013      	strh	r3, [r2, #0]
 8008018:	e1c9      	b.n	80083ae <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	78db      	ldrb	r3, [r3, #3]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d11e      	bne.n	8008060 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b29b      	uxth	r3, r3
 8008030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008038:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800804a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008052:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805a:	b29b      	uxth	r3, r3
 800805c:	8013      	strh	r3, [r2, #0]
 800805e:	e01d      	b.n	800809c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008076:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	441a      	add	r2, r3
 8008084:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800808c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ac:	4413      	add	r3, r2
 80080ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	00da      	lsls	r2, r3, #3
 80080b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080be:	65bb      	str	r3, [r7, #88]	; 0x58
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	891b      	ldrh	r3, [r3, #8]
 80080c4:	085b      	lsrs	r3, r3, #1
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080ce:	801a      	strh	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	657b      	str	r3, [r7, #84]	; 0x54
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080da:	b29b      	uxth	r3, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e0:	4413      	add	r3, r2
 80080e2:	657b      	str	r3, [r7, #84]	; 0x54
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	00da      	lsls	r2, r3, #3
 80080ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ec:	4413      	add	r3, r2
 80080ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080f2:	653b      	str	r3, [r7, #80]	; 0x50
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	895b      	ldrh	r3, [r3, #10]
 80080f8:	085b      	lsrs	r3, r3, #1
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008102:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	785b      	ldrb	r3, [r3, #1]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f040 8093 	bne.w	8008234 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800811e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01b      	beq.n	8008162 <USB_ActivateEndpoint+0x52a>
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008140:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	441a      	add	r2, r3
 800814c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800814e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800815a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815e:	b29b      	uxth	r3, r3
 8008160:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008170:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d01b      	beq.n	80081b2 <USB_ActivateEndpoint+0x57a>
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800818c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008190:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	441a      	add	r2, r3
 800819c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800819e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80081ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80081d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	441a      	add	r2, r3
 80081e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008210:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	441a      	add	r2, r3
 800821c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800821e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800822e:	b29b      	uxth	r3, r3
 8008230:	8013      	strh	r3, [r2, #0]
 8008232:	e0bc      	b.n	80083ae <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008244:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d01d      	beq.n	800828c <USB_ActivateEndpoint+0x654>
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008266:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	441a      	add	r2, r3
 8008274:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800827c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008288:	b29b      	uxth	r3, r3
 800828a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800829c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01d      	beq.n	80082e4 <USB_ActivateEndpoint+0x6ac>
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	441a      	add	r2, r3
 80082cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80082d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	78db      	ldrb	r3, [r3, #3]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d024      	beq.n	8008336 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008302:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008306:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800830a:	f083 0320 	eor.w	r3, r3, #32
 800830e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	441a      	add	r2, r3
 800831c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008330:	b29b      	uxth	r3, r3
 8008332:	8013      	strh	r3, [r2, #0]
 8008334:	e01d      	b.n	8008372 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800834c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	441a      	add	r2, r3
 800835a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800835e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	b29b      	uxth	r3, r3
 8008370:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008388:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	441a      	add	r2, r3
 8008396:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800839a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800839e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80083ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3774      	adds	r7, #116	; 0x74
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop

080083c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b08d      	sub	sp, #52	; 0x34
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	7b1b      	ldrb	r3, [r3, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f040 808e 	bne.w	80084f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	785b      	ldrb	r3, [r3, #1]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d044      	beq.n	8008466 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	81bb      	strh	r3, [r7, #12]
 80083ea:	89bb      	ldrh	r3, [r7, #12]
 80083ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01b      	beq.n	800842c <USB_DeactivateEndpoint+0x6c>
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840a:	817b      	strh	r3, [r7, #10]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	441a      	add	r2, r3
 8008416:	897b      	ldrh	r3, [r7, #10]
 8008418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008424:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008428:	b29b      	uxth	r3, r3
 800842a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008442:	813b      	strh	r3, [r7, #8]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	441a      	add	r2, r3
 800844e:	893b      	ldrh	r3, [r7, #8]
 8008450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008460:	b29b      	uxth	r3, r3
 8008462:	8013      	strh	r3, [r2, #0]
 8008464:	e192      	b.n	800878c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	827b      	strh	r3, [r7, #18]
 8008474:	8a7b      	ldrh	r3, [r7, #18]
 8008476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d01b      	beq.n	80084b6 <USB_DeactivateEndpoint+0xf6>
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008494:	823b      	strh	r3, [r7, #16]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	441a      	add	r2, r3
 80084a0:	8a3b      	ldrh	r3, [r7, #16]
 80084a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084cc:	81fb      	strh	r3, [r7, #14]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	441a      	add	r2, r3
 80084d8:	89fb      	ldrh	r3, [r7, #14]
 80084da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	8013      	strh	r3, [r2, #0]
 80084ee:	e14d      	b.n	800878c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f040 80a5 	bne.w	8008644 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	843b      	strh	r3, [r7, #32]
 8008508:	8c3b      	ldrh	r3, [r7, #32]
 800850a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d01b      	beq.n	800854a <USB_DeactivateEndpoint+0x18a>
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29b      	uxth	r3, r3
 8008520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008528:	83fb      	strh	r3, [r7, #30]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	441a      	add	r2, r3
 8008534:	8bfb      	ldrh	r3, [r7, #30]
 8008536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800853a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800853e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008546:	b29b      	uxth	r3, r3
 8008548:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	83bb      	strh	r3, [r7, #28]
 8008558:	8bbb      	ldrh	r3, [r7, #28]
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d01b      	beq.n	800859a <USB_DeactivateEndpoint+0x1da>
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29b      	uxth	r3, r3
 8008570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008578:	837b      	strh	r3, [r7, #26]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	441a      	add	r2, r3
 8008584:	8b7b      	ldrh	r3, [r7, #26]
 8008586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800858a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800858e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008592:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008596:	b29b      	uxth	r3, r3
 8008598:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b0:	833b      	strh	r3, [r7, #24]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	8b3b      	ldrh	r3, [r7, #24]
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e8:	82fb      	strh	r3, [r7, #22]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	441a      	add	r2, r3
 80085f4:	8afb      	ldrh	r3, [r7, #22]
 80085f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008606:	b29b      	uxth	r3, r3
 8008608:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	b29b      	uxth	r3, r3
 8008618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008620:	82bb      	strh	r3, [r7, #20]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	441a      	add	r2, r3
 800862c:	8abb      	ldrh	r3, [r7, #20]
 800862e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800863a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863e:	b29b      	uxth	r3, r3
 8008640:	8013      	strh	r3, [r2, #0]
 8008642:	e0a3      	b.n	800878c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008652:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01b      	beq.n	8008694 <USB_DeactivateEndpoint+0x2d4>
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	b29b      	uxth	r3, r3
 800866a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008672:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	441a      	add	r2, r3
 800867e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800868c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008690:	b29b      	uxth	r3, r3
 8008692:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80086a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d01b      	beq.n	80086e4 <USB_DeactivateEndpoint+0x324>
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	441a      	add	r2, r3
 80086ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	441a      	add	r2, r3
 8008706:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800870c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008718:	b29b      	uxth	r3, r3
 800871a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800872e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008732:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	441a      	add	r2, r3
 800873e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800874c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008750:	b29b      	uxth	r3, r3
 8008752:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876a:	847b      	strh	r3, [r7, #34]	; 0x22
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	441a      	add	r2, r3
 8008776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008788:	b29b      	uxth	r3, r3
 800878a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3734      	adds	r7, #52	; 0x34
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b0c2      	sub	sp, #264	; 0x108
 800879e:	af00      	add	r7, sp, #0
 80087a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087a8:	6018      	str	r0, [r3, #0]
 80087aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	785b      	ldrb	r3, [r3, #1]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	f040 86b7 	bne.w	8009534 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80087c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	699a      	ldr	r2, [r3, #24]
 80087d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d908      	bls.n	80087f4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80087e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80087f2:	e007      	b.n	8008804 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80087f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	7b1b      	ldrb	r3, [r3, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d13a      	bne.n	800888a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6959      	ldr	r1, [r3, #20]
 8008820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	88da      	ldrh	r2, [r3, #6]
 800882c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008830:	b29b      	uxth	r3, r3
 8008832:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008836:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800883a:	6800      	ldr	r0, [r0, #0]
 800883c:	f001 fc98 	bl	800a170 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	613b      	str	r3, [r7, #16]
 800884c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885a:	b29b      	uxth	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	4413      	add	r3, r2
 8008862:	613b      	str	r3, [r7, #16]
 8008864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	00da      	lsls	r2, r3, #3
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4413      	add	r3, r2
 8008876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	801a      	strh	r2, [r3, #0]
 8008886:	f000 be1f 	b.w	80094c8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800888a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	78db      	ldrb	r3, [r3, #3]
 8008896:	2b02      	cmp	r3, #2
 8008898:	f040 8462 	bne.w	8009160 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800889c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6a1a      	ldr	r2, [r3, #32]
 80088a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	f240 83df 	bls.w	8009078 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80088ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80088e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	441a      	add	r2, r3
 80088fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800890a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800890e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008912:	b29b      	uxth	r3, r3
 8008914:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6a1a      	ldr	r2, [r3, #32]
 8008922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008926:	1ad2      	subs	r2, r2, r3
 8008928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800892c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	b29b      	uxth	r3, r3
 8008952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 81c7 	beq.w	8008cea <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800895c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	633b      	str	r3, [r7, #48]	; 0x30
 8008968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	785b      	ldrb	r3, [r3, #1]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d177      	bne.n	8008a68 <USB_EPStartXfer+0x2ce>
 8008978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	62bb      	str	r3, [r7, #40]	; 0x28
 8008984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008992:	b29b      	uxth	r3, r3
 8008994:	461a      	mov	r2, r3
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	4413      	add	r3, r2
 800899a:	62bb      	str	r3, [r7, #40]	; 0x28
 800899c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	00da      	lsls	r2, r3, #3
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	4413      	add	r3, r2
 80089ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089be:	b29a      	uxth	r2, r3
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c8:	2b3e      	cmp	r3, #62	; 0x3e
 80089ca:	d921      	bls.n	8008a10 <USB_EPStartXfer+0x276>
 80089cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80089d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089da:	f003 031f 	and.w	r3, r3, #31
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d104      	bne.n	80089ec <USB_EPStartXfer+0x252>
 80089e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80089e6:	3b01      	subs	r3, #1
 80089e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	029b      	lsls	r3, r3, #10
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	4313      	orrs	r3, r2
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	e050      	b.n	8008ab2 <USB_EPStartXfer+0x318>
 8008a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10a      	bne.n	8008a2e <USB_EPStartXfer+0x294>
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	e041      	b.n	8008ab2 <USB_EPStartXfer+0x318>
 8008a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <USB_EPStartXfer+0x2b4>
 8008a44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a48:	3301      	adds	r3, #1
 8008a4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	029b      	lsls	r3, r3, #10
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	e024      	b.n	8008ab2 <USB_EPStartXfer+0x318>
 8008a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d11c      	bne.n	8008ab2 <USB_EPStartXfer+0x318>
 8008a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	4413      	add	r3, r2
 8008a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	00da      	lsls	r2, r3, #3
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	895b      	ldrh	r3, [r3, #10]
 8008abe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6959      	ldr	r1, [r3, #20]
 8008ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ad8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008adc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ae0:	6800      	ldr	r0, [r0, #0]
 8008ae2:	f001 fb45 	bl	800a170 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	695a      	ldr	r2, [r3, #20]
 8008af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af6:	441a      	add	r2, r3
 8008af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6a1a      	ldr	r2, [r3, #32]
 8008b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d90f      	bls.n	8008b40 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6a1a      	ldr	r2, [r3, #32]
 8008b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b30:	1ad2      	subs	r2, r2, r3
 8008b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	621a      	str	r2, [r3, #32]
 8008b3e:	e00e      	b.n	8008b5e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d177      	bne.n	8008c5e <USB_EPStartXfer+0x4c4>
 8008b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	4413      	add	r3, r2
 8008b90:	61bb      	str	r3, [r7, #24]
 8008b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	00da      	lsls	r2, r3, #3
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bbe:	2b3e      	cmp	r3, #62	; 0x3e
 8008bc0:	d921      	bls.n	8008c06 <USB_EPStartXfer+0x46c>
 8008bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc6:	095b      	lsrs	r3, r3, #5
 8008bc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd0:	f003 031f 	and.w	r3, r3, #31
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <USB_EPStartXfer+0x448>
 8008bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	029b      	lsls	r3, r3, #10
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	e056      	b.n	8008cb4 <USB_EPStartXfer+0x51a>
 8008c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10a      	bne.n	8008c24 <USB_EPStartXfer+0x48a>
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	801a      	strh	r2, [r3, #0]
 8008c22:	e047      	b.n	8008cb4 <USB_EPStartXfer+0x51a>
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c28:	085b      	lsrs	r3, r3, #1
 8008c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d004      	beq.n	8008c44 <USB_EPStartXfer+0x4aa>
 8008c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c3e:	3301      	adds	r3, #1
 8008c40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	029b      	lsls	r3, r3, #10
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	4313      	orrs	r3, r2
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	801a      	strh	r2, [r3, #0]
 8008c5c:	e02a      	b.n	8008cb4 <USB_EPStartXfer+0x51a>
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d122      	bne.n	8008cb4 <USB_EPStartXfer+0x51a>
 8008c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	623b      	str	r3, [r7, #32]
 8008c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	4413      	add	r3, r2
 8008c90:	623b      	str	r3, [r7, #32]
 8008c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	00da      	lsls	r2, r3, #3
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ca8:	61fb      	str	r3, [r7, #28]
 8008caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	891b      	ldrh	r3, [r3, #8]
 8008cc0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6959      	ldr	r1, [r3, #20]
 8008cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008cda:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008cde:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ce2:	6800      	ldr	r0, [r0, #0]
 8008ce4:	f001 fa44 	bl	800a170 <USB_WritePMA>
 8008ce8:	e3ee      	b.n	80094c8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d177      	bne.n	8008dea <USB_EPStartXfer+0x650>
 8008cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	461a      	mov	r2, r3
 8008d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d1a:	4413      	add	r3, r2
 8008d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	00da      	lsls	r2, r3, #3
 8008d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d2e:	4413      	add	r3, r2
 8008d30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d34:	647b      	str	r3, [r7, #68]	; 0x44
 8008d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d44:	801a      	strh	r2, [r3, #0]
 8008d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d4c:	d921      	bls.n	8008d92 <USB_EPStartXfer+0x5f8>
 8008d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d52:	095b      	lsrs	r3, r3, #5
 8008d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5c:	f003 031f 	and.w	r3, r3, #31
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d104      	bne.n	8008d6e <USB_EPStartXfer+0x5d4>
 8008d64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	029b      	lsls	r3, r3, #10
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8e:	801a      	strh	r2, [r3, #0]
 8008d90:	e056      	b.n	8008e40 <USB_EPStartXfer+0x6a6>
 8008d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <USB_EPStartXfer+0x616>
 8008d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dac:	801a      	strh	r2, [r3, #0]
 8008dae:	e047      	b.n	8008e40 <USB_EPStartXfer+0x6a6>
 8008db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db4:	085b      	lsrs	r3, r3, #1
 8008db6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <USB_EPStartXfer+0x636>
 8008dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008dca:	3301      	adds	r3, #1
 8008dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	029b      	lsls	r3, r3, #10
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	4313      	orrs	r3, r2
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de6:	801a      	strh	r2, [r3, #0]
 8008de8:	e02a      	b.n	8008e40 <USB_EPStartXfer+0x6a6>
 8008dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	785b      	ldrb	r3, [r3, #1]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d122      	bne.n	8008e40 <USB_EPStartXfer+0x6a6>
 8008dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	653b      	str	r3, [r7, #80]	; 0x50
 8008e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e1a:	4413      	add	r3, r2
 8008e1c:	653b      	str	r3, [r7, #80]	; 0x50
 8008e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	00da      	lsls	r2, r3, #3
 8008e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e2e:	4413      	add	r3, r2
 8008e30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	891b      	ldrh	r3, [r3, #8]
 8008e4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6959      	ldr	r1, [r3, #20]
 8008e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e6e:	6800      	ldr	r0, [r0, #0]
 8008e70:	f001 f97e 	bl	800a170 <USB_WritePMA>
            ep->xfer_buff += len;
 8008e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	695a      	ldr	r2, [r3, #20]
 8008e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e84:	441a      	add	r2, r3
 8008e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6a1a      	ldr	r2, [r3, #32]
 8008e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d90f      	bls.n	8008ece <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6a1a      	ldr	r2, [r3, #32]
 8008eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	621a      	str	r2, [r3, #32]
 8008ecc:	e00e      	b.n	8008eec <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	785b      	ldrb	r3, [r3, #1]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d177      	bne.n	8008ff8 <USB_EPStartXfer+0x85e>
 8008f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	4413      	add	r3, r2
 8008f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	00da      	lsls	r2, r3, #3
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f42:	637b      	str	r3, [r7, #52]	; 0x34
 8008f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f58:	2b3e      	cmp	r3, #62	; 0x3e
 8008f5a:	d921      	bls.n	8008fa0 <USB_EPStartXfer+0x806>
 8008f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f60:	095b      	lsrs	r3, r3, #5
 8008f62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f6a:	f003 031f 	and.w	r3, r3, #31
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <USB_EPStartXfer+0x7e2>
 8008f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f76:	3b01      	subs	r3, #1
 8008f78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	029b      	lsls	r3, r3, #10
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9c:	801a      	strh	r2, [r3, #0]
 8008f9e:	e050      	b.n	8009042 <USB_EPStartXfer+0x8a8>
 8008fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <USB_EPStartXfer+0x824>
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fba:	801a      	strh	r2, [r3, #0]
 8008fbc:	e041      	b.n	8009042 <USB_EPStartXfer+0x8a8>
 8008fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc2:	085b      	lsrs	r3, r3, #1
 8008fc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <USB_EPStartXfer+0x844>
 8008fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd8:	3301      	adds	r3, #1
 8008fda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	029b      	lsls	r3, r3, #10
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff4:	801a      	strh	r2, [r3, #0]
 8008ff6:	e024      	b.n	8009042 <USB_EPStartXfer+0x8a8>
 8008ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	785b      	ldrb	r3, [r3, #1]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d11c      	bne.n	8009042 <USB_EPStartXfer+0x8a8>
 8009008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800900c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009016:	b29b      	uxth	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800901c:	4413      	add	r3, r2
 800901e:	643b      	str	r3, [r7, #64]	; 0x40
 8009020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	00da      	lsls	r2, r3, #3
 800902e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009030:	4413      	add	r3, r2
 8009032:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800903c:	b29a      	uxth	r2, r3
 800903e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009040:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	895b      	ldrh	r3, [r3, #10]
 800904e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6959      	ldr	r1, [r3, #20]
 800905e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009062:	b29b      	uxth	r3, r3
 8009064:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009068:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800906c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009070:	6800      	ldr	r0, [r0, #0]
 8009072:	f001 f87d 	bl	800a170 <USB_WritePMA>
 8009076:	e227      	b.n	80094c8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800908c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80090aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80090b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	441a      	add	r2, r3
 80090cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80090d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80090e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090fe:	b29b      	uxth	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009104:	4413      	add	r3, r2
 8009106:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800910c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	00da      	lsls	r2, r3, #3
 8009116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009118:	4413      	add	r3, r2
 800911a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800911e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009124:	b29a      	uxth	r2, r3
 8009126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009128:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800912a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800912e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	891b      	ldrh	r3, [r3, #8]
 8009136:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800913a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6959      	ldr	r1, [r3, #20]
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914a:	b29b      	uxth	r3, r3
 800914c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009150:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009154:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009158:	6800      	ldr	r0, [r0, #0]
 800915a:	f001 f809 	bl	800a170 <USB_WritePMA>
 800915e:	e1b3      	b.n	80094c8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6a1a      	ldr	r2, [r3, #32]
 800916c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009170:	1ad2      	subs	r2, r2, r3
 8009172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800917e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80c6 	beq.w	8009332 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	673b      	str	r3, [r7, #112]	; 0x70
 80091b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d177      	bne.n	80092b2 <USB_EPStartXfer+0xb18>
 80091c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80091ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091dc:	b29b      	uxth	r3, r3
 80091de:	461a      	mov	r2, r3
 80091e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091e2:	4413      	add	r3, r2
 80091e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80091e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	00da      	lsls	r2, r3, #3
 80091f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091f6:	4413      	add	r3, r2
 80091f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091fc:	667b      	str	r3, [r7, #100]	; 0x64
 80091fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	b29b      	uxth	r3, r3
 8009204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009208:	b29a      	uxth	r2, r3
 800920a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800920c:	801a      	strh	r2, [r3, #0]
 800920e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009212:	2b3e      	cmp	r3, #62	; 0x3e
 8009214:	d921      	bls.n	800925a <USB_EPStartXfer+0xac0>
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921a:	095b      	lsrs	r3, r3, #5
 800921c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009224:	f003 031f 	and.w	r3, r3, #31
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <USB_EPStartXfer+0xa9c>
 800922c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009230:	3b01      	subs	r3, #1
 8009232:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	b29a      	uxth	r2, r3
 800923c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009240:	b29b      	uxth	r3, r3
 8009242:	029b      	lsls	r3, r3, #10
 8009244:	b29b      	uxth	r3, r3
 8009246:	4313      	orrs	r3, r2
 8009248:	b29b      	uxth	r3, r3
 800924a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800924e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009252:	b29a      	uxth	r2, r3
 8009254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009256:	801a      	strh	r2, [r3, #0]
 8009258:	e050      	b.n	80092fc <USB_EPStartXfer+0xb62>
 800925a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <USB_EPStartXfer+0xade>
 8009262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	b29b      	uxth	r3, r3
 8009268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800926c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009270:	b29a      	uxth	r2, r3
 8009272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	e041      	b.n	80092fc <USB_EPStartXfer+0xb62>
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800927c:	085b      	lsrs	r3, r3, #1
 800927e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <USB_EPStartXfer+0xafe>
 800928e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009292:	3301      	adds	r3, #1
 8009294:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	b29a      	uxth	r2, r3
 800929e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	029b      	lsls	r3, r3, #10
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	4313      	orrs	r3, r2
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	e024      	b.n	80092fc <USB_EPStartXfer+0xb62>
 80092b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d11c      	bne.n	80092fc <USB_EPStartXfer+0xb62>
 80092c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	461a      	mov	r2, r3
 80092d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092d6:	4413      	add	r3, r2
 80092d8:	673b      	str	r3, [r7, #112]	; 0x70
 80092da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	00da      	lsls	r2, r3, #3
 80092e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092ea:	4413      	add	r3, r2
 80092ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80092fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	895b      	ldrh	r3, [r3, #10]
 8009308:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800930c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6959      	ldr	r1, [r3, #20]
 8009318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931c:	b29b      	uxth	r3, r3
 800931e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009322:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009326:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800932a:	6800      	ldr	r0, [r0, #0]
 800932c:	f000 ff20 	bl	800a170 <USB_WritePMA>
 8009330:	e0ca      	b.n	80094c8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d177      	bne.n	8009432 <USB_EPStartXfer+0xc98>
 8009342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800934e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800935c:	b29b      	uxth	r3, r3
 800935e:	461a      	mov	r2, r3
 8009360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009362:	4413      	add	r3, r2
 8009364:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800936a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	00da      	lsls	r2, r3, #3
 8009374:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009376:	4413      	add	r3, r2
 8009378:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800937c:	67bb      	str	r3, [r7, #120]	; 0x78
 800937e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	b29b      	uxth	r3, r3
 8009384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009388:	b29a      	uxth	r2, r3
 800938a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800938c:	801a      	strh	r2, [r3, #0]
 800938e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009392:	2b3e      	cmp	r3, #62	; 0x3e
 8009394:	d921      	bls.n	80093da <USB_EPStartXfer+0xc40>
 8009396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939a:	095b      	lsrs	r3, r3, #5
 800939c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80093a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a4:	f003 031f 	and.w	r3, r3, #31
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d104      	bne.n	80093b6 <USB_EPStartXfer+0xc1c>
 80093ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80093b0:	3b01      	subs	r3, #1
 80093b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80093b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	029b      	lsls	r3, r3, #10
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4313      	orrs	r3, r2
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093d6:	801a      	strh	r2, [r3, #0]
 80093d8:	e05c      	b.n	8009494 <USB_EPStartXfer+0xcfa>
 80093da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <USB_EPStartXfer+0xc5e>
 80093e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093f4:	801a      	strh	r2, [r3, #0]
 80093f6:	e04d      	b.n	8009494 <USB_EPStartXfer+0xcfa>
 80093f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093fc:	085b      	lsrs	r3, r3, #1
 80093fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <USB_EPStartXfer+0xc7e>
 800940e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009412:	3301      	adds	r3, #1
 8009414:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	b29a      	uxth	r2, r3
 800941e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009422:	b29b      	uxth	r3, r3
 8009424:	029b      	lsls	r3, r3, #10
 8009426:	b29b      	uxth	r3, r3
 8009428:	4313      	orrs	r3, r2
 800942a:	b29a      	uxth	r2, r3
 800942c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	e030      	b.n	8009494 <USB_EPStartXfer+0xcfa>
 8009432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d128      	bne.n	8009494 <USB_EPStartXfer+0xcfa>
 8009442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800945e:	b29b      	uxth	r3, r3
 8009460:	461a      	mov	r2, r3
 8009462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009466:	4413      	add	r3, r2
 8009468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800946c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	00da      	lsls	r2, r3, #3
 800947a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800947e:	4413      	add	r3, r2
 8009480:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948c:	b29a      	uxth	r2, r3
 800948e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009492:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	891b      	ldrh	r3, [r3, #8]
 80094a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6959      	ldr	r1, [r3, #20]
 80094b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80094be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80094c2:	6800      	ldr	r0, [r0, #0]
 80094c4:	f000 fe54 	bl	800a170 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80094c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ee:	817b      	strh	r3, [r7, #10]
 80094f0:	897b      	ldrh	r3, [r7, #10]
 80094f2:	f083 0310 	eor.w	r3, r3, #16
 80094f6:	817b      	strh	r3, [r7, #10]
 80094f8:	897b      	ldrh	r3, [r7, #10]
 80094fa:	f083 0320 	eor.w	r3, r3, #32
 80094fe:	817b      	strh	r3, [r7, #10]
 8009500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	441a      	add	r2, r3
 800951a:	897b      	ldrh	r3, [r7, #10]
 800951c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952c:	b29b      	uxth	r3, r3
 800952e:	8013      	strh	r3, [r2, #0]
 8009530:	f000 bcde 	b.w	8009ef0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	7b1b      	ldrb	r3, [r3, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f040 80bb 	bne.w	80096bc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	429a      	cmp	r2, r3
 8009560:	d917      	bls.n	8009592 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	699a      	ldr	r2, [r3, #24]
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009582:	1ad2      	subs	r2, r2, r3
 8009584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	619a      	str	r2, [r3, #24]
 8009590:	e00e      	b.n	80095b0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80095a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2200      	movs	r2, #0
 80095ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80095b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	461a      	mov	r2, r3
 80095d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095d4:	4413      	add	r3, r2
 80095d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	00da      	lsls	r2, r3, #3
 80095e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095ec:	4413      	add	r3, r2
 80095ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80095f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009602:	b29a      	uxth	r2, r3
 8009604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009608:	801a      	strh	r2, [r3, #0]
 800960a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960e:	2b3e      	cmp	r3, #62	; 0x3e
 8009610:	d924      	bls.n	800965c <USB_EPStartXfer+0xec2>
 8009612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800961c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009620:	f003 031f 	and.w	r3, r3, #31
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <USB_EPStartXfer+0xe98>
 8009628:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800962c:	3b01      	subs	r3, #1
 800962e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	b29a      	uxth	r2, r3
 800963a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800963e:	b29b      	uxth	r3, r3
 8009640:	029b      	lsls	r3, r3, #10
 8009642:	b29b      	uxth	r3, r3
 8009644:	4313      	orrs	r3, r2
 8009646:	b29b      	uxth	r3, r3
 8009648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800964c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009650:	b29a      	uxth	r2, r3
 8009652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009656:	801a      	strh	r2, [r3, #0]
 8009658:	f000 bc10 	b.w	8009e7c <USB_EPStartXfer+0x16e2>
 800965c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10c      	bne.n	800967e <USB_EPStartXfer+0xee4>
 8009664:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	b29b      	uxth	r3, r3
 800966c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009674:	b29a      	uxth	r2, r3
 8009676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800967a:	801a      	strh	r2, [r3, #0]
 800967c:	e3fe      	b.n	8009e7c <USB_EPStartXfer+0x16e2>
 800967e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009682:	085b      	lsrs	r3, r3, #1
 8009684:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d004      	beq.n	800969e <USB_EPStartXfer+0xf04>
 8009694:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009698:	3301      	adds	r3, #1
 800969a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800969e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	029b      	lsls	r3, r3, #10
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	4313      	orrs	r3, r2
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096b8:	801a      	strh	r2, [r3, #0]
 80096ba:	e3df      	b.n	8009e7c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80096bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	78db      	ldrb	r3, [r3, #3]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	f040 8218 	bne.w	8009afe <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80096ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	785b      	ldrb	r3, [r3, #1]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f040 809d 	bne.w	800981a <USB_EPStartXfer+0x1080>
 80096e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	461a      	mov	r2, r3
 8009700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009704:	4413      	add	r3, r2
 8009706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800970a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	00da      	lsls	r2, r3, #3
 8009718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800971c:	4413      	add	r3, r2
 800971e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009722:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009726:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	b29b      	uxth	r3, r3
 800972e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009732:	b29a      	uxth	r2, r3
 8009734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009738:	801a      	strh	r2, [r3, #0]
 800973a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	2b3e      	cmp	r3, #62	; 0x3e
 8009748:	d92b      	bls.n	80097a2 <USB_EPStartXfer+0x1008>
 800974a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	095b      	lsrs	r3, r3, #5
 8009758:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800975c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f003 031f 	and.w	r3, r3, #31
 800976c:	2b00      	cmp	r3, #0
 800976e:	d104      	bne.n	800977a <USB_EPStartXfer+0xfe0>
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009774:	3b01      	subs	r3, #1
 8009776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800977a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29a      	uxth	r2, r3
 8009782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009786:	b29b      	uxth	r3, r3
 8009788:	029b      	lsls	r3, r3, #10
 800978a:	b29b      	uxth	r3, r3
 800978c:	4313      	orrs	r3, r2
 800978e:	b29b      	uxth	r3, r3
 8009790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009798:	b29a      	uxth	r2, r3
 800979a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800979e:	801a      	strh	r2, [r3, #0]
 80097a0:	e070      	b.n	8009884 <USB_EPStartXfer+0x10ea>
 80097a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10c      	bne.n	80097cc <USB_EPStartXfer+0x1032>
 80097b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097c8:	801a      	strh	r2, [r3, #0]
 80097ca:	e05b      	b.n	8009884 <USB_EPStartXfer+0x10ea>
 80097cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	085b      	lsrs	r3, r3, #1
 80097da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <USB_EPStartXfer+0x1062>
 80097f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f6:	3301      	adds	r3, #1
 80097f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	b29a      	uxth	r2, r3
 8009804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009808:	b29b      	uxth	r3, r3
 800980a:	029b      	lsls	r3, r3, #10
 800980c:	b29b      	uxth	r3, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	b29a      	uxth	r2, r3
 8009812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	e034      	b.n	8009884 <USB_EPStartXfer+0x10ea>
 800981a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800981e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	785b      	ldrb	r3, [r3, #1]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d12c      	bne.n	8009884 <USB_EPStartXfer+0x10ea>
 800982a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800982e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009846:	b29b      	uxth	r3, r3
 8009848:	461a      	mov	r2, r3
 800984a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800984e:	4413      	add	r3, r2
 8009850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	00da      	lsls	r2, r3, #3
 8009862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009866:	4413      	add	r3, r2
 8009868:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800986c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	b29a      	uxth	r2, r3
 800987e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009882:	801a      	strh	r2, [r3, #0]
 8009884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f040 809d 	bne.w	80099de <USB_EPStartXfer+0x1244>
 80098a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	461a      	mov	r2, r3
 80098c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098c8:	4413      	add	r3, r2
 80098ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	00da      	lsls	r2, r3, #3
 80098dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098e0:	4413      	add	r3, r2
 80098e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098fc:	801a      	strh	r2, [r3, #0]
 80098fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b3e      	cmp	r3, #62	; 0x3e
 800990c:	d92b      	bls.n	8009966 <USB_EPStartXfer+0x11cc>
 800990e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	095b      	lsrs	r3, r3, #5
 800991c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	f003 031f 	and.w	r3, r3, #31
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <USB_EPStartXfer+0x11a4>
 8009934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009938:	3b01      	subs	r3, #1
 800993a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800993e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	b29a      	uxth	r2, r3
 8009946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800994a:	b29b      	uxth	r3, r3
 800994c:	029b      	lsls	r3, r3, #10
 800994e:	b29b      	uxth	r3, r3
 8009950:	4313      	orrs	r3, r2
 8009952:	b29b      	uxth	r3, r3
 8009954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800995c:	b29a      	uxth	r2, r3
 800995e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009962:	801a      	strh	r2, [r3, #0]
 8009964:	e069      	b.n	8009a3a <USB_EPStartXfer+0x12a0>
 8009966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800996a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10c      	bne.n	8009990 <USB_EPStartXfer+0x11f6>
 8009976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	b29b      	uxth	r3, r3
 800997e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009986:	b29a      	uxth	r2, r3
 8009988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800998c:	801a      	strh	r2, [r3, #0]
 800998e:	e054      	b.n	8009a3a <USB_EPStartXfer+0x12a0>
 8009990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	085b      	lsrs	r3, r3, #1
 800999e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <USB_EPStartXfer+0x1226>
 80099b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ba:	3301      	adds	r3, #1
 80099bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	029b      	lsls	r3, r3, #10
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	4313      	orrs	r3, r2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099da:	801a      	strh	r2, [r3, #0]
 80099dc:	e02d      	b.n	8009a3a <USB_EPStartXfer+0x12a0>
 80099de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d125      	bne.n	8009a3a <USB_EPStartXfer+0x12a0>
 80099ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	461a      	mov	r2, r3
 8009a00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a04:	4413      	add	r3, r2
 8009a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	00da      	lsls	r2, r3, #3
 8009a18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a38:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8218 	beq.w	8009e7c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a6c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d005      	beq.n	8009a84 <USB_EPStartXfer+0x12ea>
 8009a78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10d      	bne.n	8009aa0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f040 81f5 	bne.w	8009e7c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f040 81ee 	bne.w	8009e7c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	441a      	add	r2, r3
 8009ae4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	8013      	strh	r3, [r2, #0]
 8009afc:	e1be      	b.n	8009e7c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	78db      	ldrb	r3, [r3, #3]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	f040 81b4 	bne.w	8009e78 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699a      	ldr	r2, [r3, #24]
 8009b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d917      	bls.n	8009b5c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	699a      	ldr	r2, [r3, #24]
 8009b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b4c:	1ad2      	subs	r2, r2, r3
 8009b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	619a      	str	r2, [r3, #24]
 8009b5a:	e00e      	b.n	8009b7a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2200      	movs	r2, #0
 8009b78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	785b      	ldrb	r3, [r3, #1]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f040 8085 	bne.w	8009c96 <USB_EPStartXfer+0x14fc>
 8009b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	461a      	mov	r2, r3
 8009bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	00da      	lsls	r2, r3, #3
 8009bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bc8:	4413      	add	r3, r2
 8009bca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009be4:	801a      	strh	r2, [r3, #0]
 8009be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bea:	2b3e      	cmp	r3, #62	; 0x3e
 8009bec:	d923      	bls.n	8009c36 <USB_EPStartXfer+0x149c>
 8009bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf2:	095b      	lsrs	r3, r3, #5
 8009bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d104      	bne.n	8009c0e <USB_EPStartXfer+0x1474>
 8009c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	029b      	lsls	r3, r3, #10
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c32:	801a      	strh	r2, [r3, #0]
 8009c34:	e060      	b.n	8009cf8 <USB_EPStartXfer+0x155e>
 8009c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10c      	bne.n	8009c58 <USB_EPStartXfer+0x14be>
 8009c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c54:	801a      	strh	r2, [r3, #0]
 8009c56:	e04f      	b.n	8009cf8 <USB_EPStartXfer+0x155e>
 8009c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c5c:	085b      	lsrs	r3, r3, #1
 8009c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <USB_EPStartXfer+0x14de>
 8009c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c72:	3301      	adds	r3, #1
 8009c74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	029b      	lsls	r3, r3, #10
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	e030      	b.n	8009cf8 <USB_EPStartXfer+0x155e>
 8009c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	785b      	ldrb	r3, [r3, #1]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d128      	bne.n	8009cf8 <USB_EPStartXfer+0x155e>
 8009ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cca:	4413      	add	r3, r2
 8009ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	00da      	lsls	r2, r3, #3
 8009cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009cf6:	801a      	strh	r2, [r3, #0]
 8009cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	785b      	ldrb	r3, [r3, #1]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f040 8085 	bne.w	8009e22 <USB_EPStartXfer+0x1688>
 8009d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	461a      	mov	r2, r3
 8009d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	00da      	lsls	r2, r3, #3
 8009d50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d54:	4413      	add	r3, r2
 8009d56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d70:	801a      	strh	r2, [r3, #0]
 8009d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d76:	2b3e      	cmp	r3, #62	; 0x3e
 8009d78:	d923      	bls.n	8009dc2 <USB_EPStartXfer+0x1628>
 8009d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d7e:	095b      	lsrs	r3, r3, #5
 8009d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d88:	f003 031f 	and.w	r3, r3, #31
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d104      	bne.n	8009d9a <USB_EPStartXfer+0x1600>
 8009d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d94:	3b01      	subs	r3, #1
 8009d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	029b      	lsls	r3, r3, #10
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	4313      	orrs	r3, r2
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dbe:	801a      	strh	r2, [r3, #0]
 8009dc0:	e05c      	b.n	8009e7c <USB_EPStartXfer+0x16e2>
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10c      	bne.n	8009de4 <USB_EPStartXfer+0x164a>
 8009dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dce:	881b      	ldrh	r3, [r3, #0]
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009de0:	801a      	strh	r2, [r3, #0]
 8009de2:	e04b      	b.n	8009e7c <USB_EPStartXfer+0x16e2>
 8009de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de8:	085b      	lsrs	r3, r3, #1
 8009dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d004      	beq.n	8009e04 <USB_EPStartXfer+0x166a>
 8009dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dfe:	3301      	adds	r3, #1
 8009e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	029b      	lsls	r3, r3, #10
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	4313      	orrs	r3, r2
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e1e:	801a      	strh	r2, [r3, #0]
 8009e20:	e02c      	b.n	8009e7c <USB_EPStartXfer+0x16e2>
 8009e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d124      	bne.n	8009e7c <USB_EPStartXfer+0x16e2>
 8009e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	461a      	mov	r2, r3
 8009e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e48:	4413      	add	r3, r2
 8009e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	00da      	lsls	r2, r3, #3
 8009e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e60:	4413      	add	r3, r2
 8009e62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e74:	801a      	strh	r2, [r3, #0]
 8009e76:	e001      	b.n	8009e7c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e03a      	b.n	8009ef2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009ea6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009eaa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009eae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009eb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009eb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009eba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	441a      	add	r2, r3
 8009ed8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	785b      	ldrb	r3, [r3, #1]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d020      	beq.n	8009f50 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	881b      	ldrh	r3, [r3, #0]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f24:	81bb      	strh	r3, [r7, #12]
 8009f26:	89bb      	ldrh	r3, [r7, #12]
 8009f28:	f083 0310 	eor.w	r3, r3, #16
 8009f2c:	81bb      	strh	r3, [r7, #12]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	441a      	add	r2, r3
 8009f38:	89bb      	ldrh	r3, [r7, #12]
 8009f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	8013      	strh	r3, [r2, #0]
 8009f4e:	e01f      	b.n	8009f90 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	881b      	ldrh	r3, [r3, #0]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f66:	81fb      	strh	r3, [r7, #14]
 8009f68:	89fb      	ldrh	r3, [r7, #14]
 8009f6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f6e:	81fb      	strh	r3, [r7, #14]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	441a      	add	r2, r3
 8009f7a:	89fb      	ldrh	r3, [r7, #14]
 8009f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b087      	sub	sp, #28
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	7b1b      	ldrb	r3, [r3, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f040 809d 	bne.w	800a0ec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	785b      	ldrb	r3, [r3, #1]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d04c      	beq.n	800a054 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	881b      	ldrh	r3, [r3, #0]
 8009fc6:	823b      	strh	r3, [r7, #16]
 8009fc8:	8a3b      	ldrh	r3, [r7, #16]
 8009fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d01b      	beq.n	800a00a <USB_EPClearStall+0x6c>
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe8:	81fb      	strh	r3, [r7, #14]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	441a      	add	r2, r3
 8009ff4:	89fb      	ldrh	r3, [r7, #14]
 8009ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a002:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a006:	b29b      	uxth	r3, r3
 800a008:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	78db      	ldrb	r3, [r3, #3]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d06c      	beq.n	800a0ec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a028:	81bb      	strh	r3, [r7, #12]
 800a02a:	89bb      	ldrh	r3, [r7, #12]
 800a02c:	f083 0320 	eor.w	r3, r3, #32
 800a030:	81bb      	strh	r3, [r7, #12]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	441a      	add	r2, r3
 800a03c:	89bb      	ldrh	r3, [r7, #12]
 800a03e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a04e:	b29b      	uxth	r3, r3
 800a050:	8013      	strh	r3, [r2, #0]
 800a052:	e04b      	b.n	800a0ec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	881b      	ldrh	r3, [r3, #0]
 800a060:	82fb      	strh	r3, [r7, #22]
 800a062:	8afb      	ldrh	r3, [r7, #22]
 800a064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01b      	beq.n	800a0a4 <USB_EPClearStall+0x106>
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a082:	82bb      	strh	r3, [r7, #20]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	441a      	add	r2, r3
 800a08e:	8abb      	ldrh	r3, [r7, #20]
 800a090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ba:	827b      	strh	r3, [r7, #18]
 800a0bc:	8a7b      	ldrh	r3, [r7, #18]
 800a0be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a0c2:	827b      	strh	r3, [r7, #18]
 800a0c4:	8a7b      	ldrh	r3, [r7, #18]
 800a0c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a0ca:	827b      	strh	r3, [r7, #18]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	441a      	add	r2, r3
 800a0d6:	8a7b      	ldrh	r3, [r7, #18]
 800a0d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	371c      	adds	r7, #28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	460b      	mov	r3, r1
 800a104:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a106:	78fb      	ldrb	r3, [r7, #3]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d103      	bne.n	800a114 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2280      	movs	r2, #128	; 0x80
 800a110:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a130:	b29b      	uxth	r3, r3
 800a132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a15e:	b29b      	uxth	r3, r3
 800a160:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a162:	68fb      	ldr	r3, [r7, #12]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a170:	b480      	push	{r7}
 800a172:	b08b      	sub	sp, #44	; 0x2c
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	4611      	mov	r1, r2
 800a17c:	461a      	mov	r2, r3
 800a17e:	460b      	mov	r3, r1
 800a180:	80fb      	strh	r3, [r7, #6]
 800a182:	4613      	mov	r3, r2
 800a184:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a186:	88bb      	ldrh	r3, [r7, #4]
 800a188:	3301      	adds	r3, #1
 800a18a:	085b      	lsrs	r3, r3, #1
 800a18c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a196:	88fa      	ldrh	r2, [r7, #6]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a6:	e01b      	b.n	800a1e0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	021b      	lsls	r3, r3, #8
 800a1b6:	b21a      	sxth	r2, r3
 800a1b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b21b      	sxth	r3, r3
 800a1c0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	8a7a      	ldrh	r2, [r7, #18]
 800a1c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	3302      	adds	r3, #2
 800a1cc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	627b      	str	r3, [r7, #36]	; 0x24
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e0      	bne.n	800a1a8 <USB_WritePMA+0x38>
  }
}
 800a1e6:	bf00      	nop
 800a1e8:	bf00      	nop
 800a1ea:	372c      	adds	r7, #44	; 0x2c
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b08b      	sub	sp, #44	; 0x2c
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	4611      	mov	r1, r2
 800a200:	461a      	mov	r2, r3
 800a202:	460b      	mov	r3, r1
 800a204:	80fb      	strh	r3, [r7, #6]
 800a206:	4613      	mov	r3, r2
 800a208:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a20a:	88bb      	ldrh	r3, [r7, #4]
 800a20c:	085b      	lsrs	r3, r3, #1
 800a20e:	b29b      	uxth	r3, r3
 800a210:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a21a:	88fa      	ldrh	r2, [r7, #6]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a224:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
 800a22a:	e018      	b.n	800a25e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	b29b      	uxth	r3, r3
 800a232:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	3302      	adds	r3, #2
 800a238:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	3301      	adds	r3, #1
 800a246:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	0a1b      	lsrs	r3, r3, #8
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	3301      	adds	r3, #1
 800a256:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	3b01      	subs	r3, #1
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e3      	bne.n	800a22c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a264:	88bb      	ldrh	r3, [r7, #4]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d007      	beq.n	800a280 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	b29b      	uxth	r3, r3
 800a276:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	701a      	strb	r2, [r3, #0]
  }
}
 800a280:	bf00      	nop
 800a282:	372c      	adds	r7, #44	; 0x2c
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a298:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a29c:	f002 f90a 	bl	800c4b4 <USBD_static_malloc>
 800a2a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d105      	bne.n	800a2b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e066      	b.n	800a382 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	7c1b      	ldrb	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d119      	bne.n	800a2f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a2c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	2181      	movs	r1, #129	; 0x81
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f001 ff98 	bl	800c202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a2d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2dc:	2202      	movs	r2, #2
 800a2de:	2101      	movs	r1, #1
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 ff8e 	bl	800c202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2210      	movs	r2, #16
 800a2f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a2f6:	e016      	b.n	800a326 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a2f8:	2340      	movs	r3, #64	; 0x40
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	2181      	movs	r1, #129	; 0x81
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f001 ff7f 	bl	800c202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a30a:	2340      	movs	r3, #64	; 0x40
 800a30c:	2202      	movs	r2, #2
 800a30e:	2101      	movs	r1, #1
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 ff76 	bl	800c202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2210      	movs	r2, #16
 800a322:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a326:	2308      	movs	r3, #8
 800a328:	2203      	movs	r2, #3
 800a32a:	2182      	movs	r1, #130	; 0x82
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 ff68 	bl	800c202 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	7c1b      	ldrb	r3, [r3, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d109      	bne.n	800a370 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a362:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a366:	2101      	movs	r1, #1
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f002 f839 	bl	800c3e0 <USBD_LL_PrepareReceive>
 800a36e:	e007      	b.n	800a380 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a376:	2340      	movs	r3, #64	; 0x40
 800a378:	2101      	movs	r1, #1
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f002 f830 	bl	800c3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a396:	2181      	movs	r1, #129	; 0x81
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 ff58 	bl	800c24e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f001 ff51 	bl	800c24e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a3b4:	2182      	movs	r1, #130	; 0x82
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f001 ff49 	bl	800c24e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00e      	beq.n	800a3f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f002 f872 	bl	800c4d0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a410:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a424:	2303      	movs	r3, #3
 800a426:	e0af      	b.n	800a588 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a430:	2b00      	cmp	r3, #0
 800a432:	d03f      	beq.n	800a4b4 <USBD_CDC_Setup+0xb4>
 800a434:	2b20      	cmp	r3, #32
 800a436:	f040 809f 	bne.w	800a578 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	88db      	ldrh	r3, [r3, #6]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d02e      	beq.n	800a4a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	b25b      	sxtb	r3, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	da16      	bge.n	800a47a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a458:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	88d2      	ldrh	r2, [r2, #6]
 800a45e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	88db      	ldrh	r3, [r3, #6]
 800a464:	2b07      	cmp	r3, #7
 800a466:	bf28      	it	cs
 800a468:	2307      	movcs	r3, #7
 800a46a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	89fa      	ldrh	r2, [r7, #14]
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f001 facf 	bl	800ba16 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a478:	e085      	b.n	800a586 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	785a      	ldrb	r2, [r3, #1]
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	88db      	ldrh	r3, [r3, #6]
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a490:	6939      	ldr	r1, [r7, #16]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	88db      	ldrh	r3, [r3, #6]
 800a496:	461a      	mov	r2, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 fae8 	bl	800ba6e <USBD_CtlPrepareRx>
      break;
 800a49e:	e072      	b.n	800a586 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	7850      	ldrb	r0, [r2, #1]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	4798      	blx	r3
      break;
 800a4b2:	e068      	b.n	800a586 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	785b      	ldrb	r3, [r3, #1]
 800a4b8:	2b0b      	cmp	r3, #11
 800a4ba:	d852      	bhi.n	800a562 <USBD_CDC_Setup+0x162>
 800a4bc:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <USBD_CDC_Setup+0xc4>)
 800a4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c2:	bf00      	nop
 800a4c4:	0800a4f5 	.word	0x0800a4f5
 800a4c8:	0800a571 	.word	0x0800a571
 800a4cc:	0800a563 	.word	0x0800a563
 800a4d0:	0800a563 	.word	0x0800a563
 800a4d4:	0800a563 	.word	0x0800a563
 800a4d8:	0800a563 	.word	0x0800a563
 800a4dc:	0800a563 	.word	0x0800a563
 800a4e0:	0800a563 	.word	0x0800a563
 800a4e4:	0800a563 	.word	0x0800a563
 800a4e8:	0800a563 	.word	0x0800a563
 800a4ec:	0800a51f 	.word	0x0800a51f
 800a4f0:	0800a549 	.word	0x0800a549
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d107      	bne.n	800a510 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a500:	f107 030a 	add.w	r3, r7, #10
 800a504:	2202      	movs	r2, #2
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f001 fa84 	bl	800ba16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a50e:	e032      	b.n	800a576 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f001 fa0e 	bl	800b934 <USBD_CtlError>
            ret = USBD_FAIL;
 800a518:	2303      	movs	r3, #3
 800a51a:	75fb      	strb	r3, [r7, #23]
          break;
 800a51c:	e02b      	b.n	800a576 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b03      	cmp	r3, #3
 800a528:	d107      	bne.n	800a53a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a52a:	f107 030d 	add.w	r3, r7, #13
 800a52e:	2201      	movs	r2, #1
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fa6f 	bl	800ba16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a538:	e01d      	b.n	800a576 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f001 f9f9 	bl	800b934 <USBD_CtlError>
            ret = USBD_FAIL;
 800a542:	2303      	movs	r3, #3
 800a544:	75fb      	strb	r3, [r7, #23]
          break;
 800a546:	e016      	b.n	800a576 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b03      	cmp	r3, #3
 800a552:	d00f      	beq.n	800a574 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f001 f9ec 	bl	800b934 <USBD_CtlError>
            ret = USBD_FAIL;
 800a55c:	2303      	movs	r3, #3
 800a55e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a560:	e008      	b.n	800a574 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f001 f9e5 	bl	800b934 <USBD_CtlError>
          ret = USBD_FAIL;
 800a56a:	2303      	movs	r3, #3
 800a56c:	75fb      	strb	r3, [r7, #23]
          break;
 800a56e:	e002      	b.n	800a576 <USBD_CDC_Setup+0x176>
          break;
 800a570:	bf00      	nop
 800a572:	e008      	b.n	800a586 <USBD_CDC_Setup+0x186>
          break;
 800a574:	bf00      	nop
      }
      break;
 800a576:	e006      	b.n	800a586 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f001 f9da 	bl	800b934 <USBD_CtlError>
      ret = USBD_FAIL;
 800a580:	2303      	movs	r3, #3
 800a582:	75fb      	strb	r3, [r7, #23]
      break;
 800a584:	bf00      	nop
  }

  return (uint8_t)ret;
 800a586:	7dfb      	ldrb	r3, [r7, #23]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e04f      	b.n	800a652 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a5ba:	78fa      	ldrb	r2, [r7, #3]
 800a5bc:	6879      	ldr	r1, [r7, #4]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	440b      	add	r3, r1
 800a5c8:	3318      	adds	r3, #24
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d029      	beq.n	800a624 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	440b      	add	r3, r1
 800a5de:	3318      	adds	r3, #24
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	78f9      	ldrb	r1, [r7, #3]
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	440b      	add	r3, r1
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	4403      	add	r3, r0
 800a5f0:	3320      	adds	r3, #32
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a5f8:	fb01 f303 	mul.w	r3, r1, r3
 800a5fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d110      	bne.n	800a624 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a602:	78fa      	ldrb	r2, [r7, #3]
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	440b      	add	r3, r1
 800a610:	3318      	adds	r3, #24
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a616:	78f9      	ldrb	r1, [r7, #3]
 800a618:	2300      	movs	r3, #0
 800a61a:	2200      	movs	r2, #0
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f001 febe 	bl	800c39e <USBD_LL_Transmit>
 800a622:	e015      	b.n	800a650 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2200      	movs	r2, #0
 800a628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00b      	beq.n	800a650 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a64c:	78fa      	ldrb	r2, [r7, #3]
 800a64e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	460b      	mov	r3, r1
 800a664:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a66c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a678:	2303      	movs	r3, #3
 800a67a:	e015      	b.n	800a6a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a67c:	78fb      	ldrb	r3, [r7, #3]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 fece 	bl	800c422 <USBD_LL_GetRxDataSize>
 800a686:	4602      	mov	r2, r0
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e01b      	b.n	800a702 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d015      	beq.n	800a700 <USBD_CDC_EP0_RxReady+0x50>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a6da:	2bff      	cmp	r3, #255	; 0xff
 800a6dc:	d010      	beq.n	800a700 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a6ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a6f4:	b292      	uxth	r2, r2
 800a6f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	22ff      	movs	r2, #255	; 0xff
 800a6fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2243      	movs	r2, #67	; 0x43
 800a718:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a71a:	4b03      	ldr	r3, [pc, #12]	; (800a728 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	200000b4 	.word	0x200000b4

0800a72c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2243      	movs	r2, #67	; 0x43
 800a738:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a73a:	4b03      	ldr	r3, [pc, #12]	; (800a748 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	20000070 	.word	0x20000070

0800a74c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2243      	movs	r2, #67	; 0x43
 800a758:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a75a:	4b03      	ldr	r3, [pc, #12]	; (800a768 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	200000f8 	.word	0x200000f8

0800a76c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	220a      	movs	r2, #10
 800a778:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a77a:	4b03      	ldr	r3, [pc, #12]	; (800a788 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	2000002c 	.word	0x2000002c

0800a78c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e004      	b.n	800a7aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b087      	sub	sp, #28
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e008      	b.n	800a7e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	371c      	adds	r7, #28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b085      	sub	sp, #20
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a802:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e004      	b.n	800a818 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a832:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a834:	2301      	movs	r3, #1
 800a836:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a842:	2303      	movs	r3, #3
 800a844:	e01a      	b.n	800a87c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d114      	bne.n	800a87a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2201      	movs	r2, #1
 800a854:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a86e:	2181      	movs	r1, #129	; 0x81
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f001 fd94 	bl	800c39e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a892:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e016      	b.n	800a8d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	7c1b      	ldrb	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d109      	bne.n	800a8be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f001 fd92 	bl	800c3e0 <USBD_LL_PrepareReceive>
 800a8bc:	e007      	b.n	800a8ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8c4:	2340      	movs	r3, #64	; 0x40
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f001 fd89 	bl	800c3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e01f      	b.n	800a930 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d003      	beq.n	800a916 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	79fa      	ldrb	r2, [r7, #7]
 800a922:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f001 fbf1 	bl	800c10c <USBD_LL_Init>
 800a92a:	4603      	mov	r3, r0
 800a92c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3718      	adds	r7, #24
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a942:	2300      	movs	r3, #0
 800a944:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e016      	b.n	800a97e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00b      	beq.n	800a97c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96c:	f107 020e 	add.w	r2, r7, #14
 800a970:	4610      	mov	r0, r2
 800a972:	4798      	blx	r3
 800a974:	4602      	mov	r2, r0
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f001 fc1c 	bl	800c1cc <USBD_LL_Start>
 800a994:	4603      	mov	r3, r0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d009      	beq.n	800a9e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	78fa      	ldrb	r2, [r7, #3]
 800a9d8:	4611      	mov	r1, r2
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	4798      	blx	r3
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d007      	beq.n	800aa12 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	78fa      	ldrb	r2, [r7, #3]
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	4798      	blx	r3
  }

  return USBD_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 ff46 	bl	800b8c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aa42:	461a      	mov	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa50:	f003 031f 	and.w	r3, r3, #31
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d01a      	beq.n	800aa8e <USBD_LL_SetupStage+0x72>
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d822      	bhi.n	800aaa2 <USBD_LL_SetupStage+0x86>
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <USBD_LL_SetupStage+0x4a>
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d00a      	beq.n	800aa7a <USBD_LL_SetupStage+0x5e>
 800aa64:	e01d      	b.n	800aaa2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f9ee 	bl	800ae50 <USBD_StdDevReq>
 800aa74:	4603      	mov	r3, r0
 800aa76:	73fb      	strb	r3, [r7, #15]
      break;
 800aa78:	e020      	b.n	800aabc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa80:	4619      	mov	r1, r3
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fa52 	bl	800af2c <USBD_StdItfReq>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa8c:	e016      	b.n	800aabc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa94:	4619      	mov	r1, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fa91 	bl	800afbe <USBD_StdEPReq>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa0:	e00c      	b.n	800aabc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aaa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f001 fbeb 	bl	800c28c <USBD_LL_StallEP>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73fb      	strb	r3, [r7, #15]
      break;
 800aaba:	bf00      	nop
  }

  return ret;
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b086      	sub	sp, #24
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	460b      	mov	r3, r1
 800aad0:	607a      	str	r2, [r7, #4]
 800aad2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aad4:	7afb      	ldrb	r3, [r7, #11]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d138      	bne.n	800ab4c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aae0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d14a      	bne.n	800ab82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d913      	bls.n	800ab20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	689a      	ldr	r2, [r3, #8]
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	1ad2      	subs	r2, r2, r3
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	bf28      	it	cs
 800ab12:	4613      	movcs	r3, r2
 800ab14:	461a      	mov	r2, r3
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 ffc5 	bl	800baa8 <USBD_CtlContinueRx>
 800ab1e:	e030      	b.n	800ab82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d10b      	bne.n	800ab44 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d005      	beq.n	800ab44 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f000 ffc0 	bl	800baca <USBD_CtlSendStatus>
 800ab4a:	e01a      	b.n	800ab82 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b03      	cmp	r3, #3
 800ab56:	d114      	bne.n	800ab82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00e      	beq.n	800ab82 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	7afa      	ldrb	r2, [r7, #11]
 800ab6e:	4611      	mov	r1, r2
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	4798      	blx	r3
 800ab74:	4603      	mov	r3, r0
 800ab76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d001      	beq.n	800ab82 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	e000      	b.n	800ab84 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	460b      	mov	r3, r1
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab9a:	7afb      	ldrb	r3, [r7, #11]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d16b      	bne.n	800ac78 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3314      	adds	r3, #20
 800aba4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800abac:	2b02      	cmp	r3, #2
 800abae:	d156      	bne.n	800ac5e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d914      	bls.n	800abe6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	689a      	ldr	r2, [r3, #8]
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	1ad2      	subs	r2, r2, r3
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	461a      	mov	r2, r3
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 ff3a 	bl	800ba4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abd8:	2300      	movs	r3, #0
 800abda:	2200      	movs	r2, #0
 800abdc:	2100      	movs	r1, #0
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f001 fbfe 	bl	800c3e0 <USBD_LL_PrepareReceive>
 800abe4:	e03b      	b.n	800ac5e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d11c      	bne.n	800ac2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d316      	bcc.n	800ac2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d20f      	bcs.n	800ac2c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2100      	movs	r1, #0
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f000 ff1b 	bl	800ba4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac1e:	2300      	movs	r3, #0
 800ac20:	2200      	movs	r2, #0
 800ac22:	2100      	movs	r1, #0
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f001 fbdb 	bl	800c3e0 <USBD_LL_PrepareReceive>
 800ac2a:	e018      	b.n	800ac5e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d10b      	bne.n	800ac50 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac50:	2180      	movs	r1, #128	; 0x80
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f001 fb1a 	bl	800c28c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f000 ff49 	bl	800baf0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d122      	bne.n	800acae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff fe98 	bl	800a99e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac76:	e01a      	b.n	800acae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d114      	bne.n	800acae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00e      	beq.n	800acae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac96:	695b      	ldr	r3, [r3, #20]
 800ac98:	7afa      	ldrb	r2, [r7, #11]
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	4798      	blx	r3
 800aca0:	4603      	mov	r3, r0
 800aca2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800acaa:	7dfb      	ldrb	r3, [r7, #23]
 800acac:	e000      	b.n	800acb0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ace8:	2303      	movs	r3, #3
 800acea:	e02f      	b.n	800ad4c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00f      	beq.n	800ad16 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d009      	beq.n	800ad16 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	6852      	ldr	r2, [r2, #4]
 800ad0e:	b2d2      	uxtb	r2, r2
 800ad10:	4611      	mov	r1, r2
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad16:	2340      	movs	r3, #64	; 0x40
 800ad18:	2200      	movs	r2, #0
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f001 fa70 	bl	800c202 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2240      	movs	r2, #64	; 0x40
 800ad2e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad32:	2340      	movs	r3, #64	; 0x40
 800ad34:	2200      	movs	r2, #0
 800ad36:	2180      	movs	r1, #128	; 0x80
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 fa62 	bl	800c202 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2240      	movs	r2, #64	; 0x40
 800ad48:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2204      	movs	r2, #4
 800ad8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b04      	cmp	r3, #4
 800adb2:	d106      	bne.n	800adc2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e012      	b.n	800ae0c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d10b      	bne.n	800ae0a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d005      	beq.n	800ae0a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae04:	69db      	ldr	r3, [r3, #28]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae32:	8a3b      	ldrh	r3, [r7, #16]
 800ae34:	021b      	lsls	r3, r3, #8
 800ae36:	b21a      	sxth	r2, r3
 800ae38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	b21b      	sxth	r3, r3
 800ae40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae42:	89fb      	ldrh	r3, [r7, #14]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	371c      	adds	r7, #28
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae66:	2b40      	cmp	r3, #64	; 0x40
 800ae68:	d005      	beq.n	800ae76 <USBD_StdDevReq+0x26>
 800ae6a:	2b40      	cmp	r3, #64	; 0x40
 800ae6c:	d853      	bhi.n	800af16 <USBD_StdDevReq+0xc6>
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00b      	beq.n	800ae8a <USBD_StdDevReq+0x3a>
 800ae72:	2b20      	cmp	r3, #32
 800ae74:	d14f      	bne.n	800af16 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	4798      	blx	r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
      break;
 800ae88:	e04a      	b.n	800af20 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	2b09      	cmp	r3, #9
 800ae90:	d83b      	bhi.n	800af0a <USBD_StdDevReq+0xba>
 800ae92:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <USBD_StdDevReq+0x48>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800aeed 	.word	0x0800aeed
 800ae9c:	0800af01 	.word	0x0800af01
 800aea0:	0800af0b 	.word	0x0800af0b
 800aea4:	0800aef7 	.word	0x0800aef7
 800aea8:	0800af0b 	.word	0x0800af0b
 800aeac:	0800aecb 	.word	0x0800aecb
 800aeb0:	0800aec1 	.word	0x0800aec1
 800aeb4:	0800af0b 	.word	0x0800af0b
 800aeb8:	0800aee3 	.word	0x0800aee3
 800aebc:	0800aed5 	.word	0x0800aed5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f9de 	bl	800b284 <USBD_GetDescriptor>
          break;
 800aec8:	e024      	b.n	800af14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fb6d 	bl	800b5ac <USBD_SetAddress>
          break;
 800aed2:	e01f      	b.n	800af14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fbac 	bl	800b634 <USBD_SetConfig>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]
          break;
 800aee0:	e018      	b.n	800af14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fc4b 	bl	800b780 <USBD_GetConfig>
          break;
 800aeea:	e013      	b.n	800af14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fc7c 	bl	800b7ec <USBD_GetStatus>
          break;
 800aef4:	e00e      	b.n	800af14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fcab 	bl	800b854 <USBD_SetFeature>
          break;
 800aefe:	e009      	b.n	800af14 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fcba 	bl	800b87c <USBD_ClrFeature>
          break;
 800af08:	e004      	b.n	800af14 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fd11 	bl	800b934 <USBD_CtlError>
          break;
 800af12:	bf00      	nop
      }
      break;
 800af14:	e004      	b.n	800af20 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fd0b 	bl	800b934 <USBD_CtlError>
      break;
 800af1e:	bf00      	nop
  }

  return ret;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop

0800af2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af42:	2b40      	cmp	r3, #64	; 0x40
 800af44:	d005      	beq.n	800af52 <USBD_StdItfReq+0x26>
 800af46:	2b40      	cmp	r3, #64	; 0x40
 800af48:	d82f      	bhi.n	800afaa <USBD_StdItfReq+0x7e>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <USBD_StdItfReq+0x26>
 800af4e:	2b20      	cmp	r3, #32
 800af50:	d12b      	bne.n	800afaa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d81d      	bhi.n	800af9c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	889b      	ldrh	r3, [r3, #4]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b01      	cmp	r3, #1
 800af68:	d813      	bhi.n	800af92 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	4798      	blx	r3
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	88db      	ldrh	r3, [r3, #6]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d110      	bne.n	800afa6 <USBD_StdItfReq+0x7a>
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10d      	bne.n	800afa6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fd9d 	bl	800baca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af90:	e009      	b.n	800afa6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fccd 	bl	800b934 <USBD_CtlError>
          break;
 800af9a:	e004      	b.n	800afa6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fcc8 	bl	800b934 <USBD_CtlError>
          break;
 800afa4:	e000      	b.n	800afa8 <USBD_StdItfReq+0x7c>
          break;
 800afa6:	bf00      	nop
      }
      break;
 800afa8:	e004      	b.n	800afb4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fcc1 	bl	800b934 <USBD_CtlError>
      break;
 800afb2:	bf00      	nop
  }

  return ret;
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	889b      	ldrh	r3, [r3, #4]
 800afd0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afda:	2b40      	cmp	r3, #64	; 0x40
 800afdc:	d007      	beq.n	800afee <USBD_StdEPReq+0x30>
 800afde:	2b40      	cmp	r3, #64	; 0x40
 800afe0:	f200 8145 	bhi.w	800b26e <USBD_StdEPReq+0x2b0>
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00c      	beq.n	800b002 <USBD_StdEPReq+0x44>
 800afe8:	2b20      	cmp	r3, #32
 800afea:	f040 8140 	bne.w	800b26e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	4798      	blx	r3
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]
      break;
 800b000:	e13a      	b.n	800b278 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	785b      	ldrb	r3, [r3, #1]
 800b006:	2b03      	cmp	r3, #3
 800b008:	d007      	beq.n	800b01a <USBD_StdEPReq+0x5c>
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	f300 8129 	bgt.w	800b262 <USBD_StdEPReq+0x2a4>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d07f      	beq.n	800b114 <USBD_StdEPReq+0x156>
 800b014:	2b01      	cmp	r3, #1
 800b016:	d03c      	beq.n	800b092 <USBD_StdEPReq+0xd4>
 800b018:	e123      	b.n	800b262 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b02      	cmp	r3, #2
 800b024:	d002      	beq.n	800b02c <USBD_StdEPReq+0x6e>
 800b026:	2b03      	cmp	r3, #3
 800b028:	d016      	beq.n	800b058 <USBD_StdEPReq+0x9a>
 800b02a:	e02c      	b.n	800b086 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00d      	beq.n	800b04e <USBD_StdEPReq+0x90>
 800b032:	7bbb      	ldrb	r3, [r7, #14]
 800b034:	2b80      	cmp	r3, #128	; 0x80
 800b036:	d00a      	beq.n	800b04e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f001 f925 	bl	800c28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b042:	2180      	movs	r1, #128	; 0x80
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 f921 	bl	800c28c <USBD_LL_StallEP>
 800b04a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b04c:	e020      	b.n	800b090 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fc6f 	bl	800b934 <USBD_CtlError>
              break;
 800b056:	e01b      	b.n	800b090 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	885b      	ldrh	r3, [r3, #2]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10e      	bne.n	800b07e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00b      	beq.n	800b07e <USBD_StdEPReq+0xc0>
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	2b80      	cmp	r3, #128	; 0x80
 800b06a:	d008      	beq.n	800b07e <USBD_StdEPReq+0xc0>
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	88db      	ldrh	r3, [r3, #6]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d104      	bne.n	800b07e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b074:	7bbb      	ldrb	r3, [r7, #14]
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 f907 	bl	800c28c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fd23 	bl	800baca <USBD_CtlSendStatus>

              break;
 800b084:	e004      	b.n	800b090 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fc53 	bl	800b934 <USBD_CtlError>
              break;
 800b08e:	bf00      	nop
          }
          break;
 800b090:	e0ec      	b.n	800b26c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d002      	beq.n	800b0a4 <USBD_StdEPReq+0xe6>
 800b09e:	2b03      	cmp	r3, #3
 800b0a0:	d016      	beq.n	800b0d0 <USBD_StdEPReq+0x112>
 800b0a2:	e030      	b.n	800b106 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00d      	beq.n	800b0c6 <USBD_StdEPReq+0x108>
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	2b80      	cmp	r3, #128	; 0x80
 800b0ae:	d00a      	beq.n	800b0c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f001 f8e9 	bl	800c28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0ba:	2180      	movs	r1, #128	; 0x80
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f001 f8e5 	bl	800c28c <USBD_LL_StallEP>
 800b0c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0c4:	e025      	b.n	800b112 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 fc33 	bl	800b934 <USBD_CtlError>
              break;
 800b0ce:	e020      	b.n	800b112 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	885b      	ldrh	r3, [r3, #2]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d11b      	bne.n	800b110 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0d8:	7bbb      	ldrb	r3, [r7, #14]
 800b0da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d004      	beq.n	800b0ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f001 f8ef 	bl	800c2ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fcec 	bl	800baca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	4798      	blx	r3
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b104:	e004      	b.n	800b110 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fc13 	bl	800b934 <USBD_CtlError>
              break;
 800b10e:	e000      	b.n	800b112 <USBD_StdEPReq+0x154>
              break;
 800b110:	bf00      	nop
          }
          break;
 800b112:	e0ab      	b.n	800b26c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d002      	beq.n	800b126 <USBD_StdEPReq+0x168>
 800b120:	2b03      	cmp	r3, #3
 800b122:	d032      	beq.n	800b18a <USBD_StdEPReq+0x1cc>
 800b124:	e097      	b.n	800b256 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d007      	beq.n	800b13c <USBD_StdEPReq+0x17e>
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	2b80      	cmp	r3, #128	; 0x80
 800b130:	d004      	beq.n	800b13c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fbfd 	bl	800b934 <USBD_CtlError>
                break;
 800b13a:	e091      	b.n	800b260 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b13c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b140:	2b00      	cmp	r3, #0
 800b142:	da0b      	bge.n	800b15c <USBD_StdEPReq+0x19e>
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b14a:	4613      	mov	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	3310      	adds	r3, #16
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	4413      	add	r3, r2
 800b158:	3304      	adds	r3, #4
 800b15a:	e00b      	b.n	800b174 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	4413      	add	r3, r2
 800b172:	3304      	adds	r3, #4
 800b174:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2200      	movs	r2, #0
 800b17a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2202      	movs	r2, #2
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fc47 	bl	800ba16 <USBD_CtlSendData>
              break;
 800b188:	e06a      	b.n	800b260 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b18a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	da11      	bge.n	800b1b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	f003 020f 	and.w	r2, r3, #15
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	3324      	adds	r3, #36	; 0x24
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d117      	bne.n	800b1dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fbc0 	bl	800b934 <USBD_CtlError>
                  break;
 800b1b4:	e054      	b.n	800b260 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	f003 020f 	and.w	r2, r3, #15
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	440b      	add	r3, r1
 800b1c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d104      	bne.n	800b1dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fbad 	bl	800b934 <USBD_CtlError>
                  break;
 800b1da:	e041      	b.n	800b260 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	da0b      	bge.n	800b1fc <USBD_StdEPReq+0x23e>
 800b1e4:	7bbb      	ldrb	r3, [r7, #14]
 800b1e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	3310      	adds	r3, #16
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	e00b      	b.n	800b214 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	4413      	add	r3, r2
 800b212:	3304      	adds	r3, #4
 800b214:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <USBD_StdEPReq+0x264>
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	2b80      	cmp	r3, #128	; 0x80
 800b220:	d103      	bne.n	800b22a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2200      	movs	r2, #0
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	e00e      	b.n	800b248 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f001 f86a 	bl	800c308 <USBD_LL_IsStallEP>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2201      	movs	r2, #1
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e002      	b.n	800b248 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2200      	movs	r2, #0
 800b246:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2202      	movs	r2, #2
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fbe1 	bl	800ba16 <USBD_CtlSendData>
              break;
 800b254:	e004      	b.n	800b260 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fb6b 	bl	800b934 <USBD_CtlError>
              break;
 800b25e:	bf00      	nop
          }
          break;
 800b260:	e004      	b.n	800b26c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fb65 	bl	800b934 <USBD_CtlError>
          break;
 800b26a:	bf00      	nop
      }
      break;
 800b26c:	e004      	b.n	800b278 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fb5f 	bl	800b934 <USBD_CtlError>
      break;
 800b276:	bf00      	nop
  }

  return ret;
 800b278:	7bfb      	ldrb	r3, [r7, #15]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b28e:	2300      	movs	r3, #0
 800b290:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	885b      	ldrh	r3, [r3, #2]
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	2b0e      	cmp	r3, #14
 800b2a6:	f200 8152 	bhi.w	800b54e <USBD_GetDescriptor+0x2ca>
 800b2aa:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <USBD_GetDescriptor+0x2c>)
 800b2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b0:	0800b321 	.word	0x0800b321
 800b2b4:	0800b339 	.word	0x0800b339
 800b2b8:	0800b379 	.word	0x0800b379
 800b2bc:	0800b54f 	.word	0x0800b54f
 800b2c0:	0800b54f 	.word	0x0800b54f
 800b2c4:	0800b4ef 	.word	0x0800b4ef
 800b2c8:	0800b51b 	.word	0x0800b51b
 800b2cc:	0800b54f 	.word	0x0800b54f
 800b2d0:	0800b54f 	.word	0x0800b54f
 800b2d4:	0800b54f 	.word	0x0800b54f
 800b2d8:	0800b54f 	.word	0x0800b54f
 800b2dc:	0800b54f 	.word	0x0800b54f
 800b2e0:	0800b54f 	.word	0x0800b54f
 800b2e4:	0800b54f 	.word	0x0800b54f
 800b2e8:	0800b2ed 	.word	0x0800b2ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00b      	beq.n	800b310 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	7c12      	ldrb	r2, [r2, #16]
 800b304:	f107 0108 	add.w	r1, r7, #8
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b30e:	e126      	b.n	800b55e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fb0e 	bl	800b934 <USBD_CtlError>
        err++;
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	3301      	adds	r3, #1
 800b31c:	72fb      	strb	r3, [r7, #11]
      break;
 800b31e:	e11e      	b.n	800b55e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	7c12      	ldrb	r2, [r2, #16]
 800b32c:	f107 0108 	add.w	r1, r7, #8
 800b330:	4610      	mov	r0, r2
 800b332:	4798      	blx	r3
 800b334:	60f8      	str	r0, [r7, #12]
      break;
 800b336:	e112      	b.n	800b55e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	7c1b      	ldrb	r3, [r3, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10d      	bne.n	800b35c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b348:	f107 0208 	add.w	r2, r7, #8
 800b34c:	4610      	mov	r0, r2
 800b34e:	4798      	blx	r3
 800b350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3301      	adds	r3, #1
 800b356:	2202      	movs	r2, #2
 800b358:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b35a:	e100      	b.n	800b55e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b364:	f107 0208 	add.w	r2, r7, #8
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
 800b36c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3301      	adds	r3, #1
 800b372:	2202      	movs	r2, #2
 800b374:	701a      	strb	r2, [r3, #0]
      break;
 800b376:	e0f2      	b.n	800b55e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	885b      	ldrh	r3, [r3, #2]
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b05      	cmp	r3, #5
 800b380:	f200 80ac 	bhi.w	800b4dc <USBD_GetDescriptor+0x258>
 800b384:	a201      	add	r2, pc, #4	; (adr r2, 800b38c <USBD_GetDescriptor+0x108>)
 800b386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38a:	bf00      	nop
 800b38c:	0800b3a5 	.word	0x0800b3a5
 800b390:	0800b3d9 	.word	0x0800b3d9
 800b394:	0800b40d 	.word	0x0800b40d
 800b398:	0800b441 	.word	0x0800b441
 800b39c:	0800b475 	.word	0x0800b475
 800b3a0:	0800b4a9 	.word	0x0800b4a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00b      	beq.n	800b3c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	7c12      	ldrb	r2, [r2, #16]
 800b3bc:	f107 0108 	add.w	r1, r7, #8
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	4798      	blx	r3
 800b3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3c6:	e091      	b.n	800b4ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fab2 	bl	800b934 <USBD_CtlError>
            err++;
 800b3d0:	7afb      	ldrb	r3, [r7, #11]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3d6:	e089      	b.n	800b4ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00b      	beq.n	800b3fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	7c12      	ldrb	r2, [r2, #16]
 800b3f0:	f107 0108 	add.w	r1, r7, #8
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4798      	blx	r3
 800b3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3fa:	e077      	b.n	800b4ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fa98 	bl	800b934 <USBD_CtlError>
            err++;
 800b404:	7afb      	ldrb	r3, [r7, #11]
 800b406:	3301      	adds	r3, #1
 800b408:	72fb      	strb	r3, [r7, #11]
          break;
 800b40a:	e06f      	b.n	800b4ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00b      	beq.n	800b430 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	7c12      	ldrb	r2, [r2, #16]
 800b424:	f107 0108 	add.w	r1, r7, #8
 800b428:	4610      	mov	r0, r2
 800b42a:	4798      	blx	r3
 800b42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b42e:	e05d      	b.n	800b4ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 fa7e 	bl	800b934 <USBD_CtlError>
            err++;
 800b438:	7afb      	ldrb	r3, [r7, #11]
 800b43a:	3301      	adds	r3, #1
 800b43c:	72fb      	strb	r3, [r7, #11]
          break;
 800b43e:	e055      	b.n	800b4ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00b      	beq.n	800b464 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	7c12      	ldrb	r2, [r2, #16]
 800b458:	f107 0108 	add.w	r1, r7, #8
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b462:	e043      	b.n	800b4ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 fa64 	bl	800b934 <USBD_CtlError>
            err++;
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	3301      	adds	r3, #1
 800b470:	72fb      	strb	r3, [r7, #11]
          break;
 800b472:	e03b      	b.n	800b4ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00b      	beq.n	800b498 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	7c12      	ldrb	r2, [r2, #16]
 800b48c:	f107 0108 	add.w	r1, r7, #8
 800b490:	4610      	mov	r0, r2
 800b492:	4798      	blx	r3
 800b494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b496:	e029      	b.n	800b4ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa4a 	bl	800b934 <USBD_CtlError>
            err++;
 800b4a0:	7afb      	ldrb	r3, [r7, #11]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4a6:	e021      	b.n	800b4ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	7c12      	ldrb	r2, [r2, #16]
 800b4c0:	f107 0108 	add.w	r1, r7, #8
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ca:	e00f      	b.n	800b4ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa30 	bl	800b934 <USBD_CtlError>
            err++;
 800b4d4:	7afb      	ldrb	r3, [r7, #11]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4da:	e007      	b.n	800b4ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fa28 	bl	800b934 <USBD_CtlError>
          err++;
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b4ea:	bf00      	nop
      }
      break;
 800b4ec:	e037      	b.n	800b55e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	7c1b      	ldrb	r3, [r3, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d109      	bne.n	800b50a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fe:	f107 0208 	add.w	r2, r7, #8
 800b502:	4610      	mov	r0, r2
 800b504:	4798      	blx	r3
 800b506:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b508:	e029      	b.n	800b55e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fa11 	bl	800b934 <USBD_CtlError>
        err++;
 800b512:	7afb      	ldrb	r3, [r7, #11]
 800b514:	3301      	adds	r3, #1
 800b516:	72fb      	strb	r3, [r7, #11]
      break;
 800b518:	e021      	b.n	800b55e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	7c1b      	ldrb	r3, [r3, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10d      	bne.n	800b53e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52a:	f107 0208 	add.w	r2, r7, #8
 800b52e:	4610      	mov	r0, r2
 800b530:	4798      	blx	r3
 800b532:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3301      	adds	r3, #1
 800b538:	2207      	movs	r2, #7
 800b53a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b53c:	e00f      	b.n	800b55e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f9f7 	bl	800b934 <USBD_CtlError>
        err++;
 800b546:	7afb      	ldrb	r3, [r7, #11]
 800b548:	3301      	adds	r3, #1
 800b54a:	72fb      	strb	r3, [r7, #11]
      break;
 800b54c:	e007      	b.n	800b55e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f9ef 	bl	800b934 <USBD_CtlError>
      err++;
 800b556:	7afb      	ldrb	r3, [r7, #11]
 800b558:	3301      	adds	r3, #1
 800b55a:	72fb      	strb	r3, [r7, #11]
      break;
 800b55c:	bf00      	nop
  }

  if (err != 0U)
 800b55e:	7afb      	ldrb	r3, [r7, #11]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d11e      	bne.n	800b5a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	88db      	ldrh	r3, [r3, #6]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d016      	beq.n	800b59a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b56c:	893b      	ldrh	r3, [r7, #8]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00e      	beq.n	800b590 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	88da      	ldrh	r2, [r3, #6]
 800b576:	893b      	ldrh	r3, [r7, #8]
 800b578:	4293      	cmp	r3, r2
 800b57a:	bf28      	it	cs
 800b57c:	4613      	movcs	r3, r2
 800b57e:	b29b      	uxth	r3, r3
 800b580:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b582:	893b      	ldrh	r3, [r7, #8]
 800b584:	461a      	mov	r2, r3
 800b586:	68f9      	ldr	r1, [r7, #12]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fa44 	bl	800ba16 <USBD_CtlSendData>
 800b58e:	e009      	b.n	800b5a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f9ce 	bl	800b934 <USBD_CtlError>
 800b598:	e004      	b.n	800b5a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fa95 	bl	800baca <USBD_CtlSendStatus>
 800b5a0:	e000      	b.n	800b5a4 <USBD_GetDescriptor+0x320>
    return;
 800b5a2:	bf00      	nop
  }
}
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop

0800b5ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	889b      	ldrh	r3, [r3, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d131      	bne.n	800b622 <USBD_SetAddress+0x76>
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	88db      	ldrh	r3, [r3, #6]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d12d      	bne.n	800b622 <USBD_SetAddress+0x76>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	885b      	ldrh	r3, [r3, #2]
 800b5ca:	2b7f      	cmp	r3, #127	; 0x7f
 800b5cc:	d829      	bhi.n	800b622 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	885b      	ldrh	r3, [r3, #2]
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	d104      	bne.n	800b5f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f9a3 	bl	800b934 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ee:	e01d      	b.n	800b62c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	7bfa      	ldrb	r2, [r7, #15]
 800b5f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 feaf 	bl	800c360 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa61 	bl	800baca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b608:	7bfb      	ldrb	r3, [r7, #15]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d004      	beq.n	800b618 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2202      	movs	r2, #2
 800b612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b616:	e009      	b.n	800b62c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b620:	e004      	b.n	800b62c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f985 	bl	800b934 <USBD_CtlError>
  }
}
 800b62a:	bf00      	nop
 800b62c:	bf00      	nop
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	885b      	ldrh	r3, [r3, #2]
 800b646:	b2da      	uxtb	r2, r3
 800b648:	4b4c      	ldr	r3, [pc, #304]	; (800b77c <USBD_SetConfig+0x148>)
 800b64a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b64c:	4b4b      	ldr	r3, [pc, #300]	; (800b77c <USBD_SetConfig+0x148>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d905      	bls.n	800b660 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b654:	6839      	ldr	r1, [r7, #0]
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f96c 	bl	800b934 <USBD_CtlError>
    return USBD_FAIL;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e088      	b.n	800b772 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d002      	beq.n	800b672 <USBD_SetConfig+0x3e>
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d025      	beq.n	800b6bc <USBD_SetConfig+0x88>
 800b670:	e071      	b.n	800b756 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b672:	4b42      	ldr	r3, [pc, #264]	; (800b77c <USBD_SetConfig+0x148>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01c      	beq.n	800b6b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b67a:	4b40      	ldr	r3, [pc, #256]	; (800b77c <USBD_SetConfig+0x148>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b684:	4b3d      	ldr	r3, [pc, #244]	; (800b77c <USBD_SetConfig+0x148>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	4619      	mov	r1, r3
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff f992 	bl	800a9b4 <USBD_SetClassConfig>
 800b690:	4603      	mov	r3, r0
 800b692:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b694:	7bfb      	ldrb	r3, [r7, #15]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b69a:	6839      	ldr	r1, [r7, #0]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f949 	bl	800b934 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6a2:	e065      	b.n	800b770 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fa10 	bl	800baca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2203      	movs	r2, #3
 800b6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b6b2:	e05d      	b.n	800b770 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fa08 	bl	800baca <USBD_CtlSendStatus>
      break;
 800b6ba:	e059      	b.n	800b770 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b6bc:	4b2f      	ldr	r3, [pc, #188]	; (800b77c <USBD_SetConfig+0x148>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d112      	bne.n	800b6ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b6cc:	4b2b      	ldr	r3, [pc, #172]	; (800b77c <USBD_SetConfig+0x148>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6d6:	4b29      	ldr	r3, [pc, #164]	; (800b77c <USBD_SetConfig+0x148>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff f985 	bl	800a9ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f9f1 	bl	800baca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6e8:	e042      	b.n	800b770 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b6ea:	4b24      	ldr	r3, [pc, #144]	; (800b77c <USBD_SetConfig+0x148>)
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d02a      	beq.n	800b74e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff f973 	bl	800a9ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b706:	4b1d      	ldr	r3, [pc, #116]	; (800b77c <USBD_SetConfig+0x148>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b710:	4b1a      	ldr	r3, [pc, #104]	; (800b77c <USBD_SetConfig+0x148>)
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	4619      	mov	r1, r3
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff f94c 	bl	800a9b4 <USBD_SetClassConfig>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b720:	7bfb      	ldrb	r3, [r7, #15]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00f      	beq.n	800b746 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f903 	bl	800b934 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff f958 	bl	800a9ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2202      	movs	r2, #2
 800b740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b744:	e014      	b.n	800b770 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f9bf 	bl	800baca <USBD_CtlSendStatus>
      break;
 800b74c:	e010      	b.n	800b770 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f9bb 	bl	800baca <USBD_CtlSendStatus>
      break;
 800b754:	e00c      	b.n	800b770 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f8eb 	bl	800b934 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b75e:	4b07      	ldr	r3, [pc, #28]	; (800b77c <USBD_SetConfig+0x148>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	4619      	mov	r1, r3
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff f941 	bl	800a9ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b76a:	2303      	movs	r3, #3
 800b76c:	73fb      	strb	r3, [r7, #15]
      break;
 800b76e:	bf00      	nop
  }

  return ret;
 800b770:	7bfb      	ldrb	r3, [r7, #15]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	200005a4 	.word	0x200005a4

0800b780 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	88db      	ldrh	r3, [r3, #6]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d004      	beq.n	800b79c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f8cd 	bl	800b934 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b79a:	e023      	b.n	800b7e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	dc02      	bgt.n	800b7ae <USBD_GetConfig+0x2e>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	dc03      	bgt.n	800b7b4 <USBD_GetConfig+0x34>
 800b7ac:	e015      	b.n	800b7da <USBD_GetConfig+0x5a>
 800b7ae:	2b03      	cmp	r3, #3
 800b7b0:	d00b      	beq.n	800b7ca <USBD_GetConfig+0x4a>
 800b7b2:	e012      	b.n	800b7da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3308      	adds	r3, #8
 800b7be:	2201      	movs	r2, #1
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f927 	bl	800ba16 <USBD_CtlSendData>
        break;
 800b7c8:	e00c      	b.n	800b7e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f91f 	bl	800ba16 <USBD_CtlSendData>
        break;
 800b7d8:	e004      	b.n	800b7e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f8a9 	bl	800b934 <USBD_CtlError>
        break;
 800b7e2:	bf00      	nop
}
 800b7e4:	bf00      	nop
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	3b01      	subs	r3, #1
 800b800:	2b02      	cmp	r3, #2
 800b802:	d81e      	bhi.n	800b842 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	88db      	ldrh	r3, [r3, #6]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d004      	beq.n	800b816 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f890 	bl	800b934 <USBD_CtlError>
        break;
 800b814:	e01a      	b.n	800b84c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b822:	2b00      	cmp	r3, #0
 800b824:	d005      	beq.n	800b832 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	f043 0202 	orr.w	r2, r3, #2
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	330c      	adds	r3, #12
 800b836:	2202      	movs	r2, #2
 800b838:	4619      	mov	r1, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 f8eb 	bl	800ba16 <USBD_CtlSendData>
      break;
 800b840:	e004      	b.n	800b84c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f875 	bl	800b934 <USBD_CtlError>
      break;
 800b84a:	bf00      	nop
  }
}
 800b84c:	bf00      	nop
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	885b      	ldrh	r3, [r3, #2]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d106      	bne.n	800b874 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f92b 	bl	800baca <USBD_CtlSendStatus>
  }
}
 800b874:	bf00      	nop
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	3b01      	subs	r3, #1
 800b890:	2b02      	cmp	r3, #2
 800b892:	d80b      	bhi.n	800b8ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	885b      	ldrh	r3, [r3, #2]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d10c      	bne.n	800b8b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 f910 	bl	800baca <USBD_CtlSendStatus>
      }
      break;
 800b8aa:	e004      	b.n	800b8b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f840 	bl	800b934 <USBD_CtlError>
      break;
 800b8b4:	e000      	b.n	800b8b8 <USBD_ClrFeature+0x3c>
      break;
 800b8b6:	bf00      	nop
  }
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	781a      	ldrb	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	781a      	ldrb	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f7ff fa92 	bl	800ae14 <SWAPBYTE>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3301      	adds	r3, #1
 800b902:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f7ff fa85 	bl	800ae14 <SWAPBYTE>
 800b90a:	4603      	mov	r3, r0
 800b90c:	461a      	mov	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	3301      	adds	r3, #1
 800b916:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3301      	adds	r3, #1
 800b91c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7ff fa78 	bl	800ae14 <SWAPBYTE>
 800b924:	4603      	mov	r3, r0
 800b926:	461a      	mov	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	80da      	strh	r2, [r3, #6]
}
 800b92c:	bf00      	nop
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b93e:	2180      	movs	r1, #128	; 0x80
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fca3 	bl	800c28c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b946:	2100      	movs	r1, #0
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fc9f 	bl	800c28c <USBD_LL_StallEP>
}
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b086      	sub	sp, #24
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	60f8      	str	r0, [r7, #12]
 800b95e:	60b9      	str	r1, [r7, #8]
 800b960:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b962:	2300      	movs	r3, #0
 800b964:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d036      	beq.n	800b9da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b970:	6938      	ldr	r0, [r7, #16]
 800b972:	f000 f836 	bl	800b9e2 <USBD_GetLen>
 800b976:	4603      	mov	r3, r0
 800b978:	3301      	adds	r3, #1
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	b29a      	uxth	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b984:	7dfb      	ldrb	r3, [r7, #23]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	4413      	add	r3, r2
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	7812      	ldrb	r2, [r2, #0]
 800b98e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b990:	7dfb      	ldrb	r3, [r7, #23]
 800b992:	3301      	adds	r3, #1
 800b994:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	4413      	add	r3, r2
 800b99c:	2203      	movs	r2, #3
 800b99e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b9a6:	e013      	b.n	800b9d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	7812      	ldrb	r2, [r2, #0]
 800b9b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	613b      	str	r3, [r7, #16]
    idx++;
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e7      	bne.n	800b9a8 <USBD_GetString+0x52>
 800b9d8:	e000      	b.n	800b9dc <USBD_GetString+0x86>
    return;
 800b9da:	bf00      	nop
  }
}
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b085      	sub	sp, #20
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9f2:	e005      	b.n	800ba00 <USBD_GetLen+0x1e>
  {
    len++;
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1f5      	bne.n	800b9f4 <USBD_GetLen+0x12>
  }

  return len;
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b084      	sub	sp, #16
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	60f8      	str	r0, [r7, #12]
 800ba1e:	60b9      	str	r1, [r7, #8]
 800ba20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2202      	movs	r2, #2
 800ba26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 fcae 	bl	800c39e <USBD_LL_Transmit>

  return USBD_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f000 fc9d 	bl	800c39e <USBD_LL_Transmit>

  return USBD_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	60f8      	str	r0, [r7, #12]
 800ba76:	60b9      	str	r1, [r7, #8]
 800ba78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2203      	movs	r2, #3
 800ba7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	2100      	movs	r1, #0
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 fca1 	bl	800c3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	2100      	movs	r1, #0
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f000 fc90 	bl	800c3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2204      	movs	r2, #4
 800bad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bada:	2300      	movs	r3, #0
 800badc:	2200      	movs	r2, #0
 800bade:	2100      	movs	r1, #0
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fc5c 	bl	800c39e <USBD_LL_Transmit>

  return USBD_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2205      	movs	r2, #5
 800bafc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb00:	2300      	movs	r3, #0
 800bb02:	2200      	movs	r2, #0
 800bb04:	2100      	movs	r1, #0
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fc6a 	bl	800c3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
	...

0800bb18 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4912      	ldr	r1, [pc, #72]	; (800bb68 <MX_USB_Device_Init+0x50>)
 800bb20:	4812      	ldr	r0, [pc, #72]	; (800bb6c <MX_USB_Device_Init+0x54>)
 800bb22:	f7fe fed9 	bl	800a8d8 <USBD_Init>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bb2c:	f7f5 fcce 	bl	80014cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bb30:	490f      	ldr	r1, [pc, #60]	; (800bb70 <MX_USB_Device_Init+0x58>)
 800bb32:	480e      	ldr	r0, [pc, #56]	; (800bb6c <MX_USB_Device_Init+0x54>)
 800bb34:	f7fe ff00 	bl	800a938 <USBD_RegisterClass>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bb3e:	f7f5 fcc5 	bl	80014cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bb42:	490c      	ldr	r1, [pc, #48]	; (800bb74 <MX_USB_Device_Init+0x5c>)
 800bb44:	4809      	ldr	r0, [pc, #36]	; (800bb6c <MX_USB_Device_Init+0x54>)
 800bb46:	f7fe fe21 	bl	800a78c <USBD_CDC_RegisterInterface>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800bb50:	f7f5 fcbc 	bl	80014cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bb54:	4805      	ldr	r0, [pc, #20]	; (800bb6c <MX_USB_Device_Init+0x54>)
 800bb56:	f7fe ff16 	bl	800a986 <USBD_Start>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800bb60:	f7f5 fcb4 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bb64:	bf00      	nop
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20000150 	.word	0x20000150
 800bb6c:	200005a8 	.word	0x200005a8
 800bb70:	20000038 	.word	0x20000038
 800bb74:	2000013c 	.word	0x2000013c

0800bb78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	4905      	ldr	r1, [pc, #20]	; (800bb94 <CDC_Init_FS+0x1c>)
 800bb80:	4805      	ldr	r0, [pc, #20]	; (800bb98 <CDC_Init_FS+0x20>)
 800bb82:	f7fe fe18 	bl	800a7b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb86:	4905      	ldr	r1, [pc, #20]	; (800bb9c <CDC_Init_FS+0x24>)
 800bb88:	4803      	ldr	r0, [pc, #12]	; (800bb98 <CDC_Init_FS+0x20>)
 800bb8a:	f7fe fe32 	bl	800a7f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	20000c78 	.word	0x20000c78
 800bb98:	200005a8 	.word	0x200005a8
 800bb9c:	20000878 	.word	0x20000878

0800bba0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bba0:	b480      	push	{r7}
 800bba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bba4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	6039      	str	r1, [r7, #0]
 800bbba:	71fb      	strb	r3, [r7, #7]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	2b23      	cmp	r3, #35	; 0x23
 800bbc4:	d84a      	bhi.n	800bc5c <CDC_Control_FS+0xac>
 800bbc6:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <CDC_Control_FS+0x1c>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bc5d 	.word	0x0800bc5d
 800bbd0:	0800bc5d 	.word	0x0800bc5d
 800bbd4:	0800bc5d 	.word	0x0800bc5d
 800bbd8:	0800bc5d 	.word	0x0800bc5d
 800bbdc:	0800bc5d 	.word	0x0800bc5d
 800bbe0:	0800bc5d 	.word	0x0800bc5d
 800bbe4:	0800bc5d 	.word	0x0800bc5d
 800bbe8:	0800bc5d 	.word	0x0800bc5d
 800bbec:	0800bc5d 	.word	0x0800bc5d
 800bbf0:	0800bc5d 	.word	0x0800bc5d
 800bbf4:	0800bc5d 	.word	0x0800bc5d
 800bbf8:	0800bc5d 	.word	0x0800bc5d
 800bbfc:	0800bc5d 	.word	0x0800bc5d
 800bc00:	0800bc5d 	.word	0x0800bc5d
 800bc04:	0800bc5d 	.word	0x0800bc5d
 800bc08:	0800bc5d 	.word	0x0800bc5d
 800bc0c:	0800bc5d 	.word	0x0800bc5d
 800bc10:	0800bc5d 	.word	0x0800bc5d
 800bc14:	0800bc5d 	.word	0x0800bc5d
 800bc18:	0800bc5d 	.word	0x0800bc5d
 800bc1c:	0800bc5d 	.word	0x0800bc5d
 800bc20:	0800bc5d 	.word	0x0800bc5d
 800bc24:	0800bc5d 	.word	0x0800bc5d
 800bc28:	0800bc5d 	.word	0x0800bc5d
 800bc2c:	0800bc5d 	.word	0x0800bc5d
 800bc30:	0800bc5d 	.word	0x0800bc5d
 800bc34:	0800bc5d 	.word	0x0800bc5d
 800bc38:	0800bc5d 	.word	0x0800bc5d
 800bc3c:	0800bc5d 	.word	0x0800bc5d
 800bc40:	0800bc5d 	.word	0x0800bc5d
 800bc44:	0800bc5d 	.word	0x0800bc5d
 800bc48:	0800bc5d 	.word	0x0800bc5d
 800bc4c:	0800bc5d 	.word	0x0800bc5d
 800bc50:	0800bc5d 	.word	0x0800bc5d
 800bc54:	0800bc5d 	.word	0x0800bc5d
 800bc58:	0800bc5d 	.word	0x0800bc5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc5c:	bf00      	nop
  }

  return (USBD_OK);
 800bc5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	480a      	ldr	r0, [pc, #40]	; (800bca4 <CDC_Receive_FS+0x38>)
 800bc7a:	f7fe fdba 	bl	800a7f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc7e:	4809      	ldr	r0, [pc, #36]	; (800bca4 <CDC_Receive_FS+0x38>)
 800bc80:	f7fe fe00 	bl	800a884 <USBD_CDC_ReceivePacket>
  cdc_rx_len = *Len;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <CDC_Receive_FS+0x3c>)
 800bc8c:	801a      	strh	r2, [r3, #0]
  user_shell_recive_bytes(UserRxBufferFS,cdc_rx_len);
 800bc8e:	4b06      	ldr	r3, [pc, #24]	; (800bca8 <CDC_Receive_FS+0x3c>)
 800bc90:	881b      	ldrh	r3, [r3, #0]
 800bc92:	4619      	mov	r1, r3
 800bc94:	4805      	ldr	r0, [pc, #20]	; (800bcac <CDC_Receive_FS+0x40>)
 800bc96:	f002 ff45 	bl	800eb24 <user_shell_recive_bytes>
  return (USBD_OK);
 800bc9a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	200005a8 	.word	0x200005a8
 800bca8:	20001078 	.word	0x20001078
 800bcac:	20000878 	.word	0x20000878

0800bcb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bcc0:	4b0d      	ldr	r3, [pc, #52]	; (800bcf8 <CDC_Transmit_FS+0x48>)
 800bcc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e00b      	b.n	800bcee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bcd6:	887b      	ldrh	r3, [r7, #2]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	4806      	ldr	r0, [pc, #24]	; (800bcf8 <CDC_Transmit_FS+0x48>)
 800bcde:	f7fe fd6a 	bl	800a7b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bce2:	4805      	ldr	r0, [pc, #20]	; (800bcf8 <CDC_Transmit_FS+0x48>)
 800bce4:	f7fe fd9e 	bl	800a824 <USBD_CDC_TransmitPacket>
 800bce8:	4603      	mov	r3, r0
 800bcea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	200005a8 	.word	0x200005a8

0800bcfc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	4613      	mov	r3, r2
 800bd08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	371c      	adds	r7, #28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
	...

0800bd20 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	6039      	str	r1, [r7, #0]
 800bd2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2212      	movs	r2, #18
 800bd30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bd32:	4b03      	ldr	r3, [pc, #12]	; (800bd40 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr
 800bd40:	20000170 	.word	0x20000170

0800bd44 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	6039      	str	r1, [r7, #0]
 800bd4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	2204      	movs	r2, #4
 800bd54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd56:	4b03      	ldr	r3, [pc, #12]	; (800bd64 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	20000184 	.word	0x20000184

0800bd68 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	6039      	str	r1, [r7, #0]
 800bd72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd74:	79fb      	ldrb	r3, [r7, #7]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d105      	bne.n	800bd86 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	4907      	ldr	r1, [pc, #28]	; (800bd9c <USBD_CDC_ProductStrDescriptor+0x34>)
 800bd7e:	4808      	ldr	r0, [pc, #32]	; (800bda0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bd80:	f7ff fde9 	bl	800b956 <USBD_GetString>
 800bd84:	e004      	b.n	800bd90 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	4904      	ldr	r1, [pc, #16]	; (800bd9c <USBD_CDC_ProductStrDescriptor+0x34>)
 800bd8a:	4805      	ldr	r0, [pc, #20]	; (800bda0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bd8c:	f7ff fde3 	bl	800b956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd90:	4b02      	ldr	r3, [pc, #8]	; (800bd9c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	2000107c 	.word	0x2000107c
 800bda0:	08013ca0 	.word	0x08013ca0

0800bda4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	6039      	str	r1, [r7, #0]
 800bdae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	4904      	ldr	r1, [pc, #16]	; (800bdc4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bdb4:	4804      	ldr	r0, [pc, #16]	; (800bdc8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bdb6:	f7ff fdce 	bl	800b956 <USBD_GetString>
  return USBD_StrDesc;
 800bdba:	4b02      	ldr	r3, [pc, #8]	; (800bdc4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	2000107c 	.word	0x2000107c
 800bdc8:	08013cb8 	.word	0x08013cb8

0800bdcc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	6039      	str	r1, [r7, #0]
 800bdd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	221a      	movs	r2, #26
 800bddc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdde:	f000 f843 	bl	800be68 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bde2:	4b02      	ldr	r3, [pc, #8]	; (800bdec <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	20000188 	.word	0x20000188

0800bdf0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	6039      	str	r1, [r7, #0]
 800bdfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d105      	bne.n	800be0e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4907      	ldr	r1, [pc, #28]	; (800be24 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be06:	4808      	ldr	r0, [pc, #32]	; (800be28 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be08:	f7ff fda5 	bl	800b956 <USBD_GetString>
 800be0c:	e004      	b.n	800be18 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	4904      	ldr	r1, [pc, #16]	; (800be24 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be12:	4805      	ldr	r0, [pc, #20]	; (800be28 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be14:	f7ff fd9f 	bl	800b956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be18:	4b02      	ldr	r3, [pc, #8]	; (800be24 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	2000107c 	.word	0x2000107c
 800be28:	08013ccc 	.word	0x08013ccc

0800be2c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	4603      	mov	r3, r0
 800be34:	6039      	str	r1, [r7, #0]
 800be36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be38:	79fb      	ldrb	r3, [r7, #7]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d105      	bne.n	800be4a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	4907      	ldr	r1, [pc, #28]	; (800be60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800be42:	4808      	ldr	r0, [pc, #32]	; (800be64 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800be44:	f7ff fd87 	bl	800b956 <USBD_GetString>
 800be48:	e004      	b.n	800be54 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	4904      	ldr	r1, [pc, #16]	; (800be60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800be4e:	4805      	ldr	r0, [pc, #20]	; (800be64 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800be50:	f7ff fd81 	bl	800b956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be54:	4b02      	ldr	r3, [pc, #8]	; (800be60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	2000107c 	.word	0x2000107c
 800be64:	08013cd8 	.word	0x08013cd8

0800be68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be6e:	4b0f      	ldr	r3, [pc, #60]	; (800beac <Get_SerialNum+0x44>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be74:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <Get_SerialNum+0x48>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be7a:	4b0e      	ldr	r3, [pc, #56]	; (800beb4 <Get_SerialNum+0x4c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4413      	add	r3, r2
 800be86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d009      	beq.n	800bea2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be8e:	2208      	movs	r2, #8
 800be90:	4909      	ldr	r1, [pc, #36]	; (800beb8 <Get_SerialNum+0x50>)
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f000 f814 	bl	800bec0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be98:	2204      	movs	r2, #4
 800be9a:	4908      	ldr	r1, [pc, #32]	; (800bebc <Get_SerialNum+0x54>)
 800be9c:	68b8      	ldr	r0, [r7, #8]
 800be9e:	f000 f80f 	bl	800bec0 <IntToUnicode>
  }
}
 800bea2:	bf00      	nop
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	1fff7590 	.word	0x1fff7590
 800beb0:	1fff7594 	.word	0x1fff7594
 800beb4:	1fff7598 	.word	0x1fff7598
 800beb8:	2000018a 	.word	0x2000018a
 800bebc:	2000019a 	.word	0x2000019a

0800bec0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	4613      	mov	r3, r2
 800becc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bed2:	2300      	movs	r3, #0
 800bed4:	75fb      	strb	r3, [r7, #23]
 800bed6:	e027      	b.n	800bf28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	0f1b      	lsrs	r3, r3, #28
 800bedc:	2b09      	cmp	r3, #9
 800bede:	d80b      	bhi.n	800bef8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	0f1b      	lsrs	r3, r3, #28
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	7dfb      	ldrb	r3, [r7, #23]
 800bee8:	005b      	lsls	r3, r3, #1
 800beea:	4619      	mov	r1, r3
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	440b      	add	r3, r1
 800bef0:	3230      	adds	r2, #48	; 0x30
 800bef2:	b2d2      	uxtb	r2, r2
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	e00a      	b.n	800bf0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	0f1b      	lsrs	r3, r3, #28
 800befc:	b2da      	uxtb	r2, r3
 800befe:	7dfb      	ldrb	r3, [r7, #23]
 800bf00:	005b      	lsls	r3, r3, #1
 800bf02:	4619      	mov	r1, r3
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	440b      	add	r3, r1
 800bf08:	3237      	adds	r2, #55	; 0x37
 800bf0a:	b2d2      	uxtb	r2, r2
 800bf0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	011b      	lsls	r3, r3, #4
 800bf12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	005b      	lsls	r3, r3, #1
 800bf18:	3301      	adds	r3, #1
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf22:	7dfb      	ldrb	r3, [r7, #23]
 800bf24:	3301      	adds	r3, #1
 800bf26:	75fb      	strb	r3, [r7, #23]
 800bf28:	7dfa      	ldrb	r2, [r7, #23]
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d3d3      	bcc.n	800bed8 <IntToUnicode+0x18>
  }
}
 800bf30:	bf00      	nop
 800bf32:	bf00      	nop
 800bf34:	371c      	adds	r7, #28
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
	...

0800bf40 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b094      	sub	sp, #80	; 0x50
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bf48:	f107 030c 	add.w	r3, r7, #12
 800bf4c:	2244      	movs	r2, #68	; 0x44
 800bf4e:	2100      	movs	r1, #0
 800bf50:	4618      	mov	r0, r3
 800bf52:	f004 f9e5 	bl	8010320 <memset>
  if(pcdHandle->Instance==USB)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a15      	ldr	r2, [pc, #84]	; (800bfb0 <HAL_PCD_MspInit+0x70>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d122      	bne.n	800bfa6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bf60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf64:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bf66:	2300      	movs	r3, #0
 800bf68:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bf6a:	f107 030c 	add.w	r3, r7, #12
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7f9 fd0c 	bl	800598c <HAL_RCCEx_PeriphCLKConfig>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800bf7a:	f7f5 faa7 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <HAL_PCD_MspInit+0x74>)
 800bf80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf82:	4a0c      	ldr	r2, [pc, #48]	; (800bfb4 <HAL_PCD_MspInit+0x74>)
 800bf84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf88:	6593      	str	r3, [r2, #88]	; 0x58
 800bf8a:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <HAL_PCD_MspInit+0x74>)
 800bf8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf92:	60bb      	str	r3, [r7, #8]
 800bf94:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bf96:	2200      	movs	r2, #0
 800bf98:	2100      	movs	r1, #0
 800bf9a:	2014      	movs	r0, #20
 800bf9c:	f7f5 fe97 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bfa0:	2014      	movs	r0, #20
 800bfa2:	f7f5 feae 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bfa6:	bf00      	nop
 800bfa8:	3750      	adds	r7, #80	; 0x50
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	40005c00 	.word	0x40005c00
 800bfb4:	40021000 	.word	0x40021000

0800bfb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4610      	mov	r0, r2
 800bfd0:	f7fe fd24 	bl	800aa1c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bfd4:	bf00      	nop
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bfee:	78fa      	ldrb	r2, [r7, #3]
 800bff0:	6879      	ldr	r1, [r7, #4]
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	00db      	lsls	r3, r3, #3
 800bffa:	440b      	add	r3, r1
 800bffc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	78fb      	ldrb	r3, [r7, #3]
 800c004:	4619      	mov	r1, r3
 800c006:	f7fe fd5e 	bl	800aac6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	460b      	mov	r3, r1
 800c01c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800c024:	78fa      	ldrb	r2, [r7, #3]
 800c026:	6879      	ldr	r1, [r7, #4]
 800c028:	4613      	mov	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	440b      	add	r3, r1
 800c032:	3324      	adds	r3, #36	; 0x24
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	78fb      	ldrb	r3, [r7, #3]
 800c038:	4619      	mov	r1, r3
 800c03a:	f7fe fda7 	bl	800ab8c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c03e:	bf00      	nop
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b082      	sub	sp, #8
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c054:	4618      	mov	r0, r3
 800c056:	f7fe febb 	bl	800add0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c05a:	bf00      	nop
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c06a:	2301      	movs	r3, #1
 800c06c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	795b      	ldrb	r3, [r3, #5]
 800c072:	2b02      	cmp	r3, #2
 800c074:	d001      	beq.n	800c07a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c076:	f7f5 fa29 	bl	80014cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c080:	7bfa      	ldrb	r2, [r7, #15]
 800c082:	4611      	mov	r1, r2
 800c084:	4618      	mov	r0, r3
 800c086:	f7fe fe65 	bl	800ad54 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c090:	4618      	mov	r0, r3
 800c092:	f7fe fe11 	bl	800acb8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c096:	bf00      	nop
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
	...

0800c0a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe fe60 	bl	800ad74 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7a5b      	ldrb	r3, [r3, #9]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d005      	beq.n	800c0c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0bc:	4b04      	ldr	r3, [pc, #16]	; (800c0d0 <HAL_PCD_SuspendCallback+0x30>)
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	4a03      	ldr	r2, [pc, #12]	; (800c0d0 <HAL_PCD_SuspendCallback+0x30>)
 800c0c2:	f043 0306 	orr.w	r3, r3, #6
 800c0c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c0c8:	bf00      	nop
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	e000ed00 	.word	0xe000ed00

0800c0d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	7a5b      	ldrb	r3, [r3, #9]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d007      	beq.n	800c0f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0e4:	4b08      	ldr	r3, [pc, #32]	; (800c108 <HAL_PCD_ResumeCallback+0x34>)
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	4a07      	ldr	r2, [pc, #28]	; (800c108 <HAL_PCD_ResumeCallback+0x34>)
 800c0ea:	f023 0306 	bic.w	r3, r3, #6
 800c0ee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c0f0:	f000 f9f8 	bl	800c4e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fe50 	bl	800ada0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c100:	bf00      	nop
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	e000ed00 	.word	0xe000ed00

0800c10c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c114:	4a2b      	ldr	r2, [pc, #172]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a29      	ldr	r2, [pc, #164]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c120:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c124:	4b27      	ldr	r3, [pc, #156]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c126:	4a28      	ldr	r2, [pc, #160]	; (800c1c8 <USBD_LL_Init+0xbc>)
 800c128:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c12a:	4b26      	ldr	r3, [pc, #152]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c12c:	2208      	movs	r2, #8
 800c12e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c130:	4b24      	ldr	r3, [pc, #144]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c132:	2202      	movs	r2, #2
 800c134:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c136:	4b23      	ldr	r3, [pc, #140]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c138:	2202      	movs	r2, #2
 800c13a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c13c:	4b21      	ldr	r3, [pc, #132]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c13e:	2200      	movs	r2, #0
 800c140:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c142:	4b20      	ldr	r3, [pc, #128]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c144:	2200      	movs	r2, #0
 800c146:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c148:	4b1e      	ldr	r3, [pc, #120]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c14e:	4b1d      	ldr	r3, [pc, #116]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c150:	2200      	movs	r2, #0
 800c152:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c154:	481b      	ldr	r0, [pc, #108]	; (800c1c4 <USBD_LL_Init+0xb8>)
 800c156:	f7f7 f902 	bl	800335e <HAL_PCD_Init>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c160:	f7f5 f9b4 	bl	80014cc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c16a:	2318      	movs	r3, #24
 800c16c:	2200      	movs	r2, #0
 800c16e:	2100      	movs	r1, #0
 800c170:	f7f8 fdbc 	bl	8004cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c17a:	2358      	movs	r3, #88	; 0x58
 800c17c:	2200      	movs	r2, #0
 800c17e:	2180      	movs	r1, #128	; 0x80
 800c180:	f7f8 fdb4 	bl	8004cec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c18a:	23c0      	movs	r3, #192	; 0xc0
 800c18c:	2200      	movs	r2, #0
 800c18e:	2181      	movs	r1, #129	; 0x81
 800c190:	f7f8 fdac 	bl	8004cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c19a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c19e:	2200      	movs	r2, #0
 800c1a0:	2101      	movs	r1, #1
 800c1a2:	f7f8 fda3 	bl	8004cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	2182      	movs	r1, #130	; 0x82
 800c1b4:	f7f8 fd9a 	bl	8004cec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	2000127c 	.word	0x2000127c
 800c1c8:	40005c00 	.word	0x40005c00

0800c1cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f7 f989 	bl	80034fa <HAL_PCD_Start>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f97e 	bl	800c4f0 <USBD_Get_USB_Status>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b084      	sub	sp, #16
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	4608      	mov	r0, r1
 800c20c:	4611      	mov	r1, r2
 800c20e:	461a      	mov	r2, r3
 800c210:	4603      	mov	r3, r0
 800c212:	70fb      	strb	r3, [r7, #3]
 800c214:	460b      	mov	r3, r1
 800c216:	70bb      	strb	r3, [r7, #2]
 800c218:	4613      	mov	r3, r2
 800c21a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c22a:	78bb      	ldrb	r3, [r7, #2]
 800c22c:	883a      	ldrh	r2, [r7, #0]
 800c22e:	78f9      	ldrb	r1, [r7, #3]
 800c230:	f7f7 fad0 	bl	80037d4 <HAL_PCD_EP_Open>
 800c234:	4603      	mov	r3, r0
 800c236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 f958 	bl	800c4f0 <USBD_Get_USB_Status>
 800c240:	4603      	mov	r3, r0
 800c242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c244:	7bbb      	ldrb	r3, [r7, #14]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b084      	sub	sp, #16
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	460b      	mov	r3, r1
 800c258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c268:	78fa      	ldrb	r2, [r7, #3]
 800c26a:	4611      	mov	r1, r2
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7f7 fb0e 	bl	800388e <HAL_PCD_EP_Close>
 800c272:	4603      	mov	r3, r0
 800c274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 f939 	bl	800c4f0 <USBD_Get_USB_Status>
 800c27e:	4603      	mov	r3, r0
 800c280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c282:	7bbb      	ldrb	r3, [r7, #14]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2a6:	78fa      	ldrb	r2, [r7, #3]
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7f7 fbb7 	bl	8003a1e <HAL_PCD_EP_SetStall>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 f91a 	bl	800c4f0 <USBD_Get_USB_Status>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2e4:	78fa      	ldrb	r2, [r7, #3]
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7f7 fbea 	bl	8003ac2 <HAL_PCD_EP_ClrStall>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f000 f8fb 	bl	800c4f0 <USBD_Get_USB_Status>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	460b      	mov	r3, r1
 800c312:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c31a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c31c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c320:	2b00      	cmp	r3, #0
 800c322:	da0b      	bge.n	800c33c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c324:	78fb      	ldrb	r3, [r7, #3]
 800c326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c32a:	68f9      	ldr	r1, [r7, #12]
 800c32c:	4613      	mov	r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	440b      	add	r3, r1
 800c336:	3312      	adds	r3, #18
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	e00b      	b.n	800c354 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c33c:	78fb      	ldrb	r3, [r7, #3]
 800c33e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c342:	68f9      	ldr	r1, [r7, #12]
 800c344:	4613      	mov	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	00db      	lsls	r3, r3, #3
 800c34c:	440b      	add	r3, r1
 800c34e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c352:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c354:	4618      	mov	r0, r3
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c37a:	78fa      	ldrb	r2, [r7, #3]
 800c37c:	4611      	mov	r1, r2
 800c37e:	4618      	mov	r0, r3
 800c380:	f7f7 fa04 	bl	800378c <HAL_PCD_SetAddress>
 800c384:	4603      	mov	r3, r0
 800c386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c388:	7bfb      	ldrb	r3, [r7, #15]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f000 f8b0 	bl	800c4f0 <USBD_Get_USB_Status>
 800c390:	4603      	mov	r3, r0
 800c392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c394:	7bbb      	ldrb	r3, [r7, #14]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b086      	sub	sp, #24
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	60f8      	str	r0, [r7, #12]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3bc:	7af9      	ldrb	r1, [r7, #11]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	f7f7 faf5 	bl	80039b0 <HAL_PCD_EP_Transmit>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 f88f 	bl	800c4f0 <USBD_Get_USB_Status>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	607a      	str	r2, [r7, #4]
 800c3ea:	603b      	str	r3, [r7, #0]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3fe:	7af9      	ldrb	r1, [r7, #11]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	f7f7 fa8b 	bl	800391e <HAL_PCD_EP_Receive>
 800c408:	4603      	mov	r3, r0
 800c40a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 f86e 	bl	800c4f0 <USBD_Get_USB_Status>
 800c414:	4603      	mov	r3, r0
 800c416:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c418:	7dbb      	ldrb	r3, [r7, #22]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3718      	adds	r7, #24
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b082      	sub	sp, #8
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	460b      	mov	r3, r1
 800c42c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c434:	78fa      	ldrb	r2, [r7, #3]
 800c436:	4611      	mov	r1, r2
 800c438:	4618      	mov	r0, r3
 800c43a:	f7f7 faa1 	bl	8003980 <HAL_PCD_EP_GetRxCount>
 800c43e:	4603      	mov	r3, r0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c454:	78fb      	ldrb	r3, [r7, #3]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d002      	beq.n	800c460 <HAL_PCDEx_LPM_Callback+0x18>
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d013      	beq.n	800c486 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c45e:	e023      	b.n	800c4a8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	7a5b      	ldrb	r3, [r3, #9]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d007      	beq.n	800c478 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c468:	f000 f83c 	bl	800c4e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c46c:	4b10      	ldr	r3, [pc, #64]	; (800c4b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	4a0f      	ldr	r2, [pc, #60]	; (800c4b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c472:	f023 0306 	bic.w	r3, r3, #6
 800c476:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fe fc8e 	bl	800ada0 <USBD_LL_Resume>
    break;
 800c484:	e010      	b.n	800c4a8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fe fc71 	bl	800ad74 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7a5b      	ldrb	r3, [r3, #9]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d005      	beq.n	800c4a6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	4a04      	ldr	r2, [pc, #16]	; (800c4b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c4a0:	f043 0306 	orr.w	r3, r3, #6
 800c4a4:	6113      	str	r3, [r2, #16]
    break;
 800c4a6:	bf00      	nop
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	e000ed00 	.word	0xe000ed00

0800c4b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4bc:	4b03      	ldr	r3, [pc, #12]	; (800c4cc <USBD_static_malloc+0x18>)
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	370c      	adds	r7, #12
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	20001558 	.word	0x20001558

0800c4d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]

}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c4e8:	f7f4 ffa5 	bl	8001436 <SystemClock_Config>
}
 800c4ec:	bf00      	nop
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4fe:	79fb      	ldrb	r3, [r7, #7]
 800c500:	2b03      	cmp	r3, #3
 800c502:	d817      	bhi.n	800c534 <USBD_Get_USB_Status+0x44>
 800c504:	a201      	add	r2, pc, #4	; (adr r2, 800c50c <USBD_Get_USB_Status+0x1c>)
 800c506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50a:	bf00      	nop
 800c50c:	0800c51d 	.word	0x0800c51d
 800c510:	0800c523 	.word	0x0800c523
 800c514:	0800c529 	.word	0x0800c529
 800c518:	0800c52f 	.word	0x0800c52f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c51c:	2300      	movs	r3, #0
 800c51e:	73fb      	strb	r3, [r7, #15]
    break;
 800c520:	e00b      	b.n	800c53a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c522:	2303      	movs	r3, #3
 800c524:	73fb      	strb	r3, [r7, #15]
    break;
 800c526:	e008      	b.n	800c53a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c528:	2301      	movs	r3, #1
 800c52a:	73fb      	strb	r3, [r7, #15]
    break;
 800c52c:	e005      	b.n	800c53a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c52e:	2303      	movs	r3, #3
 800c530:	73fb      	strb	r3, [r7, #15]
    break;
 800c532:	e002      	b.n	800c53a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c534:	2303      	movs	r3, #3
 800c536:	73fb      	strb	r3, [r7, #15]
    break;
 800c538:	bf00      	nop
  }
  return usb_status;
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <acc_gyro_init>:
 * @author
 * @param  void
 * @return 0-成功 1-失败
 */
uint8_t acc_gyro_init(void)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 800c54e:	2300      	movs	r3, #0
 800c550:	71bb      	strb	r3, [r7, #6]
	uint8_t cfg_index = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	71fb      	strb	r3, [r7, #7]

	BSP_I2C3_ReadReg(LSM6DS3_ADDR, WHO_AM_I, &id, 1);
 800c556:	1dba      	adds	r2, r7, #6
 800c558:	2301      	movs	r3, #1
 800c55a:	210f      	movs	r1, #15
 800c55c:	20d4      	movs	r0, #212	; 0xd4
 800c55e:	f001 fee6 	bl	800e32e <BSP_I2C3_ReadReg>

    for (cfg_index=0; cfg_index<sizeof(acc_gyro_init_reg)/sizeof(reg_cfg_t); cfg_index++)
 800c562:	2300      	movs	r3, #0
 800c564:	71fb      	strb	r3, [r7, #7]
 800c566:	e022      	b.n	800c5ae <acc_gyro_init+0x66>
    {
    	if(acc_gyro_init_reg[cfg_index].reg==0&&acc_gyro_init_reg[cfg_index].dat==0)
 800c568:	79fb      	ldrb	r3, [r7, #7]
 800c56a:	4a15      	ldr	r2, [pc, #84]	; (800c5c0 <acc_gyro_init+0x78>)
 800c56c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d106      	bne.n	800c582 <acc_gyro_init+0x3a>
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	4a12      	ldr	r2, [pc, #72]	; (800c5c0 <acc_gyro_init+0x78>)
 800c578:	005b      	lsls	r3, r3, #1
 800c57a:	4413      	add	r3, r2
 800c57c:	785b      	ldrb	r3, [r3, #1]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d011      	beq.n	800c5a6 <acc_gyro_init+0x5e>
    	{
    		continue;
    	}
    	BSP_I2C3_WriteReg(LSM6DS3_ADDR,acc_gyro_init_reg[cfg_index].reg, &acc_gyro_init_reg[cfg_index].dat,1);
 800c582:	79fb      	ldrb	r3, [r7, #7]
 800c584:	4a0e      	ldr	r2, [pc, #56]	; (800c5c0 <acc_gyro_init+0x78>)
 800c586:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c58a:	b299      	uxth	r1, r3
 800c58c:	79fb      	ldrb	r3, [r7, #7]
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	4a0b      	ldr	r2, [pc, #44]	; (800c5c0 <acc_gyro_init+0x78>)
 800c592:	4413      	add	r3, r2
 800c594:	1c5a      	adds	r2, r3, #1
 800c596:	2301      	movs	r3, #1
 800c598:	20d4      	movs	r0, #212	; 0xd4
 800c59a:	f001 feab 	bl	800e2f4 <BSP_I2C3_WriteReg>
        HAL_Delay(1);
 800c59e:	2001      	movs	r0, #1
 800c5a0:	f7f5 fa98 	bl	8001ad4 <HAL_Delay>
 800c5a4:	e000      	b.n	800c5a8 <acc_gyro_init+0x60>
    		continue;
 800c5a6:	bf00      	nop
    for (cfg_index=0; cfg_index<sizeof(acc_gyro_init_reg)/sizeof(reg_cfg_t); cfg_index++)
 800c5a8:	79fb      	ldrb	r3, [r7, #7]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	71fb      	strb	r3, [r7, #7]
 800c5ae:	79fb      	ldrb	r3, [r7, #7]
 800c5b0:	2b13      	cmp	r3, #19
 800c5b2:	d9d9      	bls.n	800c568 <acc_gyro_init+0x20>

    }

	return id;
 800c5b4:	79bb      	ldrb	r3, [r7, #6]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	200001a4 	.word	0x200001a4

0800c5c4 <acc_gyro_sample_data>:
 * @author
 * @param  gyro-脱落仪数据 acc-加速度数据
 * @return void
 */
void acc_gyro_sample_data(int16_t *gyro,int16_t *acc )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
	uint8_t r_data[6];

	BSP_I2C3_ReadReg(LSM6DS3_ADDR, ACCEL_XOUT_L, r_data, 6);
 800c5ce:	f107 0208 	add.w	r2, r7, #8
 800c5d2:	2306      	movs	r3, #6
 800c5d4:	2128      	movs	r1, #40	; 0x28
 800c5d6:	20d4      	movs	r0, #212	; 0xd4
 800c5d8:	f001 fea9 	bl	800e32e <BSP_I2C3_ReadReg>

	acc[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c5dc:	7a3b      	ldrb	r3, [r7, #8]
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	7a7b      	ldrb	r3, [r7, #9]
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	021b      	lsls	r3, r3, #8
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	4413      	add	r3, r2
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	b21a      	sxth	r2, r3
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	801a      	strh	r2, [r3, #0]
	acc[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c5f2:	7abb      	ldrb	r3, [r7, #10]
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	7afb      	ldrb	r3, [r7, #11]
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	021b      	lsls	r3, r3, #8
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	4413      	add	r3, r2
 800c600:	b29a      	uxth	r2, r3
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	3302      	adds	r3, #2
 800c606:	b212      	sxth	r2, r2
 800c608:	801a      	strh	r2, [r3, #0]
	acc[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c60a:	7b3b      	ldrb	r3, [r7, #12]
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	7b7b      	ldrb	r3, [r7, #13]
 800c610:	b29b      	uxth	r3, r3
 800c612:	021b      	lsls	r3, r3, #8
 800c614:	b29b      	uxth	r3, r3
 800c616:	4413      	add	r3, r2
 800c618:	b29a      	uxth	r2, r3
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	3304      	adds	r3, #4
 800c61e:	b212      	sxth	r2, r2
 800c620:	801a      	strh	r2, [r3, #0]

	BSP_I2C3_ReadReg(LSM6DS3_ADDR, GYRO_XOUT_L, r_data, 6);
 800c622:	f107 0208 	add.w	r2, r7, #8
 800c626:	2306      	movs	r3, #6
 800c628:	2122      	movs	r1, #34	; 0x22
 800c62a:	20d4      	movs	r0, #212	; 0xd4
 800c62c:	f001 fe7f 	bl	800e32e <BSP_I2C3_ReadReg>
	gyro[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c630:	7a3b      	ldrb	r3, [r7, #8]
 800c632:	b29a      	uxth	r2, r3
 800c634:	7a7b      	ldrb	r3, [r7, #9]
 800c636:	b29b      	uxth	r3, r3
 800c638:	021b      	lsls	r3, r3, #8
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	4413      	add	r3, r2
 800c63e:	b29b      	uxth	r3, r3
 800c640:	b21a      	sxth	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	801a      	strh	r2, [r3, #0]
	gyro[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c646:	7abb      	ldrb	r3, [r7, #10]
 800c648:	b29a      	uxth	r2, r3
 800c64a:	7afb      	ldrb	r3, [r7, #11]
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	021b      	lsls	r3, r3, #8
 800c650:	b29b      	uxth	r3, r3
 800c652:	4413      	add	r3, r2
 800c654:	b29a      	uxth	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	3302      	adds	r3, #2
 800c65a:	b212      	sxth	r2, r2
 800c65c:	801a      	strh	r2, [r3, #0]
	gyro[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c65e:	7b3b      	ldrb	r3, [r7, #12]
 800c660:	b29a      	uxth	r2, r3
 800c662:	7b7b      	ldrb	r3, [r7, #13]
 800c664:	b29b      	uxth	r3, r3
 800c666:	021b      	lsls	r3, r3, #8
 800c668:	b29b      	uxth	r3, r3
 800c66a:	4413      	add	r3, r2
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	3304      	adds	r3, #4
 800c672:	b212      	sxth	r2, r2
 800c674:	801a      	strh	r2, [r3, #0]



}
 800c676:	bf00      	nop
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <set_acc_gyro_offset>:


void set_acc_gyro_offset(void)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b08e      	sub	sp, #56	; 0x38
 800c684:	af00      	add	r7, sp, #0
    uint8_t i;
    int16_t ax_offset, ay_offset, az_offset, gx_offset, gy_offset, gz_offset;
    int32_t ax_offset_sum, ay_offset_sum, az_offset_sum, gx_offset_sum, gy_offset_sum, gz_offset_sum;
    int16_t gyro_off[3],acc_off[3];

    ax_offset_sum = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	633b      	str	r3, [r7, #48]	; 0x30
    ay_offset_sum = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	62fb      	str	r3, [r7, #44]	; 0x2c
    az_offset_sum = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	62bb      	str	r3, [r7, #40]	; 0x28
    gx_offset_sum = 0;
 800c692:	2300      	movs	r3, #0
 800c694:	627b      	str	r3, [r7, #36]	; 0x24
    gy_offset_sum = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	623b      	str	r3, [r7, #32]
    gz_offset_sum = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	61fb      	str	r3, [r7, #28]

    for (i = 0; i < 20; i++)
 800c69e:	2300      	movs	r3, #0
 800c6a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c6a4:	e035      	b.n	800c712 <set_acc_gyro_offset+0x92>
   {
	  acc_gyro_sample_data(gyro_off,acc_off);
 800c6a6:	463a      	mov	r2, r7
 800c6a8:	f107 0308 	add.w	r3, r7, #8
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7ff ff88 	bl	800c5c4 <acc_gyro_sample_data>

	   ax_offset = acc_off[0];
 800c6b4:	883b      	ldrh	r3, [r7, #0]
 800c6b6:	837b      	strh	r3, [r7, #26]
	   ay_offset = acc_off[1];
 800c6b8:	887b      	ldrh	r3, [r7, #2]
 800c6ba:	833b      	strh	r3, [r7, #24]
	   az_offset = acc_off[2];
 800c6bc:	88bb      	ldrh	r3, [r7, #4]
 800c6be:	82fb      	strh	r3, [r7, #22]
	   ax_offset_sum = ax_offset_sum + ax_offset;
 800c6c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c6c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6c6:	4413      	add	r3, r2
 800c6c8:	633b      	str	r3, [r7, #48]	; 0x30
	   ay_offset_sum = ay_offset_sum + ay_offset;
 800c6ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c6ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6d0:	4413      	add	r3, r2
 800c6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	   az_offset_sum = az_offset_sum + az_offset;
 800c6d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6da:	4413      	add	r3, r2
 800c6dc:	62bb      	str	r3, [r7, #40]	; 0x28

	   gx_offset = gyro_off[0];
 800c6de:	893b      	ldrh	r3, [r7, #8]
 800c6e0:	82bb      	strh	r3, [r7, #20]
	   gy_offset = gyro_off[1];
 800c6e2:	897b      	ldrh	r3, [r7, #10]
 800c6e4:	827b      	strh	r3, [r7, #18]
	   gz_offset = gyro_off[2];
 800c6e6:	89bb      	ldrh	r3, [r7, #12]
 800c6e8:	823b      	strh	r3, [r7, #16]
	   gx_offset_sum = gx_offset_sum + gx_offset;
 800c6ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c6ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f0:	4413      	add	r3, r2
 800c6f2:	627b      	str	r3, [r7, #36]	; 0x24
	   gy_offset_sum = gy_offset_sum + gy_offset;
 800c6f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6f8:	6a3a      	ldr	r2, [r7, #32]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	623b      	str	r3, [r7, #32]
	   gz_offset_sum = gz_offset_sum + gz_offset;
 800c6fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c702:	69fa      	ldr	r2, [r7, #28]
 800c704:	4413      	add	r3, r2
 800c706:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < 20; i++)
 800c708:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c70c:	3301      	adds	r3, #1
 800c70e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c716:	2b13      	cmp	r3, #19
 800c718:	d9c5      	bls.n	800c6a6 <set_acc_gyro_offset+0x26>
   }
    imu_9.acc_zero[0] = ax_offset_sum/20;
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	4a29      	ldr	r2, [pc, #164]	; (800c7c4 <set_acc_gyro_offset+0x144>)
 800c71e:	fb82 1203 	smull	r1, r2, r2, r3
 800c722:	10d2      	asrs	r2, r2, #3
 800c724:	17db      	asrs	r3, r3, #31
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	b21a      	sxth	r2, r3
 800c72a:	4b27      	ldr	r3, [pc, #156]	; (800c7c8 <set_acc_gyro_offset+0x148>)
 800c72c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    imu_9.acc_zero[1] = ay_offset_sum/20;
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	4a24      	ldr	r2, [pc, #144]	; (800c7c4 <set_acc_gyro_offset+0x144>)
 800c734:	fb82 1203 	smull	r1, r2, r2, r3
 800c738:	10d2      	asrs	r2, r2, #3
 800c73a:	17db      	asrs	r3, r3, #31
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	b21a      	sxth	r2, r3
 800c740:	4b21      	ldr	r3, [pc, #132]	; (800c7c8 <set_acc_gyro_offset+0x148>)
 800c742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    imu_9.acc_zero[2] = az_offset_sum/20 - 16384;
 800c746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c748:	4a1e      	ldr	r2, [pc, #120]	; (800c7c4 <set_acc_gyro_offset+0x144>)
 800c74a:	fb82 1203 	smull	r1, r2, r2, r3
 800c74e:	10d2      	asrs	r2, r2, #3
 800c750:	17db      	asrs	r3, r3, #31
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	b29b      	uxth	r3, r3
 800c756:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	b21a      	sxth	r2, r3
 800c75e:	4b1a      	ldr	r3, [pc, #104]	; (800c7c8 <set_acc_gyro_offset+0x148>)
 800c760:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    imu_9.gyro_zero[0] = gx_offset_sum/20;
 800c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c766:	4a17      	ldr	r2, [pc, #92]	; (800c7c4 <set_acc_gyro_offset+0x144>)
 800c768:	fb82 1203 	smull	r1, r2, r2, r3
 800c76c:	10d2      	asrs	r2, r2, #3
 800c76e:	17db      	asrs	r3, r3, #31
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	b21a      	sxth	r2, r3
 800c774:	4b14      	ldr	r3, [pc, #80]	; (800c7c8 <set_acc_gyro_offset+0x148>)
 800c776:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    imu_9.gyro_zero[1] = gy_offset_sum/20;
 800c77a:	6a3b      	ldr	r3, [r7, #32]
 800c77c:	4a11      	ldr	r2, [pc, #68]	; (800c7c4 <set_acc_gyro_offset+0x144>)
 800c77e:	fb82 1203 	smull	r1, r2, r2, r3
 800c782:	10d2      	asrs	r2, r2, #3
 800c784:	17db      	asrs	r3, r3, #31
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	b21a      	sxth	r2, r3
 800c78a:	4b0f      	ldr	r3, [pc, #60]	; (800c7c8 <set_acc_gyro_offset+0x148>)
 800c78c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    imu_9.gyro_zero[2] = gz_offset_sum/20;
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	4a0c      	ldr	r2, [pc, #48]	; (800c7c4 <set_acc_gyro_offset+0x144>)
 800c794:	fb82 1203 	smull	r1, r2, r2, r3
 800c798:	10d2      	asrs	r2, r2, #3
 800c79a:	17db      	asrs	r3, r3, #31
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	b21a      	sxth	r2, r3
 800c7a0:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <set_acc_gyro_offset+0x148>)
 800c7a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    //存入
    STMFLASH_Write(ACC_ZERO_ADDR,(uint8_t*)&imu_9.acc_zero,6);
 800c7a6:	2206      	movs	r2, #6
 800c7a8:	4908      	ldr	r1, [pc, #32]	; (800c7cc <set_acc_gyro_offset+0x14c>)
 800c7aa:	4809      	ldr	r0, [pc, #36]	; (800c7d0 <set_acc_gyro_offset+0x150>)
 800c7ac:	f001 fe28 	bl	800e400 <STMFLASH_Write>
    STMFLASH_Write(GYRO_ZERO_ADDR,(uint8_t*)&imu_9.gyro_zero,6);
 800c7b0:	2206      	movs	r2, #6
 800c7b2:	4908      	ldr	r1, [pc, #32]	; (800c7d4 <set_acc_gyro_offset+0x154>)
 800c7b4:	4808      	ldr	r0, [pc, #32]	; (800c7d8 <set_acc_gyro_offset+0x158>)
 800c7b6:	f001 fe23 	bl	800e400 <STMFLASH_Write>





}
 800c7ba:	bf00      	nop
 800c7bc:	3738      	adds	r7, #56	; 0x38
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	66666667 	.word	0x66666667
 800c7c8:	20002154 	.word	0x20002154
 800c7cc:	2000219a 	.word	0x2000219a
 800c7d0:	0801f800 	.word	0x0801f800
 800c7d4:	20002194 	.word	0x20002194
 800c7d8:	0801f806 	.word	0x0801f806

0800c7dc <mag_sample_data>:
}



void mag_sample_data(int16_t *mag )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
	uint8_t r_data[6];
//	mag_wait_data_update();
	BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD, LIS2MDL_OUTX_L_REG, r_data, 6);  //读地磁原始数据
 800c7e4:	f107 0208 	add.w	r2, r7, #8
 800c7e8:	2306      	movs	r3, #6
 800c7ea:	2168      	movs	r1, #104	; 0x68
 800c7ec:	203c      	movs	r0, #60	; 0x3c
 800c7ee:	f001 fd1c 	bl	800e22a <BSP_I2C1_ReadReg>
    mag[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c7f2:	7a3b      	ldrb	r3, [r7, #8]
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	7a7b      	ldrb	r3, [r7, #9]
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	021b      	lsls	r3, r3, #8
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	4413      	add	r3, r2
 800c800:	b29b      	uxth	r3, r3
 800c802:	b21a      	sxth	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	801a      	strh	r2, [r3, #0]
	mag[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c808:	7abb      	ldrb	r3, [r7, #10]
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	7afb      	ldrb	r3, [r7, #11]
 800c80e:	b29b      	uxth	r3, r3
 800c810:	021b      	lsls	r3, r3, #8
 800c812:	b29b      	uxth	r3, r3
 800c814:	4413      	add	r3, r2
 800c816:	b29a      	uxth	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	3302      	adds	r3, #2
 800c81c:	b212      	sxth	r2, r2
 800c81e:	801a      	strh	r2, [r3, #0]
	mag[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c820:	7b3b      	ldrb	r3, [r7, #12]
 800c822:	b29a      	uxth	r2, r3
 800c824:	7b7b      	ldrb	r3, [r7, #13]
 800c826:	b29b      	uxth	r3, r3
 800c828:	021b      	lsls	r3, r3, #8
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	4413      	add	r3, r2
 800c82e:	b29a      	uxth	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	3304      	adds	r3, #4
 800c834:	b212      	sxth	r2, r2
 800c836:	801a      	strh	r2, [r3, #0]



}
 800c838:	bf00      	nop
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <mag_init>:

uint8_t mag_init(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	73bb      	strb	r3, [r7, #14]
	uint8_t cfg_index = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	73fb      	strb	r3, [r7, #15]
	uint8_t read_reg_data[3];
	int16_t mag_hard_iron[3];

	BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD, LIS2MDL_WHO_AM_I, &id, 1);//
 800c84e:	f107 020e 	add.w	r2, r7, #14
 800c852:	2301      	movs	r3, #1
 800c854:	214f      	movs	r1, #79	; 0x4f
 800c856:	203c      	movs	r0, #60	; 0x3c
 800c858:	f001 fce7 	bl	800e22a <BSP_I2C1_ReadReg>

    for (cfg_index=0; cfg_index<sizeof(mag_init_reg)/sizeof(reg_cfg_t); cfg_index++) //写配置寄存器
 800c85c:	2300      	movs	r3, #0
 800c85e:	73fb      	strb	r3, [r7, #15]
 800c860:	e022      	b.n	800c8a8 <mag_init+0x68>
    {
    	if(mag_init_reg[cfg_index].reg==0&&mag_init_reg[cfg_index].dat==0)
 800c862:	7bfb      	ldrb	r3, [r7, #15]
 800c864:	4a19      	ldr	r2, [pc, #100]	; (800c8cc <mag_init+0x8c>)
 800c866:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d106      	bne.n	800c87c <mag_init+0x3c>
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
 800c870:	4a16      	ldr	r2, [pc, #88]	; (800c8cc <mag_init+0x8c>)
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	4413      	add	r3, r2
 800c876:	785b      	ldrb	r3, [r3, #1]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d011      	beq.n	800c8a0 <mag_init+0x60>
    	{
    		continue;
    	}
    	BSP_I2C1_WriteReg(LIS2MDL_I2C_ADD,mag_init_reg[cfg_index].reg, &mag_init_reg[cfg_index].dat,1);
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	4a13      	ldr	r2, [pc, #76]	; (800c8cc <mag_init+0x8c>)
 800c880:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c884:	b299      	uxth	r1, r3
 800c886:	7bfb      	ldrb	r3, [r7, #15]
 800c888:	005b      	lsls	r3, r3, #1
 800c88a:	4a10      	ldr	r2, [pc, #64]	; (800c8cc <mag_init+0x8c>)
 800c88c:	4413      	add	r3, r2
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	2301      	movs	r3, #1
 800c892:	203c      	movs	r0, #60	; 0x3c
 800c894:	f001 fcac 	bl	800e1f0 <BSP_I2C1_WriteReg>
        HAL_Delay(1);
 800c898:	2001      	movs	r0, #1
 800c89a:	f7f5 f91b 	bl	8001ad4 <HAL_Delay>
 800c89e:	e000      	b.n	800c8a2 <mag_init+0x62>
    		continue;
 800c8a0:	bf00      	nop
    for (cfg_index=0; cfg_index<sizeof(mag_init_reg)/sizeof(reg_cfg_t); cfg_index++) //写配置寄存器
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	73fb      	strb	r3, [r7, #15]
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
 800c8aa:	2b09      	cmp	r3, #9
 800c8ac:	d9d9      	bls.n	800c862 <mag_init+0x22>
    }
      BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD,LIS2MDL_CFG_REG_A,read_reg_data,3);/* 回读寄存器校验 */
 800c8ae:	f107 0208 	add.w	r2, r7, #8
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	2160      	movs	r1, #96	; 0x60
 800c8b6:	203c      	movs	r0, #60	; 0x3c
 800c8b8:	f001 fcb7 	bl	800e22a <BSP_I2C1_ReadReg>
      HAL_Delay(20);
 800c8bc:	2014      	movs	r0, #20
 800c8be:	f7f5 f909 	bl	8001ad4 <HAL_Delay>

//      mag_sample_data(mag_hard_iron);

//      mag_Write_Offset(mag_hard_iron[0],mag_hard_iron[1],mag_hard_iron[2]);

	return id;
 800c8c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	200001cc 	.word	0x200001cc

0800c8d0 <mag_set_offset>:
/*校准过程
 * 一段时间内连续采集地磁xyz三个轴向上的最大值和最小值，做运算
 *
 */
void mag_set_offset(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0

	uint32_t cnt = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	617b      	str	r3, [r7, #20]

	static float Xsf;
	static float Ysf;
//	static float Zsf;

	while(cnt<MAG_OFFSET_TIMES)
 800c8da:	e06f      	b.n	800c9bc <mag_set_offset+0xec>
	{
		cnt++;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	617b      	str	r3, [r7, #20]
		BSP_I2C1_ReadReg(LIS2MDL_I2C_ADD, LIS2MDL_OUTX_L_REG, r_data, 6);  //读地磁原始数据
 800c8e2:	f107 0208 	add.w	r2, r7, #8
 800c8e6:	2306      	movs	r3, #6
 800c8e8:	2168      	movs	r1, #104	; 0x68
 800c8ea:	203c      	movs	r0, #60	; 0x3c
 800c8ec:	f001 fc9d 	bl	800e22a <BSP_I2C1_ReadReg>
		mag_off[0] = (int16_t)(r_data[0] + (r_data[1] << 8));
 800c8f0:	7a3b      	ldrb	r3, [r7, #8]
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	7a7b      	ldrb	r3, [r7, #9]
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	021b      	lsls	r3, r3, #8
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	4413      	add	r3, r2
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	b21b      	sxth	r3, r3
 800c902:	803b      	strh	r3, [r7, #0]
		mag_off[1] = (int16_t)(r_data[2] + (r_data[3] << 8));
 800c904:	7abb      	ldrb	r3, [r7, #10]
 800c906:	b29a      	uxth	r2, r3
 800c908:	7afb      	ldrb	r3, [r7, #11]
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	021b      	lsls	r3, r3, #8
 800c90e:	b29b      	uxth	r3, r3
 800c910:	4413      	add	r3, r2
 800c912:	b29b      	uxth	r3, r3
 800c914:	b21b      	sxth	r3, r3
 800c916:	807b      	strh	r3, [r7, #2]
		mag_off[2] = (int16_t)(r_data[4] + (r_data[5] << 8));
 800c918:	7b3b      	ldrb	r3, [r7, #12]
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	7b7b      	ldrb	r3, [r7, #13]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	021b      	lsls	r3, r3, #8
 800c922:	b29b      	uxth	r3, r3
 800c924:	4413      	add	r3, r2
 800c926:	b29b      	uxth	r3, r3
 800c928:	b21b      	sxth	r3, r3
 800c92a:	80bb      	strh	r3, [r7, #4]

        if(mag_off[0]<mag_x_min)
 800c92c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c930:	4b75      	ldr	r3, [pc, #468]	; (800cb08 <mag_set_offset+0x238>)
 800c932:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c936:	429a      	cmp	r2, r3
 800c938:	da04      	bge.n	800c944 <mag_set_offset+0x74>
        	mag_x_min = mag_off[0];
 800c93a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c93e:	4b72      	ldr	r3, [pc, #456]	; (800cb08 <mag_set_offset+0x238>)
 800c940:	801a      	strh	r2, [r3, #0]
 800c942:	e00a      	b.n	800c95a <mag_set_offset+0x8a>
        else if(mag_off[0]>mag_x_max)
 800c944:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c948:	4b70      	ldr	r3, [pc, #448]	; (800cb0c <mag_set_offset+0x23c>)
 800c94a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c94e:	429a      	cmp	r2, r3
 800c950:	dd03      	ble.n	800c95a <mag_set_offset+0x8a>
        	mag_x_max = mag_off[0];
 800c952:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c956:	4b6d      	ldr	r3, [pc, #436]	; (800cb0c <mag_set_offset+0x23c>)
 800c958:	801a      	strh	r2, [r3, #0]


        if(mag_off[1]<mag_y_min)
 800c95a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c95e:	4b6c      	ldr	r3, [pc, #432]	; (800cb10 <mag_set_offset+0x240>)
 800c960:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c964:	429a      	cmp	r2, r3
 800c966:	da04      	bge.n	800c972 <mag_set_offset+0xa2>
        	mag_y_min = mag_off[1];
 800c968:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c96c:	4b68      	ldr	r3, [pc, #416]	; (800cb10 <mag_set_offset+0x240>)
 800c96e:	801a      	strh	r2, [r3, #0]
 800c970:	e00a      	b.n	800c988 <mag_set_offset+0xb8>
        else if(mag_off[1]>mag_y_max)
 800c972:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c976:	4b67      	ldr	r3, [pc, #412]	; (800cb14 <mag_set_offset+0x244>)
 800c978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	dd03      	ble.n	800c988 <mag_set_offset+0xb8>
        	mag_y_max = mag_off[1];
 800c980:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c984:	4b63      	ldr	r3, [pc, #396]	; (800cb14 <mag_set_offset+0x244>)
 800c986:	801a      	strh	r2, [r3, #0]

            if(mag_off[2]<mag_z_min)
 800c988:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c98c:	4b62      	ldr	r3, [pc, #392]	; (800cb18 <mag_set_offset+0x248>)
 800c98e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c992:	429a      	cmp	r2, r3
 800c994:	da04      	bge.n	800c9a0 <mag_set_offset+0xd0>
            	mag_z_min = mag_off[2];
 800c996:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c99a:	4b5f      	ldr	r3, [pc, #380]	; (800cb18 <mag_set_offset+0x248>)
 800c99c:	801a      	strh	r2, [r3, #0]
 800c99e:	e00a      	b.n	800c9b6 <mag_set_offset+0xe6>
        else if(mag_off[2]>mag_z_max)
 800c9a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c9a4:	4b5d      	ldr	r3, [pc, #372]	; (800cb1c <mag_set_offset+0x24c>)
 800c9a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	dd03      	ble.n	800c9b6 <mag_set_offset+0xe6>
        	mag_z_max = mag_off[2];
 800c9ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c9b2:	4b5a      	ldr	r3, [pc, #360]	; (800cb1c <mag_set_offset+0x24c>)
 800c9b4:	801a      	strh	r2, [r3, #0]

        HAL_Delay(1);
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	f7f5 f88c 	bl	8001ad4 <HAL_Delay>
	while(cnt<MAG_OFFSET_TIMES)
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	f241 3287 	movw	r2, #4999	; 0x1387
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d98a      	bls.n	800c8dc <mag_set_offset+0xc>
	}
	cnt = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]

    Xsf = (mag_y_max - mag_y_min) / (mag_x_max - mag_x_min);
 800c9ca:	4b52      	ldr	r3, [pc, #328]	; (800cb14 <mag_set_offset+0x244>)
 800c9cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	4b4f      	ldr	r3, [pc, #316]	; (800cb10 <mag_set_offset+0x240>)
 800c9d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9d8:	1ad2      	subs	r2, r2, r3
 800c9da:	4b4c      	ldr	r3, [pc, #304]	; (800cb0c <mag_set_offset+0x23c>)
 800c9dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	4b49      	ldr	r3, [pc, #292]	; (800cb08 <mag_set_offset+0x238>)
 800c9e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9e8:	1acb      	subs	r3, r1, r3
 800c9ea:	fb92 f3f3 	sdiv	r3, r2, r3
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9f6:	4b4a      	ldr	r3, [pc, #296]	; (800cb20 <mag_set_offset+0x250>)
 800c9f8:	edc3 7a00 	vstr	s15, [r3]
    Ysf = (mag_x_max - mag_x_min) / (mag_y_max - mag_y_min);
 800c9fc:	4b43      	ldr	r3, [pc, #268]	; (800cb0c <mag_set_offset+0x23c>)
 800c9fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca02:	461a      	mov	r2, r3
 800ca04:	4b40      	ldr	r3, [pc, #256]	; (800cb08 <mag_set_offset+0x238>)
 800ca06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca0a:	1ad2      	subs	r2, r2, r3
 800ca0c:	4b41      	ldr	r3, [pc, #260]	; (800cb14 <mag_set_offset+0x244>)
 800ca0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca12:	4619      	mov	r1, r3
 800ca14:	4b3e      	ldr	r3, [pc, #248]	; (800cb10 <mag_set_offset+0x240>)
 800ca16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca1a:	1acb      	subs	r3, r1, r3
 800ca1c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ca20:	ee07 3a90 	vmov	s15, r3
 800ca24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca28:	4b3e      	ldr	r3, [pc, #248]	; (800cb24 <mag_set_offset+0x254>)
 800ca2a:	edc3 7a00 	vstr	s15, [r3]

    if (Xsf < 1)
 800ca2e:	4b3c      	ldr	r3, [pc, #240]	; (800cb20 <mag_set_offset+0x250>)
 800ca30:	edd3 7a00 	vldr	s15, [r3]
 800ca34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca40:	d503      	bpl.n	800ca4a <mag_set_offset+0x17a>
    {
    	Xsf = 1;
 800ca42:	4b37      	ldr	r3, [pc, #220]	; (800cb20 <mag_set_offset+0x250>)
 800ca44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ca48:	601a      	str	r2, [r3, #0]
    }

    if (Ysf < 1)
 800ca4a:	4b36      	ldr	r3, [pc, #216]	; (800cb24 <mag_set_offset+0x254>)
 800ca4c:	edd3 7a00 	vldr	s15, [r3]
 800ca50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5c:	d503      	bpl.n	800ca66 <mag_set_offset+0x196>
    {
    	Ysf = 1;
 800ca5e:	4b31      	ldr	r3, [pc, #196]	; (800cb24 <mag_set_offset+0x254>)
 800ca60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ca64:	601a      	str	r2, [r3, #0]
    }


    Xoffset = ( (mag_x_max - mag_x_min)/2 - mag_x_max) *Xsf;
 800ca66:	4b29      	ldr	r3, [pc, #164]	; (800cb0c <mag_set_offset+0x23c>)
 800ca68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	4b26      	ldr	r3, [pc, #152]	; (800cb08 <mag_set_offset+0x238>)
 800ca70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	0fda      	lsrs	r2, r3, #31
 800ca78:	4413      	add	r3, r2
 800ca7a:	105b      	asrs	r3, r3, #1
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	4b23      	ldr	r3, [pc, #140]	; (800cb0c <mag_set_offset+0x23c>)
 800ca80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca8e:	4b24      	ldr	r3, [pc, #144]	; (800cb20 <mag_set_offset+0x250>)
 800ca90:	edd3 7a00 	vldr	s15, [r3]
 800ca94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca9c:	ee17 3a90 	vmov	r3, s15
 800caa0:	827b      	strh	r3, [r7, #18]
    Yoffset = ( (mag_y_max - mag_y_min)/2 - mag_y_max) *Ysf;
 800caa2:	4b1c      	ldr	r3, [pc, #112]	; (800cb14 <mag_set_offset+0x244>)
 800caa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800caa8:	461a      	mov	r2, r3
 800caaa:	4b19      	ldr	r3, [pc, #100]	; (800cb10 <mag_set_offset+0x240>)
 800caac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	0fda      	lsrs	r2, r3, #31
 800cab4:	4413      	add	r3, r2
 800cab6:	105b      	asrs	r3, r3, #1
 800cab8:	461a      	mov	r2, r3
 800caba:	4b16      	ldr	r3, [pc, #88]	; (800cb14 <mag_set_offset+0x244>)
 800cabc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800caca:	4b16      	ldr	r3, [pc, #88]	; (800cb24 <mag_set_offset+0x254>)
 800cacc:	edd3 7a00 	vldr	s15, [r3]
 800cad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cad8:	ee17 3a90 	vmov	r3, s15
 800cadc:	823b      	strh	r3, [r7, #16]
//    Zoffset = ( (mag_z_max-mag_z_min)/2 - mag_z_max) *Xsf;

    imu_9.mag_zero[0] = Xoffset;
 800cade:	4a12      	ldr	r2, [pc, #72]	; (800cb28 <mag_set_offset+0x258>)
 800cae0:	8a7b      	ldrh	r3, [r7, #18]
 800cae2:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
    imu_9.mag_zero[1] = Yoffset;
 800cae6:	4a10      	ldr	r2, [pc, #64]	; (800cb28 <mag_set_offset+0x258>)
 800cae8:	8a3b      	ldrh	r3, [r7, #16]
 800caea:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
//    imu_9.mag_zero[2] = Zoffset;
    imu_9.mag_zero[2] = 0.0f;
 800caee:	4b0e      	ldr	r3, [pc, #56]	; (800cb28 <mag_set_offset+0x258>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	    //存入
	    STMFLASH_Write(MAG_ZERO_ADDR,(uint8_t*)&imu_9.mag_zero,6);
 800caf6:	2206      	movs	r2, #6
 800caf8:	490c      	ldr	r1, [pc, #48]	; (800cb2c <mag_set_offset+0x25c>)
 800cafa:	480d      	ldr	r0, [pc, #52]	; (800cb30 <mag_set_offset+0x260>)
 800cafc:	f001 fc80 	bl	800e400 <STMFLASH_Write>
}
 800cb00:	bf00      	nop
 800cb02:	3718      	adds	r7, #24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	2000177a 	.word	0x2000177a
 800cb0c:	20001778 	.word	0x20001778
 800cb10:	2000177e 	.word	0x2000177e
 800cb14:	2000177c 	.word	0x2000177c
 800cb18:	20001782 	.word	0x20001782
 800cb1c:	20001780 	.word	0x20001780
 800cb20:	20001784 	.word	0x20001784
 800cb24:	20001788 	.word	0x20001788
 800cb28:	20002154 	.word	0x20002154
 800cb2c:	200021a0 	.word	0x200021a0
 800cb30:	0801f80c 	.word	0x0801f80c

0800cb34 <init_attitude>:
#include "imu_9.h"

ATT_Module attitude;

void init_attitude(ATT_Module *attitude)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
//标志位初始化
	attitude->flag.run = 1;						//开启计算
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	701a      	strb	r2, [r3, #0]
	attitude->flag.use_mag = 1;				//使用地磁
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	705a      	strb	r2, [r3, #1]
//接口初始化
	attitude->interface.data.a_x = 0;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f04f 0200 	mov.w	r2, #0
 800cb4e:	605a      	str	r2, [r3, #4]
	attitude->interface.data.a_y = 0;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f04f 0200 	mov.w	r2, #0
 800cb56:	609a      	str	r2, [r3, #8]
	attitude->interface.data.a_z = 0;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f04f 0200 	mov.w	r2, #0
 800cb5e:	60da      	str	r2, [r3, #12]
	attitude->interface.data.g_x = 0;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f04f 0200 	mov.w	r2, #0
 800cb66:	611a      	str	r2, [r3, #16]
	attitude->interface.data.g_y = 0;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f04f 0200 	mov.w	r2, #0
 800cb6e:	615a      	str	r2, [r3, #20]
	attitude->interface.data.g_z = 0;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f04f 0200 	mov.w	r2, #0
 800cb76:	619a      	str	r2, [r3, #24]
	attitude->interface.data.m_x = 0;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f04f 0200 	mov.w	r2, #0
 800cb7e:	61da      	str	r2, [r3, #28]
	attitude->interface.data.m_y = 0;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f04f 0200 	mov.w	r2, #0
 800cb86:	621a      	str	r2, [r3, #32]
	attitude->interface.data.m_z = 0;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f04f 0200 	mov.w	r2, #0
 800cb8e:	625a      	str	r2, [r3, #36]	; 0x24
//参数初始化	
	attitude->parameter.error_ki = 1.25f;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a5b      	ldr	r2, [pc, #364]	; (800cd00 <init_attitude+0x1cc>)
 800cb94:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	attitude->parameter.error_kp = 5.5f;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a5a      	ldr	r2, [pc, #360]	; (800cd04 <init_attitude+0x1d0>)
 800cb9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	attitude->parameter.correct_kp = 0.4f;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a59      	ldr	r2, [pc, #356]	; (800cd08 <init_attitude+0x1d4>)
 800cba4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
//中间变量清空	
	attitude->process.error.x = 0;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f04f 0200 	mov.w	r2, #0
 800cbae:	641a      	str	r2, [r3, #64]	; 0x40
	attitude->process.error.y = 0;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f04f 0200 	mov.w	r2, #0
 800cbb6:	645a      	str	r2, [r3, #68]	; 0x44
	attitude->process.error.z = 0;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f04f 0200 	mov.w	r2, #0
 800cbbe:	649a      	str	r2, [r3, #72]	; 0x48
	attitude->process.error_integral.x = 0;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f04f 0200 	mov.w	r2, #0
 800cbc6:	64da      	str	r2, [r3, #76]	; 0x4c
	attitude->process.error_integral.y = 0;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f04f 0200 	mov.w	r2, #0
 800cbce:	651a      	str	r2, [r3, #80]	; 0x50
	attitude->process.error_integral.z = 0;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f04f 0200 	mov.w	r2, #0
 800cbd6:	655a      	str	r2, [r3, #84]	; 0x54
	
	attitude->process.quaternion[0] = 1;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cbde:	631a      	str	r2, [r3, #48]	; 0x30
	attitude->process.quaternion[1] = 0;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f04f 0200 	mov.w	r2, #0
 800cbe6:	635a      	str	r2, [r3, #52]	; 0x34
	attitude->process.quaternion[2] = 0;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f04f 0200 	mov.w	r2, #0
 800cbee:	639a      	str	r2, [r3, #56]	; 0x38
	attitude->process.quaternion[3] = 0;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	63da      	str	r2, [r3, #60]	; 0x3c
//数据初始化
	attitude->data.rotate_matrix[0][0] = 0;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f04f 0200 	mov.w	r2, #0
 800cbfe:	665a      	str	r2, [r3, #100]	; 0x64
	attitude->data.rotate_matrix[0][1] = 0;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f04f 0200 	mov.w	r2, #0
 800cc06:	669a      	str	r2, [r3, #104]	; 0x68
	attitude->data.rotate_matrix[0][2] = 0;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f04f 0200 	mov.w	r2, #0
 800cc0e:	66da      	str	r2, [r3, #108]	; 0x6c
	attitude->data.rotate_matrix[1][0] = 0;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f04f 0200 	mov.w	r2, #0
 800cc16:	671a      	str	r2, [r3, #112]	; 0x70
	attitude->data.rotate_matrix[1][1] = 0;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f04f 0200 	mov.w	r2, #0
 800cc1e:	675a      	str	r2, [r3, #116]	; 0x74
	attitude->data.rotate_matrix[1][2] = 0;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f04f 0200 	mov.w	r2, #0
 800cc26:	679a      	str	r2, [r3, #120]	; 0x78
	attitude->data.rotate_matrix[2][0] = 0;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f04f 0200 	mov.w	r2, #0
 800cc2e:	67da      	str	r2, [r3, #124]	; 0x7c
	attitude->data.rotate_matrix[2][1] = 0;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f04f 0200 	mov.w	r2, #0
 800cc36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	attitude->data.rotate_matrix[2][2] = 0;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f04f 0200 	mov.w	r2, #0
 800cc40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	
	attitude->data.mag_world.x = 0;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f04f 0200 	mov.w	r2, #0
 800cc4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	attitude->data.mag_world.y = 0;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f04f 0200 	mov.w	r2, #0
 800cc54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	attitude->data.mag_world.z = 0;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f04f 0200 	mov.w	r2, #0
 800cc5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	
	attitude->data.acc_world.x = 0;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f04f 0200 	mov.w	r2, #0
 800cc68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	attitude->data.acc_world.y = 0;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f04f 0200 	mov.w	r2, #0
 800cc72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	attitude->data.acc_world.z = 0;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f04f 0200 	mov.w	r2, #0
 800cc7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	attitude->data.mag_correct.x = 0;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f04f 0200 	mov.w	r2, #0
 800cc86:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	attitude->data.mag_correct.y = 0;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f04f 0200 	mov.w	r2, #0
 800cc90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	attitude->data.mag_correct.z = 0;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f04f 0200 	mov.w	r2, #0
 800cc9a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	
	attitude->data.acc_correct.x = 0;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f04f 0200 	mov.w	r2, #0
 800cca4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	attitude->data.acc_correct.y = 0;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f04f 0200 	mov.w	r2, #0
 800ccae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	attitude->data.acc_correct.z = 0;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f04f 0200 	mov.w	r2, #0
 800ccb8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	
	attitude->data.gyro_correct.x = 0;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f04f 0200 	mov.w	r2, #0
 800ccc2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	attitude->data.gyro_correct.y = 0;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f04f 0200 	mov.w	r2, #0
 800cccc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	attitude->data.gyro_correct.z = 0;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f04f 0200 	mov.w	r2, #0
 800ccd6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	
	attitude->data.pitch = 0;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f04f 0200 	mov.w	r2, #0
 800cce0:	661a      	str	r2, [r3, #96]	; 0x60
	attitude->data.rol = 0;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f04f 0200 	mov.w	r2, #0
 800cce8:	65da      	str	r2, [r3, #92]	; 0x5c
	attitude->data.yaw = 0;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f04f 0200 	mov.w	r2, #0
 800ccf0:	659a      	str	r2, [r3, #88]	; 0x58
}
 800ccf2:	bf00      	nop
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	3fa00000 	.word	0x3fa00000
 800cd04:	40b00000 	.word	0x40b00000
 800cd08:	3ecccccd 	.word	0x3ecccccd

0800cd0c <simple_3d_trans>:


void simple_3d_trans(XYZ_Data_f *ref, XYZ_Data_f *in, XYZ_Data_f *out) //小范围内正确。
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
	static char pn;
	static float h_tmp_x,h_tmp_y;
	
	h_tmp_x = fast_sqrt(ref->z * ref->z + ref->y * ref->y);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	ed93 7a02 	vldr	s14, [r3, #8]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	edd3 6a01 	vldr	s13, [r3, #4]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd3c:	eeb0 0a67 	vmov.f32	s0, s15
 800cd40:	f000 ff52 	bl	800dbe8 <fast_sqrt>
 800cd44:	eef0 7a40 	vmov.f32	s15, s0
 800cd48:	4b43      	ldr	r3, [pc, #268]	; (800ce58 <simple_3d_trans+0x14c>)
 800cd4a:	edc3 7a00 	vstr	s15, [r3]
	h_tmp_y = fast_sqrt(ref->z * ref->z + ref->x * ref->x);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	ed93 7a02 	vldr	s14, [r3, #8]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	edd3 6a00 	vldr	s13, [r3]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	edd3 7a00 	vldr	s15, [r3]
 800cd6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd72:	eeb0 0a67 	vmov.f32	s0, s15
 800cd76:	f000 ff37 	bl	800dbe8 <fast_sqrt>
 800cd7a:	eef0 7a40 	vmov.f32	s15, s0
 800cd7e:	4b37      	ldr	r3, [pc, #220]	; (800ce5c <simple_3d_trans+0x150>)
 800cd80:	edc3 7a00 	vstr	s15, [r3]
	
	pn = ref->z < 0 ? -1 : 1;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd92:	d501      	bpl.n	800cd98 <simple_3d_trans+0x8c>
 800cd94:	22ff      	movs	r2, #255	; 0xff
 800cd96:	e000      	b.n	800cd9a <simple_3d_trans+0x8e>
 800cd98:	2201      	movs	r2, #1
 800cd9a:	4b31      	ldr	r3, [pc, #196]	; (800ce60 <simple_3d_trans+0x154>)
 800cd9c:	701a      	strb	r2, [r3, #0]
	
	out->x = ( h_tmp_x *in->x - pn *ref->x *in->z ) ;
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	ed93 7a00 	vldr	s14, [r3]
 800cda4:	4b2c      	ldr	r3, [pc, #176]	; (800ce58 <simple_3d_trans+0x14c>)
 800cda6:	edd3 7a00 	vldr	s15, [r3]
 800cdaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdae:	4b2c      	ldr	r3, [pc, #176]	; (800ce60 <simple_3d_trans+0x154>)
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	ee07 3a90 	vmov	s15, r3
 800cdb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	edd3 7a00 	vldr	s15, [r3]
 800cdc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	edd3 7a02 	vldr	s15, [r3, #8]
 800cdca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	edc3 7a00 	vstr	s15, [r3]
	out->y = ( pn *h_tmp_y *in->y - ref->y *in->z ) ;
 800cdd8:	4b21      	ldr	r3, [pc, #132]	; (800ce60 <simple_3d_trans+0x154>)
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	ee07 3a90 	vmov	s15, r3
 800cde0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cde4:	4b1d      	ldr	r3, [pc, #116]	; (800ce5c <simple_3d_trans+0x150>)
 800cde6:	edd3 7a00 	vldr	s15, [r3]
 800cdea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	edd3 7a01 	vldr	s15, [r3, #4]
 800cdf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	edd3 6a01 	vldr	s13, [r3, #4]
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	edc3 7a01 	vstr	s15, [r3, #4]
	out->z = ref->x *in->x + ref->y *in->y + ref->z *in->z ;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	ed93 7a00 	vldr	s14, [r3]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	edd3 7a00 	vldr	s15, [r3]
 800ce1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	edd3 6a01 	vldr	s13, [r3, #4]
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ce2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce32:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	edd3 6a02 	vldr	s13, [r3, #8]
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	edc3 7a02 	vstr	s15, [r3, #8]

}
 800ce50:	bf00      	nop
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	2000185c 	.word	0x2000185c
 800ce5c:	20001860 	.word	0x20001860
 800ce60:	20001864 	.word	0x20001864

0800ce64 <calculate_attitude>:



void calculate_attitude(ATT_Module *attitude, float cycle)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	ed2d 8b02 	vpush	{d8}
 800ce6a:	b096      	sub	sp, #88	; 0x58
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	ed87 0a00 	vstr	s0, [r7]
	float length;
	XYZ_Data_f acc_tmp; 
	XYZ_Data_f error;

	attitude->interface.data.a_x = imu_9.f_acc[0]*1000.0f;
 800ce74:	4bbf      	ldr	r3, [pc, #764]	; (800d174 <calculate_attitude+0x310>)
 800ce76:	edd3 7a08 	vldr	s15, [r3, #32]
 800ce7a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800d178 <calculate_attitude+0x314>
 800ce7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude->interface.data.a_y = imu_9.f_acc[1]*1000.0f;
 800ce88:	4bba      	ldr	r3, [pc, #744]	; (800d174 <calculate_attitude+0x310>)
 800ce8a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ce8e:	ed9f 7aba 	vldr	s14, [pc, #744]	; 800d178 <calculate_attitude+0x314>
 800ce92:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	edc3 7a02 	vstr	s15, [r3, #8]
	attitude->interface.data.a_z = imu_9.f_acc[2]*1000.0f;
 800ce9c:	4bb5      	ldr	r3, [pc, #724]	; (800d174 <calculate_attitude+0x310>)
 800ce9e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cea2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800d178 <calculate_attitude+0x314>
 800cea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	edc3 7a03 	vstr	s15, [r3, #12]
	attitude->interface.data.g_x = imu_9.f_gyro[0];
 800ceb0:	4bb0      	ldr	r3, [pc, #704]	; (800d174 <calculate_attitude+0x310>)
 800ceb2:	695a      	ldr	r2, [r3, #20]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	611a      	str	r2, [r3, #16]
	attitude->interface.data.g_y = imu_9.f_gyro[1];
 800ceb8:	4bae      	ldr	r3, [pc, #696]	; (800d174 <calculate_attitude+0x310>)
 800ceba:	699a      	ldr	r2, [r3, #24]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	615a      	str	r2, [r3, #20]
	attitude->interface.data.g_z = imu_9.f_gyro[2];
 800cec0:	4bac      	ldr	r3, [pc, #688]	; (800d174 <calculate_attitude+0x310>)
 800cec2:	69da      	ldr	r2, [r3, #28]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	619a      	str	r2, [r3, #24]
	attitude->interface.data.m_x = imu_9.f_mag[1];
 800cec8:	4baa      	ldr	r3, [pc, #680]	; (800d174 <calculate_attitude+0x310>)
 800ceca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	61da      	str	r2, [r3, #28]
	attitude->interface.data.m_y = imu_9.f_mag[0];
 800ced0:	4ba8      	ldr	r3, [pc, #672]	; (800d174 <calculate_attitude+0x310>)
 800ced2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	621a      	str	r2, [r3, #32]
	attitude->interface.data.m_z = -imu_9.f_mag[2];
 800ced8:	4ba6      	ldr	r3, [pc, #664]	; (800d174 <calculate_attitude+0x310>)
 800ceda:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800cede:	eef1 7a67 	vneg.f32	s15, s15
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


	
	if (attitude->flag.run == 0)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f000 8675 	beq.w	800dbdc <calculate_attitude+0xd78>
		return;
	
/////////////////////////////////////////////////////////////////////////////////////////////////		
	//电子罗盘处理
	if (attitude->flag.use_mag == 1)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	785b      	ldrb	r3, [r3, #1]
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	f040 808c 	bne.w	800d014 <calculate_attitude+0x1b0>
	{	
		//利用电子罗盘计算yaw
		length = fast_sqrt(attitude->data.mag_correct.x * attitude->data.mag_correct.x + attitude->data.mag_correct.y * attitude->data.mag_correct.y);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800cf08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800cf18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf20:	eeb0 0a67 	vmov.f32	s0, s15
 800cf24:	f000 fe60 	bl	800dbe8 <fast_sqrt>
 800cf28:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
		if( attitude->data.mag_correct.x != 0 && attitude->data.mag_correct.y != 0 && attitude->data.mag_correct.z != 0 && length != 0)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800cf32:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf3a:	d02f      	beq.n	800cf9c <calculate_attitude+0x138>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800cf42:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4a:	d027      	beq.n	800cf9c <calculate_attitude+0x138>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800cf52:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5a:	d01f      	beq.n	800cf9c <calculate_attitude+0x138>
 800cf5c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800cf60:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf68:	d018      	beq.n	800cf9c <calculate_attitude+0x138>
		{
			attitude->process.mag_yaw = arctan2(attitude->data.mag_correct.y / length, attitude->data.mag_correct.x / length);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800cf70:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800cf74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800cf7e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800cf82:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800cf86:	eef0 0a46 	vmov.f32	s1, s12
 800cf8a:	eeb0 0a66 	vmov.f32	s0, s13
 800cf8e:	f001 f83d 	bl	800e00c <arctan2>
 800cf92:	eef0 7a40 	vmov.f32	s15, s0
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//			attitude->process.mag_yaw = arctan2(attitude->data.mag_correct.y , attitude->data.mag_correct.x);
		}

		//计算yaw偏差
		if(attitude->data.rotate_matrix[2][2] > 0.0f )
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800cfa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfaa:	dd2e      	ble.n	800d00a <calculate_attitude+0x1a6>
		{
			attitude->process.mag_yaw_bias = attitude->parameter.correct_kp * translateAngle(attitude->data.yaw - attitude->process.mag_yaw);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	ed93 8a31 	vldr	s16, [r3, #196]	; 0xc4
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cfbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfc2:	eeb0 0a67 	vmov.f32	s0, s15
 800cfc6:	f000 fe65 	bl	800dc94 <translateAngle>
 800cfca:	eef0 7a40 	vmov.f32	s15, s0
 800cfce:	ee68 7a27 	vmul.f32	s15, s16, s15
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			//矫正值过大 -- 矫正值错误
			if(attitude->process.mag_yaw_bias > 360 || attitude->process.mag_yaw_bias < -360)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800cfde:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d17c <calculate_attitude+0x318>
 800cfe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfea:	dc09      	bgt.n	800d000 <calculate_attitude+0x19c>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800cff2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800d180 <calculate_attitude+0x31c>
 800cff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cffe:	d50d      	bpl.n	800d01c <calculate_attitude+0x1b8>
			{
				attitude->process.mag_yaw_bias = 0;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f04f 0200 	mov.w	r2, #0
 800d006:	62da      	str	r2, [r3, #44]	; 0x2c
 800d008:	e008      	b.n	800d01c <calculate_attitude+0x1b8>
			}
		}
		
		else
		{
			attitude->process.mag_yaw_bias = 0; //角度过大，停止修正，修正的目标值可能不正确
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f04f 0200 	mov.w	r2, #0
 800d010:	62da      	str	r2, [r3, #44]	; 0x2c
 800d012:	e003      	b.n	800d01c <calculate_attitude+0x1b8>
		}
	}

	else
	{
		attitude->process.mag_yaw_bias = 0;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f04f 0200 	mov.w	r2, #0
 800d01a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
/////////////////////////////////////////////////////////////////////////////////////////////////	
	//加速度计处理
	length = fast_sqrt(	(attitude->interface.data.a_x) * (attitude->interface.data.a_x) +
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	ed93 7a01 	vldr	s14, [r3, #4]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	edd3 7a01 	vldr	s15, [r3, #4]
 800d028:	ee27 7a27 	vmul.f32	s14, s14, s15
									(attitude->interface.data.a_y) * (attitude->interface.data.a_y) +
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	edd3 6a02 	vldr	s13, [r3, #8]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	edd3 7a02 	vldr	s15, [r3, #8]
 800d038:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(	(attitude->interface.data.a_x) * (attitude->interface.data.a_x) +
 800d03c:	ee37 7a27 	vadd.f32	s14, s14, s15
									(attitude->interface.data.a_z) * (attitude->interface.data.a_z));
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	edd3 6a03 	vldr	s13, [r3, #12]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	edd3 7a03 	vldr	s15, [r3, #12]
 800d04c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(	(attitude->interface.data.a_x) * (attitude->interface.data.a_x) +
 800d050:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d054:	eeb0 0a67 	vmov.f32	s0, s15
 800d058:	f000 fdc6 	bl	800dbe8 <fast_sqrt>
 800d05c:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	edd3 7a01 	vldr	s15, [r3, #4]
 800d066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06e:	dd0a      	ble.n	800d086 <calculate_attitude+0x222>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	edd3 7a01 	vldr	s15, [r3, #4]
 800d076:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800d184 <calculate_attitude+0x320>
 800d07a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d082:	d40b      	bmi.n	800d09c <calculate_attitude+0x238>
 800d084:	e106      	b.n	800d294 <calculate_attitude+0x430>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	edd3 7a01 	vldr	s15, [r3, #4]
 800d08c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800d188 <calculate_attitude+0x324>
 800d090:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d098:	f340 80fc 	ble.w	800d294 <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	edd3 7a02 	vldr	s15, [r3, #8]
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d0a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0aa:	dd0a      	ble.n	800d0c2 <calculate_attitude+0x25e>
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	edd3 7a02 	vldr	s15, [r3, #8]
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d0b2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d184 <calculate_attitude+0x320>
 800d0b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0be:	d40b      	bmi.n	800d0d8 <calculate_attitude+0x274>
 800d0c0:	e0e8      	b.n	800d294 <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	edd3 7a02 	vldr	s15, [r3, #8]
 800d0c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d188 <calculate_attitude+0x324>
 800d0cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d4:	f340 80de 	ble.w	800d294 <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_z)) < 1050.0f )
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	edd3 7a03 	vldr	s15, [r3, #12]
	if(	ABS((attitude->interface.data.a_x)) < 1050.0f &&
 800d0de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e6:	dd0a      	ble.n	800d0fe <calculate_attitude+0x29a>
			ABS((attitude->interface.data.a_z)) < 1050.0f )
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	edd3 7a03 	vldr	s15, [r3, #12]
			ABS((attitude->interface.data.a_y)) < 1050.0f &&
 800d0ee:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800d184 <calculate_attitude+0x320>
 800d0f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0fa:	d40b      	bmi.n	800d114 <calculate_attitude+0x2b0>
 800d0fc:	e0ca      	b.n	800d294 <calculate_attitude+0x430>
			ABS((attitude->interface.data.a_z)) < 1050.0f )
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	edd3 7a03 	vldr	s15, [r3, #12]
 800d104:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800d188 <calculate_attitude+0x324>
 800d108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d110:	f340 80c0 	ble.w	800d294 <calculate_attitude+0x430>
	{
		//加速度计归一化
		acc_tmp.x = (attitude->interface.data.a_x) / length;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	edd3 6a01 	vldr	s13, [r3, #4]
 800d11a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d11e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d122:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		acc_tmp.y = (attitude->interface.data.a_y) / length;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	edd3 6a02 	vldr	s13, [r3, #8]
 800d12c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d134:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		acc_tmp.z = (attitude->interface.data.a_z) / length;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	edd3 6a03 	vldr	s13, [r3, #12]
 800d13e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d146:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		
		//叉乘计算偏差	--
		if(800.0f < length && length < 1200.0f)
 800d14a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d14e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d18c <calculate_attitude+0x328>
 800d152:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d15a:	f340 80a7 	ble.w	800d2ac <calculate_attitude+0x448>
 800d15e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d162:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800d190 <calculate_attitude+0x32c>
 800d166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d16e:	d415      	bmi.n	800d19c <calculate_attitude+0x338>
 800d170:	e09c      	b.n	800d2ac <calculate_attitude+0x448>
 800d172:	bf00      	nop
 800d174:	20002154 	.word	0x20002154
 800d178:	447a0000 	.word	0x447a0000
 800d17c:	43b40000 	.word	0x43b40000
 800d180:	c3b40000 	.word	0xc3b40000
 800d184:	44834000 	.word	0x44834000
 800d188:	c4834000 	.word	0xc4834000
 800d18c:	44480000 	.word	0x44480000
 800d190:	44960000 	.word	0x44960000
 800d194:	4048f5c3 	.word	0x4048f5c3
 800d198:	bd0f5c29 	.word	0xbd0f5c29
		{
			/* 叉乘得到误差 */
			error.x = (acc_tmp.y * attitude->data.rotate_matrix[2][2] - acc_tmp.z * attitude->data.rotate_matrix[1][2]);
 800d19c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800d1a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1aa:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800d1b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1bc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			error.y = (acc_tmp.z * attitude->data.rotate_matrix[0][2] - acc_tmp.x * attitude->data.rotate_matrix[2][2]);
 800d1c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800d1ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1ce:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800d1d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1e0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	        error.z = (acc_tmp.x * attitude->data.rotate_matrix[1][2] - acc_tmp.y * attitude->data.rotate_matrix[0][2]);
 800d1e4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800d1ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1f2:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800d1fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d200:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d204:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			
			/* 误差低通 */
			attitude->process.error.x += 1.0f * 3.14f * cycle *(error.x  - attitude->process.error.x );
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800d20e:	edd7 7a00 	vldr	s15, [r7]
 800d212:	ed5f 6a20 	vldr	s13, [pc, #-128]	; 800d194 <calculate_attitude+0x330>
 800d216:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d21a:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d224:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d22c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			attitude->process.error.y += 1.0f * 3.14f * cycle *(error.y  - attitude->process.error.y );
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800d23c:	edd7 7a00 	vldr	s15, [r7]
 800d240:	ed5f 6a2c 	vldr	s13, [pc, #-176]	; 800d194 <calculate_attitude+0x330>
 800d244:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d248:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800d252:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d25a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			attitude->process.error.z += 1.0f * 3.14f * cycle *(error.z  - attitude->process.error.z );
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800d26a:	edd7 7a00 	vldr	s15, [r7]
 800d26e:	ed5f 6a37 	vldr	s13, [pc, #-220]	; 800d194 <calculate_attitude+0x330>
 800d272:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d276:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800d280:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		if(800.0f < length && length < 1200.0f)
 800d292:	e00b      	b.n	800d2ac <calculate_attitude+0x448>
		}
	}
	else
	{
		attitude->process.error.x = 0;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f04f 0200 	mov.w	r2, #0
 800d29a:	641a      	str	r2, [r3, #64]	; 0x40
		attitude->process.error.y = 0  ;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f04f 0200 	mov.w	r2, #0
 800d2a2:	645a      	str	r2, [r3, #68]	; 0x44
		attitude->process.error.z = 0 ;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f04f 0200 	mov.w	r2, #0
 800d2aa:	649a      	str	r2, [r3, #72]	; 0x48
	}

	// 误差积分	
	attitude->process.error_integral.x += attitude->process.error.x * attitude->parameter.error_ki * cycle;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800d2be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d2c2:	edd7 7a00 	vldr	s15, [r7]
 800d2c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	attitude->process.error_integral.y += attitude->process.error.y * attitude->parameter.error_ki * cycle;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800d2e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d2ea:	edd7 7a00 	vldr	s15, [r7]
 800d2ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	attitude->process.error_integral.z += attitude->process.error.z * attitude->parameter.error_ki * cycle;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800d30e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d312:	edd7 7a00 	vldr	s15, [r7]
 800d316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d31a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	
	//积分限幅 -- 2°以内
	attitude->process.error_integral.x = LIMIT(attitude->process.error_integral.x, - 0.035f ,0.035f );
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d32a:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 800d198 <calculate_attitude+0x334>
 800d32e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d336:	d501      	bpl.n	800d33c <calculate_attitude+0x4d8>
 800d338:	4b22      	ldr	r3, [pc, #136]	; (800d3c4 <calculate_attitude+0x560>)
 800d33a:	e00d      	b.n	800d358 <calculate_attitude+0x4f4>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d342:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d3c8 <calculate_attitude+0x564>
 800d346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34e:	dd01      	ble.n	800d354 <calculate_attitude+0x4f0>
 800d350:	4b1e      	ldr	r3, [pc, #120]	; (800d3cc <calculate_attitude+0x568>)
 800d352:	e001      	b.n	800d358 <calculate_attitude+0x4f4>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	64d3      	str	r3, [r2, #76]	; 0x4c
	attitude->process.error_integral.y = LIMIT(attitude->process.error_integral.y, - 0.035f ,0.035f );
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800d362:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800d3d0 <calculate_attitude+0x56c>
 800d366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36e:	d501      	bpl.n	800d374 <calculate_attitude+0x510>
 800d370:	4b14      	ldr	r3, [pc, #80]	; (800d3c4 <calculate_attitude+0x560>)
 800d372:	e00d      	b.n	800d390 <calculate_attitude+0x52c>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800d37a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800d3c8 <calculate_attitude+0x564>
 800d37e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	dd01      	ble.n	800d38c <calculate_attitude+0x528>
 800d388:	4b10      	ldr	r3, [pc, #64]	; (800d3cc <calculate_attitude+0x568>)
 800d38a:	e001      	b.n	800d390 <calculate_attitude+0x52c>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	6513      	str	r3, [r2, #80]	; 0x50
	attitude->process.error_integral.z = LIMIT(attitude->process.error_integral.z, - 0.035f ,0.035f );
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d39a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800d3d0 <calculate_attitude+0x56c>
 800d39e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a6:	d501      	bpl.n	800d3ac <calculate_attitude+0x548>
 800d3a8:	4b06      	ldr	r3, [pc, #24]	; (800d3c4 <calculate_attitude+0x560>)
 800d3aa:	e017      	b.n	800d3dc <calculate_attitude+0x578>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d3b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d3c8 <calculate_attitude+0x564>
 800d3b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3be:	dd0b      	ble.n	800d3d8 <calculate_attitude+0x574>
 800d3c0:	4b02      	ldr	r3, [pc, #8]	; (800d3cc <calculate_attitude+0x568>)
 800d3c2:	e00b      	b.n	800d3dc <calculate_attitude+0x578>
 800d3c4:	bd0f5c29 	.word	0xbd0f5c29
 800d3c8:	3d0f5c29 	.word	0x3d0f5c29
 800d3cc:	3d0f5c29 	.word	0x3d0f5c29
 800d3d0:	bd0f5c29 	.word	0xbd0f5c29
 800d3d4:	3c8efa34 	.word	0x3c8efa34
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	6553      	str	r3, [r2, #84]	; 0x54
	
/////////////////////////////////////////////////////////////////////////////////////////////////
	//开始修正陀螺仪值
	attitude->data.gyro_correct.x = ((attitude->interface.data.g_x) - attitude->data.rotate_matrix[0][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	ed93 7a04 	vldr	s14, [r3, #16]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d3f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3fa:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800d3d4 <calculate_attitude+0x570>
 800d3fe:	ee27 7a87 	vmul.f32	s14, s15, s14
						(attitude->parameter.error_kp * attitude->process.error.x + attitude->process.error_integral.x) ;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d40e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d418:	ee76 7aa7 	vadd.f32	s15, s13, s15
	attitude->data.gyro_correct.x = ((attitude->interface.data.g_x) - attitude->data.rotate_matrix[0][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d41c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	attitude->data.gyro_correct.y = ((attitude->interface.data.g_y) - attitude->data.rotate_matrix[1][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	ed93 7a05 	vldr	s14, [r3, #20]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d43c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d440:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 800d3d4 <calculate_attitude+0x570>
 800d444:	ee27 7a87 	vmul.f32	s14, s15, s14
						(attitude->parameter.error_kp * attitude->process.error.y + attitude->process.error_integral.y) ;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800d454:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800d45e:	ee76 7aa7 	vadd.f32	s15, s13, s15
	attitude->data.gyro_correct.y = ((attitude->interface.data.g_y) - attitude->data.rotate_matrix[1][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d462:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	attitude->data.gyro_correct.z = ((attitude->interface.data.g_z) - attitude->data.rotate_matrix[2][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	ed93 7a06 	vldr	s14, [r3, #24]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d47e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d482:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d486:	ed1f 7a2d 	vldr	s14, [pc, #-180]	; 800d3d4 <calculate_attitude+0x570>
 800d48a:	ee27 7a87 	vmul.f32	s14, s15, s14
						(attitude->parameter.error_kp * attitude->process.error.z + attitude->process.error_integral.z) ;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800d49a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d4a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
	attitude->data.gyro_correct.z = ((attitude->interface.data.g_z) - attitude->data.rotate_matrix[2][2] * attitude->process.mag_yaw_bias) * 0.01745329f +
 800d4a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	
/////////////////////////////////////////////////////////////////////////////////////////////////
	// 一阶龙格库塔更新四元数值
	attitude->process.quaternion[0] += (-attitude->process.quaternion[1] * attitude->data.gyro_correct.x - attitude->process.quaternion[2] * attitude->data.gyro_correct.y - attitude->process.quaternion[3] * attitude->data.gyro_correct.z) * cycle / 2.0f;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d4be:	eef1 6a67 	vneg.f32	s13, s15
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800d4c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800d4d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d4dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800d4ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d4f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d4f4:	edd7 7a00 	vldr	s15, [r7]
 800d4f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d4fc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d500:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d504:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	attitude->process.quaternion[1] +=  (attitude->process.quaternion[0] * attitude->data.gyro_correct.x + attitude->process.quaternion[2] * attitude->data.gyro_correct.z - attitude->process.quaternion[3] * attitude->data.gyro_correct.y) * cycle / 2.0f;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800d520:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800d530:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d534:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800d544:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d548:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d54c:	edd7 7a00 	vldr	s15, [r7]
 800d550:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d554:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d558:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d55c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	attitude->process.quaternion[2] +=  (attitude->process.quaternion[0] * attitude->data.gyro_correct.y - attitude->process.quaternion[1] * attitude->data.gyro_correct.z + attitude->process.quaternion[3] * attitude->data.gyro_correct.x) * cycle / 2.0f;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800d578:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800d588:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d58c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800d59c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d5a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d5a4:	edd7 7a00 	vldr	s15, [r7]
 800d5a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d5ac:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d5b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d5b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	attitude->process.quaternion[3] +=  (attitude->process.quaternion[0] * attitude->data.gyro_correct.z + attitude->process.quaternion[1] * attitude->data.gyro_correct.y - attitude->process.quaternion[2] * attitude->data.gyro_correct.x) * cycle / 2.0f;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800d5d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800d5e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d5e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800d5f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d5f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d5fc:	edd7 7a00 	vldr	s15, [r7]
 800d600:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d604:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d608:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d60c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	//四元数归一化
	length = fast_sqrt(attitude->process.quaternion[0] * attitude->process.quaternion[0] +
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d622:	ee27 7a27 	vmul.f32	s14, s14, s15
								attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d632:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(attitude->process.quaternion[0] * attitude->process.quaternion[0] +
 800d636:	ee37 7a27 	vadd.f32	s14, s14, s15
								attitude->process.quaternion[2] * attitude->process.quaternion[2] +
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d646:	ee66 7aa7 	vmul.f32	s15, s13, s15
								attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d64a:	ee37 7a27 	vadd.f32	s14, s14, s15
								attitude->process.quaternion[3] * attitude->process.quaternion[3]);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d65a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	length = fast_sqrt(attitude->process.quaternion[0] * attitude->process.quaternion[0] +
 800d65e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d662:	eeb0 0a67 	vmov.f32	s0, s15
 800d666:	f000 fabf 	bl	800dbe8 <fast_sqrt>
 800d66a:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
		
	if (length != 0)
 800d66e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d672:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67a:	d027      	beq.n	800d6cc <calculate_attitude+0x868>
	{
		attitude->process.quaternion[0] /= length;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d682:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		attitude->process.quaternion[1] /= length;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d696:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d69a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		attitude->process.quaternion[2] /= length;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d6aa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d6ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		attitude->process.quaternion[3] /= length;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d6be:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d6c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	
///////////////////////////////////////////////////////////////////////////////////////////////////	
	//计算旋转矩阵
	attitude->data.rotate_matrix[0][0] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] + attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d6d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d6e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6ec:	ee37 7a27 	vadd.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d6fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.rotate_matrix[0][0] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] + attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d700:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d714:	ee77 7a67 	vsub.f32	s15, s14, s15
	attitude->data.rotate_matrix[0][0] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] + attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	attitude->data.rotate_matrix[0][1] = 	2 * (attitude->process.quaternion[1] * attitude->process.quaternion[2] + attitude->process.quaternion[0] * attitude->process.quaternion[3]);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d72a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d73a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d73e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d742:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	attitude->data.rotate_matrix[0][2] =  2 * (attitude->process.quaternion[1] * attitude->process.quaternion[3] - attitude->process.quaternion[0] * attitude->process.quaternion[2]);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d76c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d770:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	
	attitude->data.rotate_matrix[1][0] =  2 * (attitude->process.quaternion[1] * attitude->process.quaternion[2] - attitude->process.quaternion[0] * attitude->process.quaternion[3]);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d79a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d79e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	attitude->data.rotate_matrix[1][1] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d7b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d7c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7c8:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d7d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.rotate_matrix[1][1] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d7dc:	ee37 7a27 	vadd.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] - attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d7ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7f0:	ee77 7a67 	vsub.f32	s15, s14, s15
	attitude->data.rotate_matrix[1][1] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] +
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	attitude->data.rotate_matrix[1][2] =  2 * (attitude->process.quaternion[2] * attitude->process.quaternion[3] + attitude->process.quaternion[0] * attitude->process.quaternion[1]);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d81a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d81e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	
	attitude->data.rotate_matrix[2][0] = 	2 * (attitude->process.quaternion[1] * attitude->process.quaternion[3] + attitude->process.quaternion[0] * attitude->process.quaternion[2]);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d834:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d84c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	attitude->data.rotate_matrix[2][1] = 	2 * (attitude->process.quaternion[2] * attitude->process.quaternion[3] - attitude->process.quaternion[0] * attitude->process.quaternion[1]);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d862:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d87a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	attitude->data.rotate_matrix[2][2] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d890:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d8a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8a4:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] + attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d8b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.rotate_matrix[2][2] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d8b8:	ee37 7a67 	vsub.f32	s14, s14, s15
																		attitude->process.quaternion[2] * attitude->process.quaternion[2] + attitude->process.quaternion[3] * attitude->process.quaternion[3];
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d8c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8cc:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.rotate_matrix[2][2] = 	attitude->process.quaternion[0] * attitude->process.quaternion[0] - attitude->process.quaternion[1] * attitude->process.quaternion[1] -
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	
	//计算世界坐标系下的磁力计值
	if (attitude->flag.use_mag == 1)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	785b      	ldrb	r3, [r3, #1]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d15c      	bne.n	800d998 <calculate_attitude+0xb34>
	{
		attitude->data.mag_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.m_x) +
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	edd3 7a07 	vldr	s15, [r3, #28]
 800d8ea:	ee27 7a27 	vmul.f32	s14, s14, s15
															attitude->data.rotate_matrix[1][0] * (attitude->interface.data.m_y) +
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	edd3 7a08 	vldr	s15, [r3, #32]
 800d8fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
		attitude->data.mag_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.m_x) +
 800d8fe:	ee37 7a27 	vadd.f32	s14, s14, s15
															attitude->data.rotate_matrix[2][0] * (attitude->interface.data.m_z) ;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d90e:	ee66 7aa7 	vmul.f32	s15, s13, s15
															attitude->data.rotate_matrix[1][0] * (attitude->interface.data.m_y) +
 800d912:	ee77 7a27 	vadd.f32	s15, s14, s15
		attitude->data.mag_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.m_x) +
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
															
		attitude->data.mag_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.m_x) +
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	edd3 7a07 	vldr	s15, [r3, #28]
 800d928:	ee27 7a27 	vmul.f32	s14, s14, s15
															attitude->data.rotate_matrix[1][1] * (attitude->interface.data.m_y) +
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	edd3 7a08 	vldr	s15, [r3, #32]
 800d938:	ee66 7aa7 	vmul.f32	s15, s13, s15
		attitude->data.mag_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.m_x) +
 800d93c:	ee37 7a27 	vadd.f32	s14, s14, s15
															attitude->data.rotate_matrix[2][1] * (attitude->interface.data.m_z) ;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d94c:	ee66 7aa7 	vmul.f32	s15, s13, s15
															attitude->data.rotate_matrix[1][1] * (attitude->interface.data.m_y) +
 800d950:	ee77 7a27 	vadd.f32	s15, s14, s15
		attitude->data.mag_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.m_x) +
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
															
		attitude->data.mag_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.m_x) +
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	edd3 7a07 	vldr	s15, [r3, #28]
 800d966:	ee27 7a27 	vmul.f32	s14, s14, s15
															attitude->data.rotate_matrix[1][2] * (attitude->interface.data.m_y) +
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	edd3 7a08 	vldr	s15, [r3, #32]
 800d976:	ee66 7aa7 	vmul.f32	s15, s13, s15
		attitude->data.mag_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.m_x) +
 800d97a:	ee37 7a27 	vadd.f32	s14, s14, s15
															attitude->data.rotate_matrix[2][2] * (attitude->interface.data.m_z) ;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d98a:	ee66 7aa7 	vmul.f32	s15, s13, s15
															attitude->data.rotate_matrix[1][2] * (attitude->interface.data.m_y) +
 800d98e:	ee77 7a27 	vadd.f32	s15, s14, s15
		attitude->data.mag_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.m_x) +
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	}
	
	//计算世界坐标系下的加速度值
	attitude->data.acc_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.a_x) +
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9a4:	ee27 7a27 	vmul.f32	s14, s14, s15
														attitude->data.rotate_matrix[1][0] * (attitude->interface.data.a_y) +
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	edd3 7a02 	vldr	s15, [r3, #8]
 800d9b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.acc_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.a_x) +
 800d9b8:	ee37 7a27 	vadd.f32	s14, s14, s15
														attitude->data.rotate_matrix[2][0] * (attitude->interface.data.a_z) ;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	edd3 7a03 	vldr	s15, [r3, #12]
 800d9c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
														attitude->data.rotate_matrix[1][0] * (attitude->interface.data.a_y) +
 800d9cc:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.acc_world.x = 	attitude->data.rotate_matrix[0][0] * (attitude->interface.data.a_x) +
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
														
	attitude->data.acc_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.a_x) +
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9e2:	ee27 7a27 	vmul.f32	s14, s14, s15
														attitude->data.rotate_matrix[1][1] * (attitude->interface.data.a_y) +
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	edd3 7a02 	vldr	s15, [r3, #8]
 800d9f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.acc_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.a_x) +
 800d9f6:	ee37 7a27 	vadd.f32	s14, s14, s15
														attitude->data.rotate_matrix[2][1] * (attitude->interface.data.a_z) ;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	edd3 7a03 	vldr	s15, [r3, #12]
 800da06:	ee66 7aa7 	vmul.f32	s15, s13, s15
														attitude->data.rotate_matrix[1][1] * (attitude->interface.data.a_y) +
 800da0a:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.acc_world.y = 	attitude->data.rotate_matrix[0][1] * (attitude->interface.data.a_x) +
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
														
	attitude->data.acc_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.a_x) +
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	edd3 7a01 	vldr	s15, [r3, #4]
 800da20:	ee27 7a27 	vmul.f32	s14, s14, s15
														attitude->data.rotate_matrix[1][2] * (attitude->interface.data.a_y) +
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	edd3 7a02 	vldr	s15, [r3, #8]
 800da30:	ee66 7aa7 	vmul.f32	s15, s13, s15
	attitude->data.acc_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.a_x) +
 800da34:	ee37 7a27 	vadd.f32	s14, s14, s15
														attitude->data.rotate_matrix[2][2] * (attitude->interface.data.a_z) ;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	edd3 7a03 	vldr	s15, [r3, #12]
 800da44:	ee66 7aa7 	vmul.f32	s15, s13, s15
														attitude->data.rotate_matrix[1][2] * (attitude->interface.data.a_y) +
 800da48:	ee77 7a27 	vadd.f32	s15, s14, s15
	attitude->data.acc_world.z = 	attitude->data.rotate_matrix[0][2] * (attitude->interface.data.a_x) +
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	
	//求解欧拉角
	attitude->data.rol = arctan2(attitude->data.rotate_matrix[2][2], attitude->data.rotate_matrix[1][2]);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800da5e:	eef0 0a47 	vmov.f32	s1, s14
 800da62:	eeb0 0a67 	vmov.f32	s0, s15
 800da66:	f000 fad1 	bl	800e00c <arctan2>
 800da6a:	eef0 7a40 	vmov.f32	s15, s0
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	attitude->data.pitch = -arcsin(attitude->data.rotate_matrix[0][2]);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800da7a:	eeb0 0a67 	vmov.f32	s0, s15
 800da7e:	f000 fb4d 	bl	800e11c <arcsin>
 800da82:	eef0 7a40 	vmov.f32	s15, s0
 800da86:	eef1 7a67 	vneg.f32	s15, s15
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	attitude->data.yaw = arctan2(attitude->data.rotate_matrix[0][0], attitude->data.rotate_matrix[0][1]);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800da9c:	eef0 0a47 	vmov.f32	s1, s14
 800daa0:	eeb0 0a67 	vmov.f32	s0, s15
 800daa4:	f000 fab2 	bl	800e00c <arctan2>
 800daa8:	eef0 7a40 	vmov.f32	s15, s0
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	
/////////////////////////////////////////////////////////////////////////////////////////////////			
	//计算机体坐标系矫正后的加速度--不受俯仰和翻滚影响
	attitude->data.acc_correct.x =   attitude->data.acc_world.x * my_cos(attitude->data.yaw) + attitude->data.acc_world.y * my_sin(attitude->data.yaw);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	ed93 8a22 	vldr	s16, [r3, #136]	; 0x88
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800dabe:	eeb0 0a67 	vmov.f32	s0, s15
 800dac2:	f000 f9a1 	bl	800de08 <my_cos>
 800dac6:	eef0 7a40 	vmov.f32	s15, s0
 800daca:	ee28 8a27 	vmul.f32	s16, s16, s15
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	edd3 8a23 	vldr	s17, [r3, #140]	; 0x8c
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800dada:	eeb0 0a67 	vmov.f32	s0, s15
 800dade:	f000 f913 	bl	800dd08 <my_sin>
 800dae2:	eef0 7a40 	vmov.f32	s15, s0
 800dae6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800daea:	ee78 7a27 	vadd.f32	s15, s16, s15
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	attitude->data.acc_correct.y =  -attitude->data.acc_world.x * my_sin(attitude->data.yaw) + attitude->data.acc_world.y * my_cos(attitude->data.yaw);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800dafa:	eeb1 8a67 	vneg.f32	s16, s15
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800db04:	eeb0 0a67 	vmov.f32	s0, s15
 800db08:	f000 f8fe 	bl	800dd08 <my_sin>
 800db0c:	eef0 7a40 	vmov.f32	s15, s0
 800db10:	ee28 8a27 	vmul.f32	s16, s16, s15
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	edd3 8a23 	vldr	s17, [r3, #140]	; 0x8c
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800db20:	eeb0 0a67 	vmov.f32	s0, s15
 800db24:	f000 f970 	bl	800de08 <my_cos>
 800db28:	eef0 7a40 	vmov.f32	s15, s0
 800db2c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800db30:	ee78 7a27 	vadd.f32	s15, s16, s15
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	attitude->data.acc_correct.z =   attitude->data.acc_world.z;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	
	//计算机体坐标系矫正后的磁场--不受俯仰和翻滚影响
	if (attitude->flag.use_mag == 1)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	785b      	ldrb	r3, [r3, #1]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d147      	bne.n	800dbde <calculate_attitude+0xd7a>
	{
		XYZ_Data_f ref_v = (XYZ_Data_f){attitude->data.rotate_matrix[0][2], attitude->data.rotate_matrix[1][2], attitude->data.rotate_matrix[2][2]};
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db52:	633b      	str	r3, [r7, #48]	; 0x30
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db58:	637b      	str	r3, [r7, #52]	; 0x34
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db60:	63bb      	str	r3, [r7, #56]	; 0x38
		XYZ_Data_f mag_tmp = (XYZ_Data_f){attitude->interface.data.m_x, attitude->interface.data.m_y, attitude->interface.data.m_z};
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	69db      	ldr	r3, [r3, #28]
 800db66:	61bb      	str	r3, [r7, #24]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	61fb      	str	r3, [r7, #28]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db72:	623b      	str	r3, [r7, #32]
		
		length = 	fast_sqrt(	(attitude->interface.data.m_x) * (attitude->interface.data.m_x) +
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	ed93 7a07 	vldr	s14, [r3, #28]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	edd3 7a07 	vldr	s15, [r3, #28]
 800db80:	ee27 7a27 	vmul.f32	s14, s14, s15
										(attitude->interface.data.m_y) * (attitude->interface.data.m_y) +
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	edd3 6a08 	vldr	s13, [r3, #32]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	edd3 7a08 	vldr	s15, [r3, #32]
 800db90:	ee66 7aa7 	vmul.f32	s15, s13, s15
		length = 	fast_sqrt(	(attitude->interface.data.m_x) * (attitude->interface.data.m_x) +
 800db94:	ee37 7a27 	vadd.f32	s14, s14, s15
										(attitude->interface.data.m_z) * (attitude->interface.data.m_z));
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800dba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		length = 	fast_sqrt(	(attitude->interface.data.m_x) * (attitude->interface.data.m_x) +
 800dba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbac:	eeb0 0a67 	vmov.f32	s0, s15
 800dbb0:	f000 f81a 	bl	800dbe8 <fast_sqrt>
 800dbb4:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54

		if (length != 0)
 800dbb8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800dbbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc4:	d00b      	beq.n	800dbde <calculate_attitude+0xd7a>
		{
			simple_3d_trans(&ref_v, &mag_tmp, &attitude->data.mag_correct);//地磁坐标变换
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 800dbcc:	f107 0118 	add.w	r1, r7, #24
 800dbd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff f899 	bl	800cd0c <simple_3d_trans>
 800dbda:	e000      	b.n	800dbde <calculate_attitude+0xd7a>
		return;
 800dbdc:	bf00      	nop
//			attitude->data.mag_correct.x = fast_sqrt(1 - (attitude->data.mag_correct.z / length) * (attitude->data.mag_correct.z / length)) * *(attitude->interface.data.m_x);
//			attitude->data.mag_correct.y = fast_sqrt(1 - (attitude->data.mag_correct.z / length) * (pose->data.mag_correct.z / length)) * *(attitude->interface.data.m_y);
		}
	}
	
}
 800dbde:	3758      	adds	r7, #88	; 0x58
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	ecbd 8b02 	vpop	{d8}
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <fast_sqrt>:
* 函数功能		     : 快速算根值
* 输    入         : number 根号里边的数
* 输    出         : 最大的绝对值
*******************************************************************************/
float fast_sqrt(float number)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b087      	sub	sp, #28
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	ed87 0a01 	vstr	s0, [r7, #4]
	long i;
	float x, y;
	const float f = 1.5F;
 800dbf2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dbf6:	617b      	str	r3, [r7, #20]
	x = number * 0.5F;
 800dbf8:	edd7 7a01 	vldr	s15, [r7, #4]
 800dbfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc04:	edc7 7a04 	vstr	s15, [r7, #16]
	y = number;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60bb      	str	r3, [r7, #8]
	i = * ( long * ) &y;
 800dc0c:	f107 0308 	add.w	r3, r7, #8
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - ( i >> 1 );
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	105a      	asrs	r2, r3, #1
 800dc18:	4b1d      	ldr	r3, [pc, #116]	; (800dc90 <fast_sqrt+0xa8>)
 800dc1a:	1a9b      	subs	r3, r3, r2
 800dc1c:	60fb      	str	r3, [r7, #12]

	y = * ( float * ) &i;
 800dc1e:	f107 030c 	add.w	r3, r7, #12
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	60bb      	str	r3, [r7, #8]
	y = y * ( f - ( x * y * y ) );
 800dc26:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc2a:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc32:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc3a:	ed97 7a05 	vldr	s14, [r7, #20]
 800dc3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc42:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc4a:	edc7 7a02 	vstr	s15, [r7, #8]
	y = y * ( f - ( x * y * y ) );
 800dc4e:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc52:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc5a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc62:	ed97 7a05 	vldr	s14, [r7, #20]
 800dc66:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc6a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc72:	edc7 7a02 	vstr	s15, [r7, #8]
	return number * y;
 800dc76:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800dc82:	eeb0 0a67 	vmov.f32	s0, s15
 800dc86:	371c      	adds	r7, #28
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr
 800dc90:	5f3759df 	.word	0x5f3759df

0800dc94 <translateAngle>:
//* 函数功能		     : 将角度转变为-180~180之间
//* 输    入         :
//* 输    出         :
//*******************************************************************************/
float translateAngle(float angle)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	ed87 0a01 	vstr	s0, [r7, #4]
	while (angle > ANGLE_MAX)					//判断目标角度是否在允许角度范围
 800dc9e:	e007      	b.n	800dcb0 <translateAngle+0x1c>
		angle -= 360.0f;
 800dca0:	edd7 7a01 	vldr	s15, [r7, #4]
 800dca4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800dcfc <translateAngle+0x68>
 800dca8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dcac:	edc7 7a01 	vstr	s15, [r7, #4]
	while (angle > ANGLE_MAX)					//判断目标角度是否在允许角度范围
 800dcb0:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcb4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800dd00 <translateAngle+0x6c>
 800dcb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc0:	dcee      	bgt.n	800dca0 <translateAngle+0xc>
	while (angle < ANGLE_MIN)
 800dcc2:	e007      	b.n	800dcd4 <translateAngle+0x40>
		angle += 360.0f;
 800dcc4:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcc8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800dcfc <translateAngle+0x68>
 800dccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcd0:	edc7 7a01 	vstr	s15, [r7, #4]
	while (angle < ANGLE_MIN)
 800dcd4:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcd8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800dd04 <translateAngle+0x70>
 800dcdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce4:	d4ee      	bmi.n	800dcc4 <translateAngle+0x30>
	return angle;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	ee07 3a90 	vmov	s15, r3
}
 800dcec:	eeb0 0a67 	vmov.f32	s0, s15
 800dcf0:	370c      	adds	r7, #12
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	43b40000 	.word	0x43b40000
 800dd00:	43340000 	.word	0x43340000
 800dd04:	c3340000 	.word	0xc3340000

0800dd08 <my_sin>:
* 函数功能		     :
* 输    入         :
* 输    出         :
*******************************************************************************/
float my_sin(float angle)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	ed87 0a01 	vstr	s0, [r7, #4]
	float sine, rad;
	angle = translateAngle(angle);
 800dd12:	ed97 0a01 	vldr	s0, [r7, #4]
 800dd16:	f7ff ffbd 	bl	800dc94 <translateAngle>
 800dd1a:	ed87 0a01 	vstr	s0, [r7, #4]
	rad = angle * PI / 180.0f;
 800dd1e:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd22:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ddf0 <my_sin+0xe8>
 800dd26:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dd2a:	eddf 6a32 	vldr	s13, [pc, #200]	; 800ddf4 <my_sin+0xec>
 800dd2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dd32:	edc7 7a03 	vstr	s15, [r7, #12]

	sine = (rad < 0) ? rad * (1.27323954f + 0.405284735f * rad) : rad * (1.27323954f - 0.405284735f * rad);
 800dd36:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd42:	d50e      	bpl.n	800dd62 <my_sin+0x5a>
 800dd44:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd48:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800ddf8 <my_sin+0xf0>
 800dd4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd50:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800ddfc <my_sin+0xf4>
 800dd54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd58:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd60:	e00d      	b.n	800dd7e <my_sin+0x76>
 800dd62:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd66:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800ddf8 <my_sin+0xf0>
 800dd6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd6e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800ddfc <my_sin+0xf4>
 800dd72:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dd76:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd7e:	edc7 7a02 	vstr	s15, [r7, #8]
	sine = (sine < 0) ? sine * (-0.225f * (sine + 1) + 1) : sine * (0.225f * (sine - 1) + 1);
 800dd82:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8e:	d512      	bpl.n	800ddb6 <my_sin+0xae>
 800dd90:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd98:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd9c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800de00 <my_sin+0xf8>
 800dda0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dda4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dda8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddac:	edd7 7a02 	vldr	s15, [r7, #8]
 800ddb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddb4:	e011      	b.n	800ddda <my_sin+0xd2>
 800ddb6:	edd7 7a02 	vldr	s15, [r7, #8]
 800ddba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ddc2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800de04 <my_sin+0xfc>
 800ddc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddd2:	edd7 7a02 	vldr	s15, [r7, #8]
 800ddd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddda:	edc7 7a02 	vstr	s15, [r7, #8]
	return sine;
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	ee07 3a90 	vmov	s15, r3
}
 800dde4:	eeb0 0a67 	vmov.f32	s0, s15
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	40490fdb 	.word	0x40490fdb
 800ddf4:	43340000 	.word	0x43340000
 800ddf8:	3ecf817b 	.word	0x3ecf817b
 800ddfc:	3fa2f983 	.word	0x3fa2f983
 800de00:	be666666 	.word	0xbe666666
 800de04:	3e666666 	.word	0x3e666666

0800de08 <my_cos>:
* 函数功能		     :
* 输    入         :
* 输    出         :
*******************************************************************************/
float my_cos(float angle)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	ed87 0a01 	vstr	s0, [r7, #4]
	return my_sin(angle + 90.0f);
 800de12:	edd7 7a01 	vldr	s15, [r7, #4]
 800de16:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800de34 <my_cos+0x2c>
 800de1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de1e:	eeb0 0a67 	vmov.f32	s0, s15
 800de22:	f7ff ff71 	bl	800dd08 <my_sin>
 800de26:	eef0 7a40 	vmov.f32	s15, s0
}
 800de2a:	eeb0 0a67 	vmov.f32	s0, s15
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	42b40000 	.word	0x42b40000

0800de38 <arctan1>:
* 函数功能		     : 反正切 （+- 0.09°）
* 输    入         :
* 输    出         :
*******************************************************************************/
float arctan1(float tan)
{
 800de38:	b480      	push	{r7}
 800de3a:	b085      	sub	sp, #20
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	ed87 0a01 	vstr	s0, [r7, #4]
	float angle = (ABS(tan) > 1.0f)	? 																																								\
 800de42:	edd7 7a01 	vldr	s15, [r7, #4]
 800de46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de4e:	dd0c      	ble.n	800de6a <arctan1+0x32>
 800de50:	edd7 7a01 	vldr	s15, [r7, #4]
 800de54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de58:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de60:	bfcc      	ite	gt
 800de62:	2301      	movgt	r3, #1
 800de64:	2300      	movle	r3, #0
 800de66:	b2db      	uxtb	r3, r3
 800de68:	e00b      	b.n	800de82 <arctan1+0x4a>
 800de6a:	edd7 7a01 	vldr	s15, [r7, #4]
 800de6e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800de72:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7a:	bf4c      	ite	mi
 800de7c:	2301      	movmi	r3, #1
 800de7e:	2300      	movpl	r3, #0
 800de80:	b2db      	uxtb	r3, r3
								90.0f - ABS(1.0f / tan) * (45.0f - (ABS(1.0f / tan) - 1.0f) * (14.0f + 3.83f * ABS(1.0f / tan)))	: \
 800de82:	2b00      	cmp	r3, #0
 800de84:	d066      	beq.n	800df54 <arctan1+0x11c>
 800de86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de8a:	ed97 7a01 	vldr	s14, [r7, #4]
 800de8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9a:	dd06      	ble.n	800deaa <arctan1+0x72>
 800de9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dea0:	ed97 7a01 	vldr	s14, [r7, #4]
 800dea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dea8:	e007      	b.n	800deba <arctan1+0x82>
 800deaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800deae:	ed97 7a01 	vldr	s14, [r7, #4]
 800deb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800deb6:	eef1 7a67 	vneg.f32	s15, s15
 800deba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800debe:	edd7 6a01 	vldr	s13, [r7, #4]
 800dec2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800dec6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800deca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dece:	dd06      	ble.n	800dede <arctan1+0xa6>
 800ded0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ded4:	edd7 6a01 	vldr	s13, [r7, #4]
 800ded8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800dedc:	e007      	b.n	800deee <arctan1+0xb6>
 800dede:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dee2:	edd7 6a01 	vldr	s13, [r7, #4]
 800dee6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800deea:	eeb1 7a47 	vneg.f32	s14, s14
 800deee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800def2:	ee77 6a66 	vsub.f32	s13, s14, s13
 800def6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800defa:	ed97 6a01 	vldr	s12, [r7, #4]
 800defe:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800df02:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800df06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df0a:	dd06      	ble.n	800df1a <arctan1+0xe2>
 800df0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800df10:	ed97 6a01 	vldr	s12, [r7, #4]
 800df14:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800df18:	e007      	b.n	800df2a <arctan1+0xf2>
 800df1a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800df1e:	ed97 6a01 	vldr	s12, [r7, #4]
 800df22:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800df26:	eeb1 7a47 	vneg.f32	s14, s14
 800df2a:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800e000 <arctan1+0x1c8>
 800df2e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800df32:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 800df36:	ee37 7a06 	vadd.f32	s14, s14, s12
 800df3a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800df3e:	eddf 6a31 	vldr	s13, [pc, #196]	; 800e004 <arctan1+0x1cc>
 800df42:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800df46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df4a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800e008 <arctan1+0x1d0>
 800df4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df52:	e03d      	b.n	800dfd0 <arctan1+0x198>
								ABS(tan) * (45.0f - (ABS(tan) - 1.0f) * (14.0f + 3.83f * ABS(tan)));
 800df54:	edd7 7a01 	vldr	s15, [r7, #4]
 800df58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df60:	dd02      	ble.n	800df68 <arctan1+0x130>
 800df62:	edd7 7a01 	vldr	s15, [r7, #4]
 800df66:	e003      	b.n	800df70 <arctan1+0x138>
 800df68:	edd7 7a01 	vldr	s15, [r7, #4]
 800df6c:	eef1 7a67 	vneg.f32	s15, s15
 800df70:	ed97 7a01 	vldr	s14, [r7, #4]
 800df74:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800df78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7c:	dd02      	ble.n	800df84 <arctan1+0x14c>
 800df7e:	ed97 7a01 	vldr	s14, [r7, #4]
 800df82:	e003      	b.n	800df8c <arctan1+0x154>
 800df84:	ed97 7a01 	vldr	s14, [r7, #4]
 800df88:	eeb1 7a47 	vneg.f32	s14, s14
 800df8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df90:	ee77 6a66 	vsub.f32	s13, s14, s13
 800df94:	ed97 7a01 	vldr	s14, [r7, #4]
 800df98:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800df9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa0:	dd02      	ble.n	800dfa8 <arctan1+0x170>
 800dfa2:	ed97 7a01 	vldr	s14, [r7, #4]
 800dfa6:	e003      	b.n	800dfb0 <arctan1+0x178>
 800dfa8:	ed97 7a01 	vldr	s14, [r7, #4]
 800dfac:	eeb1 7a47 	vneg.f32	s14, s14
 800dfb0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e000 <arctan1+0x1c8>
 800dfb4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800dfb8:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 800dfbc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800dfc0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800dfc4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800e004 <arctan1+0x1cc>
 800dfc8:	ee36 7ac7 	vsub.f32	s14, s13, s14
								90.0f - ABS(1.0f / tan) * (45.0f - (ABS(1.0f / tan) - 1.0f) * (14.0f + 3.83f * ABS(1.0f / tan)))	: \
 800dfcc:	ee67 7a87 	vmul.f32	s15, s15, s14
	float angle = (ABS(tan) > 1.0f)	? 																																								\
 800dfd0:	edc7 7a03 	vstr	s15, [r7, #12]
	return (tan > 0) ? angle : -angle;
 800dfd4:	edd7 7a01 	vldr	s15, [r7, #4]
 800dfd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe0:	dd02      	ble.n	800dfe8 <arctan1+0x1b0>
 800dfe2:	edd7 7a03 	vldr	s15, [r7, #12]
 800dfe6:	e003      	b.n	800dff0 <arctan1+0x1b8>
 800dfe8:	edd7 7a03 	vldr	s15, [r7, #12]
 800dfec:	eef1 7a67 	vneg.f32	s15, s15
}
 800dff0:	eeb0 0a67 	vmov.f32	s0, s15
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	40751eb8 	.word	0x40751eb8
 800e004:	42340000 	.word	0x42340000
 800e008:	42b40000 	.word	0x42b40000

0800e00c <arctan2>:
* 函数功能		     : 反正切 （+- 0.09°）
* 输    入         :
* 输    出         :
*******************************************************************************/
float arctan2(float x, float y)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	ed87 0a01 	vstr	s0, [r7, #4]
 800e016:	edc7 0a00 	vstr	s1, [r7]
	float tan, angle;

	if (x == 0 && y == 0)		//不存在
 800e01a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e01e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e026:	d109      	bne.n	800e03c <arctan2+0x30>
 800e028:	edd7 7a00 	vldr	s15, [r7]
 800e02c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e034:	d102      	bne.n	800e03c <arctan2+0x30>
		return 0;
 800e036:	f04f 0300 	mov.w	r3, #0
 800e03a:	e060      	b.n	800e0fe <arctan2+0xf2>

	if (x == 0)							//y轴上
 800e03c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e040:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e048:	d10a      	bne.n	800e060 <arctan2+0x54>
	{
		if (y > 0)
 800e04a:	edd7 7a00 	vldr	s15, [r7]
 800e04e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e056:	dd01      	ble.n	800e05c <arctan2+0x50>
			return 90;
 800e058:	4b2c      	ldr	r3, [pc, #176]	; (800e10c <arctan2+0x100>)
 800e05a:	e050      	b.n	800e0fe <arctan2+0xf2>
		else
			return -90;
 800e05c:	4b2c      	ldr	r3, [pc, #176]	; (800e110 <arctan2+0x104>)
 800e05e:	e04e      	b.n	800e0fe <arctan2+0xf2>
	}

	if (y == 0)							//x轴上
 800e060:	edd7 7a00 	vldr	s15, [r7]
 800e064:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e06c:	d10b      	bne.n	800e086 <arctan2+0x7a>
	{
		if (x > 0)
 800e06e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07a:	dd02      	ble.n	800e082 <arctan2+0x76>
			return 0;
 800e07c:	f04f 0300 	mov.w	r3, #0
 800e080:	e03d      	b.n	800e0fe <arctan2+0xf2>
		else
			return -180.0f;
 800e082:	4b24      	ldr	r3, [pc, #144]	; (800e114 <arctan2+0x108>)
 800e084:	e03b      	b.n	800e0fe <arctan2+0xf2>
	}

	tan = y / x;
 800e086:	edd7 6a00 	vldr	s13, [r7]
 800e08a:	ed97 7a01 	vldr	s14, [r7, #4]
 800e08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e092:	edc7 7a02 	vstr	s15, [r7, #8]
	angle = arctan1(tan);
 800e096:	ed97 0a02 	vldr	s0, [r7, #8]
 800e09a:	f7ff fecd 	bl	800de38 <arctan1>
 800e09e:	ed87 0a03 	vstr	s0, [r7, #12]
	if (x < 0 && angle > 0)
 800e0a2:	edd7 7a01 	vldr	s15, [r7, #4]
 800e0a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ae:	d50f      	bpl.n	800e0d0 <arctan2+0xc4>
 800e0b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0bc:	dd08      	ble.n	800e0d0 <arctan2+0xc4>
		angle -= 180.0f;
 800e0be:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0c2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e118 <arctan2+0x10c>
 800e0c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0ca:	edc7 7a03 	vstr	s15, [r7, #12]
 800e0ce:	e015      	b.n	800e0fc <arctan2+0xf0>
	else if (x < 0 && angle < 0)
 800e0d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800e0d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0dc:	d50e      	bpl.n	800e0fc <arctan2+0xf0>
 800e0de:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ea:	d507      	bpl.n	800e0fc <arctan2+0xf0>
		angle += 180.0f;
 800e0ec:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0f0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800e118 <arctan2+0x10c>
 800e0f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0f8:	edc7 7a03 	vstr	s15, [r7, #12]
	return angle;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
}
 800e0fe:	ee07 3a90 	vmov	s15, r3
 800e102:	eeb0 0a67 	vmov.f32	s0, s15
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	42b40000 	.word	0x42b40000
 800e110:	c2b40000 	.word	0xc2b40000
 800e114:	c3340000 	.word	0xc3340000
 800e118:	43340000 	.word	0x43340000

0800e11c <arcsin>:
* 函数功能		     : 反正切 （+- 0.09°）
* 输    入         :
* 输    出         :
*******************************************************************************/
float arcsin(float i)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	ed87 0a01 	vstr	s0, [r7, #4]
	return arctan1(i / fast_sqrt(1 - i * i));
 800e126:	edd7 7a01 	vldr	s15, [r7, #4]
 800e12a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e12e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e132:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e136:	eeb0 0a67 	vmov.f32	s0, s15
 800e13a:	f7ff fd55 	bl	800dbe8 <fast_sqrt>
 800e13e:	eef0 6a40 	vmov.f32	s13, s0
 800e142:	edd7 7a01 	vldr	s15, [r7, #4]
 800e146:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e14a:	eeb0 0a47 	vmov.f32	s0, s14
 800e14e:	f7ff fe73 	bl	800de38 <arctan1>
 800e152:	eef0 7a40 	vmov.f32	s15, s0
}
 800e156:	eeb0 0a67 	vmov.f32	s0, s15
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b088      	sub	sp, #32
 800e164:	af04      	add	r7, sp, #16
 800e166:	607b      	str	r3, [r7, #4]
 800e168:	4603      	mov	r3, r0
 800e16a:	81fb      	strh	r3, [r7, #14]
 800e16c:	460b      	mov	r3, r1
 800e16e:	81bb      	strh	r3, [r7, #12]
 800e170:	4613      	mov	r3, r2
 800e172:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e174:	8978      	ldrh	r0, [r7, #10]
 800e176:	89ba      	ldrh	r2, [r7, #12]
 800e178:	89f9      	ldrh	r1, [r7, #14]
 800e17a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e17e:	9302      	str	r3, [sp, #8]
 800e180:	8b3b      	ldrh	r3, [r7, #24]
 800e182:	9301      	str	r3, [sp, #4]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	4603      	mov	r3, r0
 800e18a:	4806      	ldr	r0, [pc, #24]	; (800e1a4 <I2C1_WriteReg+0x44>)
 800e18c:	f7f4 fb60 	bl	8002850 <HAL_I2C_Mem_Write>
 800e190:	4603      	mov	r3, r0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d101      	bne.n	800e19a <I2C1_WriteReg+0x3a>
  {
    return HAL_OK;
 800e196:	2300      	movs	r3, #0
 800e198:	e000      	b.n	800e19c <I2C1_WriteReg+0x3c>
  }

  return HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	20000414 	.word	0x20000414

0800e1a8 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b088      	sub	sp, #32
 800e1ac:	af04      	add	r7, sp, #16
 800e1ae:	607b      	str	r3, [r7, #4]
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	81fb      	strh	r3, [r7, #14]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	81bb      	strh	r3, [r7, #12]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e1bc:	8978      	ldrh	r0, [r7, #10]
 800e1be:	89ba      	ldrh	r2, [r7, #12]
 800e1c0:	89f9      	ldrh	r1, [r7, #14]
 800e1c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e1c6:	9302      	str	r3, [sp, #8]
 800e1c8:	8b3b      	ldrh	r3, [r7, #24]
 800e1ca:	9301      	str	r3, [sp, #4]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	4806      	ldr	r0, [pc, #24]	; (800e1ec <I2C1_ReadReg+0x44>)
 800e1d4:	f7f4 fc50 	bl	8002a78 <HAL_I2C_Mem_Read>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d101      	bne.n	800e1e2 <I2C1_ReadReg+0x3a>
  {
    return HAL_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	e000      	b.n	800e1e4 <I2C1_ReadReg+0x3c>
  }

  return HAL_ERROR;
 800e1e2:	2301      	movs	r3, #1
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	20000414 	.word	0x20000414

0800e1f0 <BSP_I2C1_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af02      	add	r7, sp, #8
 800e1f6:	60ba      	str	r2, [r7, #8]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	81fb      	strh	r3, [r7, #14]
 800e1fe:	460b      	mov	r3, r1
 800e200:	81bb      	strh	r3, [r7, #12]
 800e202:	4613      	mov	r3, r2
 800e204:	80fb      	strh	r3, [r7, #6]
  if(I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800e206:	89b9      	ldrh	r1, [r7, #12]
 800e208:	89f8      	ldrh	r0, [r7, #14]
 800e20a:	88fb      	ldrh	r3, [r7, #6]
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	2201      	movs	r2, #1
 800e212:	f7ff ffa5 	bl	800e160 <I2C1_WriteReg>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d101      	bne.n	800e220 <BSP_I2C1_WriteReg+0x30>
  {
	 return HAL_OK;
 800e21c:	2300      	movs	r3, #0
 800e21e:	e000      	b.n	800e222 <BSP_I2C1_WriteReg+0x32>
  }
  return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b086      	sub	sp, #24
 800e22e:	af02      	add	r7, sp, #8
 800e230:	60ba      	str	r2, [r7, #8]
 800e232:	461a      	mov	r2, r3
 800e234:	4603      	mov	r3, r0
 800e236:	81fb      	strh	r3, [r7, #14]
 800e238:	460b      	mov	r3, r1
 800e23a:	81bb      	strh	r3, [r7, #12]
 800e23c:	4613      	mov	r3, r2
 800e23e:	80fb      	strh	r3, [r7, #6]
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == HAL_OK)
 800e240:	89b9      	ldrh	r1, [r7, #12]
 800e242:	89f8      	ldrh	r0, [r7, #14]
 800e244:	88fb      	ldrh	r3, [r7, #6]
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f7ff ffac 	bl	800e1a8 <I2C1_ReadReg>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <BSP_I2C1_ReadReg+0x30>
  {
	 return HAL_OK;
 800e256:	2300      	movs	r3, #0
 800e258:	e000      	b.n	800e25c <BSP_I2C1_ReadReg+0x32>
  }
  return HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3710      	adds	r7, #16
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <I2C3_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b088      	sub	sp, #32
 800e268:	af04      	add	r7, sp, #16
 800e26a:	607b      	str	r3, [r7, #4]
 800e26c:	4603      	mov	r3, r0
 800e26e:	81fb      	strh	r3, [r7, #14]
 800e270:	460b      	mov	r3, r1
 800e272:	81bb      	strh	r3, [r7, #12]
 800e274:	4613      	mov	r3, r2
 800e276:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c3, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e278:	8978      	ldrh	r0, [r7, #10]
 800e27a:	89ba      	ldrh	r2, [r7, #12]
 800e27c:	89f9      	ldrh	r1, [r7, #14]
 800e27e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e282:	9302      	str	r3, [sp, #8]
 800e284:	8b3b      	ldrh	r3, [r7, #24]
 800e286:	9301      	str	r3, [sp, #4]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	9300      	str	r3, [sp, #0]
 800e28c:	4603      	mov	r3, r0
 800e28e:	4806      	ldr	r0, [pc, #24]	; (800e2a8 <I2C3_ReadReg+0x44>)
 800e290:	f7f4 fbf2 	bl	8002a78 <HAL_I2C_Mem_Read>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d101      	bne.n	800e29e <I2C3_ReadReg+0x3a>
  {
    return HAL_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	e000      	b.n	800e2a0 <I2C3_ReadReg+0x3c>
  }

  return HAL_ERROR;
 800e29e:	2301      	movs	r3, #1
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3710      	adds	r7, #16
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	20000468 	.word	0x20000468

0800e2ac <I2C3_WriteReg>:


static int32_t I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b088      	sub	sp, #32
 800e2b0:	af04      	add	r7, sp, #16
 800e2b2:	607b      	str	r3, [r7, #4]
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	81fb      	strh	r3, [r7, #14]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	81bb      	strh	r3, [r7, #12]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c3, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800e2c0:	8978      	ldrh	r0, [r7, #10]
 800e2c2:	89ba      	ldrh	r2, [r7, #12]
 800e2c4:	89f9      	ldrh	r1, [r7, #14]
 800e2c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e2ca:	9302      	str	r3, [sp, #8]
 800e2cc:	8b3b      	ldrh	r3, [r7, #24]
 800e2ce:	9301      	str	r3, [sp, #4]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	4806      	ldr	r0, [pc, #24]	; (800e2f0 <I2C3_WriteReg+0x44>)
 800e2d8:	f7f4 faba 	bl	8002850 <HAL_I2C_Mem_Write>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d101      	bne.n	800e2e6 <I2C3_WriteReg+0x3a>
  {
    return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	e000      	b.n	800e2e8 <I2C3_WriteReg+0x3c>
  }

  return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20000468 	.word	0x20000468

0800e2f4 <BSP_I2C3_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b086      	sub	sp, #24
 800e2f8:	af02      	add	r7, sp, #8
 800e2fa:	60ba      	str	r2, [r7, #8]
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	4603      	mov	r3, r0
 800e300:	81fb      	strh	r3, [r7, #14]
 800e302:	460b      	mov	r3, r1
 800e304:	81bb      	strh	r3, [r7, #12]
 800e306:	4613      	mov	r3, r2
 800e308:	80fb      	strh	r3, [r7, #6]
  if(I2C3_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800e30a:	89b9      	ldrh	r1, [r7, #12]
 800e30c:	89f8      	ldrh	r0, [r7, #14]
 800e30e:	88fb      	ldrh	r3, [r7, #6]
 800e310:	9300      	str	r3, [sp, #0]
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	2201      	movs	r2, #1
 800e316:	f7ff ffc9 	bl	800e2ac <I2C3_WriteReg>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d101      	bne.n	800e324 <BSP_I2C3_WriteReg+0x30>
  {
	 return HAL_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	e000      	b.n	800e326 <BSP_I2C3_WriteReg+0x32>
  }
  return HAL_ERROR;
 800e324:	2301      	movs	r3, #1
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <BSP_I2C3_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b086      	sub	sp, #24
 800e332:	af02      	add	r7, sp, #8
 800e334:	60ba      	str	r2, [r7, #8]
 800e336:	461a      	mov	r2, r3
 800e338:	4603      	mov	r3, r0
 800e33a:	81fb      	strh	r3, [r7, #14]
 800e33c:	460b      	mov	r3, r1
 800e33e:	81bb      	strh	r3, [r7, #12]
 800e340:	4613      	mov	r3, r2
 800e342:	80fb      	strh	r3, [r7, #6]
  if(I2C3_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == HAL_OK)
 800e344:	89b9      	ldrh	r1, [r7, #12]
 800e346:	89f8      	ldrh	r0, [r7, #14]
 800e348:	88fb      	ldrh	r3, [r7, #6]
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	2201      	movs	r2, #1
 800e350:	f7ff ff88 	bl	800e264 <I2C3_ReadReg>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d101      	bne.n	800e35e <BSP_I2C3_ReadReg+0x30>
  {
	 return HAL_OK;
 800e35a:	2300      	movs	r3, #0
 800e35c:	e000      	b.n	800e360 <BSP_I2C3_ReadReg+0x32>
  }
  return HAL_ERROR;
 800e35e:	2301      	movs	r3, #1
}
 800e360:	4618      	mov	r0, r3
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <STMFLASH_Write_NoCheck>:
#include "in_flash.h"

union_t  f_data;

void STMFLASH_Write_NoCheck(uint32_t WriteAddr, uint8_t *pBuffer, uint32_t NumToWrite)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
    for(int i=0;i<(NumToWrite>>3);i++)
 800e374:	2300      	movs	r3, #0
 800e376:	617b      	str	r3, [r7, #20]
 800e378:	e00f      	b.n	800e39a <STMFLASH_Write_NoCheck+0x32>
    {
  	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,WriteAddr,f_data.eight[i]);
 800e37a:	4a0d      	ldr	r2, [pc, #52]	; (800e3b0 <STMFLASH_Write_NoCheck+0x48>)
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	4413      	add	r3, r2
 800e382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e386:	68f9      	ldr	r1, [r7, #12]
 800e388:	2000      	movs	r0, #0
 800e38a:	f7f3 fd95 	bl	8001eb8 <HAL_FLASH_Program>
  	  WriteAddr += 8;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	3308      	adds	r3, #8
 800e392:	60fb      	str	r3, [r7, #12]
    for(int i=0;i<(NumToWrite>>3);i++)
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	3301      	adds	r3, #1
 800e398:	617b      	str	r3, [r7, #20]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	08da      	lsrs	r2, r3, #3
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d8ea      	bhi.n	800e37a <STMFLASH_Write_NoCheck+0x12>
    }
}
 800e3a4:	bf00      	nop
 800e3a6:	bf00      	nop
 800e3a8:	3718      	adds	r7, #24
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	20001868 	.word	0x20001868

0800e3b4 <FLASH_ErasePage>:
 @param pageAddress -[in] 擦除的起始地址
 @param nbPages -[in] 擦除页数
 @return 0 - 成功；-1 - 失败
*/
int FLASH_ErasePage(uint32_t pageAddress, uint32_t nbPages)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b088      	sub	sp, #32
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
	uint32_t pageError = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60fb      	str	r3, [r7, #12]
	eraseInit.Page = (pageAddress - FLASH_BASE)/PAGE_SIZE;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800e3cc:	0adb      	lsrs	r3, r3, #11
 800e3ce:	617b      	str	r3, [r7, #20]
	eraseInit.Banks = FLASH_BANK_1;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = nbPages;
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	61bb      	str	r3, [r7, #24]
	if(HAL_FLASHEx_Erase(&eraseInit, &pageError) != HAL_OK)
 800e3d8:	f107 021c 	add.w	r2, r7, #28
 800e3dc:	f107 030c 	add.w	r3, r7, #12
 800e3e0:	4611      	mov	r1, r2
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7f3 fec0 	bl	8002168 <HAL_FLASHEx_Erase>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d002      	beq.n	800e3f4 <FLASH_ErasePage+0x40>
	{
		return -1;
 800e3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f2:	e000      	b.n	800e3f6 <FLASH_ErasePage+0x42>
	}
	return 0;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3720      	adds	r7, #32
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
	...

0800e400 <STMFLASH_Write>:

void STMFLASH_Write(uint32_t WriteAddr, uint8_t *pBuffer, uint32_t NumToWrite)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	f5ad 6d02 	sub.w	sp, sp, #2080	; 0x820
 800e406:	af00      	add	r7, sp, #0
 800e408:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e40c:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800e410:	6018      	str	r0, [r3, #0]
 800e412:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e416:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 800e41a:	6019      	str	r1, [r3, #0]
 800e41c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e420:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800e424:	601a      	str	r2, [r3, #0]
	uint16_t secoff;
	uint16_t secremain;
	uint16_t i;
	uint32_t offaddr;

	HAL_FLASH_Unlock();
 800e426:	f7f3 fdb3 	bl	8001f90 <HAL_FLASH_Unlock>
	offaddr = WriteAddr - USER_FLASH_ADDR_START;
 800e42a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e42e:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800e438:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 800e43c:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	secpos = offaddr / PAGE_SIZE;
 800e440:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800e444:	0adb      	lsrs	r3, r3, #11
 800e446:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	secoff = (offaddr % PAGE_SIZE);
 800e44a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800e44e:	b29b      	uxth	r3, r3
 800e450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e454:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
	secremain = PAGE_SIZE  - secoff;
 800e458:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 800e45c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800e460:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
	if (NumToWrite <= secremain)
 800e464:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	; 0x81e
 800e468:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800e46c:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 800e470:	6812      	ldr	r2, [r2, #0]
 800e472:	429a      	cmp	r2, r3
 800e474:	d806      	bhi.n	800e484 <STMFLASH_Write+0x84>
		secremain = NumToWrite;
 800e476:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e47a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
//	while (1)
//	{
		STMFLASH_Read(secpos * PAGE_SIZE + USER_FLASH_ADDR_START, STMFLASH_BUF, PAGE_SIZE);
 800e484:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800e488:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e48c:	333f      	adds	r3, #63	; 0x3f
 800e48e:	02db      	lsls	r3, r3, #11
 800e490:	f107 0110 	add.w	r1, r7, #16
 800e494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e498:	4618      	mov	r0, r3
 800e49a:	f000 f83f 	bl	800e51c <STMFLASH_Read>
//			if (STMFLASH_BUF[secoff + i] != 0XFFFFFFFF)
//				break;
//		}
//		if (i < secremain)
//		{
			FLASH_ErasePage(secpos * PAGE_SIZE + USER_FLASH_ADDR_START,1);
 800e49e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800e4a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e4a6:	333f      	adds	r3, #63	; 0x3f
 800e4a8:	02db      	lsls	r3, r3, #11
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7ff ff81 	bl	800e3b4 <FLASH_ErasePage>
			for (i = 0; i < secremain; i++)
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 800e4b8:	e014      	b.n	800e4e4 <STMFLASH_Write+0xe4>
			{
				f_data.one[i + secoff] = pBuffer[i];
 800e4ba:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 800e4be:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800e4c2:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 800e4c6:	6812      	ldr	r2, [r2, #0]
 800e4c8:	441a      	add	r2, r3
 800e4ca:	f8b7 181c 	ldrh.w	r1, [r7, #2076]	; 0x81c
 800e4ce:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 800e4d2:	440b      	add	r3, r1
 800e4d4:	7811      	ldrb	r1, [r2, #0]
 800e4d6:	4a10      	ldr	r2, [pc, #64]	; (800e518 <STMFLASH_Write+0x118>)
 800e4d8:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < secremain; i++)
 800e4da:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 800e4de:	3301      	adds	r3, #1
 800e4e0:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 800e4e4:	f8b7 281c 	ldrh.w	r2, [r7, #2076]	; 0x81c
 800e4e8:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	; 0x81e
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d3e4      	bcc.n	800e4ba <STMFLASH_Write+0xba>
			}
			STMFLASH_Write_NoCheck(secpos * PAGE_SIZE + USER_FLASH_ADDR_START, STMFLASH_BUF, PAGE_SIZE);
 800e4f0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800e4f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e4f8:	333f      	adds	r3, #63	; 0x3f
 800e4fa:	02db      	lsls	r3, r3, #11
 800e4fc:	f107 0110 	add.w	r1, r7, #16
 800e500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e504:	4618      	mov	r0, r3
 800e506:	f7ff ff2f 	bl	800e368 <STMFLASH_Write_NoCheck>
//				secremain = PAGE_SIZE;
//			else
//				secremain = NumToWrite;
//		}
//	};
	HAL_FLASH_Lock();
 800e50a:	f7f3 fd63 	bl	8001fd4 <HAL_FLASH_Lock>
}
 800e50e:	bf00      	nop
 800e510:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	20001868 	.word	0x20001868

0800e51c <STMFLASH_Read>:

void STMFLASH_Read(uint32_t ReadAddr, uint8_t *pBuffer, uint32_t NumToRead)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b08b      	sub	sp, #44	; 0x2c
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
	uint64_t data;
	uint32_t temp1,temp2;

	temp1 = NumToRead/8;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	08db      	lsrs	r3, r3, #3
 800e52c:	61fb      	str	r3, [r7, #28]
	temp2 = NumToRead%8;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f003 0307 	and.w	r3, r3, #7
 800e534:	61bb      	str	r3, [r7, #24]
	if(temp2>0)
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <STMFLASH_Read+0x26>
	{
		temp1 = temp1 + 1 ;
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	3301      	adds	r3, #1
 800e540:	61fb      	str	r3, [r7, #28]

	}
	 for(uint32_t i=0; i<(PAGE_SIZE>>3); i++)
 800e542:	2300      	movs	r3, #0
 800e544:	627b      	str	r3, [r7, #36]	; 0x24
 800e546:	e014      	b.n	800e572 <STMFLASH_Read+0x56>
	  {
		 data = *(__IO uint64_t *)(USER_FLASH_ADDR_START+i*8);
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800e54e:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e558:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    f_data.eight[i] = data;
 800e55c:	4a15      	ldr	r2, [pc, #84]	; (800e5b4 <STMFLASH_Read+0x98>)
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	00db      	lsls	r3, r3, #3
 800e562:	18d1      	adds	r1, r2, r3
 800e564:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e568:	e9c1 2300 	strd	r2, r3, [r1]
	 for(uint32_t i=0; i<(PAGE_SIZE>>3); i++)
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	3301      	adds	r3, #1
 800e570:	627b      	str	r3, [r7, #36]	; 0x24
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	2bff      	cmp	r3, #255	; 0xff
 800e576:	d9e7      	bls.n	800e548 <STMFLASH_Read+0x2c>
	  }

     for(int i=0;i<NumToRead;i++)
 800e578:	2300      	movs	r3, #0
 800e57a:	623b      	str	r3, [r7, #32]
 800e57c:	e00f      	b.n	800e59e <STMFLASH_Read+0x82>
     {
    	 pBuffer[i] = f_data.one[ReadAddr - USER_FLASH_ADDR_START+i];
 800e57e:	6a3a      	ldr	r2, [r7, #32]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	4413      	add	r3, r2
 800e584:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800e588:	f5a3 33fc 	sub.w	r3, r3, #129024	; 0x1f800
 800e58c:	6a3a      	ldr	r2, [r7, #32]
 800e58e:	68b9      	ldr	r1, [r7, #8]
 800e590:	440a      	add	r2, r1
 800e592:	4908      	ldr	r1, [pc, #32]	; (800e5b4 <STMFLASH_Read+0x98>)
 800e594:	5ccb      	ldrb	r3, [r1, r3]
 800e596:	7013      	strb	r3, [r2, #0]
     for(int i=0;i<NumToRead;i++)
 800e598:	6a3b      	ldr	r3, [r7, #32]
 800e59a:	3301      	adds	r3, #1
 800e59c:	623b      	str	r3, [r7, #32]
 800e59e:	6a3b      	ldr	r3, [r7, #32]
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d8eb      	bhi.n	800e57e <STMFLASH_Read+0x62>

     }
}
 800e5a6:	bf00      	nop
 800e5a8:	bf00      	nop
 800e5aa:	372c      	adds	r7, #44	; 0x2c
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr
 800e5b4:	20001868 	.word	0x20001868

0800e5b8 <parseCommand>:
#define shell_debug  0

static bsp_console_parm *shell_con=0;
 shell_context_struct shell_context={0};

 static void parseCommand(shell_context_struct *context, const char* command) {
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b0b6      	sub	sp, #216	; 0xd8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
     char commandCopy[SHELL_BUFFER_SIZE+1];  // 复制命令，以便进行修改
     char *cmd_ptr;
     char* argv[10] = {};
 800e5c2:	f107 030c 	add.w	r3, r7, #12
 800e5c6:	2228      	movs	r2, #40	; 0x28
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f001 fea8 	bl	8010320 <memset>
	 char* param=NULL;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	 int valid_cmd=0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	 char* cmd_head;
	 const char *header="cmd";
 800e5dc:	4b4f      	ldr	r3, [pc, #316]	; (800e71c <parseCommand+0x164>)
 800e5de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

     strcpy(commandCopy, command);
 800e5e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e5e6:	6839      	ldr	r1, [r7, #0]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f001 ff89 	bl	8010500 <strcpy>
     console_cmds_t *cmds=NULL;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

     if(shell_con==0)
 800e5f4:	4b4a      	ldr	r3, [pc, #296]	; (800e720 <parseCommand+0x168>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f000 8086 	beq.w	800e70a <parseCommand+0x152>
         {
        	 return ;
         }

     cmd_head = strtok(commandCopy, " ");  // 使用空格和换行符分割命令
 800e5fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e602:	4948      	ldr	r1, [pc, #288]	; (800e724 <parseCommand+0x16c>)
 800e604:	4618      	mov	r0, r3
 800e606:	f001 fe93 	bl	8010330 <strtok>
 800e60a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
     if((strcmp(shell_con->head,cmd_head)!=0)&&(strcmp(cmd_head,header)!=0))//
 800e60e:	4b44      	ldr	r3, [pc, #272]	; (800e720 <parseCommand+0x168>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	3310      	adds	r3, #16
 800e614:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800e618:	4618      	mov	r0, r3
 800e61a:	f7f1 fe01 	bl	8000220 <strcmp>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d008      	beq.n	800e636 <parseCommand+0x7e>
 800e624:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800e628:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e62c:	f7f1 fdf8 	bl	8000220 <strcmp>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d16b      	bne.n	800e70e <parseCommand+0x156>
    	 usb_printf("parseAddrCommand err: %s\n", cmd_head);
#endif
				 return;
     }

     char* cmd = strtok(NULL, " \r\n");  // 使用空格和换行符分割命令
 800e636:	493c      	ldr	r1, [pc, #240]	; (800e728 <parseCommand+0x170>)
 800e638:	2000      	movs	r0, #0
 800e63a:	f001 fe79 	bl	8010330 <strtok>
 800e63e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
     if(strstr(cmd,"\r\n"))
 800e642:	493a      	ldr	r1, [pc, #232]	; (800e72c <parseCommand+0x174>)
 800e644:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800e648:	f001 fece 	bl	80103e8 <strstr>
     {

     }

     cmds=shell_con->tbl;
 800e64c:	4b34      	ldr	r3, [pc, #208]	; (800e720 <parseCommand+0x168>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     if (cmd != NULL) {
 800e656:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d04d      	beq.n	800e6fa <parseCommand+0x142>
    	 while(cmds!=NULL)
 800e65e:	e048      	b.n	800e6f2 <parseCommand+0x13a>
    	 {
    		 cmd_ptr=cmds->name;
 800e660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			 if (strcmp(cmd, cmd_ptr) == 0)
 800e66a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e66e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800e672:	f7f1 fdd5 	bl	8000220 <strcmp>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d135      	bne.n	800e6e8 <parseCommand+0x130>
			 {
#if shell_debug
				 usb_printf("parseCommand cmd: %s\n", cmd);
#endif
				 valid_cmd=1;
 800e67c:	2301      	movs	r3, #1
 800e67e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				 int param_len=0;
 800e682:	2300      	movs	r3, #0
 800e684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
				 param = strtok(NULL, " ");
 800e688:	4926      	ldr	r1, [pc, #152]	; (800e724 <parseCommand+0x16c>)
 800e68a:	2000      	movs	r0, #0
 800e68c:	f001 fe50 	bl	8010330 <strtok>
 800e690:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				 while((param!=NULL)&&(param_len<9))
 800e694:	e017      	b.n	800e6c6 <parseCommand+0x10e>
				 {
#if shell_debug
					 usb_printf("Param: %s\r\n", param);
#endif
					 argv[param_len]=param;
 800e696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	33d8      	adds	r3, #216	; 0xd8
 800e69e:	443b      	add	r3, r7
 800e6a0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e6a4:	f843 2ccc 	str.w	r2, [r3, #-204]
					 param_len++;
 800e6a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
					 if(param_len>=10)
 800e6b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6b6:	2b09      	cmp	r3, #9
 800e6b8:	dc2b      	bgt.n	800e712 <parseCommand+0x15a>
					 {
						 return;
					 }
					 param = strtok(NULL, " ");
 800e6ba:	491a      	ldr	r1, [pc, #104]	; (800e724 <parseCommand+0x16c>)
 800e6bc:	2000      	movs	r0, #0
 800e6be:	f001 fe37 	bl	8010330 <strtok>
 800e6c2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				 while((param!=NULL)&&(param_len<9))
 800e6c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d003      	beq.n	800e6d6 <parseCommand+0x11e>
 800e6ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6d2:	2b08      	cmp	r3, #8
 800e6d4:	dddf      	ble.n	800e696 <parseCommand+0xde>
				 }

				 cmds->cmd(context,param_len,argv);
 800e6d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	f107 020c 	add.w	r2, r7, #12
 800e6e0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	4798      	blx	r3

			 }
			 cmds=cmds->argv1_tbl;
 800e6e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    	 while(cmds!=NULL)
 800e6f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1b2      	bne.n	800e660 <parseCommand+0xa8>
    	 }

     }
     if(valid_cmd==0)
 800e6fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d108      	bne.n	800e714 <parseCommand+0x15c>
     {
    	 usb_printf("Invalid command....\r\n");
 800e702:	480b      	ldr	r0, [pc, #44]	; (800e730 <parseCommand+0x178>)
 800e704:	f000 fdf2 	bl	800f2ec <usb_printf>
 800e708:	e004      	b.n	800e714 <parseCommand+0x15c>
        	 return ;
 800e70a:	bf00      	nop
 800e70c:	e002      	b.n	800e714 <parseCommand+0x15c>
				 return;
 800e70e:	bf00      	nop
 800e710:	e000      	b.n	800e714 <parseCommand+0x15c>
						 return;
 800e712:	bf00      	nop
     }



 }
 800e714:	37d8      	adds	r7, #216	; 0xd8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	08013ce8 	.word	0x08013ce8
 800e720:	20002068 	.word	0x20002068
 800e724:	08013cec 	.word	0x08013cec
 800e728:	08013cf0 	.word	0x08013cf0
 800e72c:	08013cf4 	.word	0x08013cf4
 800e730:	08013cf8 	.word	0x08013cf8

0800e734 <shell_driver_main_loop>:

static int shell_driver_main_loop(uint8_t ch)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	4603      	mov	r3, r0
 800e73c:	71fb      	strb	r3, [r7, #7]

   shell_context.line[shell_context.c_pos++]=ch;
 800e73e:	4b18      	ldr	r3, [pc, #96]	; (800e7a0 <shell_driver_main_loop+0x6c>)
 800e740:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800e744:	1c5a      	adds	r2, r3, #1
 800e746:	b291      	uxth	r1, r2
 800e748:	4a15      	ldr	r2, [pc, #84]	; (800e7a0 <shell_driver_main_loop+0x6c>)
 800e74a:	f8a2 10b6 	strh.w	r1, [r2, #182]	; 0xb6
 800e74e:	461a      	mov	r2, r3
 800e750:	4b13      	ldr	r3, [pc, #76]	; (800e7a0 <shell_driver_main_loop+0x6c>)
 800e752:	4413      	add	r3, r2
 800e754:	79fa      	ldrb	r2, [r7, #7]
 800e756:	711a      	strb	r2, [r3, #4]
   if(shell_context.c_pos>=SHELL_BUFFER_SIZE)
 800e758:	4b11      	ldr	r3, [pc, #68]	; (800e7a0 <shell_driver_main_loop+0x6c>)
 800e75a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800e75e:	2b7f      	cmp	r3, #127	; 0x7f
 800e760:	d906      	bls.n	800e770 <shell_driver_main_loop+0x3c>
   {
	   shell_context.c_pos=0;
 800e762:	4b0f      	ldr	r3, [pc, #60]	; (800e7a0 <shell_driver_main_loop+0x6c>)
 800e764:	2200      	movs	r2, #0
 800e766:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	   usb_printf("shell_driver_main_loop pos err \r\n");
 800e76a:	480e      	ldr	r0, [pc, #56]	; (800e7a4 <shell_driver_main_loop+0x70>)
 800e76c:	f000 fdbe 	bl	800f2ec <usb_printf>
   }

   if(ch=='\n')//检测到换行符，增加\0
 800e770:	79fb      	ldrb	r3, [r7, #7]
 800e772:	2b0a      	cmp	r3, #10
 800e774:	d10f      	bne.n	800e796 <shell_driver_main_loop+0x62>
   {
	   shell_context.line[shell_context.c_pos]='\0';
 800e776:	4b0a      	ldr	r3, [pc, #40]	; (800e7a0 <shell_driver_main_loop+0x6c>)
 800e778:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800e77c:	461a      	mov	r2, r3
 800e77e:	4b08      	ldr	r3, [pc, #32]	; (800e7a0 <shell_driver_main_loop+0x6c>)
 800e780:	4413      	add	r3, r2
 800e782:	2200      	movs	r2, #0
 800e784:	711a      	strb	r2, [r3, #4]
	   parseCommand(&shell_context, shell_context.line);
 800e786:	4908      	ldr	r1, [pc, #32]	; (800e7a8 <shell_driver_main_loop+0x74>)
 800e788:	4805      	ldr	r0, [pc, #20]	; (800e7a0 <shell_driver_main_loop+0x6c>)
 800e78a:	f7ff ff15 	bl	800e5b8 <parseCommand>
	   shell_context.c_pos=0;//解析完清0
 800e78e:	4b04      	ldr	r3, [pc, #16]	; (800e7a0 <shell_driver_main_loop+0x6c>)
 800e790:	2200      	movs	r2, #0
 800e792:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

   }

	return 0;
 800e796:	2300      	movs	r3, #0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	2000206c 	.word	0x2000206c
 800e7a4:	08013d10 	.word	0x08013d10
 800e7a8:	20002070 	.word	0x20002070

0800e7ac <shell_console_hande>:


int shell_console_hande(uint8_t *dat,uint16_t len)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	807b      	strh	r3, [r7, #2]
	while(len--)
 800e7b8:	e006      	b.n	800e7c8 <shell_console_hande+0x1c>
	{
		shell_driver_main_loop(*dat++);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	1c5a      	adds	r2, r3, #1
 800e7be:	607a      	str	r2, [r7, #4]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7ff ffb6 	bl	800e734 <shell_driver_main_loop>
	while(len--)
 800e7c8:	887b      	ldrh	r3, [r7, #2]
 800e7ca:	1e5a      	subs	r2, r3, #1
 800e7cc:	807a      	strh	r2, [r7, #2]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d1f3      	bne.n	800e7ba <shell_console_hande+0xe>
	}

	return 0;
 800e7d2:	2300      	movs	r3, #0

}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <console_driver_init>:



void console_driver_init(bsp_console_parm *p_cnl_parm)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  if(p_cnl_parm==0)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d103      	bne.n	800e7f2 <console_driver_init+0x16>
  {
	  usb_printf("console_driver_init prr is null \r\n");
 800e7ea:	4807      	ldr	r0, [pc, #28]	; (800e808 <console_driver_init+0x2c>)
 800e7ec:	f000 fd7e 	bl	800f2ec <usb_printf>
	  return;
 800e7f0:	e006      	b.n	800e800 <console_driver_init+0x24>
  }
  shell_con=p_cnl_parm;
 800e7f2:	4a06      	ldr	r2, [pc, #24]	; (800e80c <console_driver_init+0x30>)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6013      	str	r3, [r2, #0]
  shell_context.c_pos=0;
 800e7f8:	4b05      	ldr	r3, [pc, #20]	; (800e810 <console_driver_init+0x34>)
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6


}
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	08013d34 	.word	0x08013d34
 800e80c:	20002068 	.word	0x20002068
 800e810:	2000206c 	.word	0x2000206c

0800e814 <__NVIC_SystemReset>:
{
 800e814:	b480      	push	{r7}
 800e816:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e818:	f3bf 8f4f 	dsb	sy
}
 800e81c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e81e:	4b06      	ldr	r3, [pc, #24]	; (800e838 <__NVIC_SystemReset+0x24>)
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e826:	4904      	ldr	r1, [pc, #16]	; (800e838 <__NVIC_SystemReset+0x24>)
 800e828:	4b04      	ldr	r3, [pc, #16]	; (800e83c <__NVIC_SystemReset+0x28>)
 800e82a:	4313      	orrs	r3, r2
 800e82c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e82e:	f3bf 8f4f 	dsb	sy
}
 800e832:	bf00      	nop
    __NOP();
 800e834:	bf00      	nop
 800e836:	e7fd      	b.n	800e834 <__NVIC_SystemReset+0x20>
 800e838:	e000ed00 	.word	0xe000ed00
 800e83c:	05fa0004 	.word	0x05fa0004

0800e840 <cmd_cali>:
/// @param context
/// @param argc
/// @param argv
/// @return
int cmd_cali(void *context, int argc, char **argv)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_res_read...parm-num:%d\n", argc);
#endif
    if (argc >= 1)
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	dd27      	ble.n	800e8a2 <cmd_cali+0x62>
    {
    	if(strcmp(*argv,"a+g")==0)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4915      	ldr	r1, [pc, #84]	; (800e8ac <cmd_cali+0x6c>)
 800e858:	4618      	mov	r0, r3
 800e85a:	f7f1 fce1 	bl	8000220 <strcmp>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10a      	bne.n	800e87a <cmd_cali+0x3a>
    	{
    		shell_printf("cali a+g \r\n");
 800e864:	4812      	ldr	r0, [pc, #72]	; (800e8b0 <cmd_cali+0x70>)
 800e866:	f000 fd41 	bl	800f2ec <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e86a:	4b12      	ldr	r3, [pc, #72]	; (800e8b4 <cmd_cali+0x74>)
 800e86c:	2201      	movs	r2, #1
 800e86e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.cali_flag = 1;
 800e872:	4b10      	ldr	r3, [pc, #64]	; (800e8b4 <cmd_cali+0x74>)
 800e874:	2201      	movs	r2, #1
 800e876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    	}
    	if(strcmp(*argv,"mag")==0)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	490e      	ldr	r1, [pc, #56]	; (800e8b8 <cmd_cali+0x78>)
 800e880:	4618      	mov	r0, r3
 800e882:	f7f1 fccd 	bl	8000220 <strcmp>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10a      	bne.n	800e8a2 <cmd_cali+0x62>
    	{
    		shell_printf("cali mag \r\n");
 800e88c:	480b      	ldr	r0, [pc, #44]	; (800e8bc <cmd_cali+0x7c>)
 800e88e:	f000 fd2d 	bl	800f2ec <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e892:	4b08      	ldr	r3, [pc, #32]	; (800e8b4 <cmd_cali+0x74>)
 800e894:	2201      	movs	r2, #1
 800e896:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.cali_flag = 2;
 800e89a:	4b06      	ldr	r3, [pc, #24]	; (800e8b4 <cmd_cali+0x74>)
 800e89c:	2202      	movs	r2, #2
 800e89e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    	}

    }
    return 0; // 返回执行结果，根据需要进行修改
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3710      	adds	r7, #16
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	08013d58 	.word	0x08013d58
 800e8b0:	08013d5c 	.word	0x08013d5c
 800e8b4:	20002154 	.word	0x20002154
 800e8b8:	08013d68 	.word	0x08013d68
 800e8bc:	08013d6c 	.word	0x08013d6c

0800e8c0 <cmd_reset>:
/// @param context
/// @param argc
/// @param argv
/// @return test ok  24.4.3 liu
int cmd_reset(void *context, int argc, char **argv)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid f" : : : "memory");
 800e8cc:	b671      	cpsid	f
}
 800e8ce:	bf00      	nop
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_reset...parm-num:%d\n", argc);
#endif
    __disable_fault_irq();
    NVIC_SystemReset();
 800e8d0:	f7ff ffa0 	bl	800e814 <__NVIC_SystemReset>

0800e8d4 <cmd_restore>:

    return 0; // 返回执行结果，根据需要进行修改
}

int cmd_restore(void *context, int argc, char **argv)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_reset...parm-num:%d\n", argc);
#endif

    HAL_FLASH_Unlock();
 800e8e0:	f7f3 fb56 	bl	8001f90 <HAL_FLASH_Unlock>
    FLASH_ErasePage(USER_FLASH_ADDR_START,1);
 800e8e4:	2101      	movs	r1, #1
 800e8e6:	4808      	ldr	r0, [pc, #32]	; (800e908 <cmd_restore+0x34>)
 800e8e8:	f7ff fd64 	bl	800e3b4 <FLASH_ErasePage>
    HAL_Delay(5);
 800e8ec:	2005      	movs	r0, #5
 800e8ee:	f7f3 f8f1 	bl	8001ad4 <HAL_Delay>
    HAL_FLASH_Unlock();
 800e8f2:	f7f3 fb4d 	bl	8001f90 <HAL_FLASH_Unlock>
    HAL_Delay(500);
 800e8f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e8fa:	f7f3 f8eb 	bl	8001ad4 <HAL_Delay>
  __ASM volatile ("cpsid f" : : : "memory");
 800e8fe:	b671      	cpsid	f
}
 800e900:	bf00      	nop
    __disable_fault_irq();
    NVIC_SystemReset();
 800e902:	f7ff ff87 	bl	800e814 <__NVIC_SystemReset>
 800e906:	bf00      	nop
 800e908:	0801f800 	.word	0x0801f800

0800e90c <cmd_output>:
/// @param context
/// @param argc
/// @param argv
/// @return
int cmd_output(void *context, int argc, char **argv)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
// 在这里执行 read 命令的逻辑
#if user_shell_debug
    shell_printf("cmd_ad_read...parm-num:%d\n", argc);
#endif

    if (argc >= 1)
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f340 80a8 	ble.w	800ea70 <cmd_output+0x164>
    {
    	if(strcmp(*argv,"euler")==0)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4955      	ldr	r1, [pc, #340]	; (800ea7c <cmd_output+0x170>)
 800e926:	4618      	mov	r0, r3
 800e928:	f7f1 fc7a 	bl	8000220 <strcmp>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10e      	bne.n	800e950 <cmd_output+0x44>
    	{
    		shell_printf("output euler \r\n");
 800e932:	4853      	ldr	r0, [pc, #332]	; (800ea80 <cmd_output+0x174>)
 800e934:	f000 fcda 	bl	800f2ec <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e938:	4b52      	ldr	r3, [pc, #328]	; (800ea84 <cmd_output+0x178>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800e940:	4b50      	ldr	r3, [pc, #320]	; (800ea84 <cmd_output+0x178>)
 800e942:	2201      	movs	r2, #1
 800e944:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 0;
 800e948:	4b4e      	ldr	r3, [pc, #312]	; (800ea84 <cmd_output+0x178>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}
    	if(strcmp(*argv,"quaternion")==0)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	494c      	ldr	r1, [pc, #304]	; (800ea88 <cmd_output+0x17c>)
 800e956:	4618      	mov	r0, r3
 800e958:	f7f1 fc62 	bl	8000220 <strcmp>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d10e      	bne.n	800e980 <cmd_output+0x74>
    	{
    		shell_printf("output quaternion \r\n");
 800e962:	484a      	ldr	r0, [pc, #296]	; (800ea8c <cmd_output+0x180>)
 800e964:	f000 fcc2 	bl	800f2ec <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e968:	4b46      	ldr	r3, [pc, #280]	; (800ea84 <cmd_output+0x178>)
 800e96a:	2201      	movs	r2, #1
 800e96c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800e970:	4b44      	ldr	r3, [pc, #272]	; (800ea84 <cmd_output+0x178>)
 800e972:	2201      	movs	r2, #1
 800e974:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 1;
 800e978:	4b42      	ldr	r3, [pc, #264]	; (800ea84 <cmd_output+0x178>)
 800e97a:	2201      	movs	r2, #1
 800e97c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"earth_a")==0)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4942      	ldr	r1, [pc, #264]	; (800ea90 <cmd_output+0x184>)
 800e986:	4618      	mov	r0, r3
 800e988:	f7f1 fc4a 	bl	8000220 <strcmp>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10e      	bne.n	800e9b0 <cmd_output+0xa4>
    	{
    		shell_printf("output earth_a \r\n");
 800e992:	4840      	ldr	r0, [pc, #256]	; (800ea94 <cmd_output+0x188>)
 800e994:	f000 fcaa 	bl	800f2ec <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e998:	4b3a      	ldr	r3, [pc, #232]	; (800ea84 <cmd_output+0x178>)
 800e99a:	2201      	movs	r2, #1
 800e99c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800e9a0:	4b38      	ldr	r3, [pc, #224]	; (800ea84 <cmd_output+0x178>)
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 2;
 800e9a8:	4b36      	ldr	r3, [pc, #216]	; (800ea84 <cmd_output+0x178>)
 800e9aa:	2202      	movs	r2, #2
 800e9ac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"acc")==0)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4938      	ldr	r1, [pc, #224]	; (800ea98 <cmd_output+0x18c>)
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7f1 fc32 	bl	8000220 <strcmp>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d10e      	bne.n	800e9e0 <cmd_output+0xd4>
    	{
    		shell_printf("output acc \r\n");
 800e9c2:	4836      	ldr	r0, [pc, #216]	; (800ea9c <cmd_output+0x190>)
 800e9c4:	f000 fc92 	bl	800f2ec <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e9c8:	4b2e      	ldr	r3, [pc, #184]	; (800ea84 <cmd_output+0x178>)
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800e9d0:	4b2c      	ldr	r3, [pc, #176]	; (800ea84 <cmd_output+0x178>)
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 3;
 800e9d8:	4b2a      	ldr	r3, [pc, #168]	; (800ea84 <cmd_output+0x178>)
 800e9da:	2203      	movs	r2, #3
 800e9dc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"gyro")==0)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	492e      	ldr	r1, [pc, #184]	; (800eaa0 <cmd_output+0x194>)
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7f1 fc1a 	bl	8000220 <strcmp>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d10e      	bne.n	800ea10 <cmd_output+0x104>
    	{
    		shell_printf("output gyro \r\n");
 800e9f2:	482c      	ldr	r0, [pc, #176]	; (800eaa4 <cmd_output+0x198>)
 800e9f4:	f000 fc7a 	bl	800f2ec <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800e9f8:	4b22      	ldr	r3, [pc, #136]	; (800ea84 <cmd_output+0x178>)
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800ea00:	4b20      	ldr	r3, [pc, #128]	; (800ea84 <cmd_output+0x178>)
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 4;
 800ea08:	4b1e      	ldr	r3, [pc, #120]	; (800ea84 <cmd_output+0x178>)
 800ea0a:	2204      	movs	r2, #4
 800ea0c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"mag")==0)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4924      	ldr	r1, [pc, #144]	; (800eaa8 <cmd_output+0x19c>)
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7f1 fc02 	bl	8000220 <strcmp>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d10e      	bne.n	800ea40 <cmd_output+0x134>
    	{
    		shell_printf("output mag \r\n");
 800ea22:	4822      	ldr	r0, [pc, #136]	; (800eaac <cmd_output+0x1a0>)
 800ea24:	f000 fc62 	bl	800f2ec <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800ea28:	4b16      	ldr	r3, [pc, #88]	; (800ea84 <cmd_output+0x178>)
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800ea30:	4b14      	ldr	r3, [pc, #80]	; (800ea84 <cmd_output+0x178>)
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 5;
 800ea38:	4b12      	ldr	r3, [pc, #72]	; (800ea84 <cmd_output+0x178>)
 800ea3a:	2205      	movs	r2, #5
 800ea3c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}

    	if(strcmp(*argv,"acc_gyro_mag")==0)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	491a      	ldr	r1, [pc, #104]	; (800eab0 <cmd_output+0x1a4>)
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7f1 fbea 	bl	8000220 <strcmp>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d10e      	bne.n	800ea70 <cmd_output+0x164>
    	{
    		shell_printf("output acc_gyro_mag \r\n");
 800ea52:	4818      	ldr	r0, [pc, #96]	; (800eab4 <cmd_output+0x1a8>)
 800ea54:	f000 fc4a 	bl	800f2ec <usb_printf>
    		imu_9.shell_cmd_ok = 1;
 800ea58:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <cmd_output+0x178>)
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    		imu_9.output_flag = 1;
 800ea60:	4b08      	ldr	r3, [pc, #32]	; (800ea84 <cmd_output+0x178>)
 800ea62:	2201      	movs	r2, #1
 800ea64:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    		imu_9.output_mode = 6;
 800ea68:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <cmd_output+0x178>)
 800ea6a:	2206      	movs	r2, #6
 800ea6c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    	}
    }

    return 0; // 返回执行结果，根据需要进行修改
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3710      	adds	r7, #16
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	08013d78 	.word	0x08013d78
 800ea80:	08013d80 	.word	0x08013d80
 800ea84:	20002154 	.word	0x20002154
 800ea88:	08013d90 	.word	0x08013d90
 800ea8c:	08013d9c 	.word	0x08013d9c
 800ea90:	08013db4 	.word	0x08013db4
 800ea94:	08013dbc 	.word	0x08013dbc
 800ea98:	08013dd0 	.word	0x08013dd0
 800ea9c:	08013dd4 	.word	0x08013dd4
 800eaa0:	08013de4 	.word	0x08013de4
 800eaa4:	08013dec 	.word	0x08013dec
 800eaa8:	08013d68 	.word	0x08013d68
 800eaac:	08013dfc 	.word	0x08013dfc
 800eab0:	08013e0c 	.word	0x08013e0c
 800eab4:	08013e1c 	.word	0x08013e1c

0800eab8 <user_shell_init>:
    .tbl = (console_cmds_t *)cmds,
    .prompt = 0,
    .head = {0}};

void user_shell_init(void)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
    char addr_str[10] = {0};
 800eabe:	2300      	movs	r3, #0
 800eac0:	603b      	str	r3, [r7, #0]
 800eac2:	1d3b      	adds	r3, r7, #4
 800eac4:	2200      	movs	r2, #0
 800eac6:	601a      	str	r2, [r3, #0]
 800eac8:	809a      	strh	r2, [r3, #4]

    strcpy(console_parm.head, addr_str);
 800eaca:	463b      	mov	r3, r7
 800eacc:	4619      	mov	r1, r3
 800eace:	4812      	ldr	r0, [pc, #72]	; (800eb18 <user_shell_init+0x60>)
 800ead0:	f001 fd16 	bl	8010500 <strcpy>

    console_driver_init(&console_parm);
 800ead4:	4811      	ldr	r0, [pc, #68]	; (800eb1c <user_shell_init+0x64>)
 800ead6:	f7ff fe81 	bl	800e7dc <console_driver_init>
    for (int i = 1; i < sizeof(cmds) / (sizeof(console_cmds_t)); i++) // 链表初始化
 800eada:	2301      	movs	r3, #1
 800eadc:	60fb      	str	r3, [r7, #12]
 800eade:	e013      	b.n	800eb08 <user_shell_init+0x50>
    {
        cmds[i - 1].argv1_tbl = &cmds[i];
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	1e5a      	subs	r2, r3, #1
 800eae4:	68f9      	ldr	r1, [r7, #12]
 800eae6:	460b      	mov	r3, r1
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	440b      	add	r3, r1
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	490c      	ldr	r1, [pc, #48]	; (800eb20 <user_shell_init+0x68>)
 800eaf0:	4419      	add	r1, r3
 800eaf2:	480b      	ldr	r0, [pc, #44]	; (800eb20 <user_shell_init+0x68>)
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	4413      	add	r3, r2
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	4403      	add	r3, r0
 800eafe:	3308      	adds	r3, #8
 800eb00:	6019      	str	r1, [r3, #0]
    for (int i = 1; i < sizeof(cmds) / (sizeof(console_cmds_t)); i++) // 链表初始化
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	3301      	adds	r3, #1
 800eb06:	60fb      	str	r3, [r7, #12]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d9e8      	bls.n	800eae0 <user_shell_init+0x28>
    }
}
 800eb0e:	bf00      	nop
 800eb10:	bf00      	nop
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	20000220 	.word	0x20000220
 800eb1c:	20000210 	.word	0x20000210
 800eb20:	200001e0 	.word	0x200001e0

0800eb24 <user_shell_recive_bytes>:
int user_shell_recive_bytes(uint8_t *data, int len)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	60fb      	str	r3, [r7, #12]
    ret = shell_console_hande(data, len);
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	4619      	mov	r1, r3
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff fe37 	bl	800e7ac <shell_console_hande>
 800eb3e:	60f8      	str	r0, [r7, #12]

    return ret;
 800eb40:	68fb      	ldr	r3, [r7, #12]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <window_filter>:
 * @param window_Array
 * @param i
 * @param sliding_Window_Length
 */
int16_t window_filter(int16_t data, int16_t *buf, uint8_t len)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b085      	sub	sp, #20
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	4603      	mov	r3, r0
 800eb52:	6039      	str	r1, [r7, #0]
 800eb54:	80fb      	strh	r3, [r7, #6]
 800eb56:	4613      	mov	r3, r2
 800eb58:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	int32_t sum = 0;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	60bb      	str	r3, [r7, #8]

	for (i = 1; i < len; i++)
 800eb5e:	2301      	movs	r3, #1
 800eb60:	73fb      	strb	r3, [r7, #15]
 800eb62:	e010      	b.n	800eb86 <window_filter+0x3c>
	{
		buf[i - 1] = buf[i];
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	683a      	ldr	r2, [r7, #0]
 800eb6a:	441a      	add	r2, r3
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
 800eb6e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb72:	3b01      	subs	r3, #1
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	6839      	ldr	r1, [r7, #0]
 800eb78:	440b      	add	r3, r1
 800eb7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800eb7e:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < len; i++)
 800eb80:	7bfb      	ldrb	r3, [r7, #15]
 800eb82:	3301      	adds	r3, #1
 800eb84:	73fb      	strb	r3, [r7, #15]
 800eb86:	7bfa      	ldrb	r2, [r7, #15]
 800eb88:	797b      	ldrb	r3, [r7, #5]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d3ea      	bcc.n	800eb64 <window_filter+0x1a>
	}
	buf[len - 1] = data;
 800eb8e:	797b      	ldrb	r3, [r7, #5]
 800eb90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb94:	3b01      	subs	r3, #1
 800eb96:	005b      	lsls	r3, r3, #1
 800eb98:	683a      	ldr	r2, [r7, #0]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	88fa      	ldrh	r2, [r7, #6]
 800eb9e:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < len; i++)
 800eba0:	2300      	movs	r3, #0
 800eba2:	73fb      	strb	r3, [r7, #15]
 800eba4:	e00c      	b.n	800ebc0 <window_filter+0x76>
	{
		sum += buf[i];
 800eba6:	7bfb      	ldrb	r3, [r7, #15]
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	4413      	add	r3, r2
 800ebae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < len; i++)
 800ebba:	7bfb      	ldrb	r3, [r7, #15]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	73fb      	strb	r3, [r7, #15]
 800ebc0:	7bfa      	ldrb	r2, [r7, #15]
 800ebc2:	797b      	ldrb	r3, [r7, #5]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d3ee      	bcc.n	800eba6 <window_filter+0x5c>
	}

	sum /= len;
 800ebc8:	797b      	ldrb	r3, [r7, #5]
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	fb92 f3f3 	sdiv	r3, r2, r3
 800ebd0:	60bb      	str	r3, [r7, #8]

	return sum;
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	b21b      	sxth	r3, r3
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
	...

0800ebe4 <read_flash_information>:
int16_t window_my[WIN_NUM];
int16_t window_mz[WIN_NUM];


void read_flash_information(void)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	af00      	add	r7, sp, #0

	STMFLASH_Read(ACC_ZERO_ADDR,(uint8_t*)&imu_9.acc_zero,6); //读取加速度零点
 800ebe8:	2206      	movs	r2, #6
 800ebea:	493c      	ldr	r1, [pc, #240]	; (800ecdc <read_flash_information+0xf8>)
 800ebec:	483c      	ldr	r0, [pc, #240]	; (800ece0 <read_flash_information+0xfc>)
 800ebee:	f7ff fc95 	bl	800e51c <STMFLASH_Read>
	STMFLASH_Read(GYRO_ZERO_ADDR,(uint8_t*)&imu_9.gyro_zero,6); //读取陀螺仪零点
 800ebf2:	2206      	movs	r2, #6
 800ebf4:	493b      	ldr	r1, [pc, #236]	; (800ece4 <read_flash_information+0x100>)
 800ebf6:	483c      	ldr	r0, [pc, #240]	; (800ece8 <read_flash_information+0x104>)
 800ebf8:	f7ff fc90 	bl	800e51c <STMFLASH_Read>
	STMFLASH_Read(MAG_ZERO_ADDR,(uint8_t*)&imu_9.mag_zero,6);  //读取磁力计零点
 800ebfc:	2206      	movs	r2, #6
 800ebfe:	493b      	ldr	r1, [pc, #236]	; (800ecec <read_flash_information+0x108>)
 800ec00:	483b      	ldr	r0, [pc, #236]	; (800ecf0 <read_flash_information+0x10c>)
 800ec02:	f7ff fc8b 	bl	800e51c <STMFLASH_Read>

    if(imu_9.acc_zero[0]==-1) //默认0点是0
 800ec06:	4b3b      	ldr	r3, [pc, #236]	; (800ecf4 <read_flash_information+0x110>)
 800ec08:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ec0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec10:	d103      	bne.n	800ec1a <read_flash_information+0x36>
    {
    	imu_9.acc_zero[0] = 0;
 800ec12:	4b38      	ldr	r3, [pc, #224]	; (800ecf4 <read_flash_information+0x110>)
 800ec14:	2200      	movs	r2, #0
 800ec16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    }
    if(imu_9.acc_zero[1]==-1)
 800ec1a:	4b36      	ldr	r3, [pc, #216]	; (800ecf4 <read_flash_information+0x110>)
 800ec1c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ec20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec24:	d103      	bne.n	800ec2e <read_flash_information+0x4a>
    {
    	imu_9.acc_zero[1] = 0;
 800ec26:	4b33      	ldr	r3, [pc, #204]	; (800ecf4 <read_flash_information+0x110>)
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    }
    if(imu_9.acc_zero[2]==-1)
 800ec2e:	4b31      	ldr	r3, [pc, #196]	; (800ecf4 <read_flash_information+0x110>)
 800ec30:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ec34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec38:	d103      	bne.n	800ec42 <read_flash_information+0x5e>
    {
    	imu_9.acc_zero[2] = 0;
 800ec3a:	4b2e      	ldr	r3, [pc, #184]	; (800ecf4 <read_flash_information+0x110>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    if(imu_9.gyro_zero[0]==-1)
 800ec42:	4b2c      	ldr	r3, [pc, #176]	; (800ecf4 <read_flash_information+0x110>)
 800ec44:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ec48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec4c:	d103      	bne.n	800ec56 <read_flash_information+0x72>
    {
    	imu_9.gyro_zero[0] = 0;
 800ec4e:	4b29      	ldr	r3, [pc, #164]	; (800ecf4 <read_flash_information+0x110>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    }
    if(imu_9.gyro_zero[1]==-1)
 800ec56:	4b27      	ldr	r3, [pc, #156]	; (800ecf4 <read_flash_information+0x110>)
 800ec58:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800ec5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec60:	d103      	bne.n	800ec6a <read_flash_information+0x86>
    {
    	imu_9.gyro_zero[1] = 0;
 800ec62:	4b24      	ldr	r3, [pc, #144]	; (800ecf4 <read_flash_information+0x110>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }
    if(imu_9.gyro_zero[2]==-1)
 800ec6a:	4b22      	ldr	r3, [pc, #136]	; (800ecf4 <read_flash_information+0x110>)
 800ec6c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ec70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec74:	d103      	bne.n	800ec7e <read_flash_information+0x9a>
    {
    	imu_9.acc_zero[2] = 0;
 800ec76:	4b1f      	ldr	r3, [pc, #124]	; (800ecf4 <read_flash_information+0x110>)
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    if(imu_9.mag_zero[0]==-1)
 800ec7e:	4b1d      	ldr	r3, [pc, #116]	; (800ecf4 <read_flash_information+0x110>)
 800ec80:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800ec84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec88:	d103      	bne.n	800ec92 <read_flash_information+0xae>
    {
    	imu_9.mag_zero[0] = 0;
 800ec8a:	4b1a      	ldr	r3, [pc, #104]	; (800ecf4 <read_flash_information+0x110>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    }
    if(imu_9.mag_zero[1]==-1)
 800ec92:	4b18      	ldr	r3, [pc, #96]	; (800ecf4 <read_flash_information+0x110>)
 800ec94:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800ec98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec9c:	d103      	bne.n	800eca6 <read_flash_information+0xc2>
    {
    	imu_9.mag_zero[1] = 0;
 800ec9e:	4b15      	ldr	r3, [pc, #84]	; (800ecf4 <read_flash_information+0x110>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
    if(imu_9.mag_zero[2]==-1)
 800eca6:	4b13      	ldr	r3, [pc, #76]	; (800ecf4 <read_flash_information+0x110>)
 800eca8:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800ecac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb0:	d103      	bne.n	800ecba <read_flash_information+0xd6>
    {
    	imu_9.mag_zero[2] = 0;
 800ecb2:	4b10      	ldr	r3, [pc, #64]	; (800ecf4 <read_flash_information+0x110>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    }


    STMFLASH_Read(OUTPUT_ADDR,(uint8_t*)&imu_9.output_mode,1); //读取数据输出模式
 800ecba:	2201      	movs	r2, #1
 800ecbc:	490e      	ldr	r1, [pc, #56]	; (800ecf8 <read_flash_information+0x114>)
 800ecbe:	480f      	ldr	r0, [pc, #60]	; (800ecfc <read_flash_information+0x118>)
 800ecc0:	f7ff fc2c 	bl	800e51c <STMFLASH_Read>
    if(imu_9.output_mode==0xFF)
 800ecc4:	4b0b      	ldr	r3, [pc, #44]	; (800ecf4 <read_flash_information+0x110>)
 800ecc6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ecca:	2bff      	cmp	r3, #255	; 0xff
 800eccc:	d103      	bne.n	800ecd6 <read_flash_information+0xf2>
    {
    	imu_9.output_mode = 0; //默认欧拉角输出
 800ecce:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <read_flash_information+0x110>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    }

}
 800ecd6:	bf00      	nop
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	2000219a 	.word	0x2000219a
 800ece0:	0801f800 	.word	0x0801f800
 800ece4:	20002194 	.word	0x20002194
 800ece8:	0801f806 	.word	0x0801f806
 800ecec:	200021a0 	.word	0x200021a0
 800ecf0:	0801f80c 	.word	0x0801f80c
 800ecf4:	20002154 	.word	0x20002154
 800ecf8:	200021dd 	.word	0x200021dd
 800ecfc:	0801f812 	.word	0x0801f812

0800ed00 <imu_init>:


void imu_init(void)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
	uint8_t test_id_ag = 0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	71fb      	strb	r3, [r7, #7]
	uint8_t test_id_mag = 0;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	71bb      	strb	r3, [r7, #6]
	test_id_ag = acc_gyro_init();
 800ed0e:	f7fd fc1b 	bl	800c548 <acc_gyro_init>
 800ed12:	4603      	mov	r3, r0
 800ed14:	71fb      	strb	r3, [r7, #7]
    test_id_mag = mag_init();
 800ed16:	f7fd fd93 	bl	800c840 <mag_init>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	71bb      	strb	r3, [r7, #6]

    read_flash_information();
 800ed1e:	f7ff ff61 	bl	800ebe4 <read_flash_information>
    init_attitude(&attitude);
 800ed22:	4806      	ldr	r0, [pc, #24]	; (800ed3c <imu_init+0x3c>)
 800ed24:	f7fd ff06 	bl	800cb34 <init_attitude>

    HAL_Delay(100);
 800ed28:	2064      	movs	r0, #100	; 0x64
 800ed2a:	f7f2 fed3 	bl	8001ad4 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim2);
 800ed2e:	4804      	ldr	r0, [pc, #16]	; (800ed40 <imu_init+0x40>)
 800ed30:	f7f7 f874 	bl	8005e1c <HAL_TIM_Base_Start_IT>
}
 800ed34:	bf00      	nop
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	2000178c 	.word	0x2000178c
 800ed40:	200004c0 	.word	0x200004c0

0800ed44 <imu_sample_data>:


void imu_sample_data(void)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	af00      	add	r7, sp, #0
	acc_gyro_sample_data(imu_9.i_gyro,imu_9.i_acc);
 800ed48:	4904      	ldr	r1, [pc, #16]	; (800ed5c <imu_sample_data+0x18>)
 800ed4a:	4805      	ldr	r0, [pc, #20]	; (800ed60 <imu_sample_data+0x1c>)
 800ed4c:	f7fd fc3a 	bl	800c5c4 <acc_gyro_sample_data>
	mag_sample_data(imu_9.i_mag);
 800ed50:	4804      	ldr	r0, [pc, #16]	; (800ed64 <imu_sample_data+0x20>)
 800ed52:	f7fd fd43 	bl	800c7dc <mag_sample_data>

//    usb_printf("gyro_x=%d , gyro_y=%d,gyro_z=%d\r\n",imu_9.i_gyro[0],imu_9.i_gyro[1],imu_9.i_gyro[2]);
//    usb_printf("acc_x=%d , acc_y=%d,acc_z=%d\r\n",imu_9.i_acc[0],imu_9.i_acc[1],imu_9.i_acc[2]);
//    usb_printf("mag_x=%d , mag_y=%d,mag_z=%d\r\n",imu_9.i_mag[0],imu_9.i_mag[1],imu_9.i_mag[2]);
//	usb_printf("\r\n");
}
 800ed56:	bf00      	nop
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	2000215a 	.word	0x2000215a
 800ed60:	20002154 	.word	0x20002154
 800ed64:	20002160 	.word	0x20002160

0800ed68 <imu_data_transition>:

//将九轴数据转换为实际物理数据
void imu_data_transition(int16_t ax,int16_t ay,int16_t az,int16_t gx,int16_t gy,int16_t gz,int16_t mx,int16_t my,int16_t mz)
{
 800ed68:	b490      	push	{r4, r7}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	4611      	mov	r1, r2
 800ed74:	461a      	mov	r2, r3
 800ed76:	4623      	mov	r3, r4
 800ed78:	80fb      	strh	r3, [r7, #6]
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	80bb      	strh	r3, [r7, #4]
 800ed7e:	460b      	mov	r3, r1
 800ed80:	807b      	strh	r3, [r7, #2]
 800ed82:	4613      	mov	r3, r2
 800ed84:	803b      	strh	r3, [r7, #0]

	imu_9.f_acc[0] = (float)(ax-imu_9.acc_zero[0])/ 16393.0f;  // 加速度量程为:±2G      获取到的加速度计数据 除以 16393 ，可以转化为带物理单位的数据，单位：g(m/s^2)
 800ed86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed8a:	4a4e      	ldr	r2, [pc, #312]	; (800eec4 <imu_data_transition+0x15c>)
 800ed8c:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800ed90:	1a9b      	subs	r3, r3, r2
 800ed92:	ee07 3a90 	vmov	s15, r3
 800ed96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ed9a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800eec8 <imu_data_transition+0x160>
 800ed9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eda2:	4b48      	ldr	r3, [pc, #288]	; (800eec4 <imu_data_transition+0x15c>)
 800eda4:	edc3 7a08 	vstr	s15, [r3, #32]
	imu_9.f_acc[1] = (float)(ay-imu_9.acc_zero[1]) / 16393.0f;
 800eda8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800edac:	4a45      	ldr	r2, [pc, #276]	; (800eec4 <imu_data_transition+0x15c>)
 800edae:	f9b2 2048 	ldrsh.w	r2, [r2, #72]	; 0x48
 800edb2:	1a9b      	subs	r3, r3, r2
 800edb4:	ee07 3a90 	vmov	s15, r3
 800edb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800edbc:	eddf 6a42 	vldr	s13, [pc, #264]	; 800eec8 <imu_data_transition+0x160>
 800edc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edc4:	4b3f      	ldr	r3, [pc, #252]	; (800eec4 <imu_data_transition+0x15c>)
 800edc6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu_9.f_acc[2] = (float)(az-imu_9.acc_zero[2]) / 16393.0f;
 800edca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800edce:	4a3d      	ldr	r2, [pc, #244]	; (800eec4 <imu_data_transition+0x15c>)
 800edd0:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800edd4:	1a9b      	subs	r3, r3, r2
 800edd6:	ee07 3a90 	vmov	s15, r3
 800edda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800edde:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800eec8 <imu_data_transition+0x160>
 800ede2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ede6:	4b37      	ldr	r3, [pc, #220]	; (800eec4 <imu_data_transition+0x15c>)
 800ede8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	imu_9.f_gyro[0] = (float)(gx-imu_9.gyro_zero[0]) / 57.1f; //  陀螺仪量程为:±500dps  获取到的陀螺仪数据除以 57.1，    可以转化为带物理单位的数据，单位为：°/s
 800edec:	f9b7 3000 	ldrsh.w	r3, [r7]
 800edf0:	4a34      	ldr	r2, [pc, #208]	; (800eec4 <imu_data_transition+0x15c>)
 800edf2:	f9b2 2040 	ldrsh.w	r2, [r2, #64]	; 0x40
 800edf6:	1a9b      	subs	r3, r3, r2
 800edf8:	ee07 3a90 	vmov	s15, r3
 800edfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee00:	eddf 6a32 	vldr	s13, [pc, #200]	; 800eecc <imu_data_transition+0x164>
 800ee04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee08:	4b2e      	ldr	r3, [pc, #184]	; (800eec4 <imu_data_transition+0x15c>)
 800ee0a:	edc3 7a05 	vstr	s15, [r3, #20]
	imu_9.f_gyro[1] = (float)(gy-imu_9.gyro_zero[1]) / 57.1f;
 800ee0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ee12:	4a2c      	ldr	r2, [pc, #176]	; (800eec4 <imu_data_transition+0x15c>)
 800ee14:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 800ee18:	1a9b      	subs	r3, r3, r2
 800ee1a:	ee07 3a90 	vmov	s15, r3
 800ee1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee22:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800eecc <imu_data_transition+0x164>
 800ee26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee2a:	4b26      	ldr	r3, [pc, #152]	; (800eec4 <imu_data_transition+0x15c>)
 800ee2c:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_9.f_gyro[2] = (float)(gz-imu_9.gyro_zero[2]) / 57.1f;
 800ee30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee34:	4a23      	ldr	r2, [pc, #140]	; (800eec4 <imu_data_transition+0x15c>)
 800ee36:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	; 0x44
 800ee3a:	1a9b      	subs	r3, r3, r2
 800ee3c:	ee07 3a90 	vmov	s15, r3
 800ee40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee44:	eddf 6a21 	vldr	s13, [pc, #132]	; 800eecc <imu_data_transition+0x164>
 800ee48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee4c:	4b1d      	ldr	r3, [pc, #116]	; (800eec4 <imu_data_transition+0x15c>)
 800ee4e:	edc3 7a07 	vstr	s15, [r3, #28]

	imu_9.f_mag[0] = (float)(mx+imu_9.mag_zero[0]) * 1.5f;
 800ee52:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ee56:	4a1b      	ldr	r2, [pc, #108]	; (800eec4 <imu_data_transition+0x15c>)
 800ee58:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800ee5c:	4413      	add	r3, r2
 800ee5e:	ee07 3a90 	vmov	s15, r3
 800ee62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee66:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800ee6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee6e:	4b15      	ldr	r3, [pc, #84]	; (800eec4 <imu_data_transition+0x15c>)
 800ee70:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	imu_9.f_mag[1] = (float)(my+imu_9.mag_zero[1]) * 1.5f;
 800ee74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ee78:	4a12      	ldr	r2, [pc, #72]	; (800eec4 <imu_data_transition+0x15c>)
 800ee7a:	f9b2 204e 	ldrsh.w	r2, [r2, #78]	; 0x4e
 800ee7e:	4413      	add	r3, r2
 800ee80:	ee07 3a90 	vmov	s15, r3
 800ee84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee88:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800ee8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee90:	4b0c      	ldr	r3, [pc, #48]	; (800eec4 <imu_data_transition+0x15c>)
 800ee92:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	imu_9.f_mag[2] = (float)(mz+imu_9.mag_zero[2]) * 1.5f;
 800ee96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee9a:	4a0a      	ldr	r2, [pc, #40]	; (800eec4 <imu_data_transition+0x15c>)
 800ee9c:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800eea0:	4413      	add	r3, r2
 800eea2:	ee07 3a90 	vmov	s15, r3
 800eea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eeaa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800eeae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eeb2:	4b04      	ldr	r3, [pc, #16]	; (800eec4 <imu_data_transition+0x15c>)
 800eeb4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34



}
 800eeb8:	bf00      	nop
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bc90      	pop	{r4, r7}
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	20002154 	.word	0x20002154
 800eec8:	46801200 	.word	0x46801200
 800eecc:	42646666 	.word	0x42646666

0800eed0 <imu_final_data_get>:

void imu_final_data_get(void)
{
 800eed0:	b590      	push	{r4, r7, lr}
 800eed2:	b08d      	sub	sp, #52	; 0x34
 800eed4:	af06      	add	r7, sp, #24
	int16_t filter_ax ,filter_ay,filter_az ;
	int16_t filter_gx ,filter_gy,filter_gz ;
	int16_t filter_mx ,filter_my,filter_mz ;

	  imu_sample_data(); //采样得到九轴原始数据
 800eed6:	f7ff ff35 	bl	800ed44 <imu_sample_data>
	  //原始数据窗口滤波
	  filter_ax = window_filter(imu_9.i_acc[0],window_ax,WIN_NUM);
 800eeda:	4b3c      	ldr	r3, [pc, #240]	; (800efcc <imu_final_data_get+0xfc>)
 800eedc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800eee0:	2205      	movs	r2, #5
 800eee2:	493b      	ldr	r1, [pc, #236]	; (800efd0 <imu_final_data_get+0x100>)
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7ff fe30 	bl	800eb4a <window_filter>
 800eeea:	4603      	mov	r3, r0
 800eeec:	82fb      	strh	r3, [r7, #22]
	  filter_ay = window_filter(imu_9.i_acc[1],window_ay,WIN_NUM);
 800eeee:	4b37      	ldr	r3, [pc, #220]	; (800efcc <imu_final_data_get+0xfc>)
 800eef0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eef4:	2205      	movs	r2, #5
 800eef6:	4937      	ldr	r1, [pc, #220]	; (800efd4 <imu_final_data_get+0x104>)
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff fe26 	bl	800eb4a <window_filter>
 800eefe:	4603      	mov	r3, r0
 800ef00:	82bb      	strh	r3, [r7, #20]
	  filter_az = window_filter(imu_9.i_acc[2],window_az,WIN_NUM);
 800ef02:	4b32      	ldr	r3, [pc, #200]	; (800efcc <imu_final_data_get+0xfc>)
 800ef04:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ef08:	2205      	movs	r2, #5
 800ef0a:	4933      	ldr	r1, [pc, #204]	; (800efd8 <imu_final_data_get+0x108>)
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff fe1c 	bl	800eb4a <window_filter>
 800ef12:	4603      	mov	r3, r0
 800ef14:	827b      	strh	r3, [r7, #18]

	  filter_gx = window_filter(imu_9.i_gyro[0],window_gx,WIN_NUM);
 800ef16:	4b2d      	ldr	r3, [pc, #180]	; (800efcc <imu_final_data_get+0xfc>)
 800ef18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef1c:	2205      	movs	r2, #5
 800ef1e:	492f      	ldr	r1, [pc, #188]	; (800efdc <imu_final_data_get+0x10c>)
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff fe12 	bl	800eb4a <window_filter>
 800ef26:	4603      	mov	r3, r0
 800ef28:	823b      	strh	r3, [r7, #16]
	  filter_gy = window_filter(imu_9.i_gyro[1],window_gy,WIN_NUM);
 800ef2a:	4b28      	ldr	r3, [pc, #160]	; (800efcc <imu_final_data_get+0xfc>)
 800ef2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef30:	2205      	movs	r2, #5
 800ef32:	492b      	ldr	r1, [pc, #172]	; (800efe0 <imu_final_data_get+0x110>)
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7ff fe08 	bl	800eb4a <window_filter>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	81fb      	strh	r3, [r7, #14]
	  filter_gz = window_filter(imu_9.i_gyro[2],window_gz,WIN_NUM);
 800ef3e:	4b23      	ldr	r3, [pc, #140]	; (800efcc <imu_final_data_get+0xfc>)
 800ef40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ef44:	2205      	movs	r2, #5
 800ef46:	4927      	ldr	r1, [pc, #156]	; (800efe4 <imu_final_data_get+0x114>)
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7ff fdfe 	bl	800eb4a <window_filter>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	81bb      	strh	r3, [r7, #12]

	  filter_mx = window_filter(imu_9.i_mag[0],window_mx,WIN_NUM);
 800ef52:	4b1e      	ldr	r3, [pc, #120]	; (800efcc <imu_final_data_get+0xfc>)
 800ef54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ef58:	2205      	movs	r2, #5
 800ef5a:	4923      	ldr	r1, [pc, #140]	; (800efe8 <imu_final_data_get+0x118>)
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7ff fdf4 	bl	800eb4a <window_filter>
 800ef62:	4603      	mov	r3, r0
 800ef64:	817b      	strh	r3, [r7, #10]
	  filter_my = window_filter(imu_9.i_mag[1],window_my,WIN_NUM);
 800ef66:	4b19      	ldr	r3, [pc, #100]	; (800efcc <imu_final_data_get+0xfc>)
 800ef68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ef6c:	2205      	movs	r2, #5
 800ef6e:	491f      	ldr	r1, [pc, #124]	; (800efec <imu_final_data_get+0x11c>)
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7ff fdea 	bl	800eb4a <window_filter>
 800ef76:	4603      	mov	r3, r0
 800ef78:	813b      	strh	r3, [r7, #8]
	  filter_mz = window_filter(imu_9.i_mag[2],window_mz,WIN_NUM);
 800ef7a:	4b14      	ldr	r3, [pc, #80]	; (800efcc <imu_final_data_get+0xfc>)
 800ef7c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800ef80:	2205      	movs	r2, #5
 800ef82:	491b      	ldr	r1, [pc, #108]	; (800eff0 <imu_final_data_get+0x120>)
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7ff fde0 	bl	800eb4a <window_filter>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	80fb      	strh	r3, [r7, #6]
	  //转换成实际物理量
	  imu_data_transition(filter_ax,filter_ay,filter_az,filter_gx,filter_gy,filter_gz,filter_mx,filter_my,filter_mz);
 800ef8e:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 800ef92:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ef96:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800ef9a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800ef9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efa2:	9304      	str	r3, [sp, #16]
 800efa4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800efa8:	9303      	str	r3, [sp, #12]
 800efaa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800efae:	9302      	str	r3, [sp, #8]
 800efb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800efb4:	9301      	str	r3, [sp, #4]
 800efb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	4623      	mov	r3, r4
 800efbe:	f7ff fed3 	bl	800ed68 <imu_data_transition>

}
 800efc2:	bf00      	nop
 800efc4:	371c      	adds	r7, #28
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd90      	pop	{r4, r7, pc}
 800efca:	bf00      	nop
 800efcc:	20002154 	.word	0x20002154
 800efd0:	200021e0 	.word	0x200021e0
 800efd4:	200021ec 	.word	0x200021ec
 800efd8:	200021f8 	.word	0x200021f8
 800efdc:	20002204 	.word	0x20002204
 800efe0:	20002210 	.word	0x20002210
 800efe4:	2000221c 	.word	0x2000221c
 800efe8:	20002228 	.word	0x20002228
 800efec:	20002234 	.word	0x20002234
 800eff0:	20002240 	.word	0x20002240

0800eff4 <imu_9_shell_cmd_to_do>:


void imu_9_shell_cmd_to_do(void)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	af00      	add	r7, sp, #0
	if(imu_9.shell_cmd_ok==1)
 800eff8:	4b1a      	ldr	r3, [pc, #104]	; (800f064 <imu_9_shell_cmd_to_do+0x70>)
 800effa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800effe:	2b01      	cmp	r3, #1
 800f000:	d12d      	bne.n	800f05e <imu_9_shell_cmd_to_do+0x6a>
	{
		imu_9.shell_cmd_ok = 0;
 800f002:	4b18      	ldr	r3, [pc, #96]	; (800f064 <imu_9_shell_cmd_to_do+0x70>)
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	    if(imu_9.cali_flag!=0)  //校准
 800f00a:	4b16      	ldr	r3, [pc, #88]	; (800f064 <imu_9_shell_cmd_to_do+0x70>)
 800f00c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f010:	2b00      	cmp	r3, #0
 800f012:	d016      	beq.n	800f042 <imu_9_shell_cmd_to_do+0x4e>
	    {
	    	if(imu_9.cali_flag==1)
 800f014:	4b13      	ldr	r3, [pc, #76]	; (800f064 <imu_9_shell_cmd_to_do+0x70>)
 800f016:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d106      	bne.n	800f02c <imu_9_shell_cmd_to_do+0x38>
	    	{
	    		set_acc_gyro_offset();
 800f01e:	f7fd fb2f 	bl	800c680 <set_acc_gyro_offset>
	    		imu_9.cali_flag = 0;
 800f022:	4b10      	ldr	r3, [pc, #64]	; (800f064 <imu_9_shell_cmd_to_do+0x70>)
 800f024:	2200      	movs	r2, #0
 800f026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800f02a:	e00a      	b.n	800f042 <imu_9_shell_cmd_to_do+0x4e>
	    	}
	    	else if(imu_9.cali_flag==2)
 800f02c:	4b0d      	ldr	r3, [pc, #52]	; (800f064 <imu_9_shell_cmd_to_do+0x70>)
 800f02e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f032:	2b02      	cmp	r3, #2
 800f034:	d105      	bne.n	800f042 <imu_9_shell_cmd_to_do+0x4e>
	    	{
	    		mag_set_offset();
 800f036:	f7fd fc4b 	bl	800c8d0 <mag_set_offset>
	    		imu_9.cali_flag = 0;
 800f03a:	4b0a      	ldr	r3, [pc, #40]	; (800f064 <imu_9_shell_cmd_to_do+0x70>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	    	}
	    }
	    if(imu_9.output_flag!=0)  //数据输出
 800f042:	4b08      	ldr	r3, [pc, #32]	; (800f064 <imu_9_shell_cmd_to_do+0x70>)
 800f044:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d008      	beq.n	800f05e <imu_9_shell_cmd_to_do+0x6a>
	    {
	    	STMFLASH_Write(OUTPUT_ADDR,&imu_9.output_mode,1);
 800f04c:	2201      	movs	r2, #1
 800f04e:	4906      	ldr	r1, [pc, #24]	; (800f068 <imu_9_shell_cmd_to_do+0x74>)
 800f050:	4806      	ldr	r0, [pc, #24]	; (800f06c <imu_9_shell_cmd_to_do+0x78>)
 800f052:	f7ff f9d5 	bl	800e400 <STMFLASH_Write>
	    	imu_9.output_flag = 0;
 800f056:	4b03      	ldr	r3, [pc, #12]	; (800f064 <imu_9_shell_cmd_to_do+0x70>)
 800f058:	2200      	movs	r2, #0
 800f05a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	    }

	}

}
 800f05e:	bf00      	nop
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	20002154 	.word	0x20002154
 800f068:	200021dd 	.word	0x200021dd
 800f06c:	0801f812 	.word	0x0801f812

0800f070 <data_output_mode>:

void data_output_mode(uint8_t mode)  //数据输出模式,vofa+查看曲线图形
{
 800f070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f074:	b09c      	sub	sp, #112	; 0x70
 800f076:	af10      	add	r7, sp, #64	; 0x40
 800f078:	4603      	mov	r3, r0
 800f07a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	switch(mode)
 800f07e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f082:	2b06      	cmp	r3, #6
 800f084:	f200 80ea 	bhi.w	800f25c <data_output_mode+0x1ec>
 800f088:	a201      	add	r2, pc, #4	; (adr r2, 800f090 <data_output_mode+0x20>)
 800f08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08e:	bf00      	nop
 800f090:	0800f0ad 	.word	0x0800f0ad
 800f094:	0800f0d5 	.word	0x0800f0d5
 800f098:	0800f103 	.word	0x0800f103
 800f09c:	0800f12b 	.word	0x0800f12b
 800f0a0:	0800f153 	.word	0x0800f153
 800f0a4:	0800f17b 	.word	0x0800f17b
 800f0a8:	0800f1a3 	.word	0x0800f1a3
	{
	case 0:  //欧拉角输出
		vofa_FireWater_USB_output(attitude.data.rol, attitude.data.pitch, attitude.data.yaw,0.0f);
 800f0ac:	4b6e      	ldr	r3, [pc, #440]	; (800f268 <data_output_mode+0x1f8>)
 800f0ae:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800f0b2:	4b6d      	ldr	r3, [pc, #436]	; (800f268 <data_output_mode+0x1f8>)
 800f0b4:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800f0b8:	4b6b      	ldr	r3, [pc, #428]	; (800f268 <data_output_mode+0x1f8>)
 800f0ba:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800f0be:	eddf 1a6b 	vldr	s3, [pc, #428]	; 800f26c <data_output_mode+0x1fc>
 800f0c2:	eeb0 1a66 	vmov.f32	s2, s13
 800f0c6:	eef0 0a47 	vmov.f32	s1, s14
 800f0ca:	eeb0 0a67 	vmov.f32	s0, s15
 800f0ce:	f000 f933 	bl	800f338 <vofa_FireWater_USB_output>
		break;
 800f0d2:	e0c4      	b.n	800f25e <data_output_mode+0x1ee>
	case 1: //四元数输出
		vofa_FireWater_USB_output(attitude.process.quaternion[0],attitude.process.quaternion[1],attitude.process.quaternion[2],attitude.process.quaternion[3]);
 800f0d4:	4b64      	ldr	r3, [pc, #400]	; (800f268 <data_output_mode+0x1f8>)
 800f0d6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800f0da:	4b63      	ldr	r3, [pc, #396]	; (800f268 <data_output_mode+0x1f8>)
 800f0dc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800f0e0:	4b61      	ldr	r3, [pc, #388]	; (800f268 <data_output_mode+0x1f8>)
 800f0e2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800f0e6:	4b60      	ldr	r3, [pc, #384]	; (800f268 <data_output_mode+0x1f8>)
 800f0e8:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800f0ec:	eef0 1a46 	vmov.f32	s3, s12
 800f0f0:	eeb0 1a66 	vmov.f32	s2, s13
 800f0f4:	eef0 0a47 	vmov.f32	s1, s14
 800f0f8:	eeb0 0a67 	vmov.f32	s0, s15
 800f0fc:	f000 f91c 	bl	800f338 <vofa_FireWater_USB_output>

		break;
 800f100:	e0ad      	b.n	800f25e <data_output_mode+0x1ee>
	case 2://世界加速度输出
		vofa_FireWater_USB_output(attitude.data.acc_world.x,attitude.data.acc_world.y,attitude.data.acc_world.z,2.0f);
 800f102:	4b59      	ldr	r3, [pc, #356]	; (800f268 <data_output_mode+0x1f8>)
 800f104:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f108:	4b57      	ldr	r3, [pc, #348]	; (800f268 <data_output_mode+0x1f8>)
 800f10a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f10e:	4b56      	ldr	r3, [pc, #344]	; (800f268 <data_output_mode+0x1f8>)
 800f110:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800f114:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800f118:	eeb0 1a66 	vmov.f32	s2, s13
 800f11c:	eef0 0a47 	vmov.f32	s1, s14
 800f120:	eeb0 0a67 	vmov.f32	s0, s15
 800f124:	f000 f908 	bl	800f338 <vofa_FireWater_USB_output>
		break;
 800f128:	e099      	b.n	800f25e <data_output_mode+0x1ee>
	case 3://加速度 数据输出  单位：g(m/s^2)
		vofa_FireWater_USB_output(imu_9.f_acc[0],imu_9.f_acc[1],imu_9.f_acc[2],3.0f);
 800f12a:	4b51      	ldr	r3, [pc, #324]	; (800f270 <data_output_mode+0x200>)
 800f12c:	edd3 7a08 	vldr	s15, [r3, #32]
 800f130:	4b4f      	ldr	r3, [pc, #316]	; (800f270 <data_output_mode+0x200>)
 800f132:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f136:	4b4e      	ldr	r3, [pc, #312]	; (800f270 <data_output_mode+0x200>)
 800f138:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800f13c:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 800f140:	eeb0 1a66 	vmov.f32	s2, s13
 800f144:	eef0 0a47 	vmov.f32	s1, s14
 800f148:	eeb0 0a67 	vmov.f32	s0, s15
 800f14c:	f000 f8f4 	bl	800f338 <vofa_FireWater_USB_output>
		break;
 800f150:	e085      	b.n	800f25e <data_output_mode+0x1ee>
	case 4://陀螺仪数据输出  单位为：°/s
		vofa_FireWater_USB_output(imu_9.f_gyro[0],imu_9.f_gyro[1],imu_9.f_gyro[2],4.0f);
 800f152:	4b47      	ldr	r3, [pc, #284]	; (800f270 <data_output_mode+0x200>)
 800f154:	edd3 7a05 	vldr	s15, [r3, #20]
 800f158:	4b45      	ldr	r3, [pc, #276]	; (800f270 <data_output_mode+0x200>)
 800f15a:	ed93 7a06 	vldr	s14, [r3, #24]
 800f15e:	4b44      	ldr	r3, [pc, #272]	; (800f270 <data_output_mode+0x200>)
 800f160:	edd3 6a07 	vldr	s13, [r3, #28]
 800f164:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800f168:	eeb0 1a66 	vmov.f32	s2, s13
 800f16c:	eef0 0a47 	vmov.f32	s1, s14
 800f170:	eeb0 0a67 	vmov.f32	s0, s15
 800f174:	f000 f8e0 	bl	800f338 <vofa_FireWater_USB_output>
		break;
 800f178:	e071      	b.n	800f25e <data_output_mode+0x1ee>
	case 5://地磁数据输出
		vofa_FireWater_USB_output(imu_9.f_mag[0],imu_9.f_mag[1],imu_9.f_mag[2],5.0f);
 800f17a:	4b3d      	ldr	r3, [pc, #244]	; (800f270 <data_output_mode+0x200>)
 800f17c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f180:	4b3b      	ldr	r3, [pc, #236]	; (800f270 <data_output_mode+0x200>)
 800f182:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800f186:	4b3a      	ldr	r3, [pc, #232]	; (800f270 <data_output_mode+0x200>)
 800f188:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800f18c:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 800f190:	eeb0 1a66 	vmov.f32	s2, s13
 800f194:	eef0 0a47 	vmov.f32	s1, s14
 800f198:	eeb0 0a67 	vmov.f32	s0, s15
 800f19c:	f000 f8cc 	bl	800f338 <vofa_FireWater_USB_output>
		break;
 800f1a0:	e05d      	b.n	800f25e <data_output_mode+0x1ee>
	case 6://地磁数据输出
		usb_printf("simples:%f,%f,%f,%f,%f,%f,%f,%f,%f\n",imu_9.f_acc[0],imu_9.f_acc[1],imu_9.f_acc[2],imu_9.f_gyro[0],imu_9.f_gyro[1],imu_9.f_gyro[2],imu_9.f_mag[0],imu_9.f_mag[1],imu_9.f_mag[2]);
 800f1a2:	4b33      	ldr	r3, [pc, #204]	; (800f270 <data_output_mode+0x200>)
 800f1a4:	6a1b      	ldr	r3, [r3, #32]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7f1 fa06 	bl	80005b8 <__aeabi_f2d>
 800f1ac:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800f1b0:	4b2f      	ldr	r3, [pc, #188]	; (800f270 <data_output_mode+0x200>)
 800f1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7f1 f9ff 	bl	80005b8 <__aeabi_f2d>
 800f1ba:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800f1be:	4b2c      	ldr	r3, [pc, #176]	; (800f270 <data_output_mode+0x200>)
 800f1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7f1 f9f8 	bl	80005b8 <__aeabi_f2d>
 800f1c8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800f1cc:	4b28      	ldr	r3, [pc, #160]	; (800f270 <data_output_mode+0x200>)
 800f1ce:	695b      	ldr	r3, [r3, #20]
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7f1 f9f1 	bl	80005b8 <__aeabi_f2d>
 800f1d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800f1da:	4b25      	ldr	r3, [pc, #148]	; (800f270 <data_output_mode+0x200>)
 800f1dc:	699b      	ldr	r3, [r3, #24]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7f1 f9ea 	bl	80005b8 <__aeabi_f2d>
 800f1e4:	e9c7 0100 	strd	r0, r1, [r7]
 800f1e8:	4b21      	ldr	r3, [pc, #132]	; (800f270 <data_output_mode+0x200>)
 800f1ea:	69db      	ldr	r3, [r3, #28]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7f1 f9e3 	bl	80005b8 <__aeabi_f2d>
 800f1f2:	4682      	mov	sl, r0
 800f1f4:	468b      	mov	fp, r1
 800f1f6:	4b1e      	ldr	r3, [pc, #120]	; (800f270 <data_output_mode+0x200>)
 800f1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7f1 f9dc 	bl	80005b8 <__aeabi_f2d>
 800f200:	4680      	mov	r8, r0
 800f202:	4689      	mov	r9, r1
 800f204:	4b1a      	ldr	r3, [pc, #104]	; (800f270 <data_output_mode+0x200>)
 800f206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f208:	4618      	mov	r0, r3
 800f20a:	f7f1 f9d5 	bl	80005b8 <__aeabi_f2d>
 800f20e:	4604      	mov	r4, r0
 800f210:	460d      	mov	r5, r1
 800f212:	4b17      	ldr	r3, [pc, #92]	; (800f270 <data_output_mode+0x200>)
 800f214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f216:	4618      	mov	r0, r3
 800f218:	f7f1 f9ce 	bl	80005b8 <__aeabi_f2d>
 800f21c:	4602      	mov	r2, r0
 800f21e:	460b      	mov	r3, r1
 800f220:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f224:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800f228:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800f22c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f230:	ed97 7b00 	vldr	d7, [r7]
 800f234:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f238:	ed97 7b02 	vldr	d7, [r7, #8]
 800f23c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f240:	ed97 7b04 	vldr	d7, [r7, #16]
 800f244:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f248:	ed97 7b06 	vldr	d7, [r7, #24]
 800f24c:	ed8d 7b00 	vstr	d7, [sp]
 800f250:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f254:	4807      	ldr	r0, [pc, #28]	; (800f274 <data_output_mode+0x204>)
 800f256:	f000 f849 	bl	800f2ec <usb_printf>
		break;
 800f25a:	e000      	b.n	800f25e <data_output_mode+0x1ee>
	default:

		break;
 800f25c:	bf00      	nop
	}

}
 800f25e:	bf00      	nop
 800f260:	3730      	adds	r7, #48	; 0x30
 800f262:	46bd      	mov	sp, r7
 800f264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f268:	2000178c 	.word	0x2000178c
 800f26c:	00000000 	.word	0x00000000
 800f270:	20002154 	.word	0x20002154
 800f274:	08013e60 	.word	0x08013e60

0800f278 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
	static uint16_t TimerCount = 0;
	float mag_yaw_test;
	if (htim == (&htim2))  //
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4a15      	ldr	r2, [pc, #84]	; (800f2d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d123      	bne.n	800f2d0 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		TimerCount++;
 800f288:	4b14      	ldr	r3, [pc, #80]	; (800f2dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 800f28a:	881b      	ldrh	r3, [r3, #0]
 800f28c:	3301      	adds	r3, #1
 800f28e:	b29a      	uxth	r2, r3
 800f290:	4b12      	ldr	r3, [pc, #72]	; (800f2dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 800f292:	801a      	strh	r2, [r3, #0]
		if(TimerCount >= 1)  //1ms采集一次传感器数据  1KHz
 800f294:	4b11      	ldr	r3, [pc, #68]	; (800f2dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d019      	beq.n	800f2d0 <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			if(imu_9.cali_flag==0) //校准时不采集输出
 800f29c:	4b10      	ldr	r3, [pc, #64]	; (800f2e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800f29e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d111      	bne.n	800f2ca <HAL_TIM_PeriodElapsedCallback+0x52>
			{
				HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin); //测试引脚PA7，可使用示波器测量，确定采样时间是否准确
 800f2a6:	2180      	movs	r1, #128	; 0x80
 800f2a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f2ac:	f7f3 fa1a 	bl	80026e4 <HAL_GPIO_TogglePin>
				imu_final_data_get(); //原始数据采样
 800f2b0:	f7ff fe0e 	bl	800eed0 <imu_final_data_get>
				calculate_attitude(&attitude, 0.001) ; //姿态解算
 800f2b4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800f2e4 <HAL_TIM_PeriodElapsedCallback+0x6c>
 800f2b8:	480b      	ldr	r0, [pc, #44]	; (800f2e8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800f2ba:	f7fd fdd3 	bl	800ce64 <calculate_attitude>
//				mag_yaw_test = atan2(imu_9.f_mag[1],imu_9.f_mag[0])*57.2957795131f;

				data_output_mode(imu_9.output_mode);  //数据输出,vofa+查看曲线图形
 800f2be:	4b08      	ldr	r3, [pc, #32]	; (800f2e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800f2c0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7ff fed3 	bl	800f070 <data_output_mode>
			}

			TimerCount = 0;
 800f2ca:	4b04      	ldr	r3, [pc, #16]	; (800f2dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	801a      	strh	r2, [r3, #0]
		}

	}

}
 800f2d0:	bf00      	nop
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	200004c0 	.word	0x200004c0
 800f2dc:	2000224a 	.word	0x2000224a
 800f2e0:	20002154 	.word	0x20002154
 800f2e4:	3a83126f 	.word	0x3a83126f
 800f2e8:	2000178c 	.word	0x2000178c

0800f2ec <usb_printf>:
  // 发送帧尾
  HAL_UART_Transmit(&huart1, tail, 4, 100);
}

void usb_printf(const char *format, ...)
{
 800f2ec:	b40f      	push	{r0, r1, r2, r3}
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800f2f4:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    uint8_t buf[APP_TX_DATA_SIZE];

    va_start(args, format);
 800f2f6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800f2fa:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
    length = vsnprintf((char *)buf, APP_TX_DATA_SIZE, (char *)format, args);
 800f2fe:	4638      	mov	r0, r7
 800f300:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800f304:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800f308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f30c:	f000 fffa 	bl	8010304 <vsniprintf>
 800f310:	4603      	mov	r3, r0
 800f312:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    va_end(args);
    CDC_Transmit_FS(buf, length);
 800f316:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	463b      	mov	r3, r7
 800f31e:	4611      	mov	r1, r2
 800f320:	4618      	mov	r0, r3
 800f322:	f7fc fcc5 	bl	800bcb0 <CDC_Transmit_FS>
}
 800f326:	bf00      	nop
 800f328:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800f32c:	46bd      	mov	sp, r7
 800f32e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f332:	b004      	add	sp, #16
 800f334:	4770      	bx	lr
	...

0800f338 <vofa_FireWater_USB_output>:

}

// 本协议是CSV风格的字符串流，直观简洁，编程像printf简单
void vofa_FireWater_USB_output(float s1, float s2, float s3,float s4)
{
 800f338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f33c:	b08a      	sub	sp, #40	; 0x28
 800f33e:	af06      	add	r7, sp, #24
 800f340:	ed87 0a03 	vstr	s0, [r7, #12]
 800f344:	edc7 0a02 	vstr	s1, [r7, #8]
 800f348:	ed87 1a01 	vstr	s2, [r7, #4]
 800f34c:	edc7 1a00 	vstr	s3, [r7]
	usb_printf("simples:%f,%f,%f,%f\n", s1, s2,s3,s4);
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f7f1 f931 	bl	80005b8 <__aeabi_f2d>
 800f356:	4682      	mov	sl, r0
 800f358:	468b      	mov	fp, r1
 800f35a:	68b8      	ldr	r0, [r7, #8]
 800f35c:	f7f1 f92c 	bl	80005b8 <__aeabi_f2d>
 800f360:	4604      	mov	r4, r0
 800f362:	460d      	mov	r5, r1
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f7f1 f927 	bl	80005b8 <__aeabi_f2d>
 800f36a:	4680      	mov	r8, r0
 800f36c:	4689      	mov	r9, r1
 800f36e:	6838      	ldr	r0, [r7, #0]
 800f370:	f7f1 f922 	bl	80005b8 <__aeabi_f2d>
 800f374:	4602      	mov	r2, r0
 800f376:	460b      	mov	r3, r1
 800f378:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f37c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f380:	e9cd 4500 	strd	r4, r5, [sp]
 800f384:	4652      	mov	r2, sl
 800f386:	465b      	mov	r3, fp
 800f388:	4803      	ldr	r0, [pc, #12]	; (800f398 <vofa_FireWater_USB_output+0x60>)
 800f38a:	f7ff ffaf 	bl	800f2ec <usb_printf>
}
 800f38e:	bf00      	nop
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f398:	08013e98 	.word	0x08013e98

0800f39c <__cvt>:
 800f39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a0:	ec55 4b10 	vmov	r4, r5, d0
 800f3a4:	2d00      	cmp	r5, #0
 800f3a6:	460e      	mov	r6, r1
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	462b      	mov	r3, r5
 800f3ac:	bfbb      	ittet	lt
 800f3ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f3b2:	461d      	movlt	r5, r3
 800f3b4:	2300      	movge	r3, #0
 800f3b6:	232d      	movlt	r3, #45	; 0x2d
 800f3b8:	700b      	strb	r3, [r1, #0]
 800f3ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f3c0:	4691      	mov	r9, r2
 800f3c2:	f023 0820 	bic.w	r8, r3, #32
 800f3c6:	bfbc      	itt	lt
 800f3c8:	4622      	movlt	r2, r4
 800f3ca:	4614      	movlt	r4, r2
 800f3cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f3d0:	d005      	beq.n	800f3de <__cvt+0x42>
 800f3d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f3d6:	d100      	bne.n	800f3da <__cvt+0x3e>
 800f3d8:	3601      	adds	r6, #1
 800f3da:	2102      	movs	r1, #2
 800f3dc:	e000      	b.n	800f3e0 <__cvt+0x44>
 800f3de:	2103      	movs	r1, #3
 800f3e0:	ab03      	add	r3, sp, #12
 800f3e2:	9301      	str	r3, [sp, #4]
 800f3e4:	ab02      	add	r3, sp, #8
 800f3e6:	9300      	str	r3, [sp, #0]
 800f3e8:	ec45 4b10 	vmov	d0, r4, r5
 800f3ec:	4653      	mov	r3, sl
 800f3ee:	4632      	mov	r2, r6
 800f3f0:	f001 f94a 	bl	8010688 <_dtoa_r>
 800f3f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f3f8:	4607      	mov	r7, r0
 800f3fa:	d102      	bne.n	800f402 <__cvt+0x66>
 800f3fc:	f019 0f01 	tst.w	r9, #1
 800f400:	d022      	beq.n	800f448 <__cvt+0xac>
 800f402:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f406:	eb07 0906 	add.w	r9, r7, r6
 800f40a:	d110      	bne.n	800f42e <__cvt+0x92>
 800f40c:	783b      	ldrb	r3, [r7, #0]
 800f40e:	2b30      	cmp	r3, #48	; 0x30
 800f410:	d10a      	bne.n	800f428 <__cvt+0x8c>
 800f412:	2200      	movs	r2, #0
 800f414:	2300      	movs	r3, #0
 800f416:	4620      	mov	r0, r4
 800f418:	4629      	mov	r1, r5
 800f41a:	f7f1 fb8d 	bl	8000b38 <__aeabi_dcmpeq>
 800f41e:	b918      	cbnz	r0, 800f428 <__cvt+0x8c>
 800f420:	f1c6 0601 	rsb	r6, r6, #1
 800f424:	f8ca 6000 	str.w	r6, [sl]
 800f428:	f8da 3000 	ldr.w	r3, [sl]
 800f42c:	4499      	add	r9, r3
 800f42e:	2200      	movs	r2, #0
 800f430:	2300      	movs	r3, #0
 800f432:	4620      	mov	r0, r4
 800f434:	4629      	mov	r1, r5
 800f436:	f7f1 fb7f 	bl	8000b38 <__aeabi_dcmpeq>
 800f43a:	b108      	cbz	r0, 800f440 <__cvt+0xa4>
 800f43c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f440:	2230      	movs	r2, #48	; 0x30
 800f442:	9b03      	ldr	r3, [sp, #12]
 800f444:	454b      	cmp	r3, r9
 800f446:	d307      	bcc.n	800f458 <__cvt+0xbc>
 800f448:	9b03      	ldr	r3, [sp, #12]
 800f44a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f44c:	1bdb      	subs	r3, r3, r7
 800f44e:	4638      	mov	r0, r7
 800f450:	6013      	str	r3, [r2, #0]
 800f452:	b004      	add	sp, #16
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f458:	1c59      	adds	r1, r3, #1
 800f45a:	9103      	str	r1, [sp, #12]
 800f45c:	701a      	strb	r2, [r3, #0]
 800f45e:	e7f0      	b.n	800f442 <__cvt+0xa6>

0800f460 <__exponent>:
 800f460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f462:	4603      	mov	r3, r0
 800f464:	2900      	cmp	r1, #0
 800f466:	bfb8      	it	lt
 800f468:	4249      	neglt	r1, r1
 800f46a:	f803 2b02 	strb.w	r2, [r3], #2
 800f46e:	bfb4      	ite	lt
 800f470:	222d      	movlt	r2, #45	; 0x2d
 800f472:	222b      	movge	r2, #43	; 0x2b
 800f474:	2909      	cmp	r1, #9
 800f476:	7042      	strb	r2, [r0, #1]
 800f478:	dd2a      	ble.n	800f4d0 <__exponent+0x70>
 800f47a:	f10d 0207 	add.w	r2, sp, #7
 800f47e:	4617      	mov	r7, r2
 800f480:	260a      	movs	r6, #10
 800f482:	4694      	mov	ip, r2
 800f484:	fb91 f5f6 	sdiv	r5, r1, r6
 800f488:	fb06 1415 	mls	r4, r6, r5, r1
 800f48c:	3430      	adds	r4, #48	; 0x30
 800f48e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f492:	460c      	mov	r4, r1
 800f494:	2c63      	cmp	r4, #99	; 0x63
 800f496:	f102 32ff 	add.w	r2, r2, #4294967295
 800f49a:	4629      	mov	r1, r5
 800f49c:	dcf1      	bgt.n	800f482 <__exponent+0x22>
 800f49e:	3130      	adds	r1, #48	; 0x30
 800f4a0:	f1ac 0402 	sub.w	r4, ip, #2
 800f4a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f4a8:	1c41      	adds	r1, r0, #1
 800f4aa:	4622      	mov	r2, r4
 800f4ac:	42ba      	cmp	r2, r7
 800f4ae:	d30a      	bcc.n	800f4c6 <__exponent+0x66>
 800f4b0:	f10d 0209 	add.w	r2, sp, #9
 800f4b4:	eba2 020c 	sub.w	r2, r2, ip
 800f4b8:	42bc      	cmp	r4, r7
 800f4ba:	bf88      	it	hi
 800f4bc:	2200      	movhi	r2, #0
 800f4be:	4413      	add	r3, r2
 800f4c0:	1a18      	subs	r0, r3, r0
 800f4c2:	b003      	add	sp, #12
 800f4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f4ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f4ce:	e7ed      	b.n	800f4ac <__exponent+0x4c>
 800f4d0:	2330      	movs	r3, #48	; 0x30
 800f4d2:	3130      	adds	r1, #48	; 0x30
 800f4d4:	7083      	strb	r3, [r0, #2]
 800f4d6:	70c1      	strb	r1, [r0, #3]
 800f4d8:	1d03      	adds	r3, r0, #4
 800f4da:	e7f1      	b.n	800f4c0 <__exponent+0x60>

0800f4dc <_printf_float>:
 800f4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e0:	ed2d 8b02 	vpush	{d8}
 800f4e4:	b08d      	sub	sp, #52	; 0x34
 800f4e6:	460c      	mov	r4, r1
 800f4e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f4ec:	4616      	mov	r6, r2
 800f4ee:	461f      	mov	r7, r3
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	f000 ff8f 	bl	8010414 <_localeconv_r>
 800f4f6:	f8d0 a000 	ldr.w	sl, [r0]
 800f4fa:	4650      	mov	r0, sl
 800f4fc:	f7f0 fef0 	bl	80002e0 <strlen>
 800f500:	2300      	movs	r3, #0
 800f502:	930a      	str	r3, [sp, #40]	; 0x28
 800f504:	6823      	ldr	r3, [r4, #0]
 800f506:	9305      	str	r3, [sp, #20]
 800f508:	f8d8 3000 	ldr.w	r3, [r8]
 800f50c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f510:	3307      	adds	r3, #7
 800f512:	f023 0307 	bic.w	r3, r3, #7
 800f516:	f103 0208 	add.w	r2, r3, #8
 800f51a:	f8c8 2000 	str.w	r2, [r8]
 800f51e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f522:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f526:	9307      	str	r3, [sp, #28]
 800f528:	f8cd 8018 	str.w	r8, [sp, #24]
 800f52c:	ee08 0a10 	vmov	s16, r0
 800f530:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f534:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f538:	4b9e      	ldr	r3, [pc, #632]	; (800f7b4 <_printf_float+0x2d8>)
 800f53a:	f04f 32ff 	mov.w	r2, #4294967295
 800f53e:	f7f1 fb2d 	bl	8000b9c <__aeabi_dcmpun>
 800f542:	bb88      	cbnz	r0, 800f5a8 <_printf_float+0xcc>
 800f544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f548:	4b9a      	ldr	r3, [pc, #616]	; (800f7b4 <_printf_float+0x2d8>)
 800f54a:	f04f 32ff 	mov.w	r2, #4294967295
 800f54e:	f7f1 fb07 	bl	8000b60 <__aeabi_dcmple>
 800f552:	bb48      	cbnz	r0, 800f5a8 <_printf_float+0xcc>
 800f554:	2200      	movs	r2, #0
 800f556:	2300      	movs	r3, #0
 800f558:	4640      	mov	r0, r8
 800f55a:	4649      	mov	r1, r9
 800f55c:	f7f1 faf6 	bl	8000b4c <__aeabi_dcmplt>
 800f560:	b110      	cbz	r0, 800f568 <_printf_float+0x8c>
 800f562:	232d      	movs	r3, #45	; 0x2d
 800f564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f568:	4a93      	ldr	r2, [pc, #588]	; (800f7b8 <_printf_float+0x2dc>)
 800f56a:	4b94      	ldr	r3, [pc, #592]	; (800f7bc <_printf_float+0x2e0>)
 800f56c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f570:	bf94      	ite	ls
 800f572:	4690      	movls	r8, r2
 800f574:	4698      	movhi	r8, r3
 800f576:	2303      	movs	r3, #3
 800f578:	6123      	str	r3, [r4, #16]
 800f57a:	9b05      	ldr	r3, [sp, #20]
 800f57c:	f023 0304 	bic.w	r3, r3, #4
 800f580:	6023      	str	r3, [r4, #0]
 800f582:	f04f 0900 	mov.w	r9, #0
 800f586:	9700      	str	r7, [sp, #0]
 800f588:	4633      	mov	r3, r6
 800f58a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f58c:	4621      	mov	r1, r4
 800f58e:	4628      	mov	r0, r5
 800f590:	f000 f9da 	bl	800f948 <_printf_common>
 800f594:	3001      	adds	r0, #1
 800f596:	f040 8090 	bne.w	800f6ba <_printf_float+0x1de>
 800f59a:	f04f 30ff 	mov.w	r0, #4294967295
 800f59e:	b00d      	add	sp, #52	; 0x34
 800f5a0:	ecbd 8b02 	vpop	{d8}
 800f5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a8:	4642      	mov	r2, r8
 800f5aa:	464b      	mov	r3, r9
 800f5ac:	4640      	mov	r0, r8
 800f5ae:	4649      	mov	r1, r9
 800f5b0:	f7f1 faf4 	bl	8000b9c <__aeabi_dcmpun>
 800f5b4:	b140      	cbz	r0, 800f5c8 <_printf_float+0xec>
 800f5b6:	464b      	mov	r3, r9
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	bfbc      	itt	lt
 800f5bc:	232d      	movlt	r3, #45	; 0x2d
 800f5be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f5c2:	4a7f      	ldr	r2, [pc, #508]	; (800f7c0 <_printf_float+0x2e4>)
 800f5c4:	4b7f      	ldr	r3, [pc, #508]	; (800f7c4 <_printf_float+0x2e8>)
 800f5c6:	e7d1      	b.n	800f56c <_printf_float+0x90>
 800f5c8:	6863      	ldr	r3, [r4, #4]
 800f5ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f5ce:	9206      	str	r2, [sp, #24]
 800f5d0:	1c5a      	adds	r2, r3, #1
 800f5d2:	d13f      	bne.n	800f654 <_printf_float+0x178>
 800f5d4:	2306      	movs	r3, #6
 800f5d6:	6063      	str	r3, [r4, #4]
 800f5d8:	9b05      	ldr	r3, [sp, #20]
 800f5da:	6861      	ldr	r1, [r4, #4]
 800f5dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	9303      	str	r3, [sp, #12]
 800f5e4:	ab0a      	add	r3, sp, #40	; 0x28
 800f5e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f5ea:	ab09      	add	r3, sp, #36	; 0x24
 800f5ec:	ec49 8b10 	vmov	d0, r8, r9
 800f5f0:	9300      	str	r3, [sp, #0]
 800f5f2:	6022      	str	r2, [r4, #0]
 800f5f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	f7ff fecf 	bl	800f39c <__cvt>
 800f5fe:	9b06      	ldr	r3, [sp, #24]
 800f600:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f602:	2b47      	cmp	r3, #71	; 0x47
 800f604:	4680      	mov	r8, r0
 800f606:	d108      	bne.n	800f61a <_printf_float+0x13e>
 800f608:	1cc8      	adds	r0, r1, #3
 800f60a:	db02      	blt.n	800f612 <_printf_float+0x136>
 800f60c:	6863      	ldr	r3, [r4, #4]
 800f60e:	4299      	cmp	r1, r3
 800f610:	dd41      	ble.n	800f696 <_printf_float+0x1ba>
 800f612:	f1ab 0302 	sub.w	r3, fp, #2
 800f616:	fa5f fb83 	uxtb.w	fp, r3
 800f61a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f61e:	d820      	bhi.n	800f662 <_printf_float+0x186>
 800f620:	3901      	subs	r1, #1
 800f622:	465a      	mov	r2, fp
 800f624:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f628:	9109      	str	r1, [sp, #36]	; 0x24
 800f62a:	f7ff ff19 	bl	800f460 <__exponent>
 800f62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f630:	1813      	adds	r3, r2, r0
 800f632:	2a01      	cmp	r2, #1
 800f634:	4681      	mov	r9, r0
 800f636:	6123      	str	r3, [r4, #16]
 800f638:	dc02      	bgt.n	800f640 <_printf_float+0x164>
 800f63a:	6822      	ldr	r2, [r4, #0]
 800f63c:	07d2      	lsls	r2, r2, #31
 800f63e:	d501      	bpl.n	800f644 <_printf_float+0x168>
 800f640:	3301      	adds	r3, #1
 800f642:	6123      	str	r3, [r4, #16]
 800f644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d09c      	beq.n	800f586 <_printf_float+0xaa>
 800f64c:	232d      	movs	r3, #45	; 0x2d
 800f64e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f652:	e798      	b.n	800f586 <_printf_float+0xaa>
 800f654:	9a06      	ldr	r2, [sp, #24]
 800f656:	2a47      	cmp	r2, #71	; 0x47
 800f658:	d1be      	bne.n	800f5d8 <_printf_float+0xfc>
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1bc      	bne.n	800f5d8 <_printf_float+0xfc>
 800f65e:	2301      	movs	r3, #1
 800f660:	e7b9      	b.n	800f5d6 <_printf_float+0xfa>
 800f662:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f666:	d118      	bne.n	800f69a <_printf_float+0x1be>
 800f668:	2900      	cmp	r1, #0
 800f66a:	6863      	ldr	r3, [r4, #4]
 800f66c:	dd0b      	ble.n	800f686 <_printf_float+0x1aa>
 800f66e:	6121      	str	r1, [r4, #16]
 800f670:	b913      	cbnz	r3, 800f678 <_printf_float+0x19c>
 800f672:	6822      	ldr	r2, [r4, #0]
 800f674:	07d0      	lsls	r0, r2, #31
 800f676:	d502      	bpl.n	800f67e <_printf_float+0x1a2>
 800f678:	3301      	adds	r3, #1
 800f67a:	440b      	add	r3, r1
 800f67c:	6123      	str	r3, [r4, #16]
 800f67e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f680:	f04f 0900 	mov.w	r9, #0
 800f684:	e7de      	b.n	800f644 <_printf_float+0x168>
 800f686:	b913      	cbnz	r3, 800f68e <_printf_float+0x1b2>
 800f688:	6822      	ldr	r2, [r4, #0]
 800f68a:	07d2      	lsls	r2, r2, #31
 800f68c:	d501      	bpl.n	800f692 <_printf_float+0x1b6>
 800f68e:	3302      	adds	r3, #2
 800f690:	e7f4      	b.n	800f67c <_printf_float+0x1a0>
 800f692:	2301      	movs	r3, #1
 800f694:	e7f2      	b.n	800f67c <_printf_float+0x1a0>
 800f696:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f69c:	4299      	cmp	r1, r3
 800f69e:	db05      	blt.n	800f6ac <_printf_float+0x1d0>
 800f6a0:	6823      	ldr	r3, [r4, #0]
 800f6a2:	6121      	str	r1, [r4, #16]
 800f6a4:	07d8      	lsls	r0, r3, #31
 800f6a6:	d5ea      	bpl.n	800f67e <_printf_float+0x1a2>
 800f6a8:	1c4b      	adds	r3, r1, #1
 800f6aa:	e7e7      	b.n	800f67c <_printf_float+0x1a0>
 800f6ac:	2900      	cmp	r1, #0
 800f6ae:	bfd4      	ite	le
 800f6b0:	f1c1 0202 	rsble	r2, r1, #2
 800f6b4:	2201      	movgt	r2, #1
 800f6b6:	4413      	add	r3, r2
 800f6b8:	e7e0      	b.n	800f67c <_printf_float+0x1a0>
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	055a      	lsls	r2, r3, #21
 800f6be:	d407      	bmi.n	800f6d0 <_printf_float+0x1f4>
 800f6c0:	6923      	ldr	r3, [r4, #16]
 800f6c2:	4642      	mov	r2, r8
 800f6c4:	4631      	mov	r1, r6
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	47b8      	blx	r7
 800f6ca:	3001      	adds	r0, #1
 800f6cc:	d12c      	bne.n	800f728 <_printf_float+0x24c>
 800f6ce:	e764      	b.n	800f59a <_printf_float+0xbe>
 800f6d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6d4:	f240 80e0 	bls.w	800f898 <_printf_float+0x3bc>
 800f6d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6dc:	2200      	movs	r2, #0
 800f6de:	2300      	movs	r3, #0
 800f6e0:	f7f1 fa2a 	bl	8000b38 <__aeabi_dcmpeq>
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	d034      	beq.n	800f752 <_printf_float+0x276>
 800f6e8:	4a37      	ldr	r2, [pc, #220]	; (800f7c8 <_printf_float+0x2ec>)
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	4631      	mov	r1, r6
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	47b8      	blx	r7
 800f6f2:	3001      	adds	r0, #1
 800f6f4:	f43f af51 	beq.w	800f59a <_printf_float+0xbe>
 800f6f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	db02      	blt.n	800f706 <_printf_float+0x22a>
 800f700:	6823      	ldr	r3, [r4, #0]
 800f702:	07d8      	lsls	r0, r3, #31
 800f704:	d510      	bpl.n	800f728 <_printf_float+0x24c>
 800f706:	ee18 3a10 	vmov	r3, s16
 800f70a:	4652      	mov	r2, sl
 800f70c:	4631      	mov	r1, r6
 800f70e:	4628      	mov	r0, r5
 800f710:	47b8      	blx	r7
 800f712:	3001      	adds	r0, #1
 800f714:	f43f af41 	beq.w	800f59a <_printf_float+0xbe>
 800f718:	f04f 0800 	mov.w	r8, #0
 800f71c:	f104 091a 	add.w	r9, r4, #26
 800f720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f722:	3b01      	subs	r3, #1
 800f724:	4543      	cmp	r3, r8
 800f726:	dc09      	bgt.n	800f73c <_printf_float+0x260>
 800f728:	6823      	ldr	r3, [r4, #0]
 800f72a:	079b      	lsls	r3, r3, #30
 800f72c:	f100 8107 	bmi.w	800f93e <_printf_float+0x462>
 800f730:	68e0      	ldr	r0, [r4, #12]
 800f732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f734:	4298      	cmp	r0, r3
 800f736:	bfb8      	it	lt
 800f738:	4618      	movlt	r0, r3
 800f73a:	e730      	b.n	800f59e <_printf_float+0xc2>
 800f73c:	2301      	movs	r3, #1
 800f73e:	464a      	mov	r2, r9
 800f740:	4631      	mov	r1, r6
 800f742:	4628      	mov	r0, r5
 800f744:	47b8      	blx	r7
 800f746:	3001      	adds	r0, #1
 800f748:	f43f af27 	beq.w	800f59a <_printf_float+0xbe>
 800f74c:	f108 0801 	add.w	r8, r8, #1
 800f750:	e7e6      	b.n	800f720 <_printf_float+0x244>
 800f752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f754:	2b00      	cmp	r3, #0
 800f756:	dc39      	bgt.n	800f7cc <_printf_float+0x2f0>
 800f758:	4a1b      	ldr	r2, [pc, #108]	; (800f7c8 <_printf_float+0x2ec>)
 800f75a:	2301      	movs	r3, #1
 800f75c:	4631      	mov	r1, r6
 800f75e:	4628      	mov	r0, r5
 800f760:	47b8      	blx	r7
 800f762:	3001      	adds	r0, #1
 800f764:	f43f af19 	beq.w	800f59a <_printf_float+0xbe>
 800f768:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f76c:	4313      	orrs	r3, r2
 800f76e:	d102      	bne.n	800f776 <_printf_float+0x29a>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	07d9      	lsls	r1, r3, #31
 800f774:	d5d8      	bpl.n	800f728 <_printf_float+0x24c>
 800f776:	ee18 3a10 	vmov	r3, s16
 800f77a:	4652      	mov	r2, sl
 800f77c:	4631      	mov	r1, r6
 800f77e:	4628      	mov	r0, r5
 800f780:	47b8      	blx	r7
 800f782:	3001      	adds	r0, #1
 800f784:	f43f af09 	beq.w	800f59a <_printf_float+0xbe>
 800f788:	f04f 0900 	mov.w	r9, #0
 800f78c:	f104 0a1a 	add.w	sl, r4, #26
 800f790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f792:	425b      	negs	r3, r3
 800f794:	454b      	cmp	r3, r9
 800f796:	dc01      	bgt.n	800f79c <_printf_float+0x2c0>
 800f798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f79a:	e792      	b.n	800f6c2 <_printf_float+0x1e6>
 800f79c:	2301      	movs	r3, #1
 800f79e:	4652      	mov	r2, sl
 800f7a0:	4631      	mov	r1, r6
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	47b8      	blx	r7
 800f7a6:	3001      	adds	r0, #1
 800f7a8:	f43f aef7 	beq.w	800f59a <_printf_float+0xbe>
 800f7ac:	f109 0901 	add.w	r9, r9, #1
 800f7b0:	e7ee      	b.n	800f790 <_printf_float+0x2b4>
 800f7b2:	bf00      	nop
 800f7b4:	7fefffff 	.word	0x7fefffff
 800f7b8:	08013ef0 	.word	0x08013ef0
 800f7bc:	08013ef4 	.word	0x08013ef4
 800f7c0:	08013ef8 	.word	0x08013ef8
 800f7c4:	08013efc 	.word	0x08013efc
 800f7c8:	08013f00 	.word	0x08013f00
 800f7cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	bfa8      	it	ge
 800f7d4:	461a      	movge	r2, r3
 800f7d6:	2a00      	cmp	r2, #0
 800f7d8:	4691      	mov	r9, r2
 800f7da:	dc37      	bgt.n	800f84c <_printf_float+0x370>
 800f7dc:	f04f 0b00 	mov.w	fp, #0
 800f7e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7e4:	f104 021a 	add.w	r2, r4, #26
 800f7e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7ea:	9305      	str	r3, [sp, #20]
 800f7ec:	eba3 0309 	sub.w	r3, r3, r9
 800f7f0:	455b      	cmp	r3, fp
 800f7f2:	dc33      	bgt.n	800f85c <_printf_float+0x380>
 800f7f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	db3b      	blt.n	800f874 <_printf_float+0x398>
 800f7fc:	6823      	ldr	r3, [r4, #0]
 800f7fe:	07da      	lsls	r2, r3, #31
 800f800:	d438      	bmi.n	800f874 <_printf_float+0x398>
 800f802:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f806:	eba2 0903 	sub.w	r9, r2, r3
 800f80a:	9b05      	ldr	r3, [sp, #20]
 800f80c:	1ad2      	subs	r2, r2, r3
 800f80e:	4591      	cmp	r9, r2
 800f810:	bfa8      	it	ge
 800f812:	4691      	movge	r9, r2
 800f814:	f1b9 0f00 	cmp.w	r9, #0
 800f818:	dc35      	bgt.n	800f886 <_printf_float+0x3aa>
 800f81a:	f04f 0800 	mov.w	r8, #0
 800f81e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f822:	f104 0a1a 	add.w	sl, r4, #26
 800f826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f82a:	1a9b      	subs	r3, r3, r2
 800f82c:	eba3 0309 	sub.w	r3, r3, r9
 800f830:	4543      	cmp	r3, r8
 800f832:	f77f af79 	ble.w	800f728 <_printf_float+0x24c>
 800f836:	2301      	movs	r3, #1
 800f838:	4652      	mov	r2, sl
 800f83a:	4631      	mov	r1, r6
 800f83c:	4628      	mov	r0, r5
 800f83e:	47b8      	blx	r7
 800f840:	3001      	adds	r0, #1
 800f842:	f43f aeaa 	beq.w	800f59a <_printf_float+0xbe>
 800f846:	f108 0801 	add.w	r8, r8, #1
 800f84a:	e7ec      	b.n	800f826 <_printf_float+0x34a>
 800f84c:	4613      	mov	r3, r2
 800f84e:	4631      	mov	r1, r6
 800f850:	4642      	mov	r2, r8
 800f852:	4628      	mov	r0, r5
 800f854:	47b8      	blx	r7
 800f856:	3001      	adds	r0, #1
 800f858:	d1c0      	bne.n	800f7dc <_printf_float+0x300>
 800f85a:	e69e      	b.n	800f59a <_printf_float+0xbe>
 800f85c:	2301      	movs	r3, #1
 800f85e:	4631      	mov	r1, r6
 800f860:	4628      	mov	r0, r5
 800f862:	9205      	str	r2, [sp, #20]
 800f864:	47b8      	blx	r7
 800f866:	3001      	adds	r0, #1
 800f868:	f43f ae97 	beq.w	800f59a <_printf_float+0xbe>
 800f86c:	9a05      	ldr	r2, [sp, #20]
 800f86e:	f10b 0b01 	add.w	fp, fp, #1
 800f872:	e7b9      	b.n	800f7e8 <_printf_float+0x30c>
 800f874:	ee18 3a10 	vmov	r3, s16
 800f878:	4652      	mov	r2, sl
 800f87a:	4631      	mov	r1, r6
 800f87c:	4628      	mov	r0, r5
 800f87e:	47b8      	blx	r7
 800f880:	3001      	adds	r0, #1
 800f882:	d1be      	bne.n	800f802 <_printf_float+0x326>
 800f884:	e689      	b.n	800f59a <_printf_float+0xbe>
 800f886:	9a05      	ldr	r2, [sp, #20]
 800f888:	464b      	mov	r3, r9
 800f88a:	4442      	add	r2, r8
 800f88c:	4631      	mov	r1, r6
 800f88e:	4628      	mov	r0, r5
 800f890:	47b8      	blx	r7
 800f892:	3001      	adds	r0, #1
 800f894:	d1c1      	bne.n	800f81a <_printf_float+0x33e>
 800f896:	e680      	b.n	800f59a <_printf_float+0xbe>
 800f898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f89a:	2a01      	cmp	r2, #1
 800f89c:	dc01      	bgt.n	800f8a2 <_printf_float+0x3c6>
 800f89e:	07db      	lsls	r3, r3, #31
 800f8a0:	d53a      	bpl.n	800f918 <_printf_float+0x43c>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	4642      	mov	r2, r8
 800f8a6:	4631      	mov	r1, r6
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	47b8      	blx	r7
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	f43f ae74 	beq.w	800f59a <_printf_float+0xbe>
 800f8b2:	ee18 3a10 	vmov	r3, s16
 800f8b6:	4652      	mov	r2, sl
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	47b8      	blx	r7
 800f8be:	3001      	adds	r0, #1
 800f8c0:	f43f ae6b 	beq.w	800f59a <_printf_float+0xbe>
 800f8c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f8d0:	f7f1 f932 	bl	8000b38 <__aeabi_dcmpeq>
 800f8d4:	b9d8      	cbnz	r0, 800f90e <_printf_float+0x432>
 800f8d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f8da:	f108 0201 	add.w	r2, r8, #1
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	47b8      	blx	r7
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	d10e      	bne.n	800f906 <_printf_float+0x42a>
 800f8e8:	e657      	b.n	800f59a <_printf_float+0xbe>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	4652      	mov	r2, sl
 800f8ee:	4631      	mov	r1, r6
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	47b8      	blx	r7
 800f8f4:	3001      	adds	r0, #1
 800f8f6:	f43f ae50 	beq.w	800f59a <_printf_float+0xbe>
 800f8fa:	f108 0801 	add.w	r8, r8, #1
 800f8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f900:	3b01      	subs	r3, #1
 800f902:	4543      	cmp	r3, r8
 800f904:	dcf1      	bgt.n	800f8ea <_printf_float+0x40e>
 800f906:	464b      	mov	r3, r9
 800f908:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f90c:	e6da      	b.n	800f6c4 <_printf_float+0x1e8>
 800f90e:	f04f 0800 	mov.w	r8, #0
 800f912:	f104 0a1a 	add.w	sl, r4, #26
 800f916:	e7f2      	b.n	800f8fe <_printf_float+0x422>
 800f918:	2301      	movs	r3, #1
 800f91a:	4642      	mov	r2, r8
 800f91c:	e7df      	b.n	800f8de <_printf_float+0x402>
 800f91e:	2301      	movs	r3, #1
 800f920:	464a      	mov	r2, r9
 800f922:	4631      	mov	r1, r6
 800f924:	4628      	mov	r0, r5
 800f926:	47b8      	blx	r7
 800f928:	3001      	adds	r0, #1
 800f92a:	f43f ae36 	beq.w	800f59a <_printf_float+0xbe>
 800f92e:	f108 0801 	add.w	r8, r8, #1
 800f932:	68e3      	ldr	r3, [r4, #12]
 800f934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f936:	1a5b      	subs	r3, r3, r1
 800f938:	4543      	cmp	r3, r8
 800f93a:	dcf0      	bgt.n	800f91e <_printf_float+0x442>
 800f93c:	e6f8      	b.n	800f730 <_printf_float+0x254>
 800f93e:	f04f 0800 	mov.w	r8, #0
 800f942:	f104 0919 	add.w	r9, r4, #25
 800f946:	e7f4      	b.n	800f932 <_printf_float+0x456>

0800f948 <_printf_common>:
 800f948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f94c:	4616      	mov	r6, r2
 800f94e:	4699      	mov	r9, r3
 800f950:	688a      	ldr	r2, [r1, #8]
 800f952:	690b      	ldr	r3, [r1, #16]
 800f954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f958:	4293      	cmp	r3, r2
 800f95a:	bfb8      	it	lt
 800f95c:	4613      	movlt	r3, r2
 800f95e:	6033      	str	r3, [r6, #0]
 800f960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f964:	4607      	mov	r7, r0
 800f966:	460c      	mov	r4, r1
 800f968:	b10a      	cbz	r2, 800f96e <_printf_common+0x26>
 800f96a:	3301      	adds	r3, #1
 800f96c:	6033      	str	r3, [r6, #0]
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	0699      	lsls	r1, r3, #26
 800f972:	bf42      	ittt	mi
 800f974:	6833      	ldrmi	r3, [r6, #0]
 800f976:	3302      	addmi	r3, #2
 800f978:	6033      	strmi	r3, [r6, #0]
 800f97a:	6825      	ldr	r5, [r4, #0]
 800f97c:	f015 0506 	ands.w	r5, r5, #6
 800f980:	d106      	bne.n	800f990 <_printf_common+0x48>
 800f982:	f104 0a19 	add.w	sl, r4, #25
 800f986:	68e3      	ldr	r3, [r4, #12]
 800f988:	6832      	ldr	r2, [r6, #0]
 800f98a:	1a9b      	subs	r3, r3, r2
 800f98c:	42ab      	cmp	r3, r5
 800f98e:	dc26      	bgt.n	800f9de <_printf_common+0x96>
 800f990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f994:	1e13      	subs	r3, r2, #0
 800f996:	6822      	ldr	r2, [r4, #0]
 800f998:	bf18      	it	ne
 800f99a:	2301      	movne	r3, #1
 800f99c:	0692      	lsls	r2, r2, #26
 800f99e:	d42b      	bmi.n	800f9f8 <_printf_common+0xb0>
 800f9a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	47c0      	blx	r8
 800f9aa:	3001      	adds	r0, #1
 800f9ac:	d01e      	beq.n	800f9ec <_printf_common+0xa4>
 800f9ae:	6823      	ldr	r3, [r4, #0]
 800f9b0:	6922      	ldr	r2, [r4, #16]
 800f9b2:	f003 0306 	and.w	r3, r3, #6
 800f9b6:	2b04      	cmp	r3, #4
 800f9b8:	bf02      	ittt	eq
 800f9ba:	68e5      	ldreq	r5, [r4, #12]
 800f9bc:	6833      	ldreq	r3, [r6, #0]
 800f9be:	1aed      	subeq	r5, r5, r3
 800f9c0:	68a3      	ldr	r3, [r4, #8]
 800f9c2:	bf0c      	ite	eq
 800f9c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9c8:	2500      	movne	r5, #0
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	bfc4      	itt	gt
 800f9ce:	1a9b      	subgt	r3, r3, r2
 800f9d0:	18ed      	addgt	r5, r5, r3
 800f9d2:	2600      	movs	r6, #0
 800f9d4:	341a      	adds	r4, #26
 800f9d6:	42b5      	cmp	r5, r6
 800f9d8:	d11a      	bne.n	800fa10 <_printf_common+0xc8>
 800f9da:	2000      	movs	r0, #0
 800f9dc:	e008      	b.n	800f9f0 <_printf_common+0xa8>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	4652      	mov	r2, sl
 800f9e2:	4649      	mov	r1, r9
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	47c0      	blx	r8
 800f9e8:	3001      	adds	r0, #1
 800f9ea:	d103      	bne.n	800f9f4 <_printf_common+0xac>
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9f4:	3501      	adds	r5, #1
 800f9f6:	e7c6      	b.n	800f986 <_printf_common+0x3e>
 800f9f8:	18e1      	adds	r1, r4, r3
 800f9fa:	1c5a      	adds	r2, r3, #1
 800f9fc:	2030      	movs	r0, #48	; 0x30
 800f9fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa02:	4422      	add	r2, r4
 800fa04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa0c:	3302      	adds	r3, #2
 800fa0e:	e7c7      	b.n	800f9a0 <_printf_common+0x58>
 800fa10:	2301      	movs	r3, #1
 800fa12:	4622      	mov	r2, r4
 800fa14:	4649      	mov	r1, r9
 800fa16:	4638      	mov	r0, r7
 800fa18:	47c0      	blx	r8
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	d0e6      	beq.n	800f9ec <_printf_common+0xa4>
 800fa1e:	3601      	adds	r6, #1
 800fa20:	e7d9      	b.n	800f9d6 <_printf_common+0x8e>
	...

0800fa24 <_printf_i>:
 800fa24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa28:	7e0f      	ldrb	r7, [r1, #24]
 800fa2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa2c:	2f78      	cmp	r7, #120	; 0x78
 800fa2e:	4691      	mov	r9, r2
 800fa30:	4680      	mov	r8, r0
 800fa32:	460c      	mov	r4, r1
 800fa34:	469a      	mov	sl, r3
 800fa36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa3a:	d807      	bhi.n	800fa4c <_printf_i+0x28>
 800fa3c:	2f62      	cmp	r7, #98	; 0x62
 800fa3e:	d80a      	bhi.n	800fa56 <_printf_i+0x32>
 800fa40:	2f00      	cmp	r7, #0
 800fa42:	f000 80d4 	beq.w	800fbee <_printf_i+0x1ca>
 800fa46:	2f58      	cmp	r7, #88	; 0x58
 800fa48:	f000 80c0 	beq.w	800fbcc <_printf_i+0x1a8>
 800fa4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa54:	e03a      	b.n	800facc <_printf_i+0xa8>
 800fa56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa5a:	2b15      	cmp	r3, #21
 800fa5c:	d8f6      	bhi.n	800fa4c <_printf_i+0x28>
 800fa5e:	a101      	add	r1, pc, #4	; (adr r1, 800fa64 <_printf_i+0x40>)
 800fa60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa64:	0800fabd 	.word	0x0800fabd
 800fa68:	0800fad1 	.word	0x0800fad1
 800fa6c:	0800fa4d 	.word	0x0800fa4d
 800fa70:	0800fa4d 	.word	0x0800fa4d
 800fa74:	0800fa4d 	.word	0x0800fa4d
 800fa78:	0800fa4d 	.word	0x0800fa4d
 800fa7c:	0800fad1 	.word	0x0800fad1
 800fa80:	0800fa4d 	.word	0x0800fa4d
 800fa84:	0800fa4d 	.word	0x0800fa4d
 800fa88:	0800fa4d 	.word	0x0800fa4d
 800fa8c:	0800fa4d 	.word	0x0800fa4d
 800fa90:	0800fbd5 	.word	0x0800fbd5
 800fa94:	0800fafd 	.word	0x0800fafd
 800fa98:	0800fb8f 	.word	0x0800fb8f
 800fa9c:	0800fa4d 	.word	0x0800fa4d
 800faa0:	0800fa4d 	.word	0x0800fa4d
 800faa4:	0800fbf7 	.word	0x0800fbf7
 800faa8:	0800fa4d 	.word	0x0800fa4d
 800faac:	0800fafd 	.word	0x0800fafd
 800fab0:	0800fa4d 	.word	0x0800fa4d
 800fab4:	0800fa4d 	.word	0x0800fa4d
 800fab8:	0800fb97 	.word	0x0800fb97
 800fabc:	682b      	ldr	r3, [r5, #0]
 800fabe:	1d1a      	adds	r2, r3, #4
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	602a      	str	r2, [r5, #0]
 800fac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800facc:	2301      	movs	r3, #1
 800face:	e09f      	b.n	800fc10 <_printf_i+0x1ec>
 800fad0:	6820      	ldr	r0, [r4, #0]
 800fad2:	682b      	ldr	r3, [r5, #0]
 800fad4:	0607      	lsls	r7, r0, #24
 800fad6:	f103 0104 	add.w	r1, r3, #4
 800fada:	6029      	str	r1, [r5, #0]
 800fadc:	d501      	bpl.n	800fae2 <_printf_i+0xbe>
 800fade:	681e      	ldr	r6, [r3, #0]
 800fae0:	e003      	b.n	800faea <_printf_i+0xc6>
 800fae2:	0646      	lsls	r6, r0, #25
 800fae4:	d5fb      	bpl.n	800fade <_printf_i+0xba>
 800fae6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800faea:	2e00      	cmp	r6, #0
 800faec:	da03      	bge.n	800faf6 <_printf_i+0xd2>
 800faee:	232d      	movs	r3, #45	; 0x2d
 800faf0:	4276      	negs	r6, r6
 800faf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800faf6:	485a      	ldr	r0, [pc, #360]	; (800fc60 <_printf_i+0x23c>)
 800faf8:	230a      	movs	r3, #10
 800fafa:	e012      	b.n	800fb22 <_printf_i+0xfe>
 800fafc:	682b      	ldr	r3, [r5, #0]
 800fafe:	6820      	ldr	r0, [r4, #0]
 800fb00:	1d19      	adds	r1, r3, #4
 800fb02:	6029      	str	r1, [r5, #0]
 800fb04:	0605      	lsls	r5, r0, #24
 800fb06:	d501      	bpl.n	800fb0c <_printf_i+0xe8>
 800fb08:	681e      	ldr	r6, [r3, #0]
 800fb0a:	e002      	b.n	800fb12 <_printf_i+0xee>
 800fb0c:	0641      	lsls	r1, r0, #25
 800fb0e:	d5fb      	bpl.n	800fb08 <_printf_i+0xe4>
 800fb10:	881e      	ldrh	r6, [r3, #0]
 800fb12:	4853      	ldr	r0, [pc, #332]	; (800fc60 <_printf_i+0x23c>)
 800fb14:	2f6f      	cmp	r7, #111	; 0x6f
 800fb16:	bf0c      	ite	eq
 800fb18:	2308      	moveq	r3, #8
 800fb1a:	230a      	movne	r3, #10
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb22:	6865      	ldr	r5, [r4, #4]
 800fb24:	60a5      	str	r5, [r4, #8]
 800fb26:	2d00      	cmp	r5, #0
 800fb28:	bfa2      	ittt	ge
 800fb2a:	6821      	ldrge	r1, [r4, #0]
 800fb2c:	f021 0104 	bicge.w	r1, r1, #4
 800fb30:	6021      	strge	r1, [r4, #0]
 800fb32:	b90e      	cbnz	r6, 800fb38 <_printf_i+0x114>
 800fb34:	2d00      	cmp	r5, #0
 800fb36:	d04b      	beq.n	800fbd0 <_printf_i+0x1ac>
 800fb38:	4615      	mov	r5, r2
 800fb3a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb3e:	fb03 6711 	mls	r7, r3, r1, r6
 800fb42:	5dc7      	ldrb	r7, [r0, r7]
 800fb44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb48:	4637      	mov	r7, r6
 800fb4a:	42bb      	cmp	r3, r7
 800fb4c:	460e      	mov	r6, r1
 800fb4e:	d9f4      	bls.n	800fb3a <_printf_i+0x116>
 800fb50:	2b08      	cmp	r3, #8
 800fb52:	d10b      	bne.n	800fb6c <_printf_i+0x148>
 800fb54:	6823      	ldr	r3, [r4, #0]
 800fb56:	07de      	lsls	r6, r3, #31
 800fb58:	d508      	bpl.n	800fb6c <_printf_i+0x148>
 800fb5a:	6923      	ldr	r3, [r4, #16]
 800fb5c:	6861      	ldr	r1, [r4, #4]
 800fb5e:	4299      	cmp	r1, r3
 800fb60:	bfde      	ittt	le
 800fb62:	2330      	movle	r3, #48	; 0x30
 800fb64:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb68:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb6c:	1b52      	subs	r2, r2, r5
 800fb6e:	6122      	str	r2, [r4, #16]
 800fb70:	f8cd a000 	str.w	sl, [sp]
 800fb74:	464b      	mov	r3, r9
 800fb76:	aa03      	add	r2, sp, #12
 800fb78:	4621      	mov	r1, r4
 800fb7a:	4640      	mov	r0, r8
 800fb7c:	f7ff fee4 	bl	800f948 <_printf_common>
 800fb80:	3001      	adds	r0, #1
 800fb82:	d14a      	bne.n	800fc1a <_printf_i+0x1f6>
 800fb84:	f04f 30ff 	mov.w	r0, #4294967295
 800fb88:	b004      	add	sp, #16
 800fb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb8e:	6823      	ldr	r3, [r4, #0]
 800fb90:	f043 0320 	orr.w	r3, r3, #32
 800fb94:	6023      	str	r3, [r4, #0]
 800fb96:	4833      	ldr	r0, [pc, #204]	; (800fc64 <_printf_i+0x240>)
 800fb98:	2778      	movs	r7, #120	; 0x78
 800fb9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	6829      	ldr	r1, [r5, #0]
 800fba2:	061f      	lsls	r7, r3, #24
 800fba4:	f851 6b04 	ldr.w	r6, [r1], #4
 800fba8:	d402      	bmi.n	800fbb0 <_printf_i+0x18c>
 800fbaa:	065f      	lsls	r7, r3, #25
 800fbac:	bf48      	it	mi
 800fbae:	b2b6      	uxthmi	r6, r6
 800fbb0:	07df      	lsls	r7, r3, #31
 800fbb2:	bf48      	it	mi
 800fbb4:	f043 0320 	orrmi.w	r3, r3, #32
 800fbb8:	6029      	str	r1, [r5, #0]
 800fbba:	bf48      	it	mi
 800fbbc:	6023      	strmi	r3, [r4, #0]
 800fbbe:	b91e      	cbnz	r6, 800fbc8 <_printf_i+0x1a4>
 800fbc0:	6823      	ldr	r3, [r4, #0]
 800fbc2:	f023 0320 	bic.w	r3, r3, #32
 800fbc6:	6023      	str	r3, [r4, #0]
 800fbc8:	2310      	movs	r3, #16
 800fbca:	e7a7      	b.n	800fb1c <_printf_i+0xf8>
 800fbcc:	4824      	ldr	r0, [pc, #144]	; (800fc60 <_printf_i+0x23c>)
 800fbce:	e7e4      	b.n	800fb9a <_printf_i+0x176>
 800fbd0:	4615      	mov	r5, r2
 800fbd2:	e7bd      	b.n	800fb50 <_printf_i+0x12c>
 800fbd4:	682b      	ldr	r3, [r5, #0]
 800fbd6:	6826      	ldr	r6, [r4, #0]
 800fbd8:	6961      	ldr	r1, [r4, #20]
 800fbda:	1d18      	adds	r0, r3, #4
 800fbdc:	6028      	str	r0, [r5, #0]
 800fbde:	0635      	lsls	r5, r6, #24
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	d501      	bpl.n	800fbe8 <_printf_i+0x1c4>
 800fbe4:	6019      	str	r1, [r3, #0]
 800fbe6:	e002      	b.n	800fbee <_printf_i+0x1ca>
 800fbe8:	0670      	lsls	r0, r6, #25
 800fbea:	d5fb      	bpl.n	800fbe4 <_printf_i+0x1c0>
 800fbec:	8019      	strh	r1, [r3, #0]
 800fbee:	2300      	movs	r3, #0
 800fbf0:	6123      	str	r3, [r4, #16]
 800fbf2:	4615      	mov	r5, r2
 800fbf4:	e7bc      	b.n	800fb70 <_printf_i+0x14c>
 800fbf6:	682b      	ldr	r3, [r5, #0]
 800fbf8:	1d1a      	adds	r2, r3, #4
 800fbfa:	602a      	str	r2, [r5, #0]
 800fbfc:	681d      	ldr	r5, [r3, #0]
 800fbfe:	6862      	ldr	r2, [r4, #4]
 800fc00:	2100      	movs	r1, #0
 800fc02:	4628      	mov	r0, r5
 800fc04:	f7f0 fb1c 	bl	8000240 <memchr>
 800fc08:	b108      	cbz	r0, 800fc0e <_printf_i+0x1ea>
 800fc0a:	1b40      	subs	r0, r0, r5
 800fc0c:	6060      	str	r0, [r4, #4]
 800fc0e:	6863      	ldr	r3, [r4, #4]
 800fc10:	6123      	str	r3, [r4, #16]
 800fc12:	2300      	movs	r3, #0
 800fc14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc18:	e7aa      	b.n	800fb70 <_printf_i+0x14c>
 800fc1a:	6923      	ldr	r3, [r4, #16]
 800fc1c:	462a      	mov	r2, r5
 800fc1e:	4649      	mov	r1, r9
 800fc20:	4640      	mov	r0, r8
 800fc22:	47d0      	blx	sl
 800fc24:	3001      	adds	r0, #1
 800fc26:	d0ad      	beq.n	800fb84 <_printf_i+0x160>
 800fc28:	6823      	ldr	r3, [r4, #0]
 800fc2a:	079b      	lsls	r3, r3, #30
 800fc2c:	d413      	bmi.n	800fc56 <_printf_i+0x232>
 800fc2e:	68e0      	ldr	r0, [r4, #12]
 800fc30:	9b03      	ldr	r3, [sp, #12]
 800fc32:	4298      	cmp	r0, r3
 800fc34:	bfb8      	it	lt
 800fc36:	4618      	movlt	r0, r3
 800fc38:	e7a6      	b.n	800fb88 <_printf_i+0x164>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	4632      	mov	r2, r6
 800fc3e:	4649      	mov	r1, r9
 800fc40:	4640      	mov	r0, r8
 800fc42:	47d0      	blx	sl
 800fc44:	3001      	adds	r0, #1
 800fc46:	d09d      	beq.n	800fb84 <_printf_i+0x160>
 800fc48:	3501      	adds	r5, #1
 800fc4a:	68e3      	ldr	r3, [r4, #12]
 800fc4c:	9903      	ldr	r1, [sp, #12]
 800fc4e:	1a5b      	subs	r3, r3, r1
 800fc50:	42ab      	cmp	r3, r5
 800fc52:	dcf2      	bgt.n	800fc3a <_printf_i+0x216>
 800fc54:	e7eb      	b.n	800fc2e <_printf_i+0x20a>
 800fc56:	2500      	movs	r5, #0
 800fc58:	f104 0619 	add.w	r6, r4, #25
 800fc5c:	e7f5      	b.n	800fc4a <_printf_i+0x226>
 800fc5e:	bf00      	nop
 800fc60:	08013f02 	.word	0x08013f02
 800fc64:	08013f13 	.word	0x08013f13

0800fc68 <_scanf_float>:
 800fc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc6c:	b087      	sub	sp, #28
 800fc6e:	4617      	mov	r7, r2
 800fc70:	9303      	str	r3, [sp, #12]
 800fc72:	688b      	ldr	r3, [r1, #8]
 800fc74:	1e5a      	subs	r2, r3, #1
 800fc76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fc7a:	bf83      	ittte	hi
 800fc7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fc80:	195b      	addhi	r3, r3, r5
 800fc82:	9302      	strhi	r3, [sp, #8]
 800fc84:	2300      	movls	r3, #0
 800fc86:	bf86      	itte	hi
 800fc88:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fc8c:	608b      	strhi	r3, [r1, #8]
 800fc8e:	9302      	strls	r3, [sp, #8]
 800fc90:	680b      	ldr	r3, [r1, #0]
 800fc92:	468b      	mov	fp, r1
 800fc94:	2500      	movs	r5, #0
 800fc96:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fc9a:	f84b 3b1c 	str.w	r3, [fp], #28
 800fc9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fca2:	4680      	mov	r8, r0
 800fca4:	460c      	mov	r4, r1
 800fca6:	465e      	mov	r6, fp
 800fca8:	46aa      	mov	sl, r5
 800fcaa:	46a9      	mov	r9, r5
 800fcac:	9501      	str	r5, [sp, #4]
 800fcae:	68a2      	ldr	r2, [r4, #8]
 800fcb0:	b152      	cbz	r2, 800fcc8 <_scanf_float+0x60>
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	2b4e      	cmp	r3, #78	; 0x4e
 800fcb8:	d864      	bhi.n	800fd84 <_scanf_float+0x11c>
 800fcba:	2b40      	cmp	r3, #64	; 0x40
 800fcbc:	d83c      	bhi.n	800fd38 <_scanf_float+0xd0>
 800fcbe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fcc2:	b2c8      	uxtb	r0, r1
 800fcc4:	280e      	cmp	r0, #14
 800fcc6:	d93a      	bls.n	800fd3e <_scanf_float+0xd6>
 800fcc8:	f1b9 0f00 	cmp.w	r9, #0
 800fccc:	d003      	beq.n	800fcd6 <_scanf_float+0x6e>
 800fcce:	6823      	ldr	r3, [r4, #0]
 800fcd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcd4:	6023      	str	r3, [r4, #0]
 800fcd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcda:	f1ba 0f01 	cmp.w	sl, #1
 800fcde:	f200 8113 	bhi.w	800ff08 <_scanf_float+0x2a0>
 800fce2:	455e      	cmp	r6, fp
 800fce4:	f200 8105 	bhi.w	800fef2 <_scanf_float+0x28a>
 800fce8:	2501      	movs	r5, #1
 800fcea:	4628      	mov	r0, r5
 800fcec:	b007      	add	sp, #28
 800fcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fcf6:	2a0d      	cmp	r2, #13
 800fcf8:	d8e6      	bhi.n	800fcc8 <_scanf_float+0x60>
 800fcfa:	a101      	add	r1, pc, #4	; (adr r1, 800fd00 <_scanf_float+0x98>)
 800fcfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fd00:	0800fe3f 	.word	0x0800fe3f
 800fd04:	0800fcc9 	.word	0x0800fcc9
 800fd08:	0800fcc9 	.word	0x0800fcc9
 800fd0c:	0800fcc9 	.word	0x0800fcc9
 800fd10:	0800fe9f 	.word	0x0800fe9f
 800fd14:	0800fe77 	.word	0x0800fe77
 800fd18:	0800fcc9 	.word	0x0800fcc9
 800fd1c:	0800fcc9 	.word	0x0800fcc9
 800fd20:	0800fe4d 	.word	0x0800fe4d
 800fd24:	0800fcc9 	.word	0x0800fcc9
 800fd28:	0800fcc9 	.word	0x0800fcc9
 800fd2c:	0800fcc9 	.word	0x0800fcc9
 800fd30:	0800fcc9 	.word	0x0800fcc9
 800fd34:	0800fe05 	.word	0x0800fe05
 800fd38:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fd3c:	e7db      	b.n	800fcf6 <_scanf_float+0x8e>
 800fd3e:	290e      	cmp	r1, #14
 800fd40:	d8c2      	bhi.n	800fcc8 <_scanf_float+0x60>
 800fd42:	a001      	add	r0, pc, #4	; (adr r0, 800fd48 <_scanf_float+0xe0>)
 800fd44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fd48:	0800fdf7 	.word	0x0800fdf7
 800fd4c:	0800fcc9 	.word	0x0800fcc9
 800fd50:	0800fdf7 	.word	0x0800fdf7
 800fd54:	0800fe8b 	.word	0x0800fe8b
 800fd58:	0800fcc9 	.word	0x0800fcc9
 800fd5c:	0800fda5 	.word	0x0800fda5
 800fd60:	0800fde1 	.word	0x0800fde1
 800fd64:	0800fde1 	.word	0x0800fde1
 800fd68:	0800fde1 	.word	0x0800fde1
 800fd6c:	0800fde1 	.word	0x0800fde1
 800fd70:	0800fde1 	.word	0x0800fde1
 800fd74:	0800fde1 	.word	0x0800fde1
 800fd78:	0800fde1 	.word	0x0800fde1
 800fd7c:	0800fde1 	.word	0x0800fde1
 800fd80:	0800fde1 	.word	0x0800fde1
 800fd84:	2b6e      	cmp	r3, #110	; 0x6e
 800fd86:	d809      	bhi.n	800fd9c <_scanf_float+0x134>
 800fd88:	2b60      	cmp	r3, #96	; 0x60
 800fd8a:	d8b2      	bhi.n	800fcf2 <_scanf_float+0x8a>
 800fd8c:	2b54      	cmp	r3, #84	; 0x54
 800fd8e:	d077      	beq.n	800fe80 <_scanf_float+0x218>
 800fd90:	2b59      	cmp	r3, #89	; 0x59
 800fd92:	d199      	bne.n	800fcc8 <_scanf_float+0x60>
 800fd94:	2d07      	cmp	r5, #7
 800fd96:	d197      	bne.n	800fcc8 <_scanf_float+0x60>
 800fd98:	2508      	movs	r5, #8
 800fd9a:	e029      	b.n	800fdf0 <_scanf_float+0x188>
 800fd9c:	2b74      	cmp	r3, #116	; 0x74
 800fd9e:	d06f      	beq.n	800fe80 <_scanf_float+0x218>
 800fda0:	2b79      	cmp	r3, #121	; 0x79
 800fda2:	e7f6      	b.n	800fd92 <_scanf_float+0x12a>
 800fda4:	6821      	ldr	r1, [r4, #0]
 800fda6:	05c8      	lsls	r0, r1, #23
 800fda8:	d51a      	bpl.n	800fde0 <_scanf_float+0x178>
 800fdaa:	9b02      	ldr	r3, [sp, #8]
 800fdac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fdb0:	6021      	str	r1, [r4, #0]
 800fdb2:	f109 0901 	add.w	r9, r9, #1
 800fdb6:	b11b      	cbz	r3, 800fdc0 <_scanf_float+0x158>
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	3201      	adds	r2, #1
 800fdbc:	9302      	str	r3, [sp, #8]
 800fdbe:	60a2      	str	r2, [r4, #8]
 800fdc0:	68a3      	ldr	r3, [r4, #8]
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	60a3      	str	r3, [r4, #8]
 800fdc6:	6923      	ldr	r3, [r4, #16]
 800fdc8:	3301      	adds	r3, #1
 800fdca:	6123      	str	r3, [r4, #16]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	3b01      	subs	r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	607b      	str	r3, [r7, #4]
 800fdd4:	f340 8084 	ble.w	800fee0 <_scanf_float+0x278>
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	3301      	adds	r3, #1
 800fddc:	603b      	str	r3, [r7, #0]
 800fdde:	e766      	b.n	800fcae <_scanf_float+0x46>
 800fde0:	eb1a 0f05 	cmn.w	sl, r5
 800fde4:	f47f af70 	bne.w	800fcc8 <_scanf_float+0x60>
 800fde8:	6822      	ldr	r2, [r4, #0]
 800fdea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fdee:	6022      	str	r2, [r4, #0]
 800fdf0:	f806 3b01 	strb.w	r3, [r6], #1
 800fdf4:	e7e4      	b.n	800fdc0 <_scanf_float+0x158>
 800fdf6:	6822      	ldr	r2, [r4, #0]
 800fdf8:	0610      	lsls	r0, r2, #24
 800fdfa:	f57f af65 	bpl.w	800fcc8 <_scanf_float+0x60>
 800fdfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fe02:	e7f4      	b.n	800fdee <_scanf_float+0x186>
 800fe04:	f1ba 0f00 	cmp.w	sl, #0
 800fe08:	d10e      	bne.n	800fe28 <_scanf_float+0x1c0>
 800fe0a:	f1b9 0f00 	cmp.w	r9, #0
 800fe0e:	d10e      	bne.n	800fe2e <_scanf_float+0x1c6>
 800fe10:	6822      	ldr	r2, [r4, #0]
 800fe12:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fe16:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fe1a:	d108      	bne.n	800fe2e <_scanf_float+0x1c6>
 800fe1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fe20:	6022      	str	r2, [r4, #0]
 800fe22:	f04f 0a01 	mov.w	sl, #1
 800fe26:	e7e3      	b.n	800fdf0 <_scanf_float+0x188>
 800fe28:	f1ba 0f02 	cmp.w	sl, #2
 800fe2c:	d055      	beq.n	800feda <_scanf_float+0x272>
 800fe2e:	2d01      	cmp	r5, #1
 800fe30:	d002      	beq.n	800fe38 <_scanf_float+0x1d0>
 800fe32:	2d04      	cmp	r5, #4
 800fe34:	f47f af48 	bne.w	800fcc8 <_scanf_float+0x60>
 800fe38:	3501      	adds	r5, #1
 800fe3a:	b2ed      	uxtb	r5, r5
 800fe3c:	e7d8      	b.n	800fdf0 <_scanf_float+0x188>
 800fe3e:	f1ba 0f01 	cmp.w	sl, #1
 800fe42:	f47f af41 	bne.w	800fcc8 <_scanf_float+0x60>
 800fe46:	f04f 0a02 	mov.w	sl, #2
 800fe4a:	e7d1      	b.n	800fdf0 <_scanf_float+0x188>
 800fe4c:	b97d      	cbnz	r5, 800fe6e <_scanf_float+0x206>
 800fe4e:	f1b9 0f00 	cmp.w	r9, #0
 800fe52:	f47f af3c 	bne.w	800fcce <_scanf_float+0x66>
 800fe56:	6822      	ldr	r2, [r4, #0]
 800fe58:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fe5c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fe60:	f47f af39 	bne.w	800fcd6 <_scanf_float+0x6e>
 800fe64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fe68:	6022      	str	r2, [r4, #0]
 800fe6a:	2501      	movs	r5, #1
 800fe6c:	e7c0      	b.n	800fdf0 <_scanf_float+0x188>
 800fe6e:	2d03      	cmp	r5, #3
 800fe70:	d0e2      	beq.n	800fe38 <_scanf_float+0x1d0>
 800fe72:	2d05      	cmp	r5, #5
 800fe74:	e7de      	b.n	800fe34 <_scanf_float+0x1cc>
 800fe76:	2d02      	cmp	r5, #2
 800fe78:	f47f af26 	bne.w	800fcc8 <_scanf_float+0x60>
 800fe7c:	2503      	movs	r5, #3
 800fe7e:	e7b7      	b.n	800fdf0 <_scanf_float+0x188>
 800fe80:	2d06      	cmp	r5, #6
 800fe82:	f47f af21 	bne.w	800fcc8 <_scanf_float+0x60>
 800fe86:	2507      	movs	r5, #7
 800fe88:	e7b2      	b.n	800fdf0 <_scanf_float+0x188>
 800fe8a:	6822      	ldr	r2, [r4, #0]
 800fe8c:	0591      	lsls	r1, r2, #22
 800fe8e:	f57f af1b 	bpl.w	800fcc8 <_scanf_float+0x60>
 800fe92:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fe96:	6022      	str	r2, [r4, #0]
 800fe98:	f8cd 9004 	str.w	r9, [sp, #4]
 800fe9c:	e7a8      	b.n	800fdf0 <_scanf_float+0x188>
 800fe9e:	6822      	ldr	r2, [r4, #0]
 800fea0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fea4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fea8:	d006      	beq.n	800feb8 <_scanf_float+0x250>
 800feaa:	0550      	lsls	r0, r2, #21
 800feac:	f57f af0c 	bpl.w	800fcc8 <_scanf_float+0x60>
 800feb0:	f1b9 0f00 	cmp.w	r9, #0
 800feb4:	f43f af0f 	beq.w	800fcd6 <_scanf_float+0x6e>
 800feb8:	0591      	lsls	r1, r2, #22
 800feba:	bf58      	it	pl
 800febc:	9901      	ldrpl	r1, [sp, #4]
 800febe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fec2:	bf58      	it	pl
 800fec4:	eba9 0101 	subpl.w	r1, r9, r1
 800fec8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fecc:	bf58      	it	pl
 800fece:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fed2:	6022      	str	r2, [r4, #0]
 800fed4:	f04f 0900 	mov.w	r9, #0
 800fed8:	e78a      	b.n	800fdf0 <_scanf_float+0x188>
 800feda:	f04f 0a03 	mov.w	sl, #3
 800fede:	e787      	b.n	800fdf0 <_scanf_float+0x188>
 800fee0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fee4:	4639      	mov	r1, r7
 800fee6:	4640      	mov	r0, r8
 800fee8:	4798      	blx	r3
 800feea:	2800      	cmp	r0, #0
 800feec:	f43f aedf 	beq.w	800fcae <_scanf_float+0x46>
 800fef0:	e6ea      	b.n	800fcc8 <_scanf_float+0x60>
 800fef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fef6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fefa:	463a      	mov	r2, r7
 800fefc:	4640      	mov	r0, r8
 800fefe:	4798      	blx	r3
 800ff00:	6923      	ldr	r3, [r4, #16]
 800ff02:	3b01      	subs	r3, #1
 800ff04:	6123      	str	r3, [r4, #16]
 800ff06:	e6ec      	b.n	800fce2 <_scanf_float+0x7a>
 800ff08:	1e6b      	subs	r3, r5, #1
 800ff0a:	2b06      	cmp	r3, #6
 800ff0c:	d825      	bhi.n	800ff5a <_scanf_float+0x2f2>
 800ff0e:	2d02      	cmp	r5, #2
 800ff10:	d836      	bhi.n	800ff80 <_scanf_float+0x318>
 800ff12:	455e      	cmp	r6, fp
 800ff14:	f67f aee8 	bls.w	800fce8 <_scanf_float+0x80>
 800ff18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff20:	463a      	mov	r2, r7
 800ff22:	4640      	mov	r0, r8
 800ff24:	4798      	blx	r3
 800ff26:	6923      	ldr	r3, [r4, #16]
 800ff28:	3b01      	subs	r3, #1
 800ff2a:	6123      	str	r3, [r4, #16]
 800ff2c:	e7f1      	b.n	800ff12 <_scanf_float+0x2aa>
 800ff2e:	9802      	ldr	r0, [sp, #8]
 800ff30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff34:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ff38:	9002      	str	r0, [sp, #8]
 800ff3a:	463a      	mov	r2, r7
 800ff3c:	4640      	mov	r0, r8
 800ff3e:	4798      	blx	r3
 800ff40:	6923      	ldr	r3, [r4, #16]
 800ff42:	3b01      	subs	r3, #1
 800ff44:	6123      	str	r3, [r4, #16]
 800ff46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff4a:	fa5f fa8a 	uxtb.w	sl, sl
 800ff4e:	f1ba 0f02 	cmp.w	sl, #2
 800ff52:	d1ec      	bne.n	800ff2e <_scanf_float+0x2c6>
 800ff54:	3d03      	subs	r5, #3
 800ff56:	b2ed      	uxtb	r5, r5
 800ff58:	1b76      	subs	r6, r6, r5
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	05da      	lsls	r2, r3, #23
 800ff5e:	d52f      	bpl.n	800ffc0 <_scanf_float+0x358>
 800ff60:	055b      	lsls	r3, r3, #21
 800ff62:	d510      	bpl.n	800ff86 <_scanf_float+0x31e>
 800ff64:	455e      	cmp	r6, fp
 800ff66:	f67f aebf 	bls.w	800fce8 <_scanf_float+0x80>
 800ff6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff72:	463a      	mov	r2, r7
 800ff74:	4640      	mov	r0, r8
 800ff76:	4798      	blx	r3
 800ff78:	6923      	ldr	r3, [r4, #16]
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	6123      	str	r3, [r4, #16]
 800ff7e:	e7f1      	b.n	800ff64 <_scanf_float+0x2fc>
 800ff80:	46aa      	mov	sl, r5
 800ff82:	9602      	str	r6, [sp, #8]
 800ff84:	e7df      	b.n	800ff46 <_scanf_float+0x2de>
 800ff86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ff8a:	6923      	ldr	r3, [r4, #16]
 800ff8c:	2965      	cmp	r1, #101	; 0x65
 800ff8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff92:	f106 35ff 	add.w	r5, r6, #4294967295
 800ff96:	6123      	str	r3, [r4, #16]
 800ff98:	d00c      	beq.n	800ffb4 <_scanf_float+0x34c>
 800ff9a:	2945      	cmp	r1, #69	; 0x45
 800ff9c:	d00a      	beq.n	800ffb4 <_scanf_float+0x34c>
 800ff9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffa2:	463a      	mov	r2, r7
 800ffa4:	4640      	mov	r0, r8
 800ffa6:	4798      	blx	r3
 800ffa8:	6923      	ldr	r3, [r4, #16]
 800ffaa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	1eb5      	subs	r5, r6, #2
 800ffb2:	6123      	str	r3, [r4, #16]
 800ffb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffb8:	463a      	mov	r2, r7
 800ffba:	4640      	mov	r0, r8
 800ffbc:	4798      	blx	r3
 800ffbe:	462e      	mov	r6, r5
 800ffc0:	6825      	ldr	r5, [r4, #0]
 800ffc2:	f015 0510 	ands.w	r5, r5, #16
 800ffc6:	d158      	bne.n	801007a <_scanf_float+0x412>
 800ffc8:	7035      	strb	r5, [r6, #0]
 800ffca:	6823      	ldr	r3, [r4, #0]
 800ffcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ffd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffd4:	d11c      	bne.n	8010010 <_scanf_float+0x3a8>
 800ffd6:	9b01      	ldr	r3, [sp, #4]
 800ffd8:	454b      	cmp	r3, r9
 800ffda:	eba3 0209 	sub.w	r2, r3, r9
 800ffde:	d124      	bne.n	801002a <_scanf_float+0x3c2>
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	4659      	mov	r1, fp
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	f002 fcfb 	bl	80129e0 <_strtod_r>
 800ffea:	9b03      	ldr	r3, [sp, #12]
 800ffec:	6821      	ldr	r1, [r4, #0]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f011 0f02 	tst.w	r1, #2
 800fff4:	ec57 6b10 	vmov	r6, r7, d0
 800fff8:	f103 0204 	add.w	r2, r3, #4
 800fffc:	d020      	beq.n	8010040 <_scanf_float+0x3d8>
 800fffe:	9903      	ldr	r1, [sp, #12]
 8010000:	600a      	str	r2, [r1, #0]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	e9c3 6700 	strd	r6, r7, [r3]
 8010008:	68e3      	ldr	r3, [r4, #12]
 801000a:	3301      	adds	r3, #1
 801000c:	60e3      	str	r3, [r4, #12]
 801000e:	e66c      	b.n	800fcea <_scanf_float+0x82>
 8010010:	9b04      	ldr	r3, [sp, #16]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d0e4      	beq.n	800ffe0 <_scanf_float+0x378>
 8010016:	9905      	ldr	r1, [sp, #20]
 8010018:	230a      	movs	r3, #10
 801001a:	462a      	mov	r2, r5
 801001c:	3101      	adds	r1, #1
 801001e:	4640      	mov	r0, r8
 8010020:	f002 fd66 	bl	8012af0 <_strtol_r>
 8010024:	9b04      	ldr	r3, [sp, #16]
 8010026:	9e05      	ldr	r6, [sp, #20]
 8010028:	1ac2      	subs	r2, r0, r3
 801002a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801002e:	429e      	cmp	r6, r3
 8010030:	bf28      	it	cs
 8010032:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010036:	4912      	ldr	r1, [pc, #72]	; (8010080 <_scanf_float+0x418>)
 8010038:	4630      	mov	r0, r6
 801003a:	f000 f8d5 	bl	80101e8 <siprintf>
 801003e:	e7cf      	b.n	800ffe0 <_scanf_float+0x378>
 8010040:	f011 0f04 	tst.w	r1, #4
 8010044:	9903      	ldr	r1, [sp, #12]
 8010046:	600a      	str	r2, [r1, #0]
 8010048:	d1db      	bne.n	8010002 <_scanf_float+0x39a>
 801004a:	f8d3 8000 	ldr.w	r8, [r3]
 801004e:	ee10 2a10 	vmov	r2, s0
 8010052:	ee10 0a10 	vmov	r0, s0
 8010056:	463b      	mov	r3, r7
 8010058:	4639      	mov	r1, r7
 801005a:	f7f0 fd9f 	bl	8000b9c <__aeabi_dcmpun>
 801005e:	b128      	cbz	r0, 801006c <_scanf_float+0x404>
 8010060:	4808      	ldr	r0, [pc, #32]	; (8010084 <_scanf_float+0x41c>)
 8010062:	f000 fa63 	bl	801052c <nanf>
 8010066:	ed88 0a00 	vstr	s0, [r8]
 801006a:	e7cd      	b.n	8010008 <_scanf_float+0x3a0>
 801006c:	4630      	mov	r0, r6
 801006e:	4639      	mov	r1, r7
 8010070:	f7f0 fdf2 	bl	8000c58 <__aeabi_d2f>
 8010074:	f8c8 0000 	str.w	r0, [r8]
 8010078:	e7c6      	b.n	8010008 <_scanf_float+0x3a0>
 801007a:	2500      	movs	r5, #0
 801007c:	e635      	b.n	800fcea <_scanf_float+0x82>
 801007e:	bf00      	nop
 8010080:	08013f24 	.word	0x08013f24
 8010084:	08013fd5 	.word	0x08013fd5

08010088 <std>:
 8010088:	2300      	movs	r3, #0
 801008a:	b510      	push	{r4, lr}
 801008c:	4604      	mov	r4, r0
 801008e:	e9c0 3300 	strd	r3, r3, [r0]
 8010092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010096:	6083      	str	r3, [r0, #8]
 8010098:	8181      	strh	r1, [r0, #12]
 801009a:	6643      	str	r3, [r0, #100]	; 0x64
 801009c:	81c2      	strh	r2, [r0, #14]
 801009e:	6183      	str	r3, [r0, #24]
 80100a0:	4619      	mov	r1, r3
 80100a2:	2208      	movs	r2, #8
 80100a4:	305c      	adds	r0, #92	; 0x5c
 80100a6:	f000 f93b 	bl	8010320 <memset>
 80100aa:	4b05      	ldr	r3, [pc, #20]	; (80100c0 <std+0x38>)
 80100ac:	6263      	str	r3, [r4, #36]	; 0x24
 80100ae:	4b05      	ldr	r3, [pc, #20]	; (80100c4 <std+0x3c>)
 80100b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80100b2:	4b05      	ldr	r3, [pc, #20]	; (80100c8 <std+0x40>)
 80100b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100b6:	4b05      	ldr	r3, [pc, #20]	; (80100cc <std+0x44>)
 80100b8:	6224      	str	r4, [r4, #32]
 80100ba:	6323      	str	r3, [r4, #48]	; 0x30
 80100bc:	bd10      	pop	{r4, pc}
 80100be:	bf00      	nop
 80100c0:	08010229 	.word	0x08010229
 80100c4:	0801024b 	.word	0x0801024b
 80100c8:	08010283 	.word	0x08010283
 80100cc:	080102a7 	.word	0x080102a7

080100d0 <stdio_exit_handler>:
 80100d0:	4a02      	ldr	r2, [pc, #8]	; (80100dc <stdio_exit_handler+0xc>)
 80100d2:	4903      	ldr	r1, [pc, #12]	; (80100e0 <stdio_exit_handler+0x10>)
 80100d4:	4803      	ldr	r0, [pc, #12]	; (80100e4 <stdio_exit_handler+0x14>)
 80100d6:	f000 b869 	b.w	80101ac <_fwalk_sglue>
 80100da:	bf00      	nop
 80100dc:	20000230 	.word	0x20000230
 80100e0:	08013139 	.word	0x08013139
 80100e4:	2000023c 	.word	0x2000023c

080100e8 <cleanup_stdio>:
 80100e8:	6841      	ldr	r1, [r0, #4]
 80100ea:	4b0c      	ldr	r3, [pc, #48]	; (801011c <cleanup_stdio+0x34>)
 80100ec:	4299      	cmp	r1, r3
 80100ee:	b510      	push	{r4, lr}
 80100f0:	4604      	mov	r4, r0
 80100f2:	d001      	beq.n	80100f8 <cleanup_stdio+0x10>
 80100f4:	f003 f820 	bl	8013138 <_fflush_r>
 80100f8:	68a1      	ldr	r1, [r4, #8]
 80100fa:	4b09      	ldr	r3, [pc, #36]	; (8010120 <cleanup_stdio+0x38>)
 80100fc:	4299      	cmp	r1, r3
 80100fe:	d002      	beq.n	8010106 <cleanup_stdio+0x1e>
 8010100:	4620      	mov	r0, r4
 8010102:	f003 f819 	bl	8013138 <_fflush_r>
 8010106:	68e1      	ldr	r1, [r4, #12]
 8010108:	4b06      	ldr	r3, [pc, #24]	; (8010124 <cleanup_stdio+0x3c>)
 801010a:	4299      	cmp	r1, r3
 801010c:	d004      	beq.n	8010118 <cleanup_stdio+0x30>
 801010e:	4620      	mov	r0, r4
 8010110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010114:	f003 b810 	b.w	8013138 <_fflush_r>
 8010118:	bd10      	pop	{r4, pc}
 801011a:	bf00      	nop
 801011c:	2000224c 	.word	0x2000224c
 8010120:	200022b4 	.word	0x200022b4
 8010124:	2000231c 	.word	0x2000231c

08010128 <global_stdio_init.part.0>:
 8010128:	b510      	push	{r4, lr}
 801012a:	4b0b      	ldr	r3, [pc, #44]	; (8010158 <global_stdio_init.part.0+0x30>)
 801012c:	4c0b      	ldr	r4, [pc, #44]	; (801015c <global_stdio_init.part.0+0x34>)
 801012e:	4a0c      	ldr	r2, [pc, #48]	; (8010160 <global_stdio_init.part.0+0x38>)
 8010130:	601a      	str	r2, [r3, #0]
 8010132:	4620      	mov	r0, r4
 8010134:	2200      	movs	r2, #0
 8010136:	2104      	movs	r1, #4
 8010138:	f7ff ffa6 	bl	8010088 <std>
 801013c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010140:	2201      	movs	r2, #1
 8010142:	2109      	movs	r1, #9
 8010144:	f7ff ffa0 	bl	8010088 <std>
 8010148:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801014c:	2202      	movs	r2, #2
 801014e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010152:	2112      	movs	r1, #18
 8010154:	f7ff bf98 	b.w	8010088 <std>
 8010158:	20002384 	.word	0x20002384
 801015c:	2000224c 	.word	0x2000224c
 8010160:	080100d1 	.word	0x080100d1

08010164 <__sfp_lock_acquire>:
 8010164:	4801      	ldr	r0, [pc, #4]	; (801016c <__sfp_lock_acquire+0x8>)
 8010166:	f000 b9c9 	b.w	80104fc <__retarget_lock_acquire_recursive>
 801016a:	bf00      	nop
 801016c:	2000238d 	.word	0x2000238d

08010170 <__sfp_lock_release>:
 8010170:	4801      	ldr	r0, [pc, #4]	; (8010178 <__sfp_lock_release+0x8>)
 8010172:	f000 b9c4 	b.w	80104fe <__retarget_lock_release_recursive>
 8010176:	bf00      	nop
 8010178:	2000238d 	.word	0x2000238d

0801017c <__sinit>:
 801017c:	b510      	push	{r4, lr}
 801017e:	4604      	mov	r4, r0
 8010180:	f7ff fff0 	bl	8010164 <__sfp_lock_acquire>
 8010184:	6a23      	ldr	r3, [r4, #32]
 8010186:	b11b      	cbz	r3, 8010190 <__sinit+0x14>
 8010188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801018c:	f7ff bff0 	b.w	8010170 <__sfp_lock_release>
 8010190:	4b04      	ldr	r3, [pc, #16]	; (80101a4 <__sinit+0x28>)
 8010192:	6223      	str	r3, [r4, #32]
 8010194:	4b04      	ldr	r3, [pc, #16]	; (80101a8 <__sinit+0x2c>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d1f5      	bne.n	8010188 <__sinit+0xc>
 801019c:	f7ff ffc4 	bl	8010128 <global_stdio_init.part.0>
 80101a0:	e7f2      	b.n	8010188 <__sinit+0xc>
 80101a2:	bf00      	nop
 80101a4:	080100e9 	.word	0x080100e9
 80101a8:	20002384 	.word	0x20002384

080101ac <_fwalk_sglue>:
 80101ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b0:	4607      	mov	r7, r0
 80101b2:	4688      	mov	r8, r1
 80101b4:	4614      	mov	r4, r2
 80101b6:	2600      	movs	r6, #0
 80101b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101bc:	f1b9 0901 	subs.w	r9, r9, #1
 80101c0:	d505      	bpl.n	80101ce <_fwalk_sglue+0x22>
 80101c2:	6824      	ldr	r4, [r4, #0]
 80101c4:	2c00      	cmp	r4, #0
 80101c6:	d1f7      	bne.n	80101b8 <_fwalk_sglue+0xc>
 80101c8:	4630      	mov	r0, r6
 80101ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101ce:	89ab      	ldrh	r3, [r5, #12]
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d907      	bls.n	80101e4 <_fwalk_sglue+0x38>
 80101d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101d8:	3301      	adds	r3, #1
 80101da:	d003      	beq.n	80101e4 <_fwalk_sglue+0x38>
 80101dc:	4629      	mov	r1, r5
 80101de:	4638      	mov	r0, r7
 80101e0:	47c0      	blx	r8
 80101e2:	4306      	orrs	r6, r0
 80101e4:	3568      	adds	r5, #104	; 0x68
 80101e6:	e7e9      	b.n	80101bc <_fwalk_sglue+0x10>

080101e8 <siprintf>:
 80101e8:	b40e      	push	{r1, r2, r3}
 80101ea:	b500      	push	{lr}
 80101ec:	b09c      	sub	sp, #112	; 0x70
 80101ee:	ab1d      	add	r3, sp, #116	; 0x74
 80101f0:	9002      	str	r0, [sp, #8]
 80101f2:	9006      	str	r0, [sp, #24]
 80101f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80101f8:	4809      	ldr	r0, [pc, #36]	; (8010220 <siprintf+0x38>)
 80101fa:	9107      	str	r1, [sp, #28]
 80101fc:	9104      	str	r1, [sp, #16]
 80101fe:	4909      	ldr	r1, [pc, #36]	; (8010224 <siprintf+0x3c>)
 8010200:	f853 2b04 	ldr.w	r2, [r3], #4
 8010204:	9105      	str	r1, [sp, #20]
 8010206:	6800      	ldr	r0, [r0, #0]
 8010208:	9301      	str	r3, [sp, #4]
 801020a:	a902      	add	r1, sp, #8
 801020c:	f002 fccc 	bl	8012ba8 <_svfiprintf_r>
 8010210:	9b02      	ldr	r3, [sp, #8]
 8010212:	2200      	movs	r2, #0
 8010214:	701a      	strb	r2, [r3, #0]
 8010216:	b01c      	add	sp, #112	; 0x70
 8010218:	f85d eb04 	ldr.w	lr, [sp], #4
 801021c:	b003      	add	sp, #12
 801021e:	4770      	bx	lr
 8010220:	20000288 	.word	0x20000288
 8010224:	ffff0208 	.word	0xffff0208

08010228 <__sread>:
 8010228:	b510      	push	{r4, lr}
 801022a:	460c      	mov	r4, r1
 801022c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010230:	f000 f916 	bl	8010460 <_read_r>
 8010234:	2800      	cmp	r0, #0
 8010236:	bfab      	itete	ge
 8010238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801023a:	89a3      	ldrhlt	r3, [r4, #12]
 801023c:	181b      	addge	r3, r3, r0
 801023e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010242:	bfac      	ite	ge
 8010244:	6563      	strge	r3, [r4, #84]	; 0x54
 8010246:	81a3      	strhlt	r3, [r4, #12]
 8010248:	bd10      	pop	{r4, pc}

0801024a <__swrite>:
 801024a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801024e:	461f      	mov	r7, r3
 8010250:	898b      	ldrh	r3, [r1, #12]
 8010252:	05db      	lsls	r3, r3, #23
 8010254:	4605      	mov	r5, r0
 8010256:	460c      	mov	r4, r1
 8010258:	4616      	mov	r6, r2
 801025a:	d505      	bpl.n	8010268 <__swrite+0x1e>
 801025c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010260:	2302      	movs	r3, #2
 8010262:	2200      	movs	r2, #0
 8010264:	f000 f8ea 	bl	801043c <_lseek_r>
 8010268:	89a3      	ldrh	r3, [r4, #12]
 801026a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801026e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010272:	81a3      	strh	r3, [r4, #12]
 8010274:	4632      	mov	r2, r6
 8010276:	463b      	mov	r3, r7
 8010278:	4628      	mov	r0, r5
 801027a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801027e:	f000 b901 	b.w	8010484 <_write_r>

08010282 <__sseek>:
 8010282:	b510      	push	{r4, lr}
 8010284:	460c      	mov	r4, r1
 8010286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801028a:	f000 f8d7 	bl	801043c <_lseek_r>
 801028e:	1c43      	adds	r3, r0, #1
 8010290:	89a3      	ldrh	r3, [r4, #12]
 8010292:	bf15      	itete	ne
 8010294:	6560      	strne	r0, [r4, #84]	; 0x54
 8010296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801029a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801029e:	81a3      	strheq	r3, [r4, #12]
 80102a0:	bf18      	it	ne
 80102a2:	81a3      	strhne	r3, [r4, #12]
 80102a4:	bd10      	pop	{r4, pc}

080102a6 <__sclose>:
 80102a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102aa:	f000 b8b7 	b.w	801041c <_close_r>

080102ae <_vsniprintf_r>:
 80102ae:	b530      	push	{r4, r5, lr}
 80102b0:	4614      	mov	r4, r2
 80102b2:	2c00      	cmp	r4, #0
 80102b4:	b09b      	sub	sp, #108	; 0x6c
 80102b6:	4605      	mov	r5, r0
 80102b8:	461a      	mov	r2, r3
 80102ba:	da05      	bge.n	80102c8 <_vsniprintf_r+0x1a>
 80102bc:	238b      	movs	r3, #139	; 0x8b
 80102be:	6003      	str	r3, [r0, #0]
 80102c0:	f04f 30ff 	mov.w	r0, #4294967295
 80102c4:	b01b      	add	sp, #108	; 0x6c
 80102c6:	bd30      	pop	{r4, r5, pc}
 80102c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80102cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80102d0:	bf14      	ite	ne
 80102d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80102d6:	4623      	moveq	r3, r4
 80102d8:	9302      	str	r3, [sp, #8]
 80102da:	9305      	str	r3, [sp, #20]
 80102dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102e0:	9100      	str	r1, [sp, #0]
 80102e2:	9104      	str	r1, [sp, #16]
 80102e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80102e8:	4669      	mov	r1, sp
 80102ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80102ec:	f002 fc5c 	bl	8012ba8 <_svfiprintf_r>
 80102f0:	1c43      	adds	r3, r0, #1
 80102f2:	bfbc      	itt	lt
 80102f4:	238b      	movlt	r3, #139	; 0x8b
 80102f6:	602b      	strlt	r3, [r5, #0]
 80102f8:	2c00      	cmp	r4, #0
 80102fa:	d0e3      	beq.n	80102c4 <_vsniprintf_r+0x16>
 80102fc:	9b00      	ldr	r3, [sp, #0]
 80102fe:	2200      	movs	r2, #0
 8010300:	701a      	strb	r2, [r3, #0]
 8010302:	e7df      	b.n	80102c4 <_vsniprintf_r+0x16>

08010304 <vsniprintf>:
 8010304:	b507      	push	{r0, r1, r2, lr}
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	4613      	mov	r3, r2
 801030a:	460a      	mov	r2, r1
 801030c:	4601      	mov	r1, r0
 801030e:	4803      	ldr	r0, [pc, #12]	; (801031c <vsniprintf+0x18>)
 8010310:	6800      	ldr	r0, [r0, #0]
 8010312:	f7ff ffcc 	bl	80102ae <_vsniprintf_r>
 8010316:	b003      	add	sp, #12
 8010318:	f85d fb04 	ldr.w	pc, [sp], #4
 801031c:	20000288 	.word	0x20000288

08010320 <memset>:
 8010320:	4402      	add	r2, r0
 8010322:	4603      	mov	r3, r0
 8010324:	4293      	cmp	r3, r2
 8010326:	d100      	bne.n	801032a <memset+0xa>
 8010328:	4770      	bx	lr
 801032a:	f803 1b01 	strb.w	r1, [r3], #1
 801032e:	e7f9      	b.n	8010324 <memset+0x4>

08010330 <strtok>:
 8010330:	4b16      	ldr	r3, [pc, #88]	; (801038c <strtok+0x5c>)
 8010332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010334:	681e      	ldr	r6, [r3, #0]
 8010336:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8010338:	4605      	mov	r5, r0
 801033a:	b9fc      	cbnz	r4, 801037c <strtok+0x4c>
 801033c:	2050      	movs	r0, #80	; 0x50
 801033e:	9101      	str	r1, [sp, #4]
 8010340:	f000 ffe0 	bl	8011304 <malloc>
 8010344:	9901      	ldr	r1, [sp, #4]
 8010346:	6470      	str	r0, [r6, #68]	; 0x44
 8010348:	4602      	mov	r2, r0
 801034a:	b920      	cbnz	r0, 8010356 <strtok+0x26>
 801034c:	4b10      	ldr	r3, [pc, #64]	; (8010390 <strtok+0x60>)
 801034e:	4811      	ldr	r0, [pc, #68]	; (8010394 <strtok+0x64>)
 8010350:	215b      	movs	r1, #91	; 0x5b
 8010352:	f000 f8f1 	bl	8010538 <__assert_func>
 8010356:	e9c0 4400 	strd	r4, r4, [r0]
 801035a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801035e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010362:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010366:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801036a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801036e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010372:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010376:	6184      	str	r4, [r0, #24]
 8010378:	7704      	strb	r4, [r0, #28]
 801037a:	6244      	str	r4, [r0, #36]	; 0x24
 801037c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801037e:	2301      	movs	r3, #1
 8010380:	4628      	mov	r0, r5
 8010382:	b002      	add	sp, #8
 8010384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010388:	f000 b806 	b.w	8010398 <__strtok_r>
 801038c:	20000288 	.word	0x20000288
 8010390:	08013f29 	.word	0x08013f29
 8010394:	08013f40 	.word	0x08013f40

08010398 <__strtok_r>:
 8010398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801039a:	b908      	cbnz	r0, 80103a0 <__strtok_r+0x8>
 801039c:	6810      	ldr	r0, [r2, #0]
 801039e:	b188      	cbz	r0, 80103c4 <__strtok_r+0x2c>
 80103a0:	4604      	mov	r4, r0
 80103a2:	4620      	mov	r0, r4
 80103a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80103a8:	460f      	mov	r7, r1
 80103aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80103ae:	b91e      	cbnz	r6, 80103b8 <__strtok_r+0x20>
 80103b0:	b965      	cbnz	r5, 80103cc <__strtok_r+0x34>
 80103b2:	6015      	str	r5, [r2, #0]
 80103b4:	4628      	mov	r0, r5
 80103b6:	e005      	b.n	80103c4 <__strtok_r+0x2c>
 80103b8:	42b5      	cmp	r5, r6
 80103ba:	d1f6      	bne.n	80103aa <__strtok_r+0x12>
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d1f0      	bne.n	80103a2 <__strtok_r+0xa>
 80103c0:	6014      	str	r4, [r2, #0]
 80103c2:	7003      	strb	r3, [r0, #0]
 80103c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103c6:	461c      	mov	r4, r3
 80103c8:	e00c      	b.n	80103e4 <__strtok_r+0x4c>
 80103ca:	b915      	cbnz	r5, 80103d2 <__strtok_r+0x3a>
 80103cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80103d0:	460e      	mov	r6, r1
 80103d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80103d6:	42ab      	cmp	r3, r5
 80103d8:	d1f7      	bne.n	80103ca <__strtok_r+0x32>
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d0f3      	beq.n	80103c6 <__strtok_r+0x2e>
 80103de:	2300      	movs	r3, #0
 80103e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80103e4:	6014      	str	r4, [r2, #0]
 80103e6:	e7ed      	b.n	80103c4 <__strtok_r+0x2c>

080103e8 <strstr>:
 80103e8:	780a      	ldrb	r2, [r1, #0]
 80103ea:	b570      	push	{r4, r5, r6, lr}
 80103ec:	b96a      	cbnz	r2, 801040a <strstr+0x22>
 80103ee:	bd70      	pop	{r4, r5, r6, pc}
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d109      	bne.n	8010408 <strstr+0x20>
 80103f4:	460c      	mov	r4, r1
 80103f6:	4605      	mov	r5, r0
 80103f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d0f6      	beq.n	80103ee <strstr+0x6>
 8010400:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010404:	429e      	cmp	r6, r3
 8010406:	d0f7      	beq.n	80103f8 <strstr+0x10>
 8010408:	3001      	adds	r0, #1
 801040a:	7803      	ldrb	r3, [r0, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d1ef      	bne.n	80103f0 <strstr+0x8>
 8010410:	4618      	mov	r0, r3
 8010412:	e7ec      	b.n	80103ee <strstr+0x6>

08010414 <_localeconv_r>:
 8010414:	4800      	ldr	r0, [pc, #0]	; (8010418 <_localeconv_r+0x4>)
 8010416:	4770      	bx	lr
 8010418:	2000037c 	.word	0x2000037c

0801041c <_close_r>:
 801041c:	b538      	push	{r3, r4, r5, lr}
 801041e:	4d06      	ldr	r5, [pc, #24]	; (8010438 <_close_r+0x1c>)
 8010420:	2300      	movs	r3, #0
 8010422:	4604      	mov	r4, r0
 8010424:	4608      	mov	r0, r1
 8010426:	602b      	str	r3, [r5, #0]
 8010428:	f7f1 f91d 	bl	8001666 <_close>
 801042c:	1c43      	adds	r3, r0, #1
 801042e:	d102      	bne.n	8010436 <_close_r+0x1a>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	b103      	cbz	r3, 8010436 <_close_r+0x1a>
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	bd38      	pop	{r3, r4, r5, pc}
 8010438:	20002388 	.word	0x20002388

0801043c <_lseek_r>:
 801043c:	b538      	push	{r3, r4, r5, lr}
 801043e:	4d07      	ldr	r5, [pc, #28]	; (801045c <_lseek_r+0x20>)
 8010440:	4604      	mov	r4, r0
 8010442:	4608      	mov	r0, r1
 8010444:	4611      	mov	r1, r2
 8010446:	2200      	movs	r2, #0
 8010448:	602a      	str	r2, [r5, #0]
 801044a:	461a      	mov	r2, r3
 801044c:	f7f1 f932 	bl	80016b4 <_lseek>
 8010450:	1c43      	adds	r3, r0, #1
 8010452:	d102      	bne.n	801045a <_lseek_r+0x1e>
 8010454:	682b      	ldr	r3, [r5, #0]
 8010456:	b103      	cbz	r3, 801045a <_lseek_r+0x1e>
 8010458:	6023      	str	r3, [r4, #0]
 801045a:	bd38      	pop	{r3, r4, r5, pc}
 801045c:	20002388 	.word	0x20002388

08010460 <_read_r>:
 8010460:	b538      	push	{r3, r4, r5, lr}
 8010462:	4d07      	ldr	r5, [pc, #28]	; (8010480 <_read_r+0x20>)
 8010464:	4604      	mov	r4, r0
 8010466:	4608      	mov	r0, r1
 8010468:	4611      	mov	r1, r2
 801046a:	2200      	movs	r2, #0
 801046c:	602a      	str	r2, [r5, #0]
 801046e:	461a      	mov	r2, r3
 8010470:	f7f1 f8c0 	bl	80015f4 <_read>
 8010474:	1c43      	adds	r3, r0, #1
 8010476:	d102      	bne.n	801047e <_read_r+0x1e>
 8010478:	682b      	ldr	r3, [r5, #0]
 801047a:	b103      	cbz	r3, 801047e <_read_r+0x1e>
 801047c:	6023      	str	r3, [r4, #0]
 801047e:	bd38      	pop	{r3, r4, r5, pc}
 8010480:	20002388 	.word	0x20002388

08010484 <_write_r>:
 8010484:	b538      	push	{r3, r4, r5, lr}
 8010486:	4d07      	ldr	r5, [pc, #28]	; (80104a4 <_write_r+0x20>)
 8010488:	4604      	mov	r4, r0
 801048a:	4608      	mov	r0, r1
 801048c:	4611      	mov	r1, r2
 801048e:	2200      	movs	r2, #0
 8010490:	602a      	str	r2, [r5, #0]
 8010492:	461a      	mov	r2, r3
 8010494:	f7f1 f8cb 	bl	800162e <_write>
 8010498:	1c43      	adds	r3, r0, #1
 801049a:	d102      	bne.n	80104a2 <_write_r+0x1e>
 801049c:	682b      	ldr	r3, [r5, #0]
 801049e:	b103      	cbz	r3, 80104a2 <_write_r+0x1e>
 80104a0:	6023      	str	r3, [r4, #0]
 80104a2:	bd38      	pop	{r3, r4, r5, pc}
 80104a4:	20002388 	.word	0x20002388

080104a8 <__errno>:
 80104a8:	4b01      	ldr	r3, [pc, #4]	; (80104b0 <__errno+0x8>)
 80104aa:	6818      	ldr	r0, [r3, #0]
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	20000288 	.word	0x20000288

080104b4 <__libc_init_array>:
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	4d0d      	ldr	r5, [pc, #52]	; (80104ec <__libc_init_array+0x38>)
 80104b8:	4c0d      	ldr	r4, [pc, #52]	; (80104f0 <__libc_init_array+0x3c>)
 80104ba:	1b64      	subs	r4, r4, r5
 80104bc:	10a4      	asrs	r4, r4, #2
 80104be:	2600      	movs	r6, #0
 80104c0:	42a6      	cmp	r6, r4
 80104c2:	d109      	bne.n	80104d8 <__libc_init_array+0x24>
 80104c4:	4d0b      	ldr	r5, [pc, #44]	; (80104f4 <__libc_init_array+0x40>)
 80104c6:	4c0c      	ldr	r4, [pc, #48]	; (80104f8 <__libc_init_array+0x44>)
 80104c8:	f003 fbdc 	bl	8013c84 <_init>
 80104cc:	1b64      	subs	r4, r4, r5
 80104ce:	10a4      	asrs	r4, r4, #2
 80104d0:	2600      	movs	r6, #0
 80104d2:	42a6      	cmp	r6, r4
 80104d4:	d105      	bne.n	80104e2 <__libc_init_array+0x2e>
 80104d6:	bd70      	pop	{r4, r5, r6, pc}
 80104d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80104dc:	4798      	blx	r3
 80104de:	3601      	adds	r6, #1
 80104e0:	e7ee      	b.n	80104c0 <__libc_init_array+0xc>
 80104e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80104e6:	4798      	blx	r3
 80104e8:	3601      	adds	r6, #1
 80104ea:	e7f2      	b.n	80104d2 <__libc_init_array+0x1e>
 80104ec:	0801437c 	.word	0x0801437c
 80104f0:	0801437c 	.word	0x0801437c
 80104f4:	0801437c 	.word	0x0801437c
 80104f8:	08014380 	.word	0x08014380

080104fc <__retarget_lock_acquire_recursive>:
 80104fc:	4770      	bx	lr

080104fe <__retarget_lock_release_recursive>:
 80104fe:	4770      	bx	lr

08010500 <strcpy>:
 8010500:	4603      	mov	r3, r0
 8010502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010506:	f803 2b01 	strb.w	r2, [r3], #1
 801050a:	2a00      	cmp	r2, #0
 801050c:	d1f9      	bne.n	8010502 <strcpy+0x2>
 801050e:	4770      	bx	lr

08010510 <memcpy>:
 8010510:	440a      	add	r2, r1
 8010512:	4291      	cmp	r1, r2
 8010514:	f100 33ff 	add.w	r3, r0, #4294967295
 8010518:	d100      	bne.n	801051c <memcpy+0xc>
 801051a:	4770      	bx	lr
 801051c:	b510      	push	{r4, lr}
 801051e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010526:	4291      	cmp	r1, r2
 8010528:	d1f9      	bne.n	801051e <memcpy+0xe>
 801052a:	bd10      	pop	{r4, pc}

0801052c <nanf>:
 801052c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010534 <nanf+0x8>
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	7fc00000 	.word	0x7fc00000

08010538 <__assert_func>:
 8010538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801053a:	4614      	mov	r4, r2
 801053c:	461a      	mov	r2, r3
 801053e:	4b09      	ldr	r3, [pc, #36]	; (8010564 <__assert_func+0x2c>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4605      	mov	r5, r0
 8010544:	68d8      	ldr	r0, [r3, #12]
 8010546:	b14c      	cbz	r4, 801055c <__assert_func+0x24>
 8010548:	4b07      	ldr	r3, [pc, #28]	; (8010568 <__assert_func+0x30>)
 801054a:	9100      	str	r1, [sp, #0]
 801054c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010550:	4906      	ldr	r1, [pc, #24]	; (801056c <__assert_func+0x34>)
 8010552:	462b      	mov	r3, r5
 8010554:	f002 fe18 	bl	8013188 <fiprintf>
 8010558:	f002 ff02 	bl	8013360 <abort>
 801055c:	4b04      	ldr	r3, [pc, #16]	; (8010570 <__assert_func+0x38>)
 801055e:	461c      	mov	r4, r3
 8010560:	e7f3      	b.n	801054a <__assert_func+0x12>
 8010562:	bf00      	nop
 8010564:	20000288 	.word	0x20000288
 8010568:	08013f9a 	.word	0x08013f9a
 801056c:	08013fa7 	.word	0x08013fa7
 8010570:	08013fd5 	.word	0x08013fd5

08010574 <quorem>:
 8010574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010578:	6903      	ldr	r3, [r0, #16]
 801057a:	690c      	ldr	r4, [r1, #16]
 801057c:	42a3      	cmp	r3, r4
 801057e:	4607      	mov	r7, r0
 8010580:	db7e      	blt.n	8010680 <quorem+0x10c>
 8010582:	3c01      	subs	r4, #1
 8010584:	f101 0814 	add.w	r8, r1, #20
 8010588:	f100 0514 	add.w	r5, r0, #20
 801058c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801059a:	3301      	adds	r3, #1
 801059c:	429a      	cmp	r2, r3
 801059e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80105aa:	d331      	bcc.n	8010610 <quorem+0x9c>
 80105ac:	f04f 0e00 	mov.w	lr, #0
 80105b0:	4640      	mov	r0, r8
 80105b2:	46ac      	mov	ip, r5
 80105b4:	46f2      	mov	sl, lr
 80105b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80105ba:	b293      	uxth	r3, r2
 80105bc:	fb06 e303 	mla	r3, r6, r3, lr
 80105c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80105c4:	0c1a      	lsrs	r2, r3, #16
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	ebaa 0303 	sub.w	r3, sl, r3
 80105cc:	f8dc a000 	ldr.w	sl, [ip]
 80105d0:	fa13 f38a 	uxtah	r3, r3, sl
 80105d4:	fb06 220e 	mla	r2, r6, lr, r2
 80105d8:	9300      	str	r3, [sp, #0]
 80105da:	9b00      	ldr	r3, [sp, #0]
 80105dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80105e0:	b292      	uxth	r2, r2
 80105e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80105e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80105ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80105ee:	4581      	cmp	r9, r0
 80105f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105f4:	f84c 3b04 	str.w	r3, [ip], #4
 80105f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80105fc:	d2db      	bcs.n	80105b6 <quorem+0x42>
 80105fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8010602:	b92b      	cbnz	r3, 8010610 <quorem+0x9c>
 8010604:	9b01      	ldr	r3, [sp, #4]
 8010606:	3b04      	subs	r3, #4
 8010608:	429d      	cmp	r5, r3
 801060a:	461a      	mov	r2, r3
 801060c:	d32c      	bcc.n	8010668 <quorem+0xf4>
 801060e:	613c      	str	r4, [r7, #16]
 8010610:	4638      	mov	r0, r7
 8010612:	f001 f9f1 	bl	80119f8 <__mcmp>
 8010616:	2800      	cmp	r0, #0
 8010618:	db22      	blt.n	8010660 <quorem+0xec>
 801061a:	3601      	adds	r6, #1
 801061c:	4629      	mov	r1, r5
 801061e:	2000      	movs	r0, #0
 8010620:	f858 2b04 	ldr.w	r2, [r8], #4
 8010624:	f8d1 c000 	ldr.w	ip, [r1]
 8010628:	b293      	uxth	r3, r2
 801062a:	1ac3      	subs	r3, r0, r3
 801062c:	0c12      	lsrs	r2, r2, #16
 801062e:	fa13 f38c 	uxtah	r3, r3, ip
 8010632:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010636:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801063a:	b29b      	uxth	r3, r3
 801063c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010640:	45c1      	cmp	r9, r8
 8010642:	f841 3b04 	str.w	r3, [r1], #4
 8010646:	ea4f 4022 	mov.w	r0, r2, asr #16
 801064a:	d2e9      	bcs.n	8010620 <quorem+0xac>
 801064c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010650:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010654:	b922      	cbnz	r2, 8010660 <quorem+0xec>
 8010656:	3b04      	subs	r3, #4
 8010658:	429d      	cmp	r5, r3
 801065a:	461a      	mov	r2, r3
 801065c:	d30a      	bcc.n	8010674 <quorem+0x100>
 801065e:	613c      	str	r4, [r7, #16]
 8010660:	4630      	mov	r0, r6
 8010662:	b003      	add	sp, #12
 8010664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010668:	6812      	ldr	r2, [r2, #0]
 801066a:	3b04      	subs	r3, #4
 801066c:	2a00      	cmp	r2, #0
 801066e:	d1ce      	bne.n	801060e <quorem+0x9a>
 8010670:	3c01      	subs	r4, #1
 8010672:	e7c9      	b.n	8010608 <quorem+0x94>
 8010674:	6812      	ldr	r2, [r2, #0]
 8010676:	3b04      	subs	r3, #4
 8010678:	2a00      	cmp	r2, #0
 801067a:	d1f0      	bne.n	801065e <quorem+0xea>
 801067c:	3c01      	subs	r4, #1
 801067e:	e7eb      	b.n	8010658 <quorem+0xe4>
 8010680:	2000      	movs	r0, #0
 8010682:	e7ee      	b.n	8010662 <quorem+0xee>
 8010684:	0000      	movs	r0, r0
	...

08010688 <_dtoa_r>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	ed2d 8b04 	vpush	{d8-d9}
 8010690:	69c5      	ldr	r5, [r0, #28]
 8010692:	b093      	sub	sp, #76	; 0x4c
 8010694:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010698:	ec57 6b10 	vmov	r6, r7, d0
 801069c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80106a0:	9107      	str	r1, [sp, #28]
 80106a2:	4604      	mov	r4, r0
 80106a4:	920a      	str	r2, [sp, #40]	; 0x28
 80106a6:	930d      	str	r3, [sp, #52]	; 0x34
 80106a8:	b975      	cbnz	r5, 80106c8 <_dtoa_r+0x40>
 80106aa:	2010      	movs	r0, #16
 80106ac:	f000 fe2a 	bl	8011304 <malloc>
 80106b0:	4602      	mov	r2, r0
 80106b2:	61e0      	str	r0, [r4, #28]
 80106b4:	b920      	cbnz	r0, 80106c0 <_dtoa_r+0x38>
 80106b6:	4bae      	ldr	r3, [pc, #696]	; (8010970 <_dtoa_r+0x2e8>)
 80106b8:	21ef      	movs	r1, #239	; 0xef
 80106ba:	48ae      	ldr	r0, [pc, #696]	; (8010974 <_dtoa_r+0x2ec>)
 80106bc:	f7ff ff3c 	bl	8010538 <__assert_func>
 80106c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106c4:	6005      	str	r5, [r0, #0]
 80106c6:	60c5      	str	r5, [r0, #12]
 80106c8:	69e3      	ldr	r3, [r4, #28]
 80106ca:	6819      	ldr	r1, [r3, #0]
 80106cc:	b151      	cbz	r1, 80106e4 <_dtoa_r+0x5c>
 80106ce:	685a      	ldr	r2, [r3, #4]
 80106d0:	604a      	str	r2, [r1, #4]
 80106d2:	2301      	movs	r3, #1
 80106d4:	4093      	lsls	r3, r2
 80106d6:	608b      	str	r3, [r1, #8]
 80106d8:	4620      	mov	r0, r4
 80106da:	f000 ff07 	bl	80114ec <_Bfree>
 80106de:	69e3      	ldr	r3, [r4, #28]
 80106e0:	2200      	movs	r2, #0
 80106e2:	601a      	str	r2, [r3, #0]
 80106e4:	1e3b      	subs	r3, r7, #0
 80106e6:	bfbb      	ittet	lt
 80106e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80106ec:	9303      	strlt	r3, [sp, #12]
 80106ee:	2300      	movge	r3, #0
 80106f0:	2201      	movlt	r2, #1
 80106f2:	bfac      	ite	ge
 80106f4:	f8c8 3000 	strge.w	r3, [r8]
 80106f8:	f8c8 2000 	strlt.w	r2, [r8]
 80106fc:	4b9e      	ldr	r3, [pc, #632]	; (8010978 <_dtoa_r+0x2f0>)
 80106fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010702:	ea33 0308 	bics.w	r3, r3, r8
 8010706:	d11b      	bne.n	8010740 <_dtoa_r+0xb8>
 8010708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801070a:	f242 730f 	movw	r3, #9999	; 0x270f
 801070e:	6013      	str	r3, [r2, #0]
 8010710:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010714:	4333      	orrs	r3, r6
 8010716:	f000 8593 	beq.w	8011240 <_dtoa_r+0xbb8>
 801071a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801071c:	b963      	cbnz	r3, 8010738 <_dtoa_r+0xb0>
 801071e:	4b97      	ldr	r3, [pc, #604]	; (801097c <_dtoa_r+0x2f4>)
 8010720:	e027      	b.n	8010772 <_dtoa_r+0xea>
 8010722:	4b97      	ldr	r3, [pc, #604]	; (8010980 <_dtoa_r+0x2f8>)
 8010724:	9300      	str	r3, [sp, #0]
 8010726:	3308      	adds	r3, #8
 8010728:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	9800      	ldr	r0, [sp, #0]
 801072e:	b013      	add	sp, #76	; 0x4c
 8010730:	ecbd 8b04 	vpop	{d8-d9}
 8010734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010738:	4b90      	ldr	r3, [pc, #576]	; (801097c <_dtoa_r+0x2f4>)
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	3303      	adds	r3, #3
 801073e:	e7f3      	b.n	8010728 <_dtoa_r+0xa0>
 8010740:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010744:	2200      	movs	r2, #0
 8010746:	ec51 0b17 	vmov	r0, r1, d7
 801074a:	eeb0 8a47 	vmov.f32	s16, s14
 801074e:	eef0 8a67 	vmov.f32	s17, s15
 8010752:	2300      	movs	r3, #0
 8010754:	f7f0 f9f0 	bl	8000b38 <__aeabi_dcmpeq>
 8010758:	4681      	mov	r9, r0
 801075a:	b160      	cbz	r0, 8010776 <_dtoa_r+0xee>
 801075c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801075e:	2301      	movs	r3, #1
 8010760:	6013      	str	r3, [r2, #0]
 8010762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 8568 	beq.w	801123a <_dtoa_r+0xbb2>
 801076a:	4b86      	ldr	r3, [pc, #536]	; (8010984 <_dtoa_r+0x2fc>)
 801076c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801076e:	6013      	str	r3, [r2, #0]
 8010770:	3b01      	subs	r3, #1
 8010772:	9300      	str	r3, [sp, #0]
 8010774:	e7da      	b.n	801072c <_dtoa_r+0xa4>
 8010776:	aa10      	add	r2, sp, #64	; 0x40
 8010778:	a911      	add	r1, sp, #68	; 0x44
 801077a:	4620      	mov	r0, r4
 801077c:	eeb0 0a48 	vmov.f32	s0, s16
 8010780:	eef0 0a68 	vmov.f32	s1, s17
 8010784:	f001 fa4e 	bl	8011c24 <__d2b>
 8010788:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801078c:	4682      	mov	sl, r0
 801078e:	2d00      	cmp	r5, #0
 8010790:	d07f      	beq.n	8010892 <_dtoa_r+0x20a>
 8010792:	ee18 3a90 	vmov	r3, s17
 8010796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801079a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801079e:	ec51 0b18 	vmov	r0, r1, d8
 80107a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80107a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80107aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80107ae:	4619      	mov	r1, r3
 80107b0:	2200      	movs	r2, #0
 80107b2:	4b75      	ldr	r3, [pc, #468]	; (8010988 <_dtoa_r+0x300>)
 80107b4:	f7ef fda0 	bl	80002f8 <__aeabi_dsub>
 80107b8:	a367      	add	r3, pc, #412	; (adr r3, 8010958 <_dtoa_r+0x2d0>)
 80107ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107be:	f7ef ff53 	bl	8000668 <__aeabi_dmul>
 80107c2:	a367      	add	r3, pc, #412	; (adr r3, 8010960 <_dtoa_r+0x2d8>)
 80107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c8:	f7ef fd98 	bl	80002fc <__adddf3>
 80107cc:	4606      	mov	r6, r0
 80107ce:	4628      	mov	r0, r5
 80107d0:	460f      	mov	r7, r1
 80107d2:	f7ef fedf 	bl	8000594 <__aeabi_i2d>
 80107d6:	a364      	add	r3, pc, #400	; (adr r3, 8010968 <_dtoa_r+0x2e0>)
 80107d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107dc:	f7ef ff44 	bl	8000668 <__aeabi_dmul>
 80107e0:	4602      	mov	r2, r0
 80107e2:	460b      	mov	r3, r1
 80107e4:	4630      	mov	r0, r6
 80107e6:	4639      	mov	r1, r7
 80107e8:	f7ef fd88 	bl	80002fc <__adddf3>
 80107ec:	4606      	mov	r6, r0
 80107ee:	460f      	mov	r7, r1
 80107f0:	f7f0 f9ea 	bl	8000bc8 <__aeabi_d2iz>
 80107f4:	2200      	movs	r2, #0
 80107f6:	4683      	mov	fp, r0
 80107f8:	2300      	movs	r3, #0
 80107fa:	4630      	mov	r0, r6
 80107fc:	4639      	mov	r1, r7
 80107fe:	f7f0 f9a5 	bl	8000b4c <__aeabi_dcmplt>
 8010802:	b148      	cbz	r0, 8010818 <_dtoa_r+0x190>
 8010804:	4658      	mov	r0, fp
 8010806:	f7ef fec5 	bl	8000594 <__aeabi_i2d>
 801080a:	4632      	mov	r2, r6
 801080c:	463b      	mov	r3, r7
 801080e:	f7f0 f993 	bl	8000b38 <__aeabi_dcmpeq>
 8010812:	b908      	cbnz	r0, 8010818 <_dtoa_r+0x190>
 8010814:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010818:	f1bb 0f16 	cmp.w	fp, #22
 801081c:	d857      	bhi.n	80108ce <_dtoa_r+0x246>
 801081e:	4b5b      	ldr	r3, [pc, #364]	; (801098c <_dtoa_r+0x304>)
 8010820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010828:	ec51 0b18 	vmov	r0, r1, d8
 801082c:	f7f0 f98e 	bl	8000b4c <__aeabi_dcmplt>
 8010830:	2800      	cmp	r0, #0
 8010832:	d04e      	beq.n	80108d2 <_dtoa_r+0x24a>
 8010834:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010838:	2300      	movs	r3, #0
 801083a:	930c      	str	r3, [sp, #48]	; 0x30
 801083c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801083e:	1b5b      	subs	r3, r3, r5
 8010840:	1e5a      	subs	r2, r3, #1
 8010842:	bf45      	ittet	mi
 8010844:	f1c3 0301 	rsbmi	r3, r3, #1
 8010848:	9305      	strmi	r3, [sp, #20]
 801084a:	2300      	movpl	r3, #0
 801084c:	2300      	movmi	r3, #0
 801084e:	9206      	str	r2, [sp, #24]
 8010850:	bf54      	ite	pl
 8010852:	9305      	strpl	r3, [sp, #20]
 8010854:	9306      	strmi	r3, [sp, #24]
 8010856:	f1bb 0f00 	cmp.w	fp, #0
 801085a:	db3c      	blt.n	80108d6 <_dtoa_r+0x24e>
 801085c:	9b06      	ldr	r3, [sp, #24]
 801085e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010862:	445b      	add	r3, fp
 8010864:	9306      	str	r3, [sp, #24]
 8010866:	2300      	movs	r3, #0
 8010868:	9308      	str	r3, [sp, #32]
 801086a:	9b07      	ldr	r3, [sp, #28]
 801086c:	2b09      	cmp	r3, #9
 801086e:	d868      	bhi.n	8010942 <_dtoa_r+0x2ba>
 8010870:	2b05      	cmp	r3, #5
 8010872:	bfc4      	itt	gt
 8010874:	3b04      	subgt	r3, #4
 8010876:	9307      	strgt	r3, [sp, #28]
 8010878:	9b07      	ldr	r3, [sp, #28]
 801087a:	f1a3 0302 	sub.w	r3, r3, #2
 801087e:	bfcc      	ite	gt
 8010880:	2500      	movgt	r5, #0
 8010882:	2501      	movle	r5, #1
 8010884:	2b03      	cmp	r3, #3
 8010886:	f200 8085 	bhi.w	8010994 <_dtoa_r+0x30c>
 801088a:	e8df f003 	tbb	[pc, r3]
 801088e:	3b2e      	.short	0x3b2e
 8010890:	5839      	.short	0x5839
 8010892:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010896:	441d      	add	r5, r3
 8010898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801089c:	2b20      	cmp	r3, #32
 801089e:	bfc1      	itttt	gt
 80108a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80108a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80108ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80108b0:	bfd6      	itet	le
 80108b2:	f1c3 0320 	rsble	r3, r3, #32
 80108b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80108ba:	fa06 f003 	lslle.w	r0, r6, r3
 80108be:	f7ef fe59 	bl	8000574 <__aeabi_ui2d>
 80108c2:	2201      	movs	r2, #1
 80108c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80108c8:	3d01      	subs	r5, #1
 80108ca:	920e      	str	r2, [sp, #56]	; 0x38
 80108cc:	e76f      	b.n	80107ae <_dtoa_r+0x126>
 80108ce:	2301      	movs	r3, #1
 80108d0:	e7b3      	b.n	801083a <_dtoa_r+0x1b2>
 80108d2:	900c      	str	r0, [sp, #48]	; 0x30
 80108d4:	e7b2      	b.n	801083c <_dtoa_r+0x1b4>
 80108d6:	9b05      	ldr	r3, [sp, #20]
 80108d8:	eba3 030b 	sub.w	r3, r3, fp
 80108dc:	9305      	str	r3, [sp, #20]
 80108de:	f1cb 0300 	rsb	r3, fp, #0
 80108e2:	9308      	str	r3, [sp, #32]
 80108e4:	2300      	movs	r3, #0
 80108e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80108e8:	e7bf      	b.n	801086a <_dtoa_r+0x1e2>
 80108ea:	2300      	movs	r3, #0
 80108ec:	9309      	str	r3, [sp, #36]	; 0x24
 80108ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	dc52      	bgt.n	801099a <_dtoa_r+0x312>
 80108f4:	2301      	movs	r3, #1
 80108f6:	9301      	str	r3, [sp, #4]
 80108f8:	9304      	str	r3, [sp, #16]
 80108fa:	461a      	mov	r2, r3
 80108fc:	920a      	str	r2, [sp, #40]	; 0x28
 80108fe:	e00b      	b.n	8010918 <_dtoa_r+0x290>
 8010900:	2301      	movs	r3, #1
 8010902:	e7f3      	b.n	80108ec <_dtoa_r+0x264>
 8010904:	2300      	movs	r3, #0
 8010906:	9309      	str	r3, [sp, #36]	; 0x24
 8010908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801090a:	445b      	add	r3, fp
 801090c:	9301      	str	r3, [sp, #4]
 801090e:	3301      	adds	r3, #1
 8010910:	2b01      	cmp	r3, #1
 8010912:	9304      	str	r3, [sp, #16]
 8010914:	bfb8      	it	lt
 8010916:	2301      	movlt	r3, #1
 8010918:	69e0      	ldr	r0, [r4, #28]
 801091a:	2100      	movs	r1, #0
 801091c:	2204      	movs	r2, #4
 801091e:	f102 0614 	add.w	r6, r2, #20
 8010922:	429e      	cmp	r6, r3
 8010924:	d93d      	bls.n	80109a2 <_dtoa_r+0x31a>
 8010926:	6041      	str	r1, [r0, #4]
 8010928:	4620      	mov	r0, r4
 801092a:	f000 fd9f 	bl	801146c <_Balloc>
 801092e:	9000      	str	r0, [sp, #0]
 8010930:	2800      	cmp	r0, #0
 8010932:	d139      	bne.n	80109a8 <_dtoa_r+0x320>
 8010934:	4b16      	ldr	r3, [pc, #88]	; (8010990 <_dtoa_r+0x308>)
 8010936:	4602      	mov	r2, r0
 8010938:	f240 11af 	movw	r1, #431	; 0x1af
 801093c:	e6bd      	b.n	80106ba <_dtoa_r+0x32>
 801093e:	2301      	movs	r3, #1
 8010940:	e7e1      	b.n	8010906 <_dtoa_r+0x27e>
 8010942:	2501      	movs	r5, #1
 8010944:	2300      	movs	r3, #0
 8010946:	9307      	str	r3, [sp, #28]
 8010948:	9509      	str	r5, [sp, #36]	; 0x24
 801094a:	f04f 33ff 	mov.w	r3, #4294967295
 801094e:	9301      	str	r3, [sp, #4]
 8010950:	9304      	str	r3, [sp, #16]
 8010952:	2200      	movs	r2, #0
 8010954:	2312      	movs	r3, #18
 8010956:	e7d1      	b.n	80108fc <_dtoa_r+0x274>
 8010958:	636f4361 	.word	0x636f4361
 801095c:	3fd287a7 	.word	0x3fd287a7
 8010960:	8b60c8b3 	.word	0x8b60c8b3
 8010964:	3fc68a28 	.word	0x3fc68a28
 8010968:	509f79fb 	.word	0x509f79fb
 801096c:	3fd34413 	.word	0x3fd34413
 8010970:	08013f29 	.word	0x08013f29
 8010974:	08013fe3 	.word	0x08013fe3
 8010978:	7ff00000 	.word	0x7ff00000
 801097c:	08013fdf 	.word	0x08013fdf
 8010980:	08013fd6 	.word	0x08013fd6
 8010984:	08013f01 	.word	0x08013f01
 8010988:	3ff80000 	.word	0x3ff80000
 801098c:	080140d0 	.word	0x080140d0
 8010990:	0801403b 	.word	0x0801403b
 8010994:	2301      	movs	r3, #1
 8010996:	9309      	str	r3, [sp, #36]	; 0x24
 8010998:	e7d7      	b.n	801094a <_dtoa_r+0x2c2>
 801099a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801099c:	9301      	str	r3, [sp, #4]
 801099e:	9304      	str	r3, [sp, #16]
 80109a0:	e7ba      	b.n	8010918 <_dtoa_r+0x290>
 80109a2:	3101      	adds	r1, #1
 80109a4:	0052      	lsls	r2, r2, #1
 80109a6:	e7ba      	b.n	801091e <_dtoa_r+0x296>
 80109a8:	69e3      	ldr	r3, [r4, #28]
 80109aa:	9a00      	ldr	r2, [sp, #0]
 80109ac:	601a      	str	r2, [r3, #0]
 80109ae:	9b04      	ldr	r3, [sp, #16]
 80109b0:	2b0e      	cmp	r3, #14
 80109b2:	f200 80a8 	bhi.w	8010b06 <_dtoa_r+0x47e>
 80109b6:	2d00      	cmp	r5, #0
 80109b8:	f000 80a5 	beq.w	8010b06 <_dtoa_r+0x47e>
 80109bc:	f1bb 0f00 	cmp.w	fp, #0
 80109c0:	dd38      	ble.n	8010a34 <_dtoa_r+0x3ac>
 80109c2:	4bc0      	ldr	r3, [pc, #768]	; (8010cc4 <_dtoa_r+0x63c>)
 80109c4:	f00b 020f 	and.w	r2, fp, #15
 80109c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80109d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80109d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80109d8:	d019      	beq.n	8010a0e <_dtoa_r+0x386>
 80109da:	4bbb      	ldr	r3, [pc, #748]	; (8010cc8 <_dtoa_r+0x640>)
 80109dc:	ec51 0b18 	vmov	r0, r1, d8
 80109e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80109e4:	f7ef ff6a 	bl	80008bc <__aeabi_ddiv>
 80109e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109ec:	f008 080f 	and.w	r8, r8, #15
 80109f0:	2503      	movs	r5, #3
 80109f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010cc8 <_dtoa_r+0x640>
 80109f6:	f1b8 0f00 	cmp.w	r8, #0
 80109fa:	d10a      	bne.n	8010a12 <_dtoa_r+0x38a>
 80109fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a00:	4632      	mov	r2, r6
 8010a02:	463b      	mov	r3, r7
 8010a04:	f7ef ff5a 	bl	80008bc <__aeabi_ddiv>
 8010a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a0c:	e02b      	b.n	8010a66 <_dtoa_r+0x3de>
 8010a0e:	2502      	movs	r5, #2
 8010a10:	e7ef      	b.n	80109f2 <_dtoa_r+0x36a>
 8010a12:	f018 0f01 	tst.w	r8, #1
 8010a16:	d008      	beq.n	8010a2a <_dtoa_r+0x3a2>
 8010a18:	4630      	mov	r0, r6
 8010a1a:	4639      	mov	r1, r7
 8010a1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010a20:	f7ef fe22 	bl	8000668 <__aeabi_dmul>
 8010a24:	3501      	adds	r5, #1
 8010a26:	4606      	mov	r6, r0
 8010a28:	460f      	mov	r7, r1
 8010a2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010a2e:	f109 0908 	add.w	r9, r9, #8
 8010a32:	e7e0      	b.n	80109f6 <_dtoa_r+0x36e>
 8010a34:	f000 809f 	beq.w	8010b76 <_dtoa_r+0x4ee>
 8010a38:	f1cb 0600 	rsb	r6, fp, #0
 8010a3c:	4ba1      	ldr	r3, [pc, #644]	; (8010cc4 <_dtoa_r+0x63c>)
 8010a3e:	4fa2      	ldr	r7, [pc, #648]	; (8010cc8 <_dtoa_r+0x640>)
 8010a40:	f006 020f 	and.w	r2, r6, #15
 8010a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4c:	ec51 0b18 	vmov	r0, r1, d8
 8010a50:	f7ef fe0a 	bl	8000668 <__aeabi_dmul>
 8010a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a58:	1136      	asrs	r6, r6, #4
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	2502      	movs	r5, #2
 8010a5e:	2e00      	cmp	r6, #0
 8010a60:	d17e      	bne.n	8010b60 <_dtoa_r+0x4d8>
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1d0      	bne.n	8010a08 <_dtoa_r+0x380>
 8010a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f000 8084 	beq.w	8010b7a <_dtoa_r+0x4f2>
 8010a72:	4b96      	ldr	r3, [pc, #600]	; (8010ccc <_dtoa_r+0x644>)
 8010a74:	2200      	movs	r2, #0
 8010a76:	4640      	mov	r0, r8
 8010a78:	4649      	mov	r1, r9
 8010a7a:	f7f0 f867 	bl	8000b4c <__aeabi_dcmplt>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d07b      	beq.n	8010b7a <_dtoa_r+0x4f2>
 8010a82:	9b04      	ldr	r3, [sp, #16]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d078      	beq.n	8010b7a <_dtoa_r+0x4f2>
 8010a88:	9b01      	ldr	r3, [sp, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dd39      	ble.n	8010b02 <_dtoa_r+0x47a>
 8010a8e:	4b90      	ldr	r3, [pc, #576]	; (8010cd0 <_dtoa_r+0x648>)
 8010a90:	2200      	movs	r2, #0
 8010a92:	4640      	mov	r0, r8
 8010a94:	4649      	mov	r1, r9
 8010a96:	f7ef fde7 	bl	8000668 <__aeabi_dmul>
 8010a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a9e:	9e01      	ldr	r6, [sp, #4]
 8010aa0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010aa4:	3501      	adds	r5, #1
 8010aa6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f7ef fd72 	bl	8000594 <__aeabi_i2d>
 8010ab0:	4642      	mov	r2, r8
 8010ab2:	464b      	mov	r3, r9
 8010ab4:	f7ef fdd8 	bl	8000668 <__aeabi_dmul>
 8010ab8:	4b86      	ldr	r3, [pc, #536]	; (8010cd4 <_dtoa_r+0x64c>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	f7ef fc1e 	bl	80002fc <__adddf3>
 8010ac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ac8:	9303      	str	r3, [sp, #12]
 8010aca:	2e00      	cmp	r6, #0
 8010acc:	d158      	bne.n	8010b80 <_dtoa_r+0x4f8>
 8010ace:	4b82      	ldr	r3, [pc, #520]	; (8010cd8 <_dtoa_r+0x650>)
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	4640      	mov	r0, r8
 8010ad4:	4649      	mov	r1, r9
 8010ad6:	f7ef fc0f 	bl	80002f8 <__aeabi_dsub>
 8010ada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ade:	4680      	mov	r8, r0
 8010ae0:	4689      	mov	r9, r1
 8010ae2:	f7f0 f851 	bl	8000b88 <__aeabi_dcmpgt>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	f040 8296 	bne.w	8011018 <_dtoa_r+0x990>
 8010aec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010af0:	4640      	mov	r0, r8
 8010af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010af6:	4649      	mov	r1, r9
 8010af8:	f7f0 f828 	bl	8000b4c <__aeabi_dcmplt>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	f040 8289 	bne.w	8011014 <_dtoa_r+0x98c>
 8010b02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f2c0 814e 	blt.w	8010daa <_dtoa_r+0x722>
 8010b0e:	f1bb 0f0e 	cmp.w	fp, #14
 8010b12:	f300 814a 	bgt.w	8010daa <_dtoa_r+0x722>
 8010b16:	4b6b      	ldr	r3, [pc, #428]	; (8010cc4 <_dtoa_r+0x63c>)
 8010b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f280 80dc 	bge.w	8010ce0 <_dtoa_r+0x658>
 8010b28:	9b04      	ldr	r3, [sp, #16]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f300 80d8 	bgt.w	8010ce0 <_dtoa_r+0x658>
 8010b30:	f040 826f 	bne.w	8011012 <_dtoa_r+0x98a>
 8010b34:	4b68      	ldr	r3, [pc, #416]	; (8010cd8 <_dtoa_r+0x650>)
 8010b36:	2200      	movs	r2, #0
 8010b38:	4640      	mov	r0, r8
 8010b3a:	4649      	mov	r1, r9
 8010b3c:	f7ef fd94 	bl	8000668 <__aeabi_dmul>
 8010b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b44:	f7f0 f816 	bl	8000b74 <__aeabi_dcmpge>
 8010b48:	9e04      	ldr	r6, [sp, #16]
 8010b4a:	4637      	mov	r7, r6
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	f040 8245 	bne.w	8010fdc <_dtoa_r+0x954>
 8010b52:	9d00      	ldr	r5, [sp, #0]
 8010b54:	2331      	movs	r3, #49	; 0x31
 8010b56:	f805 3b01 	strb.w	r3, [r5], #1
 8010b5a:	f10b 0b01 	add.w	fp, fp, #1
 8010b5e:	e241      	b.n	8010fe4 <_dtoa_r+0x95c>
 8010b60:	07f2      	lsls	r2, r6, #31
 8010b62:	d505      	bpl.n	8010b70 <_dtoa_r+0x4e8>
 8010b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b68:	f7ef fd7e 	bl	8000668 <__aeabi_dmul>
 8010b6c:	3501      	adds	r5, #1
 8010b6e:	2301      	movs	r3, #1
 8010b70:	1076      	asrs	r6, r6, #1
 8010b72:	3708      	adds	r7, #8
 8010b74:	e773      	b.n	8010a5e <_dtoa_r+0x3d6>
 8010b76:	2502      	movs	r5, #2
 8010b78:	e775      	b.n	8010a66 <_dtoa_r+0x3de>
 8010b7a:	9e04      	ldr	r6, [sp, #16]
 8010b7c:	465f      	mov	r7, fp
 8010b7e:	e792      	b.n	8010aa6 <_dtoa_r+0x41e>
 8010b80:	9900      	ldr	r1, [sp, #0]
 8010b82:	4b50      	ldr	r3, [pc, #320]	; (8010cc4 <_dtoa_r+0x63c>)
 8010b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b88:	4431      	add	r1, r6
 8010b8a:	9102      	str	r1, [sp, #8]
 8010b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b8e:	eeb0 9a47 	vmov.f32	s18, s14
 8010b92:	eef0 9a67 	vmov.f32	s19, s15
 8010b96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010b9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010b9e:	2900      	cmp	r1, #0
 8010ba0:	d044      	beq.n	8010c2c <_dtoa_r+0x5a4>
 8010ba2:	494e      	ldr	r1, [pc, #312]	; (8010cdc <_dtoa_r+0x654>)
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	f7ef fe89 	bl	80008bc <__aeabi_ddiv>
 8010baa:	ec53 2b19 	vmov	r2, r3, d9
 8010bae:	f7ef fba3 	bl	80002f8 <__aeabi_dsub>
 8010bb2:	9d00      	ldr	r5, [sp, #0]
 8010bb4:	ec41 0b19 	vmov	d9, r0, r1
 8010bb8:	4649      	mov	r1, r9
 8010bba:	4640      	mov	r0, r8
 8010bbc:	f7f0 f804 	bl	8000bc8 <__aeabi_d2iz>
 8010bc0:	4606      	mov	r6, r0
 8010bc2:	f7ef fce7 	bl	8000594 <__aeabi_i2d>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	460b      	mov	r3, r1
 8010bca:	4640      	mov	r0, r8
 8010bcc:	4649      	mov	r1, r9
 8010bce:	f7ef fb93 	bl	80002f8 <__aeabi_dsub>
 8010bd2:	3630      	adds	r6, #48	; 0x30
 8010bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8010bd8:	ec53 2b19 	vmov	r2, r3, d9
 8010bdc:	4680      	mov	r8, r0
 8010bde:	4689      	mov	r9, r1
 8010be0:	f7ef ffb4 	bl	8000b4c <__aeabi_dcmplt>
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d164      	bne.n	8010cb2 <_dtoa_r+0x62a>
 8010be8:	4642      	mov	r2, r8
 8010bea:	464b      	mov	r3, r9
 8010bec:	4937      	ldr	r1, [pc, #220]	; (8010ccc <_dtoa_r+0x644>)
 8010bee:	2000      	movs	r0, #0
 8010bf0:	f7ef fb82 	bl	80002f8 <__aeabi_dsub>
 8010bf4:	ec53 2b19 	vmov	r2, r3, d9
 8010bf8:	f7ef ffa8 	bl	8000b4c <__aeabi_dcmplt>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	f040 80b6 	bne.w	8010d6e <_dtoa_r+0x6e6>
 8010c02:	9b02      	ldr	r3, [sp, #8]
 8010c04:	429d      	cmp	r5, r3
 8010c06:	f43f af7c 	beq.w	8010b02 <_dtoa_r+0x47a>
 8010c0a:	4b31      	ldr	r3, [pc, #196]	; (8010cd0 <_dtoa_r+0x648>)
 8010c0c:	ec51 0b19 	vmov	r0, r1, d9
 8010c10:	2200      	movs	r2, #0
 8010c12:	f7ef fd29 	bl	8000668 <__aeabi_dmul>
 8010c16:	4b2e      	ldr	r3, [pc, #184]	; (8010cd0 <_dtoa_r+0x648>)
 8010c18:	ec41 0b19 	vmov	d9, r0, r1
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	4640      	mov	r0, r8
 8010c20:	4649      	mov	r1, r9
 8010c22:	f7ef fd21 	bl	8000668 <__aeabi_dmul>
 8010c26:	4680      	mov	r8, r0
 8010c28:	4689      	mov	r9, r1
 8010c2a:	e7c5      	b.n	8010bb8 <_dtoa_r+0x530>
 8010c2c:	ec51 0b17 	vmov	r0, r1, d7
 8010c30:	f7ef fd1a 	bl	8000668 <__aeabi_dmul>
 8010c34:	9b02      	ldr	r3, [sp, #8]
 8010c36:	9d00      	ldr	r5, [sp, #0]
 8010c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c3a:	ec41 0b19 	vmov	d9, r0, r1
 8010c3e:	4649      	mov	r1, r9
 8010c40:	4640      	mov	r0, r8
 8010c42:	f7ef ffc1 	bl	8000bc8 <__aeabi_d2iz>
 8010c46:	4606      	mov	r6, r0
 8010c48:	f7ef fca4 	bl	8000594 <__aeabi_i2d>
 8010c4c:	3630      	adds	r6, #48	; 0x30
 8010c4e:	4602      	mov	r2, r0
 8010c50:	460b      	mov	r3, r1
 8010c52:	4640      	mov	r0, r8
 8010c54:	4649      	mov	r1, r9
 8010c56:	f7ef fb4f 	bl	80002f8 <__aeabi_dsub>
 8010c5a:	f805 6b01 	strb.w	r6, [r5], #1
 8010c5e:	9b02      	ldr	r3, [sp, #8]
 8010c60:	429d      	cmp	r5, r3
 8010c62:	4680      	mov	r8, r0
 8010c64:	4689      	mov	r9, r1
 8010c66:	f04f 0200 	mov.w	r2, #0
 8010c6a:	d124      	bne.n	8010cb6 <_dtoa_r+0x62e>
 8010c6c:	4b1b      	ldr	r3, [pc, #108]	; (8010cdc <_dtoa_r+0x654>)
 8010c6e:	ec51 0b19 	vmov	r0, r1, d9
 8010c72:	f7ef fb43 	bl	80002fc <__adddf3>
 8010c76:	4602      	mov	r2, r0
 8010c78:	460b      	mov	r3, r1
 8010c7a:	4640      	mov	r0, r8
 8010c7c:	4649      	mov	r1, r9
 8010c7e:	f7ef ff83 	bl	8000b88 <__aeabi_dcmpgt>
 8010c82:	2800      	cmp	r0, #0
 8010c84:	d173      	bne.n	8010d6e <_dtoa_r+0x6e6>
 8010c86:	ec53 2b19 	vmov	r2, r3, d9
 8010c8a:	4914      	ldr	r1, [pc, #80]	; (8010cdc <_dtoa_r+0x654>)
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	f7ef fb33 	bl	80002f8 <__aeabi_dsub>
 8010c92:	4602      	mov	r2, r0
 8010c94:	460b      	mov	r3, r1
 8010c96:	4640      	mov	r0, r8
 8010c98:	4649      	mov	r1, r9
 8010c9a:	f7ef ff57 	bl	8000b4c <__aeabi_dcmplt>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	f43f af2f 	beq.w	8010b02 <_dtoa_r+0x47a>
 8010ca4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010ca6:	1e6b      	subs	r3, r5, #1
 8010ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8010caa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cae:	2b30      	cmp	r3, #48	; 0x30
 8010cb0:	d0f8      	beq.n	8010ca4 <_dtoa_r+0x61c>
 8010cb2:	46bb      	mov	fp, r7
 8010cb4:	e04a      	b.n	8010d4c <_dtoa_r+0x6c4>
 8010cb6:	4b06      	ldr	r3, [pc, #24]	; (8010cd0 <_dtoa_r+0x648>)
 8010cb8:	f7ef fcd6 	bl	8000668 <__aeabi_dmul>
 8010cbc:	4680      	mov	r8, r0
 8010cbe:	4689      	mov	r9, r1
 8010cc0:	e7bd      	b.n	8010c3e <_dtoa_r+0x5b6>
 8010cc2:	bf00      	nop
 8010cc4:	080140d0 	.word	0x080140d0
 8010cc8:	080140a8 	.word	0x080140a8
 8010ccc:	3ff00000 	.word	0x3ff00000
 8010cd0:	40240000 	.word	0x40240000
 8010cd4:	401c0000 	.word	0x401c0000
 8010cd8:	40140000 	.word	0x40140000
 8010cdc:	3fe00000 	.word	0x3fe00000
 8010ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ce4:	9d00      	ldr	r5, [sp, #0]
 8010ce6:	4642      	mov	r2, r8
 8010ce8:	464b      	mov	r3, r9
 8010cea:	4630      	mov	r0, r6
 8010cec:	4639      	mov	r1, r7
 8010cee:	f7ef fde5 	bl	80008bc <__aeabi_ddiv>
 8010cf2:	f7ef ff69 	bl	8000bc8 <__aeabi_d2iz>
 8010cf6:	9001      	str	r0, [sp, #4]
 8010cf8:	f7ef fc4c 	bl	8000594 <__aeabi_i2d>
 8010cfc:	4642      	mov	r2, r8
 8010cfe:	464b      	mov	r3, r9
 8010d00:	f7ef fcb2 	bl	8000668 <__aeabi_dmul>
 8010d04:	4602      	mov	r2, r0
 8010d06:	460b      	mov	r3, r1
 8010d08:	4630      	mov	r0, r6
 8010d0a:	4639      	mov	r1, r7
 8010d0c:	f7ef faf4 	bl	80002f8 <__aeabi_dsub>
 8010d10:	9e01      	ldr	r6, [sp, #4]
 8010d12:	9f04      	ldr	r7, [sp, #16]
 8010d14:	3630      	adds	r6, #48	; 0x30
 8010d16:	f805 6b01 	strb.w	r6, [r5], #1
 8010d1a:	9e00      	ldr	r6, [sp, #0]
 8010d1c:	1bae      	subs	r6, r5, r6
 8010d1e:	42b7      	cmp	r7, r6
 8010d20:	4602      	mov	r2, r0
 8010d22:	460b      	mov	r3, r1
 8010d24:	d134      	bne.n	8010d90 <_dtoa_r+0x708>
 8010d26:	f7ef fae9 	bl	80002fc <__adddf3>
 8010d2a:	4642      	mov	r2, r8
 8010d2c:	464b      	mov	r3, r9
 8010d2e:	4606      	mov	r6, r0
 8010d30:	460f      	mov	r7, r1
 8010d32:	f7ef ff29 	bl	8000b88 <__aeabi_dcmpgt>
 8010d36:	b9c8      	cbnz	r0, 8010d6c <_dtoa_r+0x6e4>
 8010d38:	4642      	mov	r2, r8
 8010d3a:	464b      	mov	r3, r9
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	4639      	mov	r1, r7
 8010d40:	f7ef fefa 	bl	8000b38 <__aeabi_dcmpeq>
 8010d44:	b110      	cbz	r0, 8010d4c <_dtoa_r+0x6c4>
 8010d46:	9b01      	ldr	r3, [sp, #4]
 8010d48:	07db      	lsls	r3, r3, #31
 8010d4a:	d40f      	bmi.n	8010d6c <_dtoa_r+0x6e4>
 8010d4c:	4651      	mov	r1, sl
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f000 fbcc 	bl	80114ec <_Bfree>
 8010d54:	2300      	movs	r3, #0
 8010d56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d58:	702b      	strb	r3, [r5, #0]
 8010d5a:	f10b 0301 	add.w	r3, fp, #1
 8010d5e:	6013      	str	r3, [r2, #0]
 8010d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f43f ace2 	beq.w	801072c <_dtoa_r+0xa4>
 8010d68:	601d      	str	r5, [r3, #0]
 8010d6a:	e4df      	b.n	801072c <_dtoa_r+0xa4>
 8010d6c:	465f      	mov	r7, fp
 8010d6e:	462b      	mov	r3, r5
 8010d70:	461d      	mov	r5, r3
 8010d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d76:	2a39      	cmp	r2, #57	; 0x39
 8010d78:	d106      	bne.n	8010d88 <_dtoa_r+0x700>
 8010d7a:	9a00      	ldr	r2, [sp, #0]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d1f7      	bne.n	8010d70 <_dtoa_r+0x6e8>
 8010d80:	9900      	ldr	r1, [sp, #0]
 8010d82:	2230      	movs	r2, #48	; 0x30
 8010d84:	3701      	adds	r7, #1
 8010d86:	700a      	strb	r2, [r1, #0]
 8010d88:	781a      	ldrb	r2, [r3, #0]
 8010d8a:	3201      	adds	r2, #1
 8010d8c:	701a      	strb	r2, [r3, #0]
 8010d8e:	e790      	b.n	8010cb2 <_dtoa_r+0x62a>
 8010d90:	4ba3      	ldr	r3, [pc, #652]	; (8011020 <_dtoa_r+0x998>)
 8010d92:	2200      	movs	r2, #0
 8010d94:	f7ef fc68 	bl	8000668 <__aeabi_dmul>
 8010d98:	2200      	movs	r2, #0
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	4606      	mov	r6, r0
 8010d9e:	460f      	mov	r7, r1
 8010da0:	f7ef feca 	bl	8000b38 <__aeabi_dcmpeq>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d09e      	beq.n	8010ce6 <_dtoa_r+0x65e>
 8010da8:	e7d0      	b.n	8010d4c <_dtoa_r+0x6c4>
 8010daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dac:	2a00      	cmp	r2, #0
 8010dae:	f000 80ca 	beq.w	8010f46 <_dtoa_r+0x8be>
 8010db2:	9a07      	ldr	r2, [sp, #28]
 8010db4:	2a01      	cmp	r2, #1
 8010db6:	f300 80ad 	bgt.w	8010f14 <_dtoa_r+0x88c>
 8010dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010dbc:	2a00      	cmp	r2, #0
 8010dbe:	f000 80a5 	beq.w	8010f0c <_dtoa_r+0x884>
 8010dc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010dc6:	9e08      	ldr	r6, [sp, #32]
 8010dc8:	9d05      	ldr	r5, [sp, #20]
 8010dca:	9a05      	ldr	r2, [sp, #20]
 8010dcc:	441a      	add	r2, r3
 8010dce:	9205      	str	r2, [sp, #20]
 8010dd0:	9a06      	ldr	r2, [sp, #24]
 8010dd2:	2101      	movs	r1, #1
 8010dd4:	441a      	add	r2, r3
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	9206      	str	r2, [sp, #24]
 8010dda:	f000 fc87 	bl	80116ec <__i2b>
 8010dde:	4607      	mov	r7, r0
 8010de0:	b165      	cbz	r5, 8010dfc <_dtoa_r+0x774>
 8010de2:	9b06      	ldr	r3, [sp, #24]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	dd09      	ble.n	8010dfc <_dtoa_r+0x774>
 8010de8:	42ab      	cmp	r3, r5
 8010dea:	9a05      	ldr	r2, [sp, #20]
 8010dec:	bfa8      	it	ge
 8010dee:	462b      	movge	r3, r5
 8010df0:	1ad2      	subs	r2, r2, r3
 8010df2:	9205      	str	r2, [sp, #20]
 8010df4:	9a06      	ldr	r2, [sp, #24]
 8010df6:	1aed      	subs	r5, r5, r3
 8010df8:	1ad3      	subs	r3, r2, r3
 8010dfa:	9306      	str	r3, [sp, #24]
 8010dfc:	9b08      	ldr	r3, [sp, #32]
 8010dfe:	b1f3      	cbz	r3, 8010e3e <_dtoa_r+0x7b6>
 8010e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 80a3 	beq.w	8010f4e <_dtoa_r+0x8c6>
 8010e08:	2e00      	cmp	r6, #0
 8010e0a:	dd10      	ble.n	8010e2e <_dtoa_r+0x7a6>
 8010e0c:	4639      	mov	r1, r7
 8010e0e:	4632      	mov	r2, r6
 8010e10:	4620      	mov	r0, r4
 8010e12:	f000 fd2b 	bl	801186c <__pow5mult>
 8010e16:	4652      	mov	r2, sl
 8010e18:	4601      	mov	r1, r0
 8010e1a:	4607      	mov	r7, r0
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f000 fc7b 	bl	8011718 <__multiply>
 8010e22:	4651      	mov	r1, sl
 8010e24:	4680      	mov	r8, r0
 8010e26:	4620      	mov	r0, r4
 8010e28:	f000 fb60 	bl	80114ec <_Bfree>
 8010e2c:	46c2      	mov	sl, r8
 8010e2e:	9b08      	ldr	r3, [sp, #32]
 8010e30:	1b9a      	subs	r2, r3, r6
 8010e32:	d004      	beq.n	8010e3e <_dtoa_r+0x7b6>
 8010e34:	4651      	mov	r1, sl
 8010e36:	4620      	mov	r0, r4
 8010e38:	f000 fd18 	bl	801186c <__pow5mult>
 8010e3c:	4682      	mov	sl, r0
 8010e3e:	2101      	movs	r1, #1
 8010e40:	4620      	mov	r0, r4
 8010e42:	f000 fc53 	bl	80116ec <__i2b>
 8010e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	4606      	mov	r6, r0
 8010e4c:	f340 8081 	ble.w	8010f52 <_dtoa_r+0x8ca>
 8010e50:	461a      	mov	r2, r3
 8010e52:	4601      	mov	r1, r0
 8010e54:	4620      	mov	r0, r4
 8010e56:	f000 fd09 	bl	801186c <__pow5mult>
 8010e5a:	9b07      	ldr	r3, [sp, #28]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	4606      	mov	r6, r0
 8010e60:	dd7a      	ble.n	8010f58 <_dtoa_r+0x8d0>
 8010e62:	f04f 0800 	mov.w	r8, #0
 8010e66:	6933      	ldr	r3, [r6, #16]
 8010e68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010e6c:	6918      	ldr	r0, [r3, #16]
 8010e6e:	f000 fbef 	bl	8011650 <__hi0bits>
 8010e72:	f1c0 0020 	rsb	r0, r0, #32
 8010e76:	9b06      	ldr	r3, [sp, #24]
 8010e78:	4418      	add	r0, r3
 8010e7a:	f010 001f 	ands.w	r0, r0, #31
 8010e7e:	f000 8094 	beq.w	8010faa <_dtoa_r+0x922>
 8010e82:	f1c0 0320 	rsb	r3, r0, #32
 8010e86:	2b04      	cmp	r3, #4
 8010e88:	f340 8085 	ble.w	8010f96 <_dtoa_r+0x90e>
 8010e8c:	9b05      	ldr	r3, [sp, #20]
 8010e8e:	f1c0 001c 	rsb	r0, r0, #28
 8010e92:	4403      	add	r3, r0
 8010e94:	9305      	str	r3, [sp, #20]
 8010e96:	9b06      	ldr	r3, [sp, #24]
 8010e98:	4403      	add	r3, r0
 8010e9a:	4405      	add	r5, r0
 8010e9c:	9306      	str	r3, [sp, #24]
 8010e9e:	9b05      	ldr	r3, [sp, #20]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	dd05      	ble.n	8010eb0 <_dtoa_r+0x828>
 8010ea4:	4651      	mov	r1, sl
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f000 fd39 	bl	8011920 <__lshift>
 8010eae:	4682      	mov	sl, r0
 8010eb0:	9b06      	ldr	r3, [sp, #24]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	dd05      	ble.n	8010ec2 <_dtoa_r+0x83a>
 8010eb6:	4631      	mov	r1, r6
 8010eb8:	461a      	mov	r2, r3
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f000 fd30 	bl	8011920 <__lshift>
 8010ec0:	4606      	mov	r6, r0
 8010ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d072      	beq.n	8010fae <_dtoa_r+0x926>
 8010ec8:	4631      	mov	r1, r6
 8010eca:	4650      	mov	r0, sl
 8010ecc:	f000 fd94 	bl	80119f8 <__mcmp>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	da6c      	bge.n	8010fae <_dtoa_r+0x926>
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	4651      	mov	r1, sl
 8010ed8:	220a      	movs	r2, #10
 8010eda:	4620      	mov	r0, r4
 8010edc:	f000 fb28 	bl	8011530 <__multadd>
 8010ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ee2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010ee6:	4682      	mov	sl, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	f000 81b0 	beq.w	801124e <_dtoa_r+0xbc6>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	4639      	mov	r1, r7
 8010ef2:	220a      	movs	r2, #10
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f000 fb1b 	bl	8011530 <__multadd>
 8010efa:	9b01      	ldr	r3, [sp, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	4607      	mov	r7, r0
 8010f00:	f300 8096 	bgt.w	8011030 <_dtoa_r+0x9a8>
 8010f04:	9b07      	ldr	r3, [sp, #28]
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	dc59      	bgt.n	8010fbe <_dtoa_r+0x936>
 8010f0a:	e091      	b.n	8011030 <_dtoa_r+0x9a8>
 8010f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f12:	e758      	b.n	8010dc6 <_dtoa_r+0x73e>
 8010f14:	9b04      	ldr	r3, [sp, #16]
 8010f16:	1e5e      	subs	r6, r3, #1
 8010f18:	9b08      	ldr	r3, [sp, #32]
 8010f1a:	42b3      	cmp	r3, r6
 8010f1c:	bfbf      	itttt	lt
 8010f1e:	9b08      	ldrlt	r3, [sp, #32]
 8010f20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010f22:	9608      	strlt	r6, [sp, #32]
 8010f24:	1af3      	sublt	r3, r6, r3
 8010f26:	bfb4      	ite	lt
 8010f28:	18d2      	addlt	r2, r2, r3
 8010f2a:	1b9e      	subge	r6, r3, r6
 8010f2c:	9b04      	ldr	r3, [sp, #16]
 8010f2e:	bfbc      	itt	lt
 8010f30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010f32:	2600      	movlt	r6, #0
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	bfb7      	itett	lt
 8010f38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010f3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010f40:	1a9d      	sublt	r5, r3, r2
 8010f42:	2300      	movlt	r3, #0
 8010f44:	e741      	b.n	8010dca <_dtoa_r+0x742>
 8010f46:	9e08      	ldr	r6, [sp, #32]
 8010f48:	9d05      	ldr	r5, [sp, #20]
 8010f4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010f4c:	e748      	b.n	8010de0 <_dtoa_r+0x758>
 8010f4e:	9a08      	ldr	r2, [sp, #32]
 8010f50:	e770      	b.n	8010e34 <_dtoa_r+0x7ac>
 8010f52:	9b07      	ldr	r3, [sp, #28]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	dc19      	bgt.n	8010f8c <_dtoa_r+0x904>
 8010f58:	9b02      	ldr	r3, [sp, #8]
 8010f5a:	b9bb      	cbnz	r3, 8010f8c <_dtoa_r+0x904>
 8010f5c:	9b03      	ldr	r3, [sp, #12]
 8010f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f62:	b99b      	cbnz	r3, 8010f8c <_dtoa_r+0x904>
 8010f64:	9b03      	ldr	r3, [sp, #12]
 8010f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f6a:	0d1b      	lsrs	r3, r3, #20
 8010f6c:	051b      	lsls	r3, r3, #20
 8010f6e:	b183      	cbz	r3, 8010f92 <_dtoa_r+0x90a>
 8010f70:	9b05      	ldr	r3, [sp, #20]
 8010f72:	3301      	adds	r3, #1
 8010f74:	9305      	str	r3, [sp, #20]
 8010f76:	9b06      	ldr	r3, [sp, #24]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	9306      	str	r3, [sp, #24]
 8010f7c:	f04f 0801 	mov.w	r8, #1
 8010f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f47f af6f 	bne.w	8010e66 <_dtoa_r+0x7de>
 8010f88:	2001      	movs	r0, #1
 8010f8a:	e774      	b.n	8010e76 <_dtoa_r+0x7ee>
 8010f8c:	f04f 0800 	mov.w	r8, #0
 8010f90:	e7f6      	b.n	8010f80 <_dtoa_r+0x8f8>
 8010f92:	4698      	mov	r8, r3
 8010f94:	e7f4      	b.n	8010f80 <_dtoa_r+0x8f8>
 8010f96:	d082      	beq.n	8010e9e <_dtoa_r+0x816>
 8010f98:	9a05      	ldr	r2, [sp, #20]
 8010f9a:	331c      	adds	r3, #28
 8010f9c:	441a      	add	r2, r3
 8010f9e:	9205      	str	r2, [sp, #20]
 8010fa0:	9a06      	ldr	r2, [sp, #24]
 8010fa2:	441a      	add	r2, r3
 8010fa4:	441d      	add	r5, r3
 8010fa6:	9206      	str	r2, [sp, #24]
 8010fa8:	e779      	b.n	8010e9e <_dtoa_r+0x816>
 8010faa:	4603      	mov	r3, r0
 8010fac:	e7f4      	b.n	8010f98 <_dtoa_r+0x910>
 8010fae:	9b04      	ldr	r3, [sp, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	dc37      	bgt.n	8011024 <_dtoa_r+0x99c>
 8010fb4:	9b07      	ldr	r3, [sp, #28]
 8010fb6:	2b02      	cmp	r3, #2
 8010fb8:	dd34      	ble.n	8011024 <_dtoa_r+0x99c>
 8010fba:	9b04      	ldr	r3, [sp, #16]
 8010fbc:	9301      	str	r3, [sp, #4]
 8010fbe:	9b01      	ldr	r3, [sp, #4]
 8010fc0:	b963      	cbnz	r3, 8010fdc <_dtoa_r+0x954>
 8010fc2:	4631      	mov	r1, r6
 8010fc4:	2205      	movs	r2, #5
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f000 fab2 	bl	8011530 <__multadd>
 8010fcc:	4601      	mov	r1, r0
 8010fce:	4606      	mov	r6, r0
 8010fd0:	4650      	mov	r0, sl
 8010fd2:	f000 fd11 	bl	80119f8 <__mcmp>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	f73f adbb 	bgt.w	8010b52 <_dtoa_r+0x4ca>
 8010fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fde:	9d00      	ldr	r5, [sp, #0]
 8010fe0:	ea6f 0b03 	mvn.w	fp, r3
 8010fe4:	f04f 0800 	mov.w	r8, #0
 8010fe8:	4631      	mov	r1, r6
 8010fea:	4620      	mov	r0, r4
 8010fec:	f000 fa7e 	bl	80114ec <_Bfree>
 8010ff0:	2f00      	cmp	r7, #0
 8010ff2:	f43f aeab 	beq.w	8010d4c <_dtoa_r+0x6c4>
 8010ff6:	f1b8 0f00 	cmp.w	r8, #0
 8010ffa:	d005      	beq.n	8011008 <_dtoa_r+0x980>
 8010ffc:	45b8      	cmp	r8, r7
 8010ffe:	d003      	beq.n	8011008 <_dtoa_r+0x980>
 8011000:	4641      	mov	r1, r8
 8011002:	4620      	mov	r0, r4
 8011004:	f000 fa72 	bl	80114ec <_Bfree>
 8011008:	4639      	mov	r1, r7
 801100a:	4620      	mov	r0, r4
 801100c:	f000 fa6e 	bl	80114ec <_Bfree>
 8011010:	e69c      	b.n	8010d4c <_dtoa_r+0x6c4>
 8011012:	2600      	movs	r6, #0
 8011014:	4637      	mov	r7, r6
 8011016:	e7e1      	b.n	8010fdc <_dtoa_r+0x954>
 8011018:	46bb      	mov	fp, r7
 801101a:	4637      	mov	r7, r6
 801101c:	e599      	b.n	8010b52 <_dtoa_r+0x4ca>
 801101e:	bf00      	nop
 8011020:	40240000 	.word	0x40240000
 8011024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011026:	2b00      	cmp	r3, #0
 8011028:	f000 80c8 	beq.w	80111bc <_dtoa_r+0xb34>
 801102c:	9b04      	ldr	r3, [sp, #16]
 801102e:	9301      	str	r3, [sp, #4]
 8011030:	2d00      	cmp	r5, #0
 8011032:	dd05      	ble.n	8011040 <_dtoa_r+0x9b8>
 8011034:	4639      	mov	r1, r7
 8011036:	462a      	mov	r2, r5
 8011038:	4620      	mov	r0, r4
 801103a:	f000 fc71 	bl	8011920 <__lshift>
 801103e:	4607      	mov	r7, r0
 8011040:	f1b8 0f00 	cmp.w	r8, #0
 8011044:	d05b      	beq.n	80110fe <_dtoa_r+0xa76>
 8011046:	6879      	ldr	r1, [r7, #4]
 8011048:	4620      	mov	r0, r4
 801104a:	f000 fa0f 	bl	801146c <_Balloc>
 801104e:	4605      	mov	r5, r0
 8011050:	b928      	cbnz	r0, 801105e <_dtoa_r+0x9d6>
 8011052:	4b83      	ldr	r3, [pc, #524]	; (8011260 <_dtoa_r+0xbd8>)
 8011054:	4602      	mov	r2, r0
 8011056:	f240 21ef 	movw	r1, #751	; 0x2ef
 801105a:	f7ff bb2e 	b.w	80106ba <_dtoa_r+0x32>
 801105e:	693a      	ldr	r2, [r7, #16]
 8011060:	3202      	adds	r2, #2
 8011062:	0092      	lsls	r2, r2, #2
 8011064:	f107 010c 	add.w	r1, r7, #12
 8011068:	300c      	adds	r0, #12
 801106a:	f7ff fa51 	bl	8010510 <memcpy>
 801106e:	2201      	movs	r2, #1
 8011070:	4629      	mov	r1, r5
 8011072:	4620      	mov	r0, r4
 8011074:	f000 fc54 	bl	8011920 <__lshift>
 8011078:	9b00      	ldr	r3, [sp, #0]
 801107a:	3301      	adds	r3, #1
 801107c:	9304      	str	r3, [sp, #16]
 801107e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011082:	4413      	add	r3, r2
 8011084:	9308      	str	r3, [sp, #32]
 8011086:	9b02      	ldr	r3, [sp, #8]
 8011088:	f003 0301 	and.w	r3, r3, #1
 801108c:	46b8      	mov	r8, r7
 801108e:	9306      	str	r3, [sp, #24]
 8011090:	4607      	mov	r7, r0
 8011092:	9b04      	ldr	r3, [sp, #16]
 8011094:	4631      	mov	r1, r6
 8011096:	3b01      	subs	r3, #1
 8011098:	4650      	mov	r0, sl
 801109a:	9301      	str	r3, [sp, #4]
 801109c:	f7ff fa6a 	bl	8010574 <quorem>
 80110a0:	4641      	mov	r1, r8
 80110a2:	9002      	str	r0, [sp, #8]
 80110a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80110a8:	4650      	mov	r0, sl
 80110aa:	f000 fca5 	bl	80119f8 <__mcmp>
 80110ae:	463a      	mov	r2, r7
 80110b0:	9005      	str	r0, [sp, #20]
 80110b2:	4631      	mov	r1, r6
 80110b4:	4620      	mov	r0, r4
 80110b6:	f000 fcbb 	bl	8011a30 <__mdiff>
 80110ba:	68c2      	ldr	r2, [r0, #12]
 80110bc:	4605      	mov	r5, r0
 80110be:	bb02      	cbnz	r2, 8011102 <_dtoa_r+0xa7a>
 80110c0:	4601      	mov	r1, r0
 80110c2:	4650      	mov	r0, sl
 80110c4:	f000 fc98 	bl	80119f8 <__mcmp>
 80110c8:	4602      	mov	r2, r0
 80110ca:	4629      	mov	r1, r5
 80110cc:	4620      	mov	r0, r4
 80110ce:	9209      	str	r2, [sp, #36]	; 0x24
 80110d0:	f000 fa0c 	bl	80114ec <_Bfree>
 80110d4:	9b07      	ldr	r3, [sp, #28]
 80110d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110d8:	9d04      	ldr	r5, [sp, #16]
 80110da:	ea43 0102 	orr.w	r1, r3, r2
 80110de:	9b06      	ldr	r3, [sp, #24]
 80110e0:	4319      	orrs	r1, r3
 80110e2:	d110      	bne.n	8011106 <_dtoa_r+0xa7e>
 80110e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80110e8:	d029      	beq.n	801113e <_dtoa_r+0xab6>
 80110ea:	9b05      	ldr	r3, [sp, #20]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	dd02      	ble.n	80110f6 <_dtoa_r+0xa6e>
 80110f0:	9b02      	ldr	r3, [sp, #8]
 80110f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80110f6:	9b01      	ldr	r3, [sp, #4]
 80110f8:	f883 9000 	strb.w	r9, [r3]
 80110fc:	e774      	b.n	8010fe8 <_dtoa_r+0x960>
 80110fe:	4638      	mov	r0, r7
 8011100:	e7ba      	b.n	8011078 <_dtoa_r+0x9f0>
 8011102:	2201      	movs	r2, #1
 8011104:	e7e1      	b.n	80110ca <_dtoa_r+0xa42>
 8011106:	9b05      	ldr	r3, [sp, #20]
 8011108:	2b00      	cmp	r3, #0
 801110a:	db04      	blt.n	8011116 <_dtoa_r+0xa8e>
 801110c:	9907      	ldr	r1, [sp, #28]
 801110e:	430b      	orrs	r3, r1
 8011110:	9906      	ldr	r1, [sp, #24]
 8011112:	430b      	orrs	r3, r1
 8011114:	d120      	bne.n	8011158 <_dtoa_r+0xad0>
 8011116:	2a00      	cmp	r2, #0
 8011118:	dded      	ble.n	80110f6 <_dtoa_r+0xa6e>
 801111a:	4651      	mov	r1, sl
 801111c:	2201      	movs	r2, #1
 801111e:	4620      	mov	r0, r4
 8011120:	f000 fbfe 	bl	8011920 <__lshift>
 8011124:	4631      	mov	r1, r6
 8011126:	4682      	mov	sl, r0
 8011128:	f000 fc66 	bl	80119f8 <__mcmp>
 801112c:	2800      	cmp	r0, #0
 801112e:	dc03      	bgt.n	8011138 <_dtoa_r+0xab0>
 8011130:	d1e1      	bne.n	80110f6 <_dtoa_r+0xa6e>
 8011132:	f019 0f01 	tst.w	r9, #1
 8011136:	d0de      	beq.n	80110f6 <_dtoa_r+0xa6e>
 8011138:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801113c:	d1d8      	bne.n	80110f0 <_dtoa_r+0xa68>
 801113e:	9a01      	ldr	r2, [sp, #4]
 8011140:	2339      	movs	r3, #57	; 0x39
 8011142:	7013      	strb	r3, [r2, #0]
 8011144:	462b      	mov	r3, r5
 8011146:	461d      	mov	r5, r3
 8011148:	3b01      	subs	r3, #1
 801114a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801114e:	2a39      	cmp	r2, #57	; 0x39
 8011150:	d06c      	beq.n	801122c <_dtoa_r+0xba4>
 8011152:	3201      	adds	r2, #1
 8011154:	701a      	strb	r2, [r3, #0]
 8011156:	e747      	b.n	8010fe8 <_dtoa_r+0x960>
 8011158:	2a00      	cmp	r2, #0
 801115a:	dd07      	ble.n	801116c <_dtoa_r+0xae4>
 801115c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011160:	d0ed      	beq.n	801113e <_dtoa_r+0xab6>
 8011162:	9a01      	ldr	r2, [sp, #4]
 8011164:	f109 0301 	add.w	r3, r9, #1
 8011168:	7013      	strb	r3, [r2, #0]
 801116a:	e73d      	b.n	8010fe8 <_dtoa_r+0x960>
 801116c:	9b04      	ldr	r3, [sp, #16]
 801116e:	9a08      	ldr	r2, [sp, #32]
 8011170:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011174:	4293      	cmp	r3, r2
 8011176:	d043      	beq.n	8011200 <_dtoa_r+0xb78>
 8011178:	4651      	mov	r1, sl
 801117a:	2300      	movs	r3, #0
 801117c:	220a      	movs	r2, #10
 801117e:	4620      	mov	r0, r4
 8011180:	f000 f9d6 	bl	8011530 <__multadd>
 8011184:	45b8      	cmp	r8, r7
 8011186:	4682      	mov	sl, r0
 8011188:	f04f 0300 	mov.w	r3, #0
 801118c:	f04f 020a 	mov.w	r2, #10
 8011190:	4641      	mov	r1, r8
 8011192:	4620      	mov	r0, r4
 8011194:	d107      	bne.n	80111a6 <_dtoa_r+0xb1e>
 8011196:	f000 f9cb 	bl	8011530 <__multadd>
 801119a:	4680      	mov	r8, r0
 801119c:	4607      	mov	r7, r0
 801119e:	9b04      	ldr	r3, [sp, #16]
 80111a0:	3301      	adds	r3, #1
 80111a2:	9304      	str	r3, [sp, #16]
 80111a4:	e775      	b.n	8011092 <_dtoa_r+0xa0a>
 80111a6:	f000 f9c3 	bl	8011530 <__multadd>
 80111aa:	4639      	mov	r1, r7
 80111ac:	4680      	mov	r8, r0
 80111ae:	2300      	movs	r3, #0
 80111b0:	220a      	movs	r2, #10
 80111b2:	4620      	mov	r0, r4
 80111b4:	f000 f9bc 	bl	8011530 <__multadd>
 80111b8:	4607      	mov	r7, r0
 80111ba:	e7f0      	b.n	801119e <_dtoa_r+0xb16>
 80111bc:	9b04      	ldr	r3, [sp, #16]
 80111be:	9301      	str	r3, [sp, #4]
 80111c0:	9d00      	ldr	r5, [sp, #0]
 80111c2:	4631      	mov	r1, r6
 80111c4:	4650      	mov	r0, sl
 80111c6:	f7ff f9d5 	bl	8010574 <quorem>
 80111ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80111ce:	9b00      	ldr	r3, [sp, #0]
 80111d0:	f805 9b01 	strb.w	r9, [r5], #1
 80111d4:	1aea      	subs	r2, r5, r3
 80111d6:	9b01      	ldr	r3, [sp, #4]
 80111d8:	4293      	cmp	r3, r2
 80111da:	dd07      	ble.n	80111ec <_dtoa_r+0xb64>
 80111dc:	4651      	mov	r1, sl
 80111de:	2300      	movs	r3, #0
 80111e0:	220a      	movs	r2, #10
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 f9a4 	bl	8011530 <__multadd>
 80111e8:	4682      	mov	sl, r0
 80111ea:	e7ea      	b.n	80111c2 <_dtoa_r+0xb3a>
 80111ec:	9b01      	ldr	r3, [sp, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	bfc8      	it	gt
 80111f2:	461d      	movgt	r5, r3
 80111f4:	9b00      	ldr	r3, [sp, #0]
 80111f6:	bfd8      	it	le
 80111f8:	2501      	movle	r5, #1
 80111fa:	441d      	add	r5, r3
 80111fc:	f04f 0800 	mov.w	r8, #0
 8011200:	4651      	mov	r1, sl
 8011202:	2201      	movs	r2, #1
 8011204:	4620      	mov	r0, r4
 8011206:	f000 fb8b 	bl	8011920 <__lshift>
 801120a:	4631      	mov	r1, r6
 801120c:	4682      	mov	sl, r0
 801120e:	f000 fbf3 	bl	80119f8 <__mcmp>
 8011212:	2800      	cmp	r0, #0
 8011214:	dc96      	bgt.n	8011144 <_dtoa_r+0xabc>
 8011216:	d102      	bne.n	801121e <_dtoa_r+0xb96>
 8011218:	f019 0f01 	tst.w	r9, #1
 801121c:	d192      	bne.n	8011144 <_dtoa_r+0xabc>
 801121e:	462b      	mov	r3, r5
 8011220:	461d      	mov	r5, r3
 8011222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011226:	2a30      	cmp	r2, #48	; 0x30
 8011228:	d0fa      	beq.n	8011220 <_dtoa_r+0xb98>
 801122a:	e6dd      	b.n	8010fe8 <_dtoa_r+0x960>
 801122c:	9a00      	ldr	r2, [sp, #0]
 801122e:	429a      	cmp	r2, r3
 8011230:	d189      	bne.n	8011146 <_dtoa_r+0xabe>
 8011232:	f10b 0b01 	add.w	fp, fp, #1
 8011236:	2331      	movs	r3, #49	; 0x31
 8011238:	e796      	b.n	8011168 <_dtoa_r+0xae0>
 801123a:	4b0a      	ldr	r3, [pc, #40]	; (8011264 <_dtoa_r+0xbdc>)
 801123c:	f7ff ba99 	b.w	8010772 <_dtoa_r+0xea>
 8011240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011242:	2b00      	cmp	r3, #0
 8011244:	f47f aa6d 	bne.w	8010722 <_dtoa_r+0x9a>
 8011248:	4b07      	ldr	r3, [pc, #28]	; (8011268 <_dtoa_r+0xbe0>)
 801124a:	f7ff ba92 	b.w	8010772 <_dtoa_r+0xea>
 801124e:	9b01      	ldr	r3, [sp, #4]
 8011250:	2b00      	cmp	r3, #0
 8011252:	dcb5      	bgt.n	80111c0 <_dtoa_r+0xb38>
 8011254:	9b07      	ldr	r3, [sp, #28]
 8011256:	2b02      	cmp	r3, #2
 8011258:	f73f aeb1 	bgt.w	8010fbe <_dtoa_r+0x936>
 801125c:	e7b0      	b.n	80111c0 <_dtoa_r+0xb38>
 801125e:	bf00      	nop
 8011260:	0801403b 	.word	0x0801403b
 8011264:	08013f00 	.word	0x08013f00
 8011268:	08013fd6 	.word	0x08013fd6

0801126c <_free_r>:
 801126c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801126e:	2900      	cmp	r1, #0
 8011270:	d044      	beq.n	80112fc <_free_r+0x90>
 8011272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011276:	9001      	str	r0, [sp, #4]
 8011278:	2b00      	cmp	r3, #0
 801127a:	f1a1 0404 	sub.w	r4, r1, #4
 801127e:	bfb8      	it	lt
 8011280:	18e4      	addlt	r4, r4, r3
 8011282:	f000 f8e7 	bl	8011454 <__malloc_lock>
 8011286:	4a1e      	ldr	r2, [pc, #120]	; (8011300 <_free_r+0x94>)
 8011288:	9801      	ldr	r0, [sp, #4]
 801128a:	6813      	ldr	r3, [r2, #0]
 801128c:	b933      	cbnz	r3, 801129c <_free_r+0x30>
 801128e:	6063      	str	r3, [r4, #4]
 8011290:	6014      	str	r4, [r2, #0]
 8011292:	b003      	add	sp, #12
 8011294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011298:	f000 b8e2 	b.w	8011460 <__malloc_unlock>
 801129c:	42a3      	cmp	r3, r4
 801129e:	d908      	bls.n	80112b2 <_free_r+0x46>
 80112a0:	6825      	ldr	r5, [r4, #0]
 80112a2:	1961      	adds	r1, r4, r5
 80112a4:	428b      	cmp	r3, r1
 80112a6:	bf01      	itttt	eq
 80112a8:	6819      	ldreq	r1, [r3, #0]
 80112aa:	685b      	ldreq	r3, [r3, #4]
 80112ac:	1949      	addeq	r1, r1, r5
 80112ae:	6021      	streq	r1, [r4, #0]
 80112b0:	e7ed      	b.n	801128e <_free_r+0x22>
 80112b2:	461a      	mov	r2, r3
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	b10b      	cbz	r3, 80112bc <_free_r+0x50>
 80112b8:	42a3      	cmp	r3, r4
 80112ba:	d9fa      	bls.n	80112b2 <_free_r+0x46>
 80112bc:	6811      	ldr	r1, [r2, #0]
 80112be:	1855      	adds	r5, r2, r1
 80112c0:	42a5      	cmp	r5, r4
 80112c2:	d10b      	bne.n	80112dc <_free_r+0x70>
 80112c4:	6824      	ldr	r4, [r4, #0]
 80112c6:	4421      	add	r1, r4
 80112c8:	1854      	adds	r4, r2, r1
 80112ca:	42a3      	cmp	r3, r4
 80112cc:	6011      	str	r1, [r2, #0]
 80112ce:	d1e0      	bne.n	8011292 <_free_r+0x26>
 80112d0:	681c      	ldr	r4, [r3, #0]
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	6053      	str	r3, [r2, #4]
 80112d6:	440c      	add	r4, r1
 80112d8:	6014      	str	r4, [r2, #0]
 80112da:	e7da      	b.n	8011292 <_free_r+0x26>
 80112dc:	d902      	bls.n	80112e4 <_free_r+0x78>
 80112de:	230c      	movs	r3, #12
 80112e0:	6003      	str	r3, [r0, #0]
 80112e2:	e7d6      	b.n	8011292 <_free_r+0x26>
 80112e4:	6825      	ldr	r5, [r4, #0]
 80112e6:	1961      	adds	r1, r4, r5
 80112e8:	428b      	cmp	r3, r1
 80112ea:	bf04      	itt	eq
 80112ec:	6819      	ldreq	r1, [r3, #0]
 80112ee:	685b      	ldreq	r3, [r3, #4]
 80112f0:	6063      	str	r3, [r4, #4]
 80112f2:	bf04      	itt	eq
 80112f4:	1949      	addeq	r1, r1, r5
 80112f6:	6021      	streq	r1, [r4, #0]
 80112f8:	6054      	str	r4, [r2, #4]
 80112fa:	e7ca      	b.n	8011292 <_free_r+0x26>
 80112fc:	b003      	add	sp, #12
 80112fe:	bd30      	pop	{r4, r5, pc}
 8011300:	20002390 	.word	0x20002390

08011304 <malloc>:
 8011304:	4b02      	ldr	r3, [pc, #8]	; (8011310 <malloc+0xc>)
 8011306:	4601      	mov	r1, r0
 8011308:	6818      	ldr	r0, [r3, #0]
 801130a:	f000 b823 	b.w	8011354 <_malloc_r>
 801130e:	bf00      	nop
 8011310:	20000288 	.word	0x20000288

08011314 <sbrk_aligned>:
 8011314:	b570      	push	{r4, r5, r6, lr}
 8011316:	4e0e      	ldr	r6, [pc, #56]	; (8011350 <sbrk_aligned+0x3c>)
 8011318:	460c      	mov	r4, r1
 801131a:	6831      	ldr	r1, [r6, #0]
 801131c:	4605      	mov	r5, r0
 801131e:	b911      	cbnz	r1, 8011326 <sbrk_aligned+0x12>
 8011320:	f002 f806 	bl	8013330 <_sbrk_r>
 8011324:	6030      	str	r0, [r6, #0]
 8011326:	4621      	mov	r1, r4
 8011328:	4628      	mov	r0, r5
 801132a:	f002 f801 	bl	8013330 <_sbrk_r>
 801132e:	1c43      	adds	r3, r0, #1
 8011330:	d00a      	beq.n	8011348 <sbrk_aligned+0x34>
 8011332:	1cc4      	adds	r4, r0, #3
 8011334:	f024 0403 	bic.w	r4, r4, #3
 8011338:	42a0      	cmp	r0, r4
 801133a:	d007      	beq.n	801134c <sbrk_aligned+0x38>
 801133c:	1a21      	subs	r1, r4, r0
 801133e:	4628      	mov	r0, r5
 8011340:	f001 fff6 	bl	8013330 <_sbrk_r>
 8011344:	3001      	adds	r0, #1
 8011346:	d101      	bne.n	801134c <sbrk_aligned+0x38>
 8011348:	f04f 34ff 	mov.w	r4, #4294967295
 801134c:	4620      	mov	r0, r4
 801134e:	bd70      	pop	{r4, r5, r6, pc}
 8011350:	20002394 	.word	0x20002394

08011354 <_malloc_r>:
 8011354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011358:	1ccd      	adds	r5, r1, #3
 801135a:	f025 0503 	bic.w	r5, r5, #3
 801135e:	3508      	adds	r5, #8
 8011360:	2d0c      	cmp	r5, #12
 8011362:	bf38      	it	cc
 8011364:	250c      	movcc	r5, #12
 8011366:	2d00      	cmp	r5, #0
 8011368:	4607      	mov	r7, r0
 801136a:	db01      	blt.n	8011370 <_malloc_r+0x1c>
 801136c:	42a9      	cmp	r1, r5
 801136e:	d905      	bls.n	801137c <_malloc_r+0x28>
 8011370:	230c      	movs	r3, #12
 8011372:	603b      	str	r3, [r7, #0]
 8011374:	2600      	movs	r6, #0
 8011376:	4630      	mov	r0, r6
 8011378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801137c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011450 <_malloc_r+0xfc>
 8011380:	f000 f868 	bl	8011454 <__malloc_lock>
 8011384:	f8d8 3000 	ldr.w	r3, [r8]
 8011388:	461c      	mov	r4, r3
 801138a:	bb5c      	cbnz	r4, 80113e4 <_malloc_r+0x90>
 801138c:	4629      	mov	r1, r5
 801138e:	4638      	mov	r0, r7
 8011390:	f7ff ffc0 	bl	8011314 <sbrk_aligned>
 8011394:	1c43      	adds	r3, r0, #1
 8011396:	4604      	mov	r4, r0
 8011398:	d155      	bne.n	8011446 <_malloc_r+0xf2>
 801139a:	f8d8 4000 	ldr.w	r4, [r8]
 801139e:	4626      	mov	r6, r4
 80113a0:	2e00      	cmp	r6, #0
 80113a2:	d145      	bne.n	8011430 <_malloc_r+0xdc>
 80113a4:	2c00      	cmp	r4, #0
 80113a6:	d048      	beq.n	801143a <_malloc_r+0xe6>
 80113a8:	6823      	ldr	r3, [r4, #0]
 80113aa:	4631      	mov	r1, r6
 80113ac:	4638      	mov	r0, r7
 80113ae:	eb04 0903 	add.w	r9, r4, r3
 80113b2:	f001 ffbd 	bl	8013330 <_sbrk_r>
 80113b6:	4581      	cmp	r9, r0
 80113b8:	d13f      	bne.n	801143a <_malloc_r+0xe6>
 80113ba:	6821      	ldr	r1, [r4, #0]
 80113bc:	1a6d      	subs	r5, r5, r1
 80113be:	4629      	mov	r1, r5
 80113c0:	4638      	mov	r0, r7
 80113c2:	f7ff ffa7 	bl	8011314 <sbrk_aligned>
 80113c6:	3001      	adds	r0, #1
 80113c8:	d037      	beq.n	801143a <_malloc_r+0xe6>
 80113ca:	6823      	ldr	r3, [r4, #0]
 80113cc:	442b      	add	r3, r5
 80113ce:	6023      	str	r3, [r4, #0]
 80113d0:	f8d8 3000 	ldr.w	r3, [r8]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d038      	beq.n	801144a <_malloc_r+0xf6>
 80113d8:	685a      	ldr	r2, [r3, #4]
 80113da:	42a2      	cmp	r2, r4
 80113dc:	d12b      	bne.n	8011436 <_malloc_r+0xe2>
 80113de:	2200      	movs	r2, #0
 80113e0:	605a      	str	r2, [r3, #4]
 80113e2:	e00f      	b.n	8011404 <_malloc_r+0xb0>
 80113e4:	6822      	ldr	r2, [r4, #0]
 80113e6:	1b52      	subs	r2, r2, r5
 80113e8:	d41f      	bmi.n	801142a <_malloc_r+0xd6>
 80113ea:	2a0b      	cmp	r2, #11
 80113ec:	d917      	bls.n	801141e <_malloc_r+0xca>
 80113ee:	1961      	adds	r1, r4, r5
 80113f0:	42a3      	cmp	r3, r4
 80113f2:	6025      	str	r5, [r4, #0]
 80113f4:	bf18      	it	ne
 80113f6:	6059      	strne	r1, [r3, #4]
 80113f8:	6863      	ldr	r3, [r4, #4]
 80113fa:	bf08      	it	eq
 80113fc:	f8c8 1000 	streq.w	r1, [r8]
 8011400:	5162      	str	r2, [r4, r5]
 8011402:	604b      	str	r3, [r1, #4]
 8011404:	4638      	mov	r0, r7
 8011406:	f104 060b 	add.w	r6, r4, #11
 801140a:	f000 f829 	bl	8011460 <__malloc_unlock>
 801140e:	f026 0607 	bic.w	r6, r6, #7
 8011412:	1d23      	adds	r3, r4, #4
 8011414:	1af2      	subs	r2, r6, r3
 8011416:	d0ae      	beq.n	8011376 <_malloc_r+0x22>
 8011418:	1b9b      	subs	r3, r3, r6
 801141a:	50a3      	str	r3, [r4, r2]
 801141c:	e7ab      	b.n	8011376 <_malloc_r+0x22>
 801141e:	42a3      	cmp	r3, r4
 8011420:	6862      	ldr	r2, [r4, #4]
 8011422:	d1dd      	bne.n	80113e0 <_malloc_r+0x8c>
 8011424:	f8c8 2000 	str.w	r2, [r8]
 8011428:	e7ec      	b.n	8011404 <_malloc_r+0xb0>
 801142a:	4623      	mov	r3, r4
 801142c:	6864      	ldr	r4, [r4, #4]
 801142e:	e7ac      	b.n	801138a <_malloc_r+0x36>
 8011430:	4634      	mov	r4, r6
 8011432:	6876      	ldr	r6, [r6, #4]
 8011434:	e7b4      	b.n	80113a0 <_malloc_r+0x4c>
 8011436:	4613      	mov	r3, r2
 8011438:	e7cc      	b.n	80113d4 <_malloc_r+0x80>
 801143a:	230c      	movs	r3, #12
 801143c:	603b      	str	r3, [r7, #0]
 801143e:	4638      	mov	r0, r7
 8011440:	f000 f80e 	bl	8011460 <__malloc_unlock>
 8011444:	e797      	b.n	8011376 <_malloc_r+0x22>
 8011446:	6025      	str	r5, [r4, #0]
 8011448:	e7dc      	b.n	8011404 <_malloc_r+0xb0>
 801144a:	605b      	str	r3, [r3, #4]
 801144c:	deff      	udf	#255	; 0xff
 801144e:	bf00      	nop
 8011450:	20002390 	.word	0x20002390

08011454 <__malloc_lock>:
 8011454:	4801      	ldr	r0, [pc, #4]	; (801145c <__malloc_lock+0x8>)
 8011456:	f7ff b851 	b.w	80104fc <__retarget_lock_acquire_recursive>
 801145a:	bf00      	nop
 801145c:	2000238c 	.word	0x2000238c

08011460 <__malloc_unlock>:
 8011460:	4801      	ldr	r0, [pc, #4]	; (8011468 <__malloc_unlock+0x8>)
 8011462:	f7ff b84c 	b.w	80104fe <__retarget_lock_release_recursive>
 8011466:	bf00      	nop
 8011468:	2000238c 	.word	0x2000238c

0801146c <_Balloc>:
 801146c:	b570      	push	{r4, r5, r6, lr}
 801146e:	69c6      	ldr	r6, [r0, #28]
 8011470:	4604      	mov	r4, r0
 8011472:	460d      	mov	r5, r1
 8011474:	b976      	cbnz	r6, 8011494 <_Balloc+0x28>
 8011476:	2010      	movs	r0, #16
 8011478:	f7ff ff44 	bl	8011304 <malloc>
 801147c:	4602      	mov	r2, r0
 801147e:	61e0      	str	r0, [r4, #28]
 8011480:	b920      	cbnz	r0, 801148c <_Balloc+0x20>
 8011482:	4b18      	ldr	r3, [pc, #96]	; (80114e4 <_Balloc+0x78>)
 8011484:	4818      	ldr	r0, [pc, #96]	; (80114e8 <_Balloc+0x7c>)
 8011486:	216b      	movs	r1, #107	; 0x6b
 8011488:	f7ff f856 	bl	8010538 <__assert_func>
 801148c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011490:	6006      	str	r6, [r0, #0]
 8011492:	60c6      	str	r6, [r0, #12]
 8011494:	69e6      	ldr	r6, [r4, #28]
 8011496:	68f3      	ldr	r3, [r6, #12]
 8011498:	b183      	cbz	r3, 80114bc <_Balloc+0x50>
 801149a:	69e3      	ldr	r3, [r4, #28]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114a2:	b9b8      	cbnz	r0, 80114d4 <_Balloc+0x68>
 80114a4:	2101      	movs	r1, #1
 80114a6:	fa01 f605 	lsl.w	r6, r1, r5
 80114aa:	1d72      	adds	r2, r6, #5
 80114ac:	0092      	lsls	r2, r2, #2
 80114ae:	4620      	mov	r0, r4
 80114b0:	f001 ff5d 	bl	801336e <_calloc_r>
 80114b4:	b160      	cbz	r0, 80114d0 <_Balloc+0x64>
 80114b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ba:	e00e      	b.n	80114da <_Balloc+0x6e>
 80114bc:	2221      	movs	r2, #33	; 0x21
 80114be:	2104      	movs	r1, #4
 80114c0:	4620      	mov	r0, r4
 80114c2:	f001 ff54 	bl	801336e <_calloc_r>
 80114c6:	69e3      	ldr	r3, [r4, #28]
 80114c8:	60f0      	str	r0, [r6, #12]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d1e4      	bne.n	801149a <_Balloc+0x2e>
 80114d0:	2000      	movs	r0, #0
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	6802      	ldr	r2, [r0, #0]
 80114d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114da:	2300      	movs	r3, #0
 80114dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80114e0:	e7f7      	b.n	80114d2 <_Balloc+0x66>
 80114e2:	bf00      	nop
 80114e4:	08013f29 	.word	0x08013f29
 80114e8:	0801404c 	.word	0x0801404c

080114ec <_Bfree>:
 80114ec:	b570      	push	{r4, r5, r6, lr}
 80114ee:	69c6      	ldr	r6, [r0, #28]
 80114f0:	4605      	mov	r5, r0
 80114f2:	460c      	mov	r4, r1
 80114f4:	b976      	cbnz	r6, 8011514 <_Bfree+0x28>
 80114f6:	2010      	movs	r0, #16
 80114f8:	f7ff ff04 	bl	8011304 <malloc>
 80114fc:	4602      	mov	r2, r0
 80114fe:	61e8      	str	r0, [r5, #28]
 8011500:	b920      	cbnz	r0, 801150c <_Bfree+0x20>
 8011502:	4b09      	ldr	r3, [pc, #36]	; (8011528 <_Bfree+0x3c>)
 8011504:	4809      	ldr	r0, [pc, #36]	; (801152c <_Bfree+0x40>)
 8011506:	218f      	movs	r1, #143	; 0x8f
 8011508:	f7ff f816 	bl	8010538 <__assert_func>
 801150c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011510:	6006      	str	r6, [r0, #0]
 8011512:	60c6      	str	r6, [r0, #12]
 8011514:	b13c      	cbz	r4, 8011526 <_Bfree+0x3a>
 8011516:	69eb      	ldr	r3, [r5, #28]
 8011518:	6862      	ldr	r2, [r4, #4]
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011520:	6021      	str	r1, [r4, #0]
 8011522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011526:	bd70      	pop	{r4, r5, r6, pc}
 8011528:	08013f29 	.word	0x08013f29
 801152c:	0801404c 	.word	0x0801404c

08011530 <__multadd>:
 8011530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011534:	690d      	ldr	r5, [r1, #16]
 8011536:	4607      	mov	r7, r0
 8011538:	460c      	mov	r4, r1
 801153a:	461e      	mov	r6, r3
 801153c:	f101 0c14 	add.w	ip, r1, #20
 8011540:	2000      	movs	r0, #0
 8011542:	f8dc 3000 	ldr.w	r3, [ip]
 8011546:	b299      	uxth	r1, r3
 8011548:	fb02 6101 	mla	r1, r2, r1, r6
 801154c:	0c1e      	lsrs	r6, r3, #16
 801154e:	0c0b      	lsrs	r3, r1, #16
 8011550:	fb02 3306 	mla	r3, r2, r6, r3
 8011554:	b289      	uxth	r1, r1
 8011556:	3001      	adds	r0, #1
 8011558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801155c:	4285      	cmp	r5, r0
 801155e:	f84c 1b04 	str.w	r1, [ip], #4
 8011562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011566:	dcec      	bgt.n	8011542 <__multadd+0x12>
 8011568:	b30e      	cbz	r6, 80115ae <__multadd+0x7e>
 801156a:	68a3      	ldr	r3, [r4, #8]
 801156c:	42ab      	cmp	r3, r5
 801156e:	dc19      	bgt.n	80115a4 <__multadd+0x74>
 8011570:	6861      	ldr	r1, [r4, #4]
 8011572:	4638      	mov	r0, r7
 8011574:	3101      	adds	r1, #1
 8011576:	f7ff ff79 	bl	801146c <_Balloc>
 801157a:	4680      	mov	r8, r0
 801157c:	b928      	cbnz	r0, 801158a <__multadd+0x5a>
 801157e:	4602      	mov	r2, r0
 8011580:	4b0c      	ldr	r3, [pc, #48]	; (80115b4 <__multadd+0x84>)
 8011582:	480d      	ldr	r0, [pc, #52]	; (80115b8 <__multadd+0x88>)
 8011584:	21ba      	movs	r1, #186	; 0xba
 8011586:	f7fe ffd7 	bl	8010538 <__assert_func>
 801158a:	6922      	ldr	r2, [r4, #16]
 801158c:	3202      	adds	r2, #2
 801158e:	f104 010c 	add.w	r1, r4, #12
 8011592:	0092      	lsls	r2, r2, #2
 8011594:	300c      	adds	r0, #12
 8011596:	f7fe ffbb 	bl	8010510 <memcpy>
 801159a:	4621      	mov	r1, r4
 801159c:	4638      	mov	r0, r7
 801159e:	f7ff ffa5 	bl	80114ec <_Bfree>
 80115a2:	4644      	mov	r4, r8
 80115a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115a8:	3501      	adds	r5, #1
 80115aa:	615e      	str	r6, [r3, #20]
 80115ac:	6125      	str	r5, [r4, #16]
 80115ae:	4620      	mov	r0, r4
 80115b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b4:	0801403b 	.word	0x0801403b
 80115b8:	0801404c 	.word	0x0801404c

080115bc <__s2b>:
 80115bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115c0:	460c      	mov	r4, r1
 80115c2:	4615      	mov	r5, r2
 80115c4:	461f      	mov	r7, r3
 80115c6:	2209      	movs	r2, #9
 80115c8:	3308      	adds	r3, #8
 80115ca:	4606      	mov	r6, r0
 80115cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80115d0:	2100      	movs	r1, #0
 80115d2:	2201      	movs	r2, #1
 80115d4:	429a      	cmp	r2, r3
 80115d6:	db09      	blt.n	80115ec <__s2b+0x30>
 80115d8:	4630      	mov	r0, r6
 80115da:	f7ff ff47 	bl	801146c <_Balloc>
 80115de:	b940      	cbnz	r0, 80115f2 <__s2b+0x36>
 80115e0:	4602      	mov	r2, r0
 80115e2:	4b19      	ldr	r3, [pc, #100]	; (8011648 <__s2b+0x8c>)
 80115e4:	4819      	ldr	r0, [pc, #100]	; (801164c <__s2b+0x90>)
 80115e6:	21d3      	movs	r1, #211	; 0xd3
 80115e8:	f7fe ffa6 	bl	8010538 <__assert_func>
 80115ec:	0052      	lsls	r2, r2, #1
 80115ee:	3101      	adds	r1, #1
 80115f0:	e7f0      	b.n	80115d4 <__s2b+0x18>
 80115f2:	9b08      	ldr	r3, [sp, #32]
 80115f4:	6143      	str	r3, [r0, #20]
 80115f6:	2d09      	cmp	r5, #9
 80115f8:	f04f 0301 	mov.w	r3, #1
 80115fc:	6103      	str	r3, [r0, #16]
 80115fe:	dd16      	ble.n	801162e <__s2b+0x72>
 8011600:	f104 0909 	add.w	r9, r4, #9
 8011604:	46c8      	mov	r8, r9
 8011606:	442c      	add	r4, r5
 8011608:	f818 3b01 	ldrb.w	r3, [r8], #1
 801160c:	4601      	mov	r1, r0
 801160e:	3b30      	subs	r3, #48	; 0x30
 8011610:	220a      	movs	r2, #10
 8011612:	4630      	mov	r0, r6
 8011614:	f7ff ff8c 	bl	8011530 <__multadd>
 8011618:	45a0      	cmp	r8, r4
 801161a:	d1f5      	bne.n	8011608 <__s2b+0x4c>
 801161c:	f1a5 0408 	sub.w	r4, r5, #8
 8011620:	444c      	add	r4, r9
 8011622:	1b2d      	subs	r5, r5, r4
 8011624:	1963      	adds	r3, r4, r5
 8011626:	42bb      	cmp	r3, r7
 8011628:	db04      	blt.n	8011634 <__s2b+0x78>
 801162a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801162e:	340a      	adds	r4, #10
 8011630:	2509      	movs	r5, #9
 8011632:	e7f6      	b.n	8011622 <__s2b+0x66>
 8011634:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011638:	4601      	mov	r1, r0
 801163a:	3b30      	subs	r3, #48	; 0x30
 801163c:	220a      	movs	r2, #10
 801163e:	4630      	mov	r0, r6
 8011640:	f7ff ff76 	bl	8011530 <__multadd>
 8011644:	e7ee      	b.n	8011624 <__s2b+0x68>
 8011646:	bf00      	nop
 8011648:	0801403b 	.word	0x0801403b
 801164c:	0801404c 	.word	0x0801404c

08011650 <__hi0bits>:
 8011650:	0c03      	lsrs	r3, r0, #16
 8011652:	041b      	lsls	r3, r3, #16
 8011654:	b9d3      	cbnz	r3, 801168c <__hi0bits+0x3c>
 8011656:	0400      	lsls	r0, r0, #16
 8011658:	2310      	movs	r3, #16
 801165a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801165e:	bf04      	itt	eq
 8011660:	0200      	lsleq	r0, r0, #8
 8011662:	3308      	addeq	r3, #8
 8011664:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011668:	bf04      	itt	eq
 801166a:	0100      	lsleq	r0, r0, #4
 801166c:	3304      	addeq	r3, #4
 801166e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011672:	bf04      	itt	eq
 8011674:	0080      	lsleq	r0, r0, #2
 8011676:	3302      	addeq	r3, #2
 8011678:	2800      	cmp	r0, #0
 801167a:	db05      	blt.n	8011688 <__hi0bits+0x38>
 801167c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011680:	f103 0301 	add.w	r3, r3, #1
 8011684:	bf08      	it	eq
 8011686:	2320      	moveq	r3, #32
 8011688:	4618      	mov	r0, r3
 801168a:	4770      	bx	lr
 801168c:	2300      	movs	r3, #0
 801168e:	e7e4      	b.n	801165a <__hi0bits+0xa>

08011690 <__lo0bits>:
 8011690:	6803      	ldr	r3, [r0, #0]
 8011692:	f013 0207 	ands.w	r2, r3, #7
 8011696:	d00c      	beq.n	80116b2 <__lo0bits+0x22>
 8011698:	07d9      	lsls	r1, r3, #31
 801169a:	d422      	bmi.n	80116e2 <__lo0bits+0x52>
 801169c:	079a      	lsls	r2, r3, #30
 801169e:	bf49      	itett	mi
 80116a0:	085b      	lsrmi	r3, r3, #1
 80116a2:	089b      	lsrpl	r3, r3, #2
 80116a4:	6003      	strmi	r3, [r0, #0]
 80116a6:	2201      	movmi	r2, #1
 80116a8:	bf5c      	itt	pl
 80116aa:	6003      	strpl	r3, [r0, #0]
 80116ac:	2202      	movpl	r2, #2
 80116ae:	4610      	mov	r0, r2
 80116b0:	4770      	bx	lr
 80116b2:	b299      	uxth	r1, r3
 80116b4:	b909      	cbnz	r1, 80116ba <__lo0bits+0x2a>
 80116b6:	0c1b      	lsrs	r3, r3, #16
 80116b8:	2210      	movs	r2, #16
 80116ba:	b2d9      	uxtb	r1, r3
 80116bc:	b909      	cbnz	r1, 80116c2 <__lo0bits+0x32>
 80116be:	3208      	adds	r2, #8
 80116c0:	0a1b      	lsrs	r3, r3, #8
 80116c2:	0719      	lsls	r1, r3, #28
 80116c4:	bf04      	itt	eq
 80116c6:	091b      	lsreq	r3, r3, #4
 80116c8:	3204      	addeq	r2, #4
 80116ca:	0799      	lsls	r1, r3, #30
 80116cc:	bf04      	itt	eq
 80116ce:	089b      	lsreq	r3, r3, #2
 80116d0:	3202      	addeq	r2, #2
 80116d2:	07d9      	lsls	r1, r3, #31
 80116d4:	d403      	bmi.n	80116de <__lo0bits+0x4e>
 80116d6:	085b      	lsrs	r3, r3, #1
 80116d8:	f102 0201 	add.w	r2, r2, #1
 80116dc:	d003      	beq.n	80116e6 <__lo0bits+0x56>
 80116de:	6003      	str	r3, [r0, #0]
 80116e0:	e7e5      	b.n	80116ae <__lo0bits+0x1e>
 80116e2:	2200      	movs	r2, #0
 80116e4:	e7e3      	b.n	80116ae <__lo0bits+0x1e>
 80116e6:	2220      	movs	r2, #32
 80116e8:	e7e1      	b.n	80116ae <__lo0bits+0x1e>
	...

080116ec <__i2b>:
 80116ec:	b510      	push	{r4, lr}
 80116ee:	460c      	mov	r4, r1
 80116f0:	2101      	movs	r1, #1
 80116f2:	f7ff febb 	bl	801146c <_Balloc>
 80116f6:	4602      	mov	r2, r0
 80116f8:	b928      	cbnz	r0, 8011706 <__i2b+0x1a>
 80116fa:	4b05      	ldr	r3, [pc, #20]	; (8011710 <__i2b+0x24>)
 80116fc:	4805      	ldr	r0, [pc, #20]	; (8011714 <__i2b+0x28>)
 80116fe:	f240 1145 	movw	r1, #325	; 0x145
 8011702:	f7fe ff19 	bl	8010538 <__assert_func>
 8011706:	2301      	movs	r3, #1
 8011708:	6144      	str	r4, [r0, #20]
 801170a:	6103      	str	r3, [r0, #16]
 801170c:	bd10      	pop	{r4, pc}
 801170e:	bf00      	nop
 8011710:	0801403b 	.word	0x0801403b
 8011714:	0801404c 	.word	0x0801404c

08011718 <__multiply>:
 8011718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171c:	4691      	mov	r9, r2
 801171e:	690a      	ldr	r2, [r1, #16]
 8011720:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011724:	429a      	cmp	r2, r3
 8011726:	bfb8      	it	lt
 8011728:	460b      	movlt	r3, r1
 801172a:	460c      	mov	r4, r1
 801172c:	bfbc      	itt	lt
 801172e:	464c      	movlt	r4, r9
 8011730:	4699      	movlt	r9, r3
 8011732:	6927      	ldr	r7, [r4, #16]
 8011734:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011738:	68a3      	ldr	r3, [r4, #8]
 801173a:	6861      	ldr	r1, [r4, #4]
 801173c:	eb07 060a 	add.w	r6, r7, sl
 8011740:	42b3      	cmp	r3, r6
 8011742:	b085      	sub	sp, #20
 8011744:	bfb8      	it	lt
 8011746:	3101      	addlt	r1, #1
 8011748:	f7ff fe90 	bl	801146c <_Balloc>
 801174c:	b930      	cbnz	r0, 801175c <__multiply+0x44>
 801174e:	4602      	mov	r2, r0
 8011750:	4b44      	ldr	r3, [pc, #272]	; (8011864 <__multiply+0x14c>)
 8011752:	4845      	ldr	r0, [pc, #276]	; (8011868 <__multiply+0x150>)
 8011754:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011758:	f7fe feee 	bl	8010538 <__assert_func>
 801175c:	f100 0514 	add.w	r5, r0, #20
 8011760:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011764:	462b      	mov	r3, r5
 8011766:	2200      	movs	r2, #0
 8011768:	4543      	cmp	r3, r8
 801176a:	d321      	bcc.n	80117b0 <__multiply+0x98>
 801176c:	f104 0314 	add.w	r3, r4, #20
 8011770:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011774:	f109 0314 	add.w	r3, r9, #20
 8011778:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801177c:	9202      	str	r2, [sp, #8]
 801177e:	1b3a      	subs	r2, r7, r4
 8011780:	3a15      	subs	r2, #21
 8011782:	f022 0203 	bic.w	r2, r2, #3
 8011786:	3204      	adds	r2, #4
 8011788:	f104 0115 	add.w	r1, r4, #21
 801178c:	428f      	cmp	r7, r1
 801178e:	bf38      	it	cc
 8011790:	2204      	movcc	r2, #4
 8011792:	9201      	str	r2, [sp, #4]
 8011794:	9a02      	ldr	r2, [sp, #8]
 8011796:	9303      	str	r3, [sp, #12]
 8011798:	429a      	cmp	r2, r3
 801179a:	d80c      	bhi.n	80117b6 <__multiply+0x9e>
 801179c:	2e00      	cmp	r6, #0
 801179e:	dd03      	ble.n	80117a8 <__multiply+0x90>
 80117a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d05b      	beq.n	8011860 <__multiply+0x148>
 80117a8:	6106      	str	r6, [r0, #16]
 80117aa:	b005      	add	sp, #20
 80117ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b0:	f843 2b04 	str.w	r2, [r3], #4
 80117b4:	e7d8      	b.n	8011768 <__multiply+0x50>
 80117b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80117ba:	f1ba 0f00 	cmp.w	sl, #0
 80117be:	d024      	beq.n	801180a <__multiply+0xf2>
 80117c0:	f104 0e14 	add.w	lr, r4, #20
 80117c4:	46a9      	mov	r9, r5
 80117c6:	f04f 0c00 	mov.w	ip, #0
 80117ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80117ce:	f8d9 1000 	ldr.w	r1, [r9]
 80117d2:	fa1f fb82 	uxth.w	fp, r2
 80117d6:	b289      	uxth	r1, r1
 80117d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80117dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80117e0:	f8d9 2000 	ldr.w	r2, [r9]
 80117e4:	4461      	add	r1, ip
 80117e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80117ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80117ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80117f2:	b289      	uxth	r1, r1
 80117f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80117f8:	4577      	cmp	r7, lr
 80117fa:	f849 1b04 	str.w	r1, [r9], #4
 80117fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011802:	d8e2      	bhi.n	80117ca <__multiply+0xb2>
 8011804:	9a01      	ldr	r2, [sp, #4]
 8011806:	f845 c002 	str.w	ip, [r5, r2]
 801180a:	9a03      	ldr	r2, [sp, #12]
 801180c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011810:	3304      	adds	r3, #4
 8011812:	f1b9 0f00 	cmp.w	r9, #0
 8011816:	d021      	beq.n	801185c <__multiply+0x144>
 8011818:	6829      	ldr	r1, [r5, #0]
 801181a:	f104 0c14 	add.w	ip, r4, #20
 801181e:	46ae      	mov	lr, r5
 8011820:	f04f 0a00 	mov.w	sl, #0
 8011824:	f8bc b000 	ldrh.w	fp, [ip]
 8011828:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801182c:	fb09 220b 	mla	r2, r9, fp, r2
 8011830:	4452      	add	r2, sl
 8011832:	b289      	uxth	r1, r1
 8011834:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011838:	f84e 1b04 	str.w	r1, [lr], #4
 801183c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011840:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011844:	f8be 1000 	ldrh.w	r1, [lr]
 8011848:	fb09 110a 	mla	r1, r9, sl, r1
 801184c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011850:	4567      	cmp	r7, ip
 8011852:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011856:	d8e5      	bhi.n	8011824 <__multiply+0x10c>
 8011858:	9a01      	ldr	r2, [sp, #4]
 801185a:	50a9      	str	r1, [r5, r2]
 801185c:	3504      	adds	r5, #4
 801185e:	e799      	b.n	8011794 <__multiply+0x7c>
 8011860:	3e01      	subs	r6, #1
 8011862:	e79b      	b.n	801179c <__multiply+0x84>
 8011864:	0801403b 	.word	0x0801403b
 8011868:	0801404c 	.word	0x0801404c

0801186c <__pow5mult>:
 801186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011870:	4615      	mov	r5, r2
 8011872:	f012 0203 	ands.w	r2, r2, #3
 8011876:	4606      	mov	r6, r0
 8011878:	460f      	mov	r7, r1
 801187a:	d007      	beq.n	801188c <__pow5mult+0x20>
 801187c:	4c25      	ldr	r4, [pc, #148]	; (8011914 <__pow5mult+0xa8>)
 801187e:	3a01      	subs	r2, #1
 8011880:	2300      	movs	r3, #0
 8011882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011886:	f7ff fe53 	bl	8011530 <__multadd>
 801188a:	4607      	mov	r7, r0
 801188c:	10ad      	asrs	r5, r5, #2
 801188e:	d03d      	beq.n	801190c <__pow5mult+0xa0>
 8011890:	69f4      	ldr	r4, [r6, #28]
 8011892:	b97c      	cbnz	r4, 80118b4 <__pow5mult+0x48>
 8011894:	2010      	movs	r0, #16
 8011896:	f7ff fd35 	bl	8011304 <malloc>
 801189a:	4602      	mov	r2, r0
 801189c:	61f0      	str	r0, [r6, #28]
 801189e:	b928      	cbnz	r0, 80118ac <__pow5mult+0x40>
 80118a0:	4b1d      	ldr	r3, [pc, #116]	; (8011918 <__pow5mult+0xac>)
 80118a2:	481e      	ldr	r0, [pc, #120]	; (801191c <__pow5mult+0xb0>)
 80118a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80118a8:	f7fe fe46 	bl	8010538 <__assert_func>
 80118ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118b0:	6004      	str	r4, [r0, #0]
 80118b2:	60c4      	str	r4, [r0, #12]
 80118b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80118b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118bc:	b94c      	cbnz	r4, 80118d2 <__pow5mult+0x66>
 80118be:	f240 2171 	movw	r1, #625	; 0x271
 80118c2:	4630      	mov	r0, r6
 80118c4:	f7ff ff12 	bl	80116ec <__i2b>
 80118c8:	2300      	movs	r3, #0
 80118ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80118ce:	4604      	mov	r4, r0
 80118d0:	6003      	str	r3, [r0, #0]
 80118d2:	f04f 0900 	mov.w	r9, #0
 80118d6:	07eb      	lsls	r3, r5, #31
 80118d8:	d50a      	bpl.n	80118f0 <__pow5mult+0x84>
 80118da:	4639      	mov	r1, r7
 80118dc:	4622      	mov	r2, r4
 80118de:	4630      	mov	r0, r6
 80118e0:	f7ff ff1a 	bl	8011718 <__multiply>
 80118e4:	4639      	mov	r1, r7
 80118e6:	4680      	mov	r8, r0
 80118e8:	4630      	mov	r0, r6
 80118ea:	f7ff fdff 	bl	80114ec <_Bfree>
 80118ee:	4647      	mov	r7, r8
 80118f0:	106d      	asrs	r5, r5, #1
 80118f2:	d00b      	beq.n	801190c <__pow5mult+0xa0>
 80118f4:	6820      	ldr	r0, [r4, #0]
 80118f6:	b938      	cbnz	r0, 8011908 <__pow5mult+0x9c>
 80118f8:	4622      	mov	r2, r4
 80118fa:	4621      	mov	r1, r4
 80118fc:	4630      	mov	r0, r6
 80118fe:	f7ff ff0b 	bl	8011718 <__multiply>
 8011902:	6020      	str	r0, [r4, #0]
 8011904:	f8c0 9000 	str.w	r9, [r0]
 8011908:	4604      	mov	r4, r0
 801190a:	e7e4      	b.n	80118d6 <__pow5mult+0x6a>
 801190c:	4638      	mov	r0, r7
 801190e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011912:	bf00      	nop
 8011914:	08014198 	.word	0x08014198
 8011918:	08013f29 	.word	0x08013f29
 801191c:	0801404c 	.word	0x0801404c

08011920 <__lshift>:
 8011920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011924:	460c      	mov	r4, r1
 8011926:	6849      	ldr	r1, [r1, #4]
 8011928:	6923      	ldr	r3, [r4, #16]
 801192a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801192e:	68a3      	ldr	r3, [r4, #8]
 8011930:	4607      	mov	r7, r0
 8011932:	4691      	mov	r9, r2
 8011934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011938:	f108 0601 	add.w	r6, r8, #1
 801193c:	42b3      	cmp	r3, r6
 801193e:	db0b      	blt.n	8011958 <__lshift+0x38>
 8011940:	4638      	mov	r0, r7
 8011942:	f7ff fd93 	bl	801146c <_Balloc>
 8011946:	4605      	mov	r5, r0
 8011948:	b948      	cbnz	r0, 801195e <__lshift+0x3e>
 801194a:	4602      	mov	r2, r0
 801194c:	4b28      	ldr	r3, [pc, #160]	; (80119f0 <__lshift+0xd0>)
 801194e:	4829      	ldr	r0, [pc, #164]	; (80119f4 <__lshift+0xd4>)
 8011950:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011954:	f7fe fdf0 	bl	8010538 <__assert_func>
 8011958:	3101      	adds	r1, #1
 801195a:	005b      	lsls	r3, r3, #1
 801195c:	e7ee      	b.n	801193c <__lshift+0x1c>
 801195e:	2300      	movs	r3, #0
 8011960:	f100 0114 	add.w	r1, r0, #20
 8011964:	f100 0210 	add.w	r2, r0, #16
 8011968:	4618      	mov	r0, r3
 801196a:	4553      	cmp	r3, sl
 801196c:	db33      	blt.n	80119d6 <__lshift+0xb6>
 801196e:	6920      	ldr	r0, [r4, #16]
 8011970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011974:	f104 0314 	add.w	r3, r4, #20
 8011978:	f019 091f 	ands.w	r9, r9, #31
 801197c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011980:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011984:	d02b      	beq.n	80119de <__lshift+0xbe>
 8011986:	f1c9 0e20 	rsb	lr, r9, #32
 801198a:	468a      	mov	sl, r1
 801198c:	2200      	movs	r2, #0
 801198e:	6818      	ldr	r0, [r3, #0]
 8011990:	fa00 f009 	lsl.w	r0, r0, r9
 8011994:	4310      	orrs	r0, r2
 8011996:	f84a 0b04 	str.w	r0, [sl], #4
 801199a:	f853 2b04 	ldr.w	r2, [r3], #4
 801199e:	459c      	cmp	ip, r3
 80119a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80119a4:	d8f3      	bhi.n	801198e <__lshift+0x6e>
 80119a6:	ebac 0304 	sub.w	r3, ip, r4
 80119aa:	3b15      	subs	r3, #21
 80119ac:	f023 0303 	bic.w	r3, r3, #3
 80119b0:	3304      	adds	r3, #4
 80119b2:	f104 0015 	add.w	r0, r4, #21
 80119b6:	4584      	cmp	ip, r0
 80119b8:	bf38      	it	cc
 80119ba:	2304      	movcc	r3, #4
 80119bc:	50ca      	str	r2, [r1, r3]
 80119be:	b10a      	cbz	r2, 80119c4 <__lshift+0xa4>
 80119c0:	f108 0602 	add.w	r6, r8, #2
 80119c4:	3e01      	subs	r6, #1
 80119c6:	4638      	mov	r0, r7
 80119c8:	612e      	str	r6, [r5, #16]
 80119ca:	4621      	mov	r1, r4
 80119cc:	f7ff fd8e 	bl	80114ec <_Bfree>
 80119d0:	4628      	mov	r0, r5
 80119d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80119da:	3301      	adds	r3, #1
 80119dc:	e7c5      	b.n	801196a <__lshift+0x4a>
 80119de:	3904      	subs	r1, #4
 80119e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80119e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80119e8:	459c      	cmp	ip, r3
 80119ea:	d8f9      	bhi.n	80119e0 <__lshift+0xc0>
 80119ec:	e7ea      	b.n	80119c4 <__lshift+0xa4>
 80119ee:	bf00      	nop
 80119f0:	0801403b 	.word	0x0801403b
 80119f4:	0801404c 	.word	0x0801404c

080119f8 <__mcmp>:
 80119f8:	b530      	push	{r4, r5, lr}
 80119fa:	6902      	ldr	r2, [r0, #16]
 80119fc:	690c      	ldr	r4, [r1, #16]
 80119fe:	1b12      	subs	r2, r2, r4
 8011a00:	d10e      	bne.n	8011a20 <__mcmp+0x28>
 8011a02:	f100 0314 	add.w	r3, r0, #20
 8011a06:	3114      	adds	r1, #20
 8011a08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a18:	42a5      	cmp	r5, r4
 8011a1a:	d003      	beq.n	8011a24 <__mcmp+0x2c>
 8011a1c:	d305      	bcc.n	8011a2a <__mcmp+0x32>
 8011a1e:	2201      	movs	r2, #1
 8011a20:	4610      	mov	r0, r2
 8011a22:	bd30      	pop	{r4, r5, pc}
 8011a24:	4283      	cmp	r3, r0
 8011a26:	d3f3      	bcc.n	8011a10 <__mcmp+0x18>
 8011a28:	e7fa      	b.n	8011a20 <__mcmp+0x28>
 8011a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a2e:	e7f7      	b.n	8011a20 <__mcmp+0x28>

08011a30 <__mdiff>:
 8011a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a34:	460c      	mov	r4, r1
 8011a36:	4606      	mov	r6, r0
 8011a38:	4611      	mov	r1, r2
 8011a3a:	4620      	mov	r0, r4
 8011a3c:	4690      	mov	r8, r2
 8011a3e:	f7ff ffdb 	bl	80119f8 <__mcmp>
 8011a42:	1e05      	subs	r5, r0, #0
 8011a44:	d110      	bne.n	8011a68 <__mdiff+0x38>
 8011a46:	4629      	mov	r1, r5
 8011a48:	4630      	mov	r0, r6
 8011a4a:	f7ff fd0f 	bl	801146c <_Balloc>
 8011a4e:	b930      	cbnz	r0, 8011a5e <__mdiff+0x2e>
 8011a50:	4b3a      	ldr	r3, [pc, #232]	; (8011b3c <__mdiff+0x10c>)
 8011a52:	4602      	mov	r2, r0
 8011a54:	f240 2137 	movw	r1, #567	; 0x237
 8011a58:	4839      	ldr	r0, [pc, #228]	; (8011b40 <__mdiff+0x110>)
 8011a5a:	f7fe fd6d 	bl	8010538 <__assert_func>
 8011a5e:	2301      	movs	r3, #1
 8011a60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a68:	bfa4      	itt	ge
 8011a6a:	4643      	movge	r3, r8
 8011a6c:	46a0      	movge	r8, r4
 8011a6e:	4630      	mov	r0, r6
 8011a70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011a74:	bfa6      	itte	ge
 8011a76:	461c      	movge	r4, r3
 8011a78:	2500      	movge	r5, #0
 8011a7a:	2501      	movlt	r5, #1
 8011a7c:	f7ff fcf6 	bl	801146c <_Balloc>
 8011a80:	b920      	cbnz	r0, 8011a8c <__mdiff+0x5c>
 8011a82:	4b2e      	ldr	r3, [pc, #184]	; (8011b3c <__mdiff+0x10c>)
 8011a84:	4602      	mov	r2, r0
 8011a86:	f240 2145 	movw	r1, #581	; 0x245
 8011a8a:	e7e5      	b.n	8011a58 <__mdiff+0x28>
 8011a8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011a90:	6926      	ldr	r6, [r4, #16]
 8011a92:	60c5      	str	r5, [r0, #12]
 8011a94:	f104 0914 	add.w	r9, r4, #20
 8011a98:	f108 0514 	add.w	r5, r8, #20
 8011a9c:	f100 0e14 	add.w	lr, r0, #20
 8011aa0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011aa4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011aa8:	f108 0210 	add.w	r2, r8, #16
 8011aac:	46f2      	mov	sl, lr
 8011aae:	2100      	movs	r1, #0
 8011ab0:	f859 3b04 	ldr.w	r3, [r9], #4
 8011ab4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ab8:	fa11 f88b 	uxtah	r8, r1, fp
 8011abc:	b299      	uxth	r1, r3
 8011abe:	0c1b      	lsrs	r3, r3, #16
 8011ac0:	eba8 0801 	sub.w	r8, r8, r1
 8011ac4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011ac8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011acc:	fa1f f888 	uxth.w	r8, r8
 8011ad0:	1419      	asrs	r1, r3, #16
 8011ad2:	454e      	cmp	r6, r9
 8011ad4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011ad8:	f84a 3b04 	str.w	r3, [sl], #4
 8011adc:	d8e8      	bhi.n	8011ab0 <__mdiff+0x80>
 8011ade:	1b33      	subs	r3, r6, r4
 8011ae0:	3b15      	subs	r3, #21
 8011ae2:	f023 0303 	bic.w	r3, r3, #3
 8011ae6:	3304      	adds	r3, #4
 8011ae8:	3415      	adds	r4, #21
 8011aea:	42a6      	cmp	r6, r4
 8011aec:	bf38      	it	cc
 8011aee:	2304      	movcc	r3, #4
 8011af0:	441d      	add	r5, r3
 8011af2:	4473      	add	r3, lr
 8011af4:	469e      	mov	lr, r3
 8011af6:	462e      	mov	r6, r5
 8011af8:	4566      	cmp	r6, ip
 8011afa:	d30e      	bcc.n	8011b1a <__mdiff+0xea>
 8011afc:	f10c 0203 	add.w	r2, ip, #3
 8011b00:	1b52      	subs	r2, r2, r5
 8011b02:	f022 0203 	bic.w	r2, r2, #3
 8011b06:	3d03      	subs	r5, #3
 8011b08:	45ac      	cmp	ip, r5
 8011b0a:	bf38      	it	cc
 8011b0c:	2200      	movcc	r2, #0
 8011b0e:	4413      	add	r3, r2
 8011b10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011b14:	b17a      	cbz	r2, 8011b36 <__mdiff+0x106>
 8011b16:	6107      	str	r7, [r0, #16]
 8011b18:	e7a4      	b.n	8011a64 <__mdiff+0x34>
 8011b1a:	f856 8b04 	ldr.w	r8, [r6], #4
 8011b1e:	fa11 f288 	uxtah	r2, r1, r8
 8011b22:	1414      	asrs	r4, r2, #16
 8011b24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011b28:	b292      	uxth	r2, r2
 8011b2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011b2e:	f84e 2b04 	str.w	r2, [lr], #4
 8011b32:	1421      	asrs	r1, r4, #16
 8011b34:	e7e0      	b.n	8011af8 <__mdiff+0xc8>
 8011b36:	3f01      	subs	r7, #1
 8011b38:	e7ea      	b.n	8011b10 <__mdiff+0xe0>
 8011b3a:	bf00      	nop
 8011b3c:	0801403b 	.word	0x0801403b
 8011b40:	0801404c 	.word	0x0801404c

08011b44 <__ulp>:
 8011b44:	b082      	sub	sp, #8
 8011b46:	ed8d 0b00 	vstr	d0, [sp]
 8011b4a:	9a01      	ldr	r2, [sp, #4]
 8011b4c:	4b0f      	ldr	r3, [pc, #60]	; (8011b8c <__ulp+0x48>)
 8011b4e:	4013      	ands	r3, r2
 8011b50:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	dc08      	bgt.n	8011b6a <__ulp+0x26>
 8011b58:	425b      	negs	r3, r3
 8011b5a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011b5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011b62:	da04      	bge.n	8011b6e <__ulp+0x2a>
 8011b64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011b68:	4113      	asrs	r3, r2
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	e008      	b.n	8011b80 <__ulp+0x3c>
 8011b6e:	f1a2 0314 	sub.w	r3, r2, #20
 8011b72:	2b1e      	cmp	r3, #30
 8011b74:	bfda      	itte	le
 8011b76:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011b7a:	40da      	lsrle	r2, r3
 8011b7c:	2201      	movgt	r2, #1
 8011b7e:	2300      	movs	r3, #0
 8011b80:	4619      	mov	r1, r3
 8011b82:	4610      	mov	r0, r2
 8011b84:	ec41 0b10 	vmov	d0, r0, r1
 8011b88:	b002      	add	sp, #8
 8011b8a:	4770      	bx	lr
 8011b8c:	7ff00000 	.word	0x7ff00000

08011b90 <__b2d>:
 8011b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b94:	6906      	ldr	r6, [r0, #16]
 8011b96:	f100 0814 	add.w	r8, r0, #20
 8011b9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011b9e:	1f37      	subs	r7, r6, #4
 8011ba0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011ba4:	4610      	mov	r0, r2
 8011ba6:	f7ff fd53 	bl	8011650 <__hi0bits>
 8011baa:	f1c0 0320 	rsb	r3, r0, #32
 8011bae:	280a      	cmp	r0, #10
 8011bb0:	600b      	str	r3, [r1, #0]
 8011bb2:	491b      	ldr	r1, [pc, #108]	; (8011c20 <__b2d+0x90>)
 8011bb4:	dc15      	bgt.n	8011be2 <__b2d+0x52>
 8011bb6:	f1c0 0c0b 	rsb	ip, r0, #11
 8011bba:	fa22 f30c 	lsr.w	r3, r2, ip
 8011bbe:	45b8      	cmp	r8, r7
 8011bc0:	ea43 0501 	orr.w	r5, r3, r1
 8011bc4:	bf34      	ite	cc
 8011bc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011bca:	2300      	movcs	r3, #0
 8011bcc:	3015      	adds	r0, #21
 8011bce:	fa02 f000 	lsl.w	r0, r2, r0
 8011bd2:	fa23 f30c 	lsr.w	r3, r3, ip
 8011bd6:	4303      	orrs	r3, r0
 8011bd8:	461c      	mov	r4, r3
 8011bda:	ec45 4b10 	vmov	d0, r4, r5
 8011bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be2:	45b8      	cmp	r8, r7
 8011be4:	bf3a      	itte	cc
 8011be6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011bea:	f1a6 0708 	subcc.w	r7, r6, #8
 8011bee:	2300      	movcs	r3, #0
 8011bf0:	380b      	subs	r0, #11
 8011bf2:	d012      	beq.n	8011c1a <__b2d+0x8a>
 8011bf4:	f1c0 0120 	rsb	r1, r0, #32
 8011bf8:	fa23 f401 	lsr.w	r4, r3, r1
 8011bfc:	4082      	lsls	r2, r0
 8011bfe:	4322      	orrs	r2, r4
 8011c00:	4547      	cmp	r7, r8
 8011c02:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011c06:	bf8c      	ite	hi
 8011c08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c0c:	2200      	movls	r2, #0
 8011c0e:	4083      	lsls	r3, r0
 8011c10:	40ca      	lsrs	r2, r1
 8011c12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011c16:	4313      	orrs	r3, r2
 8011c18:	e7de      	b.n	8011bd8 <__b2d+0x48>
 8011c1a:	ea42 0501 	orr.w	r5, r2, r1
 8011c1e:	e7db      	b.n	8011bd8 <__b2d+0x48>
 8011c20:	3ff00000 	.word	0x3ff00000

08011c24 <__d2b>:
 8011c24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c28:	460f      	mov	r7, r1
 8011c2a:	2101      	movs	r1, #1
 8011c2c:	ec59 8b10 	vmov	r8, r9, d0
 8011c30:	4616      	mov	r6, r2
 8011c32:	f7ff fc1b 	bl	801146c <_Balloc>
 8011c36:	4604      	mov	r4, r0
 8011c38:	b930      	cbnz	r0, 8011c48 <__d2b+0x24>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	4b24      	ldr	r3, [pc, #144]	; (8011cd0 <__d2b+0xac>)
 8011c3e:	4825      	ldr	r0, [pc, #148]	; (8011cd4 <__d2b+0xb0>)
 8011c40:	f240 310f 	movw	r1, #783	; 0x30f
 8011c44:	f7fe fc78 	bl	8010538 <__assert_func>
 8011c48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c50:	bb2d      	cbnz	r5, 8011c9e <__d2b+0x7a>
 8011c52:	9301      	str	r3, [sp, #4]
 8011c54:	f1b8 0300 	subs.w	r3, r8, #0
 8011c58:	d026      	beq.n	8011ca8 <__d2b+0x84>
 8011c5a:	4668      	mov	r0, sp
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	f7ff fd17 	bl	8011690 <__lo0bits>
 8011c62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011c66:	b1e8      	cbz	r0, 8011ca4 <__d2b+0x80>
 8011c68:	f1c0 0320 	rsb	r3, r0, #32
 8011c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011c70:	430b      	orrs	r3, r1
 8011c72:	40c2      	lsrs	r2, r0
 8011c74:	6163      	str	r3, [r4, #20]
 8011c76:	9201      	str	r2, [sp, #4]
 8011c78:	9b01      	ldr	r3, [sp, #4]
 8011c7a:	61a3      	str	r3, [r4, #24]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	bf14      	ite	ne
 8011c80:	2202      	movne	r2, #2
 8011c82:	2201      	moveq	r2, #1
 8011c84:	6122      	str	r2, [r4, #16]
 8011c86:	b1bd      	cbz	r5, 8011cb8 <__d2b+0x94>
 8011c88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011c8c:	4405      	add	r5, r0
 8011c8e:	603d      	str	r5, [r7, #0]
 8011c90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c94:	6030      	str	r0, [r6, #0]
 8011c96:	4620      	mov	r0, r4
 8011c98:	b003      	add	sp, #12
 8011c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ca2:	e7d6      	b.n	8011c52 <__d2b+0x2e>
 8011ca4:	6161      	str	r1, [r4, #20]
 8011ca6:	e7e7      	b.n	8011c78 <__d2b+0x54>
 8011ca8:	a801      	add	r0, sp, #4
 8011caa:	f7ff fcf1 	bl	8011690 <__lo0bits>
 8011cae:	9b01      	ldr	r3, [sp, #4]
 8011cb0:	6163      	str	r3, [r4, #20]
 8011cb2:	3020      	adds	r0, #32
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	e7e5      	b.n	8011c84 <__d2b+0x60>
 8011cb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011cc0:	6038      	str	r0, [r7, #0]
 8011cc2:	6918      	ldr	r0, [r3, #16]
 8011cc4:	f7ff fcc4 	bl	8011650 <__hi0bits>
 8011cc8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ccc:	e7e2      	b.n	8011c94 <__d2b+0x70>
 8011cce:	bf00      	nop
 8011cd0:	0801403b 	.word	0x0801403b
 8011cd4:	0801404c 	.word	0x0801404c

08011cd8 <__ratio>:
 8011cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cdc:	4688      	mov	r8, r1
 8011cde:	4669      	mov	r1, sp
 8011ce0:	4681      	mov	r9, r0
 8011ce2:	f7ff ff55 	bl	8011b90 <__b2d>
 8011ce6:	a901      	add	r1, sp, #4
 8011ce8:	4640      	mov	r0, r8
 8011cea:	ec55 4b10 	vmov	r4, r5, d0
 8011cee:	f7ff ff4f 	bl	8011b90 <__b2d>
 8011cf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011cf6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011cfa:	eba3 0c02 	sub.w	ip, r3, r2
 8011cfe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011d02:	1a9b      	subs	r3, r3, r2
 8011d04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011d08:	ec51 0b10 	vmov	r0, r1, d0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	bfd6      	itet	le
 8011d10:	460a      	movle	r2, r1
 8011d12:	462a      	movgt	r2, r5
 8011d14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d18:	468b      	mov	fp, r1
 8011d1a:	462f      	mov	r7, r5
 8011d1c:	bfd4      	ite	le
 8011d1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011d22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d26:	4620      	mov	r0, r4
 8011d28:	ee10 2a10 	vmov	r2, s0
 8011d2c:	465b      	mov	r3, fp
 8011d2e:	4639      	mov	r1, r7
 8011d30:	f7ee fdc4 	bl	80008bc <__aeabi_ddiv>
 8011d34:	ec41 0b10 	vmov	d0, r0, r1
 8011d38:	b003      	add	sp, #12
 8011d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d3e <__copybits>:
 8011d3e:	3901      	subs	r1, #1
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	1149      	asrs	r1, r1, #5
 8011d44:	6914      	ldr	r4, [r2, #16]
 8011d46:	3101      	adds	r1, #1
 8011d48:	f102 0314 	add.w	r3, r2, #20
 8011d4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d54:	1f05      	subs	r5, r0, #4
 8011d56:	42a3      	cmp	r3, r4
 8011d58:	d30c      	bcc.n	8011d74 <__copybits+0x36>
 8011d5a:	1aa3      	subs	r3, r4, r2
 8011d5c:	3b11      	subs	r3, #17
 8011d5e:	f023 0303 	bic.w	r3, r3, #3
 8011d62:	3211      	adds	r2, #17
 8011d64:	42a2      	cmp	r2, r4
 8011d66:	bf88      	it	hi
 8011d68:	2300      	movhi	r3, #0
 8011d6a:	4418      	add	r0, r3
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	4288      	cmp	r0, r1
 8011d70:	d305      	bcc.n	8011d7e <__copybits+0x40>
 8011d72:	bd70      	pop	{r4, r5, r6, pc}
 8011d74:	f853 6b04 	ldr.w	r6, [r3], #4
 8011d78:	f845 6f04 	str.w	r6, [r5, #4]!
 8011d7c:	e7eb      	b.n	8011d56 <__copybits+0x18>
 8011d7e:	f840 3b04 	str.w	r3, [r0], #4
 8011d82:	e7f4      	b.n	8011d6e <__copybits+0x30>

08011d84 <__any_on>:
 8011d84:	f100 0214 	add.w	r2, r0, #20
 8011d88:	6900      	ldr	r0, [r0, #16]
 8011d8a:	114b      	asrs	r3, r1, #5
 8011d8c:	4298      	cmp	r0, r3
 8011d8e:	b510      	push	{r4, lr}
 8011d90:	db11      	blt.n	8011db6 <__any_on+0x32>
 8011d92:	dd0a      	ble.n	8011daa <__any_on+0x26>
 8011d94:	f011 011f 	ands.w	r1, r1, #31
 8011d98:	d007      	beq.n	8011daa <__any_on+0x26>
 8011d9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011d9e:	fa24 f001 	lsr.w	r0, r4, r1
 8011da2:	fa00 f101 	lsl.w	r1, r0, r1
 8011da6:	428c      	cmp	r4, r1
 8011da8:	d10b      	bne.n	8011dc2 <__any_on+0x3e>
 8011daa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dae:	4293      	cmp	r3, r2
 8011db0:	d803      	bhi.n	8011dba <__any_on+0x36>
 8011db2:	2000      	movs	r0, #0
 8011db4:	bd10      	pop	{r4, pc}
 8011db6:	4603      	mov	r3, r0
 8011db8:	e7f7      	b.n	8011daa <__any_on+0x26>
 8011dba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011dbe:	2900      	cmp	r1, #0
 8011dc0:	d0f5      	beq.n	8011dae <__any_on+0x2a>
 8011dc2:	2001      	movs	r0, #1
 8011dc4:	e7f6      	b.n	8011db4 <__any_on+0x30>

08011dc6 <sulp>:
 8011dc6:	b570      	push	{r4, r5, r6, lr}
 8011dc8:	4604      	mov	r4, r0
 8011dca:	460d      	mov	r5, r1
 8011dcc:	ec45 4b10 	vmov	d0, r4, r5
 8011dd0:	4616      	mov	r6, r2
 8011dd2:	f7ff feb7 	bl	8011b44 <__ulp>
 8011dd6:	ec51 0b10 	vmov	r0, r1, d0
 8011dda:	b17e      	cbz	r6, 8011dfc <sulp+0x36>
 8011ddc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011de0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	dd09      	ble.n	8011dfc <sulp+0x36>
 8011de8:	051b      	lsls	r3, r3, #20
 8011dea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011dee:	2400      	movs	r4, #0
 8011df0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011df4:	4622      	mov	r2, r4
 8011df6:	462b      	mov	r3, r5
 8011df8:	f7ee fc36 	bl	8000668 <__aeabi_dmul>
 8011dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08011e00 <_strtod_l>:
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	ed2d 8b02 	vpush	{d8}
 8011e08:	b09b      	sub	sp, #108	; 0x6c
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8011e0e:	2200      	movs	r2, #0
 8011e10:	9216      	str	r2, [sp, #88]	; 0x58
 8011e12:	460d      	mov	r5, r1
 8011e14:	f04f 0800 	mov.w	r8, #0
 8011e18:	f04f 0900 	mov.w	r9, #0
 8011e1c:	460a      	mov	r2, r1
 8011e1e:	9215      	str	r2, [sp, #84]	; 0x54
 8011e20:	7811      	ldrb	r1, [r2, #0]
 8011e22:	292b      	cmp	r1, #43	; 0x2b
 8011e24:	d04c      	beq.n	8011ec0 <_strtod_l+0xc0>
 8011e26:	d83a      	bhi.n	8011e9e <_strtod_l+0x9e>
 8011e28:	290d      	cmp	r1, #13
 8011e2a:	d834      	bhi.n	8011e96 <_strtod_l+0x96>
 8011e2c:	2908      	cmp	r1, #8
 8011e2e:	d834      	bhi.n	8011e9a <_strtod_l+0x9a>
 8011e30:	2900      	cmp	r1, #0
 8011e32:	d03d      	beq.n	8011eb0 <_strtod_l+0xb0>
 8011e34:	2200      	movs	r2, #0
 8011e36:	920a      	str	r2, [sp, #40]	; 0x28
 8011e38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011e3a:	7832      	ldrb	r2, [r6, #0]
 8011e3c:	2a30      	cmp	r2, #48	; 0x30
 8011e3e:	f040 80b4 	bne.w	8011faa <_strtod_l+0x1aa>
 8011e42:	7872      	ldrb	r2, [r6, #1]
 8011e44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011e48:	2a58      	cmp	r2, #88	; 0x58
 8011e4a:	d170      	bne.n	8011f2e <_strtod_l+0x12e>
 8011e4c:	9302      	str	r3, [sp, #8]
 8011e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e50:	9301      	str	r3, [sp, #4]
 8011e52:	ab16      	add	r3, sp, #88	; 0x58
 8011e54:	9300      	str	r3, [sp, #0]
 8011e56:	4a8e      	ldr	r2, [pc, #568]	; (8012090 <_strtod_l+0x290>)
 8011e58:	ab17      	add	r3, sp, #92	; 0x5c
 8011e5a:	a915      	add	r1, sp, #84	; 0x54
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f001 fb03 	bl	8013468 <__gethex>
 8011e62:	f010 070f 	ands.w	r7, r0, #15
 8011e66:	4605      	mov	r5, r0
 8011e68:	d005      	beq.n	8011e76 <_strtod_l+0x76>
 8011e6a:	2f06      	cmp	r7, #6
 8011e6c:	d12a      	bne.n	8011ec4 <_strtod_l+0xc4>
 8011e6e:	3601      	adds	r6, #1
 8011e70:	2300      	movs	r3, #0
 8011e72:	9615      	str	r6, [sp, #84]	; 0x54
 8011e74:	930a      	str	r3, [sp, #40]	; 0x28
 8011e76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f040 857f 	bne.w	801297c <_strtod_l+0xb7c>
 8011e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e80:	b1db      	cbz	r3, 8011eba <_strtod_l+0xba>
 8011e82:	4642      	mov	r2, r8
 8011e84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011e88:	ec43 2b10 	vmov	d0, r2, r3
 8011e8c:	b01b      	add	sp, #108	; 0x6c
 8011e8e:	ecbd 8b02 	vpop	{d8}
 8011e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e96:	2920      	cmp	r1, #32
 8011e98:	d1cc      	bne.n	8011e34 <_strtod_l+0x34>
 8011e9a:	3201      	adds	r2, #1
 8011e9c:	e7bf      	b.n	8011e1e <_strtod_l+0x1e>
 8011e9e:	292d      	cmp	r1, #45	; 0x2d
 8011ea0:	d1c8      	bne.n	8011e34 <_strtod_l+0x34>
 8011ea2:	2101      	movs	r1, #1
 8011ea4:	910a      	str	r1, [sp, #40]	; 0x28
 8011ea6:	1c51      	adds	r1, r2, #1
 8011ea8:	9115      	str	r1, [sp, #84]	; 0x54
 8011eaa:	7852      	ldrb	r2, [r2, #1]
 8011eac:	2a00      	cmp	r2, #0
 8011eae:	d1c3      	bne.n	8011e38 <_strtod_l+0x38>
 8011eb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011eb2:	9515      	str	r5, [sp, #84]	; 0x54
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	f040 855f 	bne.w	8012978 <_strtod_l+0xb78>
 8011eba:	4642      	mov	r2, r8
 8011ebc:	464b      	mov	r3, r9
 8011ebe:	e7e3      	b.n	8011e88 <_strtod_l+0x88>
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	e7ef      	b.n	8011ea4 <_strtod_l+0xa4>
 8011ec4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011ec6:	b13a      	cbz	r2, 8011ed8 <_strtod_l+0xd8>
 8011ec8:	2135      	movs	r1, #53	; 0x35
 8011eca:	a818      	add	r0, sp, #96	; 0x60
 8011ecc:	f7ff ff37 	bl	8011d3e <__copybits>
 8011ed0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f7ff fb0a 	bl	80114ec <_Bfree>
 8011ed8:	3f01      	subs	r7, #1
 8011eda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011edc:	2f04      	cmp	r7, #4
 8011ede:	d806      	bhi.n	8011eee <_strtod_l+0xee>
 8011ee0:	e8df f007 	tbb	[pc, r7]
 8011ee4:	201d0314 	.word	0x201d0314
 8011ee8:	14          	.byte	0x14
 8011ee9:	00          	.byte	0x00
 8011eea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8011eee:	05e9      	lsls	r1, r5, #23
 8011ef0:	bf48      	it	mi
 8011ef2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011ef6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011efa:	0d1b      	lsrs	r3, r3, #20
 8011efc:	051b      	lsls	r3, r3, #20
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d1b9      	bne.n	8011e76 <_strtod_l+0x76>
 8011f02:	f7fe fad1 	bl	80104a8 <__errno>
 8011f06:	2322      	movs	r3, #34	; 0x22
 8011f08:	6003      	str	r3, [r0, #0]
 8011f0a:	e7b4      	b.n	8011e76 <_strtod_l+0x76>
 8011f0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011f10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011f14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011f18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011f1c:	e7e7      	b.n	8011eee <_strtod_l+0xee>
 8011f1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012098 <_strtod_l+0x298>
 8011f22:	e7e4      	b.n	8011eee <_strtod_l+0xee>
 8011f24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011f28:	f04f 38ff 	mov.w	r8, #4294967295
 8011f2c:	e7df      	b.n	8011eee <_strtod_l+0xee>
 8011f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f30:	1c5a      	adds	r2, r3, #1
 8011f32:	9215      	str	r2, [sp, #84]	; 0x54
 8011f34:	785b      	ldrb	r3, [r3, #1]
 8011f36:	2b30      	cmp	r3, #48	; 0x30
 8011f38:	d0f9      	beq.n	8011f2e <_strtod_l+0x12e>
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d09b      	beq.n	8011e76 <_strtod_l+0x76>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	f04f 0a00 	mov.w	sl, #0
 8011f44:	9304      	str	r3, [sp, #16]
 8011f46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011f4e:	46d3      	mov	fp, sl
 8011f50:	220a      	movs	r2, #10
 8011f52:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011f54:	7806      	ldrb	r6, [r0, #0]
 8011f56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011f5a:	b2d9      	uxtb	r1, r3
 8011f5c:	2909      	cmp	r1, #9
 8011f5e:	d926      	bls.n	8011fae <_strtod_l+0x1ae>
 8011f60:	494c      	ldr	r1, [pc, #304]	; (8012094 <_strtod_l+0x294>)
 8011f62:	2201      	movs	r2, #1
 8011f64:	f001 f9d2 	bl	801330c <strncmp>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d030      	beq.n	8011fce <_strtod_l+0x1ce>
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	4632      	mov	r2, r6
 8011f70:	9005      	str	r0, [sp, #20]
 8011f72:	465e      	mov	r6, fp
 8011f74:	4603      	mov	r3, r0
 8011f76:	2a65      	cmp	r2, #101	; 0x65
 8011f78:	d001      	beq.n	8011f7e <_strtod_l+0x17e>
 8011f7a:	2a45      	cmp	r2, #69	; 0x45
 8011f7c:	d113      	bne.n	8011fa6 <_strtod_l+0x1a6>
 8011f7e:	b91e      	cbnz	r6, 8011f88 <_strtod_l+0x188>
 8011f80:	9a04      	ldr	r2, [sp, #16]
 8011f82:	4302      	orrs	r2, r0
 8011f84:	d094      	beq.n	8011eb0 <_strtod_l+0xb0>
 8011f86:	2600      	movs	r6, #0
 8011f88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011f8a:	1c6a      	adds	r2, r5, #1
 8011f8c:	9215      	str	r2, [sp, #84]	; 0x54
 8011f8e:	786a      	ldrb	r2, [r5, #1]
 8011f90:	2a2b      	cmp	r2, #43	; 0x2b
 8011f92:	d074      	beq.n	801207e <_strtod_l+0x27e>
 8011f94:	2a2d      	cmp	r2, #45	; 0x2d
 8011f96:	d078      	beq.n	801208a <_strtod_l+0x28a>
 8011f98:	f04f 0c00 	mov.w	ip, #0
 8011f9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011fa0:	2909      	cmp	r1, #9
 8011fa2:	d97f      	bls.n	80120a4 <_strtod_l+0x2a4>
 8011fa4:	9515      	str	r5, [sp, #84]	; 0x54
 8011fa6:	2700      	movs	r7, #0
 8011fa8:	e09e      	b.n	80120e8 <_strtod_l+0x2e8>
 8011faa:	2300      	movs	r3, #0
 8011fac:	e7c8      	b.n	8011f40 <_strtod_l+0x140>
 8011fae:	f1bb 0f08 	cmp.w	fp, #8
 8011fb2:	bfd8      	it	le
 8011fb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011fb6:	f100 0001 	add.w	r0, r0, #1
 8011fba:	bfda      	itte	le
 8011fbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8011fc0:	9309      	strle	r3, [sp, #36]	; 0x24
 8011fc2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011fc6:	f10b 0b01 	add.w	fp, fp, #1
 8011fca:	9015      	str	r0, [sp, #84]	; 0x54
 8011fcc:	e7c1      	b.n	8011f52 <_strtod_l+0x152>
 8011fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fd0:	1c5a      	adds	r2, r3, #1
 8011fd2:	9215      	str	r2, [sp, #84]	; 0x54
 8011fd4:	785a      	ldrb	r2, [r3, #1]
 8011fd6:	f1bb 0f00 	cmp.w	fp, #0
 8011fda:	d037      	beq.n	801204c <_strtod_l+0x24c>
 8011fdc:	9005      	str	r0, [sp, #20]
 8011fde:	465e      	mov	r6, fp
 8011fe0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011fe4:	2b09      	cmp	r3, #9
 8011fe6:	d912      	bls.n	801200e <_strtod_l+0x20e>
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e7c4      	b.n	8011f76 <_strtod_l+0x176>
 8011fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fee:	1c5a      	adds	r2, r3, #1
 8011ff0:	9215      	str	r2, [sp, #84]	; 0x54
 8011ff2:	785a      	ldrb	r2, [r3, #1]
 8011ff4:	3001      	adds	r0, #1
 8011ff6:	2a30      	cmp	r2, #48	; 0x30
 8011ff8:	d0f8      	beq.n	8011fec <_strtod_l+0x1ec>
 8011ffa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011ffe:	2b08      	cmp	r3, #8
 8012000:	f200 84c1 	bhi.w	8012986 <_strtod_l+0xb86>
 8012004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012006:	9005      	str	r0, [sp, #20]
 8012008:	2000      	movs	r0, #0
 801200a:	930b      	str	r3, [sp, #44]	; 0x2c
 801200c:	4606      	mov	r6, r0
 801200e:	3a30      	subs	r2, #48	; 0x30
 8012010:	f100 0301 	add.w	r3, r0, #1
 8012014:	d014      	beq.n	8012040 <_strtod_l+0x240>
 8012016:	9905      	ldr	r1, [sp, #20]
 8012018:	4419      	add	r1, r3
 801201a:	9105      	str	r1, [sp, #20]
 801201c:	4633      	mov	r3, r6
 801201e:	eb00 0c06 	add.w	ip, r0, r6
 8012022:	210a      	movs	r1, #10
 8012024:	4563      	cmp	r3, ip
 8012026:	d113      	bne.n	8012050 <_strtod_l+0x250>
 8012028:	1833      	adds	r3, r6, r0
 801202a:	2b08      	cmp	r3, #8
 801202c:	f106 0601 	add.w	r6, r6, #1
 8012030:	4406      	add	r6, r0
 8012032:	dc1a      	bgt.n	801206a <_strtod_l+0x26a>
 8012034:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012036:	230a      	movs	r3, #10
 8012038:	fb03 2301 	mla	r3, r3, r1, r2
 801203c:	9309      	str	r3, [sp, #36]	; 0x24
 801203e:	2300      	movs	r3, #0
 8012040:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012042:	1c51      	adds	r1, r2, #1
 8012044:	9115      	str	r1, [sp, #84]	; 0x54
 8012046:	7852      	ldrb	r2, [r2, #1]
 8012048:	4618      	mov	r0, r3
 801204a:	e7c9      	b.n	8011fe0 <_strtod_l+0x1e0>
 801204c:	4658      	mov	r0, fp
 801204e:	e7d2      	b.n	8011ff6 <_strtod_l+0x1f6>
 8012050:	2b08      	cmp	r3, #8
 8012052:	f103 0301 	add.w	r3, r3, #1
 8012056:	dc03      	bgt.n	8012060 <_strtod_l+0x260>
 8012058:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801205a:	434f      	muls	r7, r1
 801205c:	9709      	str	r7, [sp, #36]	; 0x24
 801205e:	e7e1      	b.n	8012024 <_strtod_l+0x224>
 8012060:	2b10      	cmp	r3, #16
 8012062:	bfd8      	it	le
 8012064:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012068:	e7dc      	b.n	8012024 <_strtod_l+0x224>
 801206a:	2e10      	cmp	r6, #16
 801206c:	bfdc      	itt	le
 801206e:	230a      	movle	r3, #10
 8012070:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8012074:	e7e3      	b.n	801203e <_strtod_l+0x23e>
 8012076:	2300      	movs	r3, #0
 8012078:	9305      	str	r3, [sp, #20]
 801207a:	2301      	movs	r3, #1
 801207c:	e780      	b.n	8011f80 <_strtod_l+0x180>
 801207e:	f04f 0c00 	mov.w	ip, #0
 8012082:	1caa      	adds	r2, r5, #2
 8012084:	9215      	str	r2, [sp, #84]	; 0x54
 8012086:	78aa      	ldrb	r2, [r5, #2]
 8012088:	e788      	b.n	8011f9c <_strtod_l+0x19c>
 801208a:	f04f 0c01 	mov.w	ip, #1
 801208e:	e7f8      	b.n	8012082 <_strtod_l+0x282>
 8012090:	080141a8 	.word	0x080141a8
 8012094:	080141a4 	.word	0x080141a4
 8012098:	7ff00000 	.word	0x7ff00000
 801209c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801209e:	1c51      	adds	r1, r2, #1
 80120a0:	9115      	str	r1, [sp, #84]	; 0x54
 80120a2:	7852      	ldrb	r2, [r2, #1]
 80120a4:	2a30      	cmp	r2, #48	; 0x30
 80120a6:	d0f9      	beq.n	801209c <_strtod_l+0x29c>
 80120a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80120ac:	2908      	cmp	r1, #8
 80120ae:	f63f af7a 	bhi.w	8011fa6 <_strtod_l+0x1a6>
 80120b2:	3a30      	subs	r2, #48	; 0x30
 80120b4:	9208      	str	r2, [sp, #32]
 80120b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80120b8:	920c      	str	r2, [sp, #48]	; 0x30
 80120ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80120bc:	1c57      	adds	r7, r2, #1
 80120be:	9715      	str	r7, [sp, #84]	; 0x54
 80120c0:	7852      	ldrb	r2, [r2, #1]
 80120c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80120c6:	f1be 0f09 	cmp.w	lr, #9
 80120ca:	d938      	bls.n	801213e <_strtod_l+0x33e>
 80120cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80120ce:	1a7f      	subs	r7, r7, r1
 80120d0:	2f08      	cmp	r7, #8
 80120d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80120d6:	dc03      	bgt.n	80120e0 <_strtod_l+0x2e0>
 80120d8:	9908      	ldr	r1, [sp, #32]
 80120da:	428f      	cmp	r7, r1
 80120dc:	bfa8      	it	ge
 80120de:	460f      	movge	r7, r1
 80120e0:	f1bc 0f00 	cmp.w	ip, #0
 80120e4:	d000      	beq.n	80120e8 <_strtod_l+0x2e8>
 80120e6:	427f      	negs	r7, r7
 80120e8:	2e00      	cmp	r6, #0
 80120ea:	d14f      	bne.n	801218c <_strtod_l+0x38c>
 80120ec:	9904      	ldr	r1, [sp, #16]
 80120ee:	4301      	orrs	r1, r0
 80120f0:	f47f aec1 	bne.w	8011e76 <_strtod_l+0x76>
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	f47f aedb 	bne.w	8011eb0 <_strtod_l+0xb0>
 80120fa:	2a69      	cmp	r2, #105	; 0x69
 80120fc:	d029      	beq.n	8012152 <_strtod_l+0x352>
 80120fe:	dc26      	bgt.n	801214e <_strtod_l+0x34e>
 8012100:	2a49      	cmp	r2, #73	; 0x49
 8012102:	d026      	beq.n	8012152 <_strtod_l+0x352>
 8012104:	2a4e      	cmp	r2, #78	; 0x4e
 8012106:	f47f aed3 	bne.w	8011eb0 <_strtod_l+0xb0>
 801210a:	499b      	ldr	r1, [pc, #620]	; (8012378 <_strtod_l+0x578>)
 801210c:	a815      	add	r0, sp, #84	; 0x54
 801210e:	f001 fbeb 	bl	80138e8 <__match>
 8012112:	2800      	cmp	r0, #0
 8012114:	f43f aecc 	beq.w	8011eb0 <_strtod_l+0xb0>
 8012118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	2b28      	cmp	r3, #40	; 0x28
 801211e:	d12f      	bne.n	8012180 <_strtod_l+0x380>
 8012120:	4996      	ldr	r1, [pc, #600]	; (801237c <_strtod_l+0x57c>)
 8012122:	aa18      	add	r2, sp, #96	; 0x60
 8012124:	a815      	add	r0, sp, #84	; 0x54
 8012126:	f001 fbf3 	bl	8013910 <__hexnan>
 801212a:	2805      	cmp	r0, #5
 801212c:	d128      	bne.n	8012180 <_strtod_l+0x380>
 801212e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012130:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012134:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012138:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801213c:	e69b      	b.n	8011e76 <_strtod_l+0x76>
 801213e:	9f08      	ldr	r7, [sp, #32]
 8012140:	210a      	movs	r1, #10
 8012142:	fb01 2107 	mla	r1, r1, r7, r2
 8012146:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801214a:	9208      	str	r2, [sp, #32]
 801214c:	e7b5      	b.n	80120ba <_strtod_l+0x2ba>
 801214e:	2a6e      	cmp	r2, #110	; 0x6e
 8012150:	e7d9      	b.n	8012106 <_strtod_l+0x306>
 8012152:	498b      	ldr	r1, [pc, #556]	; (8012380 <_strtod_l+0x580>)
 8012154:	a815      	add	r0, sp, #84	; 0x54
 8012156:	f001 fbc7 	bl	80138e8 <__match>
 801215a:	2800      	cmp	r0, #0
 801215c:	f43f aea8 	beq.w	8011eb0 <_strtod_l+0xb0>
 8012160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012162:	4988      	ldr	r1, [pc, #544]	; (8012384 <_strtod_l+0x584>)
 8012164:	3b01      	subs	r3, #1
 8012166:	a815      	add	r0, sp, #84	; 0x54
 8012168:	9315      	str	r3, [sp, #84]	; 0x54
 801216a:	f001 fbbd 	bl	80138e8 <__match>
 801216e:	b910      	cbnz	r0, 8012176 <_strtod_l+0x376>
 8012170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012172:	3301      	adds	r3, #1
 8012174:	9315      	str	r3, [sp, #84]	; 0x54
 8012176:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012394 <_strtod_l+0x594>
 801217a:	f04f 0800 	mov.w	r8, #0
 801217e:	e67a      	b.n	8011e76 <_strtod_l+0x76>
 8012180:	4881      	ldr	r0, [pc, #516]	; (8012388 <_strtod_l+0x588>)
 8012182:	f001 f8e5 	bl	8013350 <nan>
 8012186:	ec59 8b10 	vmov	r8, r9, d0
 801218a:	e674      	b.n	8011e76 <_strtod_l+0x76>
 801218c:	9b05      	ldr	r3, [sp, #20]
 801218e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012190:	1afb      	subs	r3, r7, r3
 8012192:	f1bb 0f00 	cmp.w	fp, #0
 8012196:	bf08      	it	eq
 8012198:	46b3      	moveq	fp, r6
 801219a:	2e10      	cmp	r6, #16
 801219c:	9308      	str	r3, [sp, #32]
 801219e:	4635      	mov	r5, r6
 80121a0:	bfa8      	it	ge
 80121a2:	2510      	movge	r5, #16
 80121a4:	f7ee f9e6 	bl	8000574 <__aeabi_ui2d>
 80121a8:	2e09      	cmp	r6, #9
 80121aa:	4680      	mov	r8, r0
 80121ac:	4689      	mov	r9, r1
 80121ae:	dd13      	ble.n	80121d8 <_strtod_l+0x3d8>
 80121b0:	4b76      	ldr	r3, [pc, #472]	; (801238c <_strtod_l+0x58c>)
 80121b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80121b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80121ba:	f7ee fa55 	bl	8000668 <__aeabi_dmul>
 80121be:	4680      	mov	r8, r0
 80121c0:	4650      	mov	r0, sl
 80121c2:	4689      	mov	r9, r1
 80121c4:	f7ee f9d6 	bl	8000574 <__aeabi_ui2d>
 80121c8:	4602      	mov	r2, r0
 80121ca:	460b      	mov	r3, r1
 80121cc:	4640      	mov	r0, r8
 80121ce:	4649      	mov	r1, r9
 80121d0:	f7ee f894 	bl	80002fc <__adddf3>
 80121d4:	4680      	mov	r8, r0
 80121d6:	4689      	mov	r9, r1
 80121d8:	2e0f      	cmp	r6, #15
 80121da:	dc38      	bgt.n	801224e <_strtod_l+0x44e>
 80121dc:	9b08      	ldr	r3, [sp, #32]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	f43f ae49 	beq.w	8011e76 <_strtod_l+0x76>
 80121e4:	dd24      	ble.n	8012230 <_strtod_l+0x430>
 80121e6:	2b16      	cmp	r3, #22
 80121e8:	dc0b      	bgt.n	8012202 <_strtod_l+0x402>
 80121ea:	4968      	ldr	r1, [pc, #416]	; (801238c <_strtod_l+0x58c>)
 80121ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80121f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121f4:	4642      	mov	r2, r8
 80121f6:	464b      	mov	r3, r9
 80121f8:	f7ee fa36 	bl	8000668 <__aeabi_dmul>
 80121fc:	4680      	mov	r8, r0
 80121fe:	4689      	mov	r9, r1
 8012200:	e639      	b.n	8011e76 <_strtod_l+0x76>
 8012202:	9a08      	ldr	r2, [sp, #32]
 8012204:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012208:	4293      	cmp	r3, r2
 801220a:	db20      	blt.n	801224e <_strtod_l+0x44e>
 801220c:	4c5f      	ldr	r4, [pc, #380]	; (801238c <_strtod_l+0x58c>)
 801220e:	f1c6 060f 	rsb	r6, r6, #15
 8012212:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012216:	4642      	mov	r2, r8
 8012218:	464b      	mov	r3, r9
 801221a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801221e:	f7ee fa23 	bl	8000668 <__aeabi_dmul>
 8012222:	9b08      	ldr	r3, [sp, #32]
 8012224:	1b9e      	subs	r6, r3, r6
 8012226:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801222a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801222e:	e7e3      	b.n	80121f8 <_strtod_l+0x3f8>
 8012230:	9b08      	ldr	r3, [sp, #32]
 8012232:	3316      	adds	r3, #22
 8012234:	db0b      	blt.n	801224e <_strtod_l+0x44e>
 8012236:	9b05      	ldr	r3, [sp, #20]
 8012238:	1bdf      	subs	r7, r3, r7
 801223a:	4b54      	ldr	r3, [pc, #336]	; (801238c <_strtod_l+0x58c>)
 801223c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012244:	4640      	mov	r0, r8
 8012246:	4649      	mov	r1, r9
 8012248:	f7ee fb38 	bl	80008bc <__aeabi_ddiv>
 801224c:	e7d6      	b.n	80121fc <_strtod_l+0x3fc>
 801224e:	9b08      	ldr	r3, [sp, #32]
 8012250:	1b75      	subs	r5, r6, r5
 8012252:	441d      	add	r5, r3
 8012254:	2d00      	cmp	r5, #0
 8012256:	dd70      	ble.n	801233a <_strtod_l+0x53a>
 8012258:	f015 030f 	ands.w	r3, r5, #15
 801225c:	d00a      	beq.n	8012274 <_strtod_l+0x474>
 801225e:	494b      	ldr	r1, [pc, #300]	; (801238c <_strtod_l+0x58c>)
 8012260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012264:	4642      	mov	r2, r8
 8012266:	464b      	mov	r3, r9
 8012268:	e9d1 0100 	ldrd	r0, r1, [r1]
 801226c:	f7ee f9fc 	bl	8000668 <__aeabi_dmul>
 8012270:	4680      	mov	r8, r0
 8012272:	4689      	mov	r9, r1
 8012274:	f035 050f 	bics.w	r5, r5, #15
 8012278:	d04d      	beq.n	8012316 <_strtod_l+0x516>
 801227a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801227e:	dd22      	ble.n	80122c6 <_strtod_l+0x4c6>
 8012280:	2500      	movs	r5, #0
 8012282:	46ab      	mov	fp, r5
 8012284:	9509      	str	r5, [sp, #36]	; 0x24
 8012286:	9505      	str	r5, [sp, #20]
 8012288:	2322      	movs	r3, #34	; 0x22
 801228a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012394 <_strtod_l+0x594>
 801228e:	6023      	str	r3, [r4, #0]
 8012290:	f04f 0800 	mov.w	r8, #0
 8012294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012296:	2b00      	cmp	r3, #0
 8012298:	f43f aded 	beq.w	8011e76 <_strtod_l+0x76>
 801229c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801229e:	4620      	mov	r0, r4
 80122a0:	f7ff f924 	bl	80114ec <_Bfree>
 80122a4:	9905      	ldr	r1, [sp, #20]
 80122a6:	4620      	mov	r0, r4
 80122a8:	f7ff f920 	bl	80114ec <_Bfree>
 80122ac:	4659      	mov	r1, fp
 80122ae:	4620      	mov	r0, r4
 80122b0:	f7ff f91c 	bl	80114ec <_Bfree>
 80122b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80122b6:	4620      	mov	r0, r4
 80122b8:	f7ff f918 	bl	80114ec <_Bfree>
 80122bc:	4629      	mov	r1, r5
 80122be:	4620      	mov	r0, r4
 80122c0:	f7ff f914 	bl	80114ec <_Bfree>
 80122c4:	e5d7      	b.n	8011e76 <_strtod_l+0x76>
 80122c6:	4b32      	ldr	r3, [pc, #200]	; (8012390 <_strtod_l+0x590>)
 80122c8:	9304      	str	r3, [sp, #16]
 80122ca:	2300      	movs	r3, #0
 80122cc:	112d      	asrs	r5, r5, #4
 80122ce:	4640      	mov	r0, r8
 80122d0:	4649      	mov	r1, r9
 80122d2:	469a      	mov	sl, r3
 80122d4:	2d01      	cmp	r5, #1
 80122d6:	dc21      	bgt.n	801231c <_strtod_l+0x51c>
 80122d8:	b10b      	cbz	r3, 80122de <_strtod_l+0x4de>
 80122da:	4680      	mov	r8, r0
 80122dc:	4689      	mov	r9, r1
 80122de:	492c      	ldr	r1, [pc, #176]	; (8012390 <_strtod_l+0x590>)
 80122e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80122e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80122e8:	4642      	mov	r2, r8
 80122ea:	464b      	mov	r3, r9
 80122ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122f0:	f7ee f9ba 	bl	8000668 <__aeabi_dmul>
 80122f4:	4b27      	ldr	r3, [pc, #156]	; (8012394 <_strtod_l+0x594>)
 80122f6:	460a      	mov	r2, r1
 80122f8:	400b      	ands	r3, r1
 80122fa:	4927      	ldr	r1, [pc, #156]	; (8012398 <_strtod_l+0x598>)
 80122fc:	428b      	cmp	r3, r1
 80122fe:	4680      	mov	r8, r0
 8012300:	d8be      	bhi.n	8012280 <_strtod_l+0x480>
 8012302:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012306:	428b      	cmp	r3, r1
 8012308:	bf86      	itte	hi
 801230a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801239c <_strtod_l+0x59c>
 801230e:	f04f 38ff 	movhi.w	r8, #4294967295
 8012312:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012316:	2300      	movs	r3, #0
 8012318:	9304      	str	r3, [sp, #16]
 801231a:	e07b      	b.n	8012414 <_strtod_l+0x614>
 801231c:	07ea      	lsls	r2, r5, #31
 801231e:	d505      	bpl.n	801232c <_strtod_l+0x52c>
 8012320:	9b04      	ldr	r3, [sp, #16]
 8012322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012326:	f7ee f99f 	bl	8000668 <__aeabi_dmul>
 801232a:	2301      	movs	r3, #1
 801232c:	9a04      	ldr	r2, [sp, #16]
 801232e:	3208      	adds	r2, #8
 8012330:	f10a 0a01 	add.w	sl, sl, #1
 8012334:	106d      	asrs	r5, r5, #1
 8012336:	9204      	str	r2, [sp, #16]
 8012338:	e7cc      	b.n	80122d4 <_strtod_l+0x4d4>
 801233a:	d0ec      	beq.n	8012316 <_strtod_l+0x516>
 801233c:	426d      	negs	r5, r5
 801233e:	f015 020f 	ands.w	r2, r5, #15
 8012342:	d00a      	beq.n	801235a <_strtod_l+0x55a>
 8012344:	4b11      	ldr	r3, [pc, #68]	; (801238c <_strtod_l+0x58c>)
 8012346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801234a:	4640      	mov	r0, r8
 801234c:	4649      	mov	r1, r9
 801234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012352:	f7ee fab3 	bl	80008bc <__aeabi_ddiv>
 8012356:	4680      	mov	r8, r0
 8012358:	4689      	mov	r9, r1
 801235a:	112d      	asrs	r5, r5, #4
 801235c:	d0db      	beq.n	8012316 <_strtod_l+0x516>
 801235e:	2d1f      	cmp	r5, #31
 8012360:	dd1e      	ble.n	80123a0 <_strtod_l+0x5a0>
 8012362:	2500      	movs	r5, #0
 8012364:	46ab      	mov	fp, r5
 8012366:	9509      	str	r5, [sp, #36]	; 0x24
 8012368:	9505      	str	r5, [sp, #20]
 801236a:	2322      	movs	r3, #34	; 0x22
 801236c:	f04f 0800 	mov.w	r8, #0
 8012370:	f04f 0900 	mov.w	r9, #0
 8012374:	6023      	str	r3, [r4, #0]
 8012376:	e78d      	b.n	8012294 <_strtod_l+0x494>
 8012378:	08013efd 	.word	0x08013efd
 801237c:	080141bc 	.word	0x080141bc
 8012380:	08013ef5 	.word	0x08013ef5
 8012384:	08013fd9 	.word	0x08013fd9
 8012388:	08013fd5 	.word	0x08013fd5
 801238c:	080140d0 	.word	0x080140d0
 8012390:	080140a8 	.word	0x080140a8
 8012394:	7ff00000 	.word	0x7ff00000
 8012398:	7ca00000 	.word	0x7ca00000
 801239c:	7fefffff 	.word	0x7fefffff
 80123a0:	f015 0310 	ands.w	r3, r5, #16
 80123a4:	bf18      	it	ne
 80123a6:	236a      	movne	r3, #106	; 0x6a
 80123a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801274c <_strtod_l+0x94c>
 80123ac:	9304      	str	r3, [sp, #16]
 80123ae:	4640      	mov	r0, r8
 80123b0:	4649      	mov	r1, r9
 80123b2:	2300      	movs	r3, #0
 80123b4:	07ea      	lsls	r2, r5, #31
 80123b6:	d504      	bpl.n	80123c2 <_strtod_l+0x5c2>
 80123b8:	e9da 2300 	ldrd	r2, r3, [sl]
 80123bc:	f7ee f954 	bl	8000668 <__aeabi_dmul>
 80123c0:	2301      	movs	r3, #1
 80123c2:	106d      	asrs	r5, r5, #1
 80123c4:	f10a 0a08 	add.w	sl, sl, #8
 80123c8:	d1f4      	bne.n	80123b4 <_strtod_l+0x5b4>
 80123ca:	b10b      	cbz	r3, 80123d0 <_strtod_l+0x5d0>
 80123cc:	4680      	mov	r8, r0
 80123ce:	4689      	mov	r9, r1
 80123d0:	9b04      	ldr	r3, [sp, #16]
 80123d2:	b1bb      	cbz	r3, 8012404 <_strtod_l+0x604>
 80123d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80123d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80123dc:	2b00      	cmp	r3, #0
 80123de:	4649      	mov	r1, r9
 80123e0:	dd10      	ble.n	8012404 <_strtod_l+0x604>
 80123e2:	2b1f      	cmp	r3, #31
 80123e4:	f340 811e 	ble.w	8012624 <_strtod_l+0x824>
 80123e8:	2b34      	cmp	r3, #52	; 0x34
 80123ea:	bfde      	ittt	le
 80123ec:	f04f 33ff 	movle.w	r3, #4294967295
 80123f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80123f4:	4093      	lslle	r3, r2
 80123f6:	f04f 0800 	mov.w	r8, #0
 80123fa:	bfcc      	ite	gt
 80123fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012400:	ea03 0901 	andle.w	r9, r3, r1
 8012404:	2200      	movs	r2, #0
 8012406:	2300      	movs	r3, #0
 8012408:	4640      	mov	r0, r8
 801240a:	4649      	mov	r1, r9
 801240c:	f7ee fb94 	bl	8000b38 <__aeabi_dcmpeq>
 8012410:	2800      	cmp	r0, #0
 8012412:	d1a6      	bne.n	8012362 <_strtod_l+0x562>
 8012414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801241a:	4633      	mov	r3, r6
 801241c:	465a      	mov	r2, fp
 801241e:	4620      	mov	r0, r4
 8012420:	f7ff f8cc 	bl	80115bc <__s2b>
 8012424:	9009      	str	r0, [sp, #36]	; 0x24
 8012426:	2800      	cmp	r0, #0
 8012428:	f43f af2a 	beq.w	8012280 <_strtod_l+0x480>
 801242c:	9a08      	ldr	r2, [sp, #32]
 801242e:	9b05      	ldr	r3, [sp, #20]
 8012430:	2a00      	cmp	r2, #0
 8012432:	eba3 0307 	sub.w	r3, r3, r7
 8012436:	bfa8      	it	ge
 8012438:	2300      	movge	r3, #0
 801243a:	930c      	str	r3, [sp, #48]	; 0x30
 801243c:	2500      	movs	r5, #0
 801243e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012442:	9312      	str	r3, [sp, #72]	; 0x48
 8012444:	46ab      	mov	fp, r5
 8012446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012448:	4620      	mov	r0, r4
 801244a:	6859      	ldr	r1, [r3, #4]
 801244c:	f7ff f80e 	bl	801146c <_Balloc>
 8012450:	9005      	str	r0, [sp, #20]
 8012452:	2800      	cmp	r0, #0
 8012454:	f43f af18 	beq.w	8012288 <_strtod_l+0x488>
 8012458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801245a:	691a      	ldr	r2, [r3, #16]
 801245c:	3202      	adds	r2, #2
 801245e:	f103 010c 	add.w	r1, r3, #12
 8012462:	0092      	lsls	r2, r2, #2
 8012464:	300c      	adds	r0, #12
 8012466:	f7fe f853 	bl	8010510 <memcpy>
 801246a:	ec49 8b10 	vmov	d0, r8, r9
 801246e:	aa18      	add	r2, sp, #96	; 0x60
 8012470:	a917      	add	r1, sp, #92	; 0x5c
 8012472:	4620      	mov	r0, r4
 8012474:	f7ff fbd6 	bl	8011c24 <__d2b>
 8012478:	ec49 8b18 	vmov	d8, r8, r9
 801247c:	9016      	str	r0, [sp, #88]	; 0x58
 801247e:	2800      	cmp	r0, #0
 8012480:	f43f af02 	beq.w	8012288 <_strtod_l+0x488>
 8012484:	2101      	movs	r1, #1
 8012486:	4620      	mov	r0, r4
 8012488:	f7ff f930 	bl	80116ec <__i2b>
 801248c:	4683      	mov	fp, r0
 801248e:	2800      	cmp	r0, #0
 8012490:	f43f aefa 	beq.w	8012288 <_strtod_l+0x488>
 8012494:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012496:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012498:	2e00      	cmp	r6, #0
 801249a:	bfab      	itete	ge
 801249c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801249e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80124a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80124a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80124a6:	bfac      	ite	ge
 80124a8:	eb06 0a03 	addge.w	sl, r6, r3
 80124ac:	1b9f      	sublt	r7, r3, r6
 80124ae:	9b04      	ldr	r3, [sp, #16]
 80124b0:	1af6      	subs	r6, r6, r3
 80124b2:	4416      	add	r6, r2
 80124b4:	4ba0      	ldr	r3, [pc, #640]	; (8012738 <_strtod_l+0x938>)
 80124b6:	3e01      	subs	r6, #1
 80124b8:	429e      	cmp	r6, r3
 80124ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80124be:	f280 80c4 	bge.w	801264a <_strtod_l+0x84a>
 80124c2:	1b9b      	subs	r3, r3, r6
 80124c4:	2b1f      	cmp	r3, #31
 80124c6:	eba2 0203 	sub.w	r2, r2, r3
 80124ca:	f04f 0101 	mov.w	r1, #1
 80124ce:	f300 80b0 	bgt.w	8012632 <_strtod_l+0x832>
 80124d2:	fa01 f303 	lsl.w	r3, r1, r3
 80124d6:	930e      	str	r3, [sp, #56]	; 0x38
 80124d8:	2300      	movs	r3, #0
 80124da:	930d      	str	r3, [sp, #52]	; 0x34
 80124dc:	eb0a 0602 	add.w	r6, sl, r2
 80124e0:	9b04      	ldr	r3, [sp, #16]
 80124e2:	45b2      	cmp	sl, r6
 80124e4:	4417      	add	r7, r2
 80124e6:	441f      	add	r7, r3
 80124e8:	4653      	mov	r3, sl
 80124ea:	bfa8      	it	ge
 80124ec:	4633      	movge	r3, r6
 80124ee:	42bb      	cmp	r3, r7
 80124f0:	bfa8      	it	ge
 80124f2:	463b      	movge	r3, r7
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	bfc2      	ittt	gt
 80124f8:	1af6      	subgt	r6, r6, r3
 80124fa:	1aff      	subgt	r7, r7, r3
 80124fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012502:	2b00      	cmp	r3, #0
 8012504:	dd17      	ble.n	8012536 <_strtod_l+0x736>
 8012506:	4659      	mov	r1, fp
 8012508:	461a      	mov	r2, r3
 801250a:	4620      	mov	r0, r4
 801250c:	f7ff f9ae 	bl	801186c <__pow5mult>
 8012510:	4683      	mov	fp, r0
 8012512:	2800      	cmp	r0, #0
 8012514:	f43f aeb8 	beq.w	8012288 <_strtod_l+0x488>
 8012518:	4601      	mov	r1, r0
 801251a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801251c:	4620      	mov	r0, r4
 801251e:	f7ff f8fb 	bl	8011718 <__multiply>
 8012522:	900b      	str	r0, [sp, #44]	; 0x2c
 8012524:	2800      	cmp	r0, #0
 8012526:	f43f aeaf 	beq.w	8012288 <_strtod_l+0x488>
 801252a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801252c:	4620      	mov	r0, r4
 801252e:	f7fe ffdd 	bl	80114ec <_Bfree>
 8012532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012534:	9316      	str	r3, [sp, #88]	; 0x58
 8012536:	2e00      	cmp	r6, #0
 8012538:	f300 808c 	bgt.w	8012654 <_strtod_l+0x854>
 801253c:	9b08      	ldr	r3, [sp, #32]
 801253e:	2b00      	cmp	r3, #0
 8012540:	dd08      	ble.n	8012554 <_strtod_l+0x754>
 8012542:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012544:	9905      	ldr	r1, [sp, #20]
 8012546:	4620      	mov	r0, r4
 8012548:	f7ff f990 	bl	801186c <__pow5mult>
 801254c:	9005      	str	r0, [sp, #20]
 801254e:	2800      	cmp	r0, #0
 8012550:	f43f ae9a 	beq.w	8012288 <_strtod_l+0x488>
 8012554:	2f00      	cmp	r7, #0
 8012556:	dd08      	ble.n	801256a <_strtod_l+0x76a>
 8012558:	9905      	ldr	r1, [sp, #20]
 801255a:	463a      	mov	r2, r7
 801255c:	4620      	mov	r0, r4
 801255e:	f7ff f9df 	bl	8011920 <__lshift>
 8012562:	9005      	str	r0, [sp, #20]
 8012564:	2800      	cmp	r0, #0
 8012566:	f43f ae8f 	beq.w	8012288 <_strtod_l+0x488>
 801256a:	f1ba 0f00 	cmp.w	sl, #0
 801256e:	dd08      	ble.n	8012582 <_strtod_l+0x782>
 8012570:	4659      	mov	r1, fp
 8012572:	4652      	mov	r2, sl
 8012574:	4620      	mov	r0, r4
 8012576:	f7ff f9d3 	bl	8011920 <__lshift>
 801257a:	4683      	mov	fp, r0
 801257c:	2800      	cmp	r0, #0
 801257e:	f43f ae83 	beq.w	8012288 <_strtod_l+0x488>
 8012582:	9a05      	ldr	r2, [sp, #20]
 8012584:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012586:	4620      	mov	r0, r4
 8012588:	f7ff fa52 	bl	8011a30 <__mdiff>
 801258c:	4605      	mov	r5, r0
 801258e:	2800      	cmp	r0, #0
 8012590:	f43f ae7a 	beq.w	8012288 <_strtod_l+0x488>
 8012594:	68c3      	ldr	r3, [r0, #12]
 8012596:	930b      	str	r3, [sp, #44]	; 0x2c
 8012598:	2300      	movs	r3, #0
 801259a:	60c3      	str	r3, [r0, #12]
 801259c:	4659      	mov	r1, fp
 801259e:	f7ff fa2b 	bl	80119f8 <__mcmp>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	da60      	bge.n	8012668 <_strtod_l+0x868>
 80125a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125a8:	ea53 0308 	orrs.w	r3, r3, r8
 80125ac:	f040 8084 	bne.w	80126b8 <_strtod_l+0x8b8>
 80125b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d17f      	bne.n	80126b8 <_strtod_l+0x8b8>
 80125b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80125bc:	0d1b      	lsrs	r3, r3, #20
 80125be:	051b      	lsls	r3, r3, #20
 80125c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80125c4:	d978      	bls.n	80126b8 <_strtod_l+0x8b8>
 80125c6:	696b      	ldr	r3, [r5, #20]
 80125c8:	b913      	cbnz	r3, 80125d0 <_strtod_l+0x7d0>
 80125ca:	692b      	ldr	r3, [r5, #16]
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	dd73      	ble.n	80126b8 <_strtod_l+0x8b8>
 80125d0:	4629      	mov	r1, r5
 80125d2:	2201      	movs	r2, #1
 80125d4:	4620      	mov	r0, r4
 80125d6:	f7ff f9a3 	bl	8011920 <__lshift>
 80125da:	4659      	mov	r1, fp
 80125dc:	4605      	mov	r5, r0
 80125de:	f7ff fa0b 	bl	80119f8 <__mcmp>
 80125e2:	2800      	cmp	r0, #0
 80125e4:	dd68      	ble.n	80126b8 <_strtod_l+0x8b8>
 80125e6:	9904      	ldr	r1, [sp, #16]
 80125e8:	4a54      	ldr	r2, [pc, #336]	; (801273c <_strtod_l+0x93c>)
 80125ea:	464b      	mov	r3, r9
 80125ec:	2900      	cmp	r1, #0
 80125ee:	f000 8084 	beq.w	80126fa <_strtod_l+0x8fa>
 80125f2:	ea02 0109 	and.w	r1, r2, r9
 80125f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80125fa:	dc7e      	bgt.n	80126fa <_strtod_l+0x8fa>
 80125fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012600:	f77f aeb3 	ble.w	801236a <_strtod_l+0x56a>
 8012604:	4b4e      	ldr	r3, [pc, #312]	; (8012740 <_strtod_l+0x940>)
 8012606:	4640      	mov	r0, r8
 8012608:	4649      	mov	r1, r9
 801260a:	2200      	movs	r2, #0
 801260c:	f7ee f82c 	bl	8000668 <__aeabi_dmul>
 8012610:	4b4a      	ldr	r3, [pc, #296]	; (801273c <_strtod_l+0x93c>)
 8012612:	400b      	ands	r3, r1
 8012614:	4680      	mov	r8, r0
 8012616:	4689      	mov	r9, r1
 8012618:	2b00      	cmp	r3, #0
 801261a:	f47f ae3f 	bne.w	801229c <_strtod_l+0x49c>
 801261e:	2322      	movs	r3, #34	; 0x22
 8012620:	6023      	str	r3, [r4, #0]
 8012622:	e63b      	b.n	801229c <_strtod_l+0x49c>
 8012624:	f04f 32ff 	mov.w	r2, #4294967295
 8012628:	fa02 f303 	lsl.w	r3, r2, r3
 801262c:	ea03 0808 	and.w	r8, r3, r8
 8012630:	e6e8      	b.n	8012404 <_strtod_l+0x604>
 8012632:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012636:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801263a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801263e:	36e2      	adds	r6, #226	; 0xe2
 8012640:	fa01 f306 	lsl.w	r3, r1, r6
 8012644:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012648:	e748      	b.n	80124dc <_strtod_l+0x6dc>
 801264a:	2100      	movs	r1, #0
 801264c:	2301      	movs	r3, #1
 801264e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012652:	e743      	b.n	80124dc <_strtod_l+0x6dc>
 8012654:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012656:	4632      	mov	r2, r6
 8012658:	4620      	mov	r0, r4
 801265a:	f7ff f961 	bl	8011920 <__lshift>
 801265e:	9016      	str	r0, [sp, #88]	; 0x58
 8012660:	2800      	cmp	r0, #0
 8012662:	f47f af6b 	bne.w	801253c <_strtod_l+0x73c>
 8012666:	e60f      	b.n	8012288 <_strtod_l+0x488>
 8012668:	46ca      	mov	sl, r9
 801266a:	d171      	bne.n	8012750 <_strtod_l+0x950>
 801266c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801266e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012672:	b352      	cbz	r2, 80126ca <_strtod_l+0x8ca>
 8012674:	4a33      	ldr	r2, [pc, #204]	; (8012744 <_strtod_l+0x944>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d12a      	bne.n	80126d0 <_strtod_l+0x8d0>
 801267a:	9b04      	ldr	r3, [sp, #16]
 801267c:	4641      	mov	r1, r8
 801267e:	b1fb      	cbz	r3, 80126c0 <_strtod_l+0x8c0>
 8012680:	4b2e      	ldr	r3, [pc, #184]	; (801273c <_strtod_l+0x93c>)
 8012682:	ea09 0303 	and.w	r3, r9, r3
 8012686:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801268a:	f04f 32ff 	mov.w	r2, #4294967295
 801268e:	d81a      	bhi.n	80126c6 <_strtod_l+0x8c6>
 8012690:	0d1b      	lsrs	r3, r3, #20
 8012692:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012696:	fa02 f303 	lsl.w	r3, r2, r3
 801269a:	4299      	cmp	r1, r3
 801269c:	d118      	bne.n	80126d0 <_strtod_l+0x8d0>
 801269e:	4b2a      	ldr	r3, [pc, #168]	; (8012748 <_strtod_l+0x948>)
 80126a0:	459a      	cmp	sl, r3
 80126a2:	d102      	bne.n	80126aa <_strtod_l+0x8aa>
 80126a4:	3101      	adds	r1, #1
 80126a6:	f43f adef 	beq.w	8012288 <_strtod_l+0x488>
 80126aa:	4b24      	ldr	r3, [pc, #144]	; (801273c <_strtod_l+0x93c>)
 80126ac:	ea0a 0303 	and.w	r3, sl, r3
 80126b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80126b4:	f04f 0800 	mov.w	r8, #0
 80126b8:	9b04      	ldr	r3, [sp, #16]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d1a2      	bne.n	8012604 <_strtod_l+0x804>
 80126be:	e5ed      	b.n	801229c <_strtod_l+0x49c>
 80126c0:	f04f 33ff 	mov.w	r3, #4294967295
 80126c4:	e7e9      	b.n	801269a <_strtod_l+0x89a>
 80126c6:	4613      	mov	r3, r2
 80126c8:	e7e7      	b.n	801269a <_strtod_l+0x89a>
 80126ca:	ea53 0308 	orrs.w	r3, r3, r8
 80126ce:	d08a      	beq.n	80125e6 <_strtod_l+0x7e6>
 80126d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126d2:	b1e3      	cbz	r3, 801270e <_strtod_l+0x90e>
 80126d4:	ea13 0f0a 	tst.w	r3, sl
 80126d8:	d0ee      	beq.n	80126b8 <_strtod_l+0x8b8>
 80126da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126dc:	9a04      	ldr	r2, [sp, #16]
 80126de:	4640      	mov	r0, r8
 80126e0:	4649      	mov	r1, r9
 80126e2:	b1c3      	cbz	r3, 8012716 <_strtod_l+0x916>
 80126e4:	f7ff fb6f 	bl	8011dc6 <sulp>
 80126e8:	4602      	mov	r2, r0
 80126ea:	460b      	mov	r3, r1
 80126ec:	ec51 0b18 	vmov	r0, r1, d8
 80126f0:	f7ed fe04 	bl	80002fc <__adddf3>
 80126f4:	4680      	mov	r8, r0
 80126f6:	4689      	mov	r9, r1
 80126f8:	e7de      	b.n	80126b8 <_strtod_l+0x8b8>
 80126fa:	4013      	ands	r3, r2
 80126fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012700:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012704:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012708:	f04f 38ff 	mov.w	r8, #4294967295
 801270c:	e7d4      	b.n	80126b8 <_strtod_l+0x8b8>
 801270e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012710:	ea13 0f08 	tst.w	r3, r8
 8012714:	e7e0      	b.n	80126d8 <_strtod_l+0x8d8>
 8012716:	f7ff fb56 	bl	8011dc6 <sulp>
 801271a:	4602      	mov	r2, r0
 801271c:	460b      	mov	r3, r1
 801271e:	ec51 0b18 	vmov	r0, r1, d8
 8012722:	f7ed fde9 	bl	80002f8 <__aeabi_dsub>
 8012726:	2200      	movs	r2, #0
 8012728:	2300      	movs	r3, #0
 801272a:	4680      	mov	r8, r0
 801272c:	4689      	mov	r9, r1
 801272e:	f7ee fa03 	bl	8000b38 <__aeabi_dcmpeq>
 8012732:	2800      	cmp	r0, #0
 8012734:	d0c0      	beq.n	80126b8 <_strtod_l+0x8b8>
 8012736:	e618      	b.n	801236a <_strtod_l+0x56a>
 8012738:	fffffc02 	.word	0xfffffc02
 801273c:	7ff00000 	.word	0x7ff00000
 8012740:	39500000 	.word	0x39500000
 8012744:	000fffff 	.word	0x000fffff
 8012748:	7fefffff 	.word	0x7fefffff
 801274c:	080141d0 	.word	0x080141d0
 8012750:	4659      	mov	r1, fp
 8012752:	4628      	mov	r0, r5
 8012754:	f7ff fac0 	bl	8011cd8 <__ratio>
 8012758:	ec57 6b10 	vmov	r6, r7, d0
 801275c:	ee10 0a10 	vmov	r0, s0
 8012760:	2200      	movs	r2, #0
 8012762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012766:	4639      	mov	r1, r7
 8012768:	f7ee f9fa 	bl	8000b60 <__aeabi_dcmple>
 801276c:	2800      	cmp	r0, #0
 801276e:	d071      	beq.n	8012854 <_strtod_l+0xa54>
 8012770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012772:	2b00      	cmp	r3, #0
 8012774:	d17c      	bne.n	8012870 <_strtod_l+0xa70>
 8012776:	f1b8 0f00 	cmp.w	r8, #0
 801277a:	d15a      	bne.n	8012832 <_strtod_l+0xa32>
 801277c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012780:	2b00      	cmp	r3, #0
 8012782:	d15d      	bne.n	8012840 <_strtod_l+0xa40>
 8012784:	4b90      	ldr	r3, [pc, #576]	; (80129c8 <_strtod_l+0xbc8>)
 8012786:	2200      	movs	r2, #0
 8012788:	4630      	mov	r0, r6
 801278a:	4639      	mov	r1, r7
 801278c:	f7ee f9de 	bl	8000b4c <__aeabi_dcmplt>
 8012790:	2800      	cmp	r0, #0
 8012792:	d15c      	bne.n	801284e <_strtod_l+0xa4e>
 8012794:	4630      	mov	r0, r6
 8012796:	4639      	mov	r1, r7
 8012798:	4b8c      	ldr	r3, [pc, #560]	; (80129cc <_strtod_l+0xbcc>)
 801279a:	2200      	movs	r2, #0
 801279c:	f7ed ff64 	bl	8000668 <__aeabi_dmul>
 80127a0:	4606      	mov	r6, r0
 80127a2:	460f      	mov	r7, r1
 80127a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80127a8:	9606      	str	r6, [sp, #24]
 80127aa:	9307      	str	r3, [sp, #28]
 80127ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80127b4:	4b86      	ldr	r3, [pc, #536]	; (80129d0 <_strtod_l+0xbd0>)
 80127b6:	ea0a 0303 	and.w	r3, sl, r3
 80127ba:	930d      	str	r3, [sp, #52]	; 0x34
 80127bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80127be:	4b85      	ldr	r3, [pc, #532]	; (80129d4 <_strtod_l+0xbd4>)
 80127c0:	429a      	cmp	r2, r3
 80127c2:	f040 8090 	bne.w	80128e6 <_strtod_l+0xae6>
 80127c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80127ca:	ec49 8b10 	vmov	d0, r8, r9
 80127ce:	f7ff f9b9 	bl	8011b44 <__ulp>
 80127d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127d6:	ec51 0b10 	vmov	r0, r1, d0
 80127da:	f7ed ff45 	bl	8000668 <__aeabi_dmul>
 80127de:	4642      	mov	r2, r8
 80127e0:	464b      	mov	r3, r9
 80127e2:	f7ed fd8b 	bl	80002fc <__adddf3>
 80127e6:	460b      	mov	r3, r1
 80127e8:	4979      	ldr	r1, [pc, #484]	; (80129d0 <_strtod_l+0xbd0>)
 80127ea:	4a7b      	ldr	r2, [pc, #492]	; (80129d8 <_strtod_l+0xbd8>)
 80127ec:	4019      	ands	r1, r3
 80127ee:	4291      	cmp	r1, r2
 80127f0:	4680      	mov	r8, r0
 80127f2:	d944      	bls.n	801287e <_strtod_l+0xa7e>
 80127f4:	ee18 2a90 	vmov	r2, s17
 80127f8:	4b78      	ldr	r3, [pc, #480]	; (80129dc <_strtod_l+0xbdc>)
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d104      	bne.n	8012808 <_strtod_l+0xa08>
 80127fe:	ee18 3a10 	vmov	r3, s16
 8012802:	3301      	adds	r3, #1
 8012804:	f43f ad40 	beq.w	8012288 <_strtod_l+0x488>
 8012808:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80129dc <_strtod_l+0xbdc>
 801280c:	f04f 38ff 	mov.w	r8, #4294967295
 8012810:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012812:	4620      	mov	r0, r4
 8012814:	f7fe fe6a 	bl	80114ec <_Bfree>
 8012818:	9905      	ldr	r1, [sp, #20]
 801281a:	4620      	mov	r0, r4
 801281c:	f7fe fe66 	bl	80114ec <_Bfree>
 8012820:	4659      	mov	r1, fp
 8012822:	4620      	mov	r0, r4
 8012824:	f7fe fe62 	bl	80114ec <_Bfree>
 8012828:	4629      	mov	r1, r5
 801282a:	4620      	mov	r0, r4
 801282c:	f7fe fe5e 	bl	80114ec <_Bfree>
 8012830:	e609      	b.n	8012446 <_strtod_l+0x646>
 8012832:	f1b8 0f01 	cmp.w	r8, #1
 8012836:	d103      	bne.n	8012840 <_strtod_l+0xa40>
 8012838:	f1b9 0f00 	cmp.w	r9, #0
 801283c:	f43f ad95 	beq.w	801236a <_strtod_l+0x56a>
 8012840:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012998 <_strtod_l+0xb98>
 8012844:	4f60      	ldr	r7, [pc, #384]	; (80129c8 <_strtod_l+0xbc8>)
 8012846:	ed8d 7b06 	vstr	d7, [sp, #24]
 801284a:	2600      	movs	r6, #0
 801284c:	e7ae      	b.n	80127ac <_strtod_l+0x9ac>
 801284e:	4f5f      	ldr	r7, [pc, #380]	; (80129cc <_strtod_l+0xbcc>)
 8012850:	2600      	movs	r6, #0
 8012852:	e7a7      	b.n	80127a4 <_strtod_l+0x9a4>
 8012854:	4b5d      	ldr	r3, [pc, #372]	; (80129cc <_strtod_l+0xbcc>)
 8012856:	4630      	mov	r0, r6
 8012858:	4639      	mov	r1, r7
 801285a:	2200      	movs	r2, #0
 801285c:	f7ed ff04 	bl	8000668 <__aeabi_dmul>
 8012860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012862:	4606      	mov	r6, r0
 8012864:	460f      	mov	r7, r1
 8012866:	2b00      	cmp	r3, #0
 8012868:	d09c      	beq.n	80127a4 <_strtod_l+0x9a4>
 801286a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801286e:	e79d      	b.n	80127ac <_strtod_l+0x9ac>
 8012870:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80129a0 <_strtod_l+0xba0>
 8012874:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012878:	ec57 6b17 	vmov	r6, r7, d7
 801287c:	e796      	b.n	80127ac <_strtod_l+0x9ac>
 801287e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012882:	9b04      	ldr	r3, [sp, #16]
 8012884:	46ca      	mov	sl, r9
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1c2      	bne.n	8012810 <_strtod_l+0xa10>
 801288a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801288e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012890:	0d1b      	lsrs	r3, r3, #20
 8012892:	051b      	lsls	r3, r3, #20
 8012894:	429a      	cmp	r2, r3
 8012896:	d1bb      	bne.n	8012810 <_strtod_l+0xa10>
 8012898:	4630      	mov	r0, r6
 801289a:	4639      	mov	r1, r7
 801289c:	f7ee fa44 	bl	8000d28 <__aeabi_d2lz>
 80128a0:	f7ed feb4 	bl	800060c <__aeabi_l2d>
 80128a4:	4602      	mov	r2, r0
 80128a6:	460b      	mov	r3, r1
 80128a8:	4630      	mov	r0, r6
 80128aa:	4639      	mov	r1, r7
 80128ac:	f7ed fd24 	bl	80002f8 <__aeabi_dsub>
 80128b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80128b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80128b6:	ea43 0308 	orr.w	r3, r3, r8
 80128ba:	4313      	orrs	r3, r2
 80128bc:	4606      	mov	r6, r0
 80128be:	460f      	mov	r7, r1
 80128c0:	d054      	beq.n	801296c <_strtod_l+0xb6c>
 80128c2:	a339      	add	r3, pc, #228	; (adr r3, 80129a8 <_strtod_l+0xba8>)
 80128c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c8:	f7ee f940 	bl	8000b4c <__aeabi_dcmplt>
 80128cc:	2800      	cmp	r0, #0
 80128ce:	f47f ace5 	bne.w	801229c <_strtod_l+0x49c>
 80128d2:	a337      	add	r3, pc, #220	; (adr r3, 80129b0 <_strtod_l+0xbb0>)
 80128d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d8:	4630      	mov	r0, r6
 80128da:	4639      	mov	r1, r7
 80128dc:	f7ee f954 	bl	8000b88 <__aeabi_dcmpgt>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	d095      	beq.n	8012810 <_strtod_l+0xa10>
 80128e4:	e4da      	b.n	801229c <_strtod_l+0x49c>
 80128e6:	9b04      	ldr	r3, [sp, #16]
 80128e8:	b333      	cbz	r3, 8012938 <_strtod_l+0xb38>
 80128ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80128f0:	d822      	bhi.n	8012938 <_strtod_l+0xb38>
 80128f2:	a331      	add	r3, pc, #196	; (adr r3, 80129b8 <_strtod_l+0xbb8>)
 80128f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f8:	4630      	mov	r0, r6
 80128fa:	4639      	mov	r1, r7
 80128fc:	f7ee f930 	bl	8000b60 <__aeabi_dcmple>
 8012900:	b1a0      	cbz	r0, 801292c <_strtod_l+0xb2c>
 8012902:	4639      	mov	r1, r7
 8012904:	4630      	mov	r0, r6
 8012906:	f7ee f987 	bl	8000c18 <__aeabi_d2uiz>
 801290a:	2801      	cmp	r0, #1
 801290c:	bf38      	it	cc
 801290e:	2001      	movcc	r0, #1
 8012910:	f7ed fe30 	bl	8000574 <__aeabi_ui2d>
 8012914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012916:	4606      	mov	r6, r0
 8012918:	460f      	mov	r7, r1
 801291a:	bb23      	cbnz	r3, 8012966 <_strtod_l+0xb66>
 801291c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012920:	9010      	str	r0, [sp, #64]	; 0x40
 8012922:	9311      	str	r3, [sp, #68]	; 0x44
 8012924:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012928:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801292c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801292e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012930:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012934:	1a9b      	subs	r3, r3, r2
 8012936:	930f      	str	r3, [sp, #60]	; 0x3c
 8012938:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801293c:	eeb0 0a48 	vmov.f32	s0, s16
 8012940:	eef0 0a68 	vmov.f32	s1, s17
 8012944:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012948:	f7ff f8fc 	bl	8011b44 <__ulp>
 801294c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012950:	ec53 2b10 	vmov	r2, r3, d0
 8012954:	f7ed fe88 	bl	8000668 <__aeabi_dmul>
 8012958:	ec53 2b18 	vmov	r2, r3, d8
 801295c:	f7ed fcce 	bl	80002fc <__adddf3>
 8012960:	4680      	mov	r8, r0
 8012962:	4689      	mov	r9, r1
 8012964:	e78d      	b.n	8012882 <_strtod_l+0xa82>
 8012966:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801296a:	e7db      	b.n	8012924 <_strtod_l+0xb24>
 801296c:	a314      	add	r3, pc, #80	; (adr r3, 80129c0 <_strtod_l+0xbc0>)
 801296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012972:	f7ee f8eb 	bl	8000b4c <__aeabi_dcmplt>
 8012976:	e7b3      	b.n	80128e0 <_strtod_l+0xae0>
 8012978:	2300      	movs	r3, #0
 801297a:	930a      	str	r3, [sp, #40]	; 0x28
 801297c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801297e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012980:	6013      	str	r3, [r2, #0]
 8012982:	f7ff ba7c 	b.w	8011e7e <_strtod_l+0x7e>
 8012986:	2a65      	cmp	r2, #101	; 0x65
 8012988:	f43f ab75 	beq.w	8012076 <_strtod_l+0x276>
 801298c:	2a45      	cmp	r2, #69	; 0x45
 801298e:	f43f ab72 	beq.w	8012076 <_strtod_l+0x276>
 8012992:	2301      	movs	r3, #1
 8012994:	f7ff bbaa 	b.w	80120ec <_strtod_l+0x2ec>
 8012998:	00000000 	.word	0x00000000
 801299c:	bff00000 	.word	0xbff00000
 80129a0:	00000000 	.word	0x00000000
 80129a4:	3ff00000 	.word	0x3ff00000
 80129a8:	94a03595 	.word	0x94a03595
 80129ac:	3fdfffff 	.word	0x3fdfffff
 80129b0:	35afe535 	.word	0x35afe535
 80129b4:	3fe00000 	.word	0x3fe00000
 80129b8:	ffc00000 	.word	0xffc00000
 80129bc:	41dfffff 	.word	0x41dfffff
 80129c0:	94a03595 	.word	0x94a03595
 80129c4:	3fcfffff 	.word	0x3fcfffff
 80129c8:	3ff00000 	.word	0x3ff00000
 80129cc:	3fe00000 	.word	0x3fe00000
 80129d0:	7ff00000 	.word	0x7ff00000
 80129d4:	7fe00000 	.word	0x7fe00000
 80129d8:	7c9fffff 	.word	0x7c9fffff
 80129dc:	7fefffff 	.word	0x7fefffff

080129e0 <_strtod_r>:
 80129e0:	4b01      	ldr	r3, [pc, #4]	; (80129e8 <_strtod_r+0x8>)
 80129e2:	f7ff ba0d 	b.w	8011e00 <_strtod_l>
 80129e6:	bf00      	nop
 80129e8:	2000028c 	.word	0x2000028c

080129ec <_strtol_l.constprop.0>:
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129f2:	d001      	beq.n	80129f8 <_strtol_l.constprop.0+0xc>
 80129f4:	2b24      	cmp	r3, #36	; 0x24
 80129f6:	d906      	bls.n	8012a06 <_strtol_l.constprop.0+0x1a>
 80129f8:	f7fd fd56 	bl	80104a8 <__errno>
 80129fc:	2316      	movs	r3, #22
 80129fe:	6003      	str	r3, [r0, #0]
 8012a00:	2000      	movs	r0, #0
 8012a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012aec <_strtol_l.constprop.0+0x100>
 8012a0a:	460d      	mov	r5, r1
 8012a0c:	462e      	mov	r6, r5
 8012a0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a12:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012a16:	f017 0708 	ands.w	r7, r7, #8
 8012a1a:	d1f7      	bne.n	8012a0c <_strtol_l.constprop.0+0x20>
 8012a1c:	2c2d      	cmp	r4, #45	; 0x2d
 8012a1e:	d132      	bne.n	8012a86 <_strtol_l.constprop.0+0x9a>
 8012a20:	782c      	ldrb	r4, [r5, #0]
 8012a22:	2701      	movs	r7, #1
 8012a24:	1cb5      	adds	r5, r6, #2
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d05b      	beq.n	8012ae2 <_strtol_l.constprop.0+0xf6>
 8012a2a:	2b10      	cmp	r3, #16
 8012a2c:	d109      	bne.n	8012a42 <_strtol_l.constprop.0+0x56>
 8012a2e:	2c30      	cmp	r4, #48	; 0x30
 8012a30:	d107      	bne.n	8012a42 <_strtol_l.constprop.0+0x56>
 8012a32:	782c      	ldrb	r4, [r5, #0]
 8012a34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012a38:	2c58      	cmp	r4, #88	; 0x58
 8012a3a:	d14d      	bne.n	8012ad8 <_strtol_l.constprop.0+0xec>
 8012a3c:	786c      	ldrb	r4, [r5, #1]
 8012a3e:	2310      	movs	r3, #16
 8012a40:	3502      	adds	r5, #2
 8012a42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012a46:	f108 38ff 	add.w	r8, r8, #4294967295
 8012a4a:	f04f 0e00 	mov.w	lr, #0
 8012a4e:	fbb8 f9f3 	udiv	r9, r8, r3
 8012a52:	4676      	mov	r6, lr
 8012a54:	fb03 8a19 	mls	sl, r3, r9, r8
 8012a58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012a5c:	f1bc 0f09 	cmp.w	ip, #9
 8012a60:	d816      	bhi.n	8012a90 <_strtol_l.constprop.0+0xa4>
 8012a62:	4664      	mov	r4, ip
 8012a64:	42a3      	cmp	r3, r4
 8012a66:	dd24      	ble.n	8012ab2 <_strtol_l.constprop.0+0xc6>
 8012a68:	f1be 3fff 	cmp.w	lr, #4294967295
 8012a6c:	d008      	beq.n	8012a80 <_strtol_l.constprop.0+0x94>
 8012a6e:	45b1      	cmp	r9, r6
 8012a70:	d31c      	bcc.n	8012aac <_strtol_l.constprop.0+0xc0>
 8012a72:	d101      	bne.n	8012a78 <_strtol_l.constprop.0+0x8c>
 8012a74:	45a2      	cmp	sl, r4
 8012a76:	db19      	blt.n	8012aac <_strtol_l.constprop.0+0xc0>
 8012a78:	fb06 4603 	mla	r6, r6, r3, r4
 8012a7c:	f04f 0e01 	mov.w	lr, #1
 8012a80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a84:	e7e8      	b.n	8012a58 <_strtol_l.constprop.0+0x6c>
 8012a86:	2c2b      	cmp	r4, #43	; 0x2b
 8012a88:	bf04      	itt	eq
 8012a8a:	782c      	ldrbeq	r4, [r5, #0]
 8012a8c:	1cb5      	addeq	r5, r6, #2
 8012a8e:	e7ca      	b.n	8012a26 <_strtol_l.constprop.0+0x3a>
 8012a90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012a94:	f1bc 0f19 	cmp.w	ip, #25
 8012a98:	d801      	bhi.n	8012a9e <_strtol_l.constprop.0+0xb2>
 8012a9a:	3c37      	subs	r4, #55	; 0x37
 8012a9c:	e7e2      	b.n	8012a64 <_strtol_l.constprop.0+0x78>
 8012a9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012aa2:	f1bc 0f19 	cmp.w	ip, #25
 8012aa6:	d804      	bhi.n	8012ab2 <_strtol_l.constprop.0+0xc6>
 8012aa8:	3c57      	subs	r4, #87	; 0x57
 8012aaa:	e7db      	b.n	8012a64 <_strtol_l.constprop.0+0x78>
 8012aac:	f04f 3eff 	mov.w	lr, #4294967295
 8012ab0:	e7e6      	b.n	8012a80 <_strtol_l.constprop.0+0x94>
 8012ab2:	f1be 3fff 	cmp.w	lr, #4294967295
 8012ab6:	d105      	bne.n	8012ac4 <_strtol_l.constprop.0+0xd8>
 8012ab8:	2322      	movs	r3, #34	; 0x22
 8012aba:	6003      	str	r3, [r0, #0]
 8012abc:	4646      	mov	r6, r8
 8012abe:	b942      	cbnz	r2, 8012ad2 <_strtol_l.constprop.0+0xe6>
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	e79e      	b.n	8012a02 <_strtol_l.constprop.0+0x16>
 8012ac4:	b107      	cbz	r7, 8012ac8 <_strtol_l.constprop.0+0xdc>
 8012ac6:	4276      	negs	r6, r6
 8012ac8:	2a00      	cmp	r2, #0
 8012aca:	d0f9      	beq.n	8012ac0 <_strtol_l.constprop.0+0xd4>
 8012acc:	f1be 0f00 	cmp.w	lr, #0
 8012ad0:	d000      	beq.n	8012ad4 <_strtol_l.constprop.0+0xe8>
 8012ad2:	1e69      	subs	r1, r5, #1
 8012ad4:	6011      	str	r1, [r2, #0]
 8012ad6:	e7f3      	b.n	8012ac0 <_strtol_l.constprop.0+0xd4>
 8012ad8:	2430      	movs	r4, #48	; 0x30
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d1b1      	bne.n	8012a42 <_strtol_l.constprop.0+0x56>
 8012ade:	2308      	movs	r3, #8
 8012ae0:	e7af      	b.n	8012a42 <_strtol_l.constprop.0+0x56>
 8012ae2:	2c30      	cmp	r4, #48	; 0x30
 8012ae4:	d0a5      	beq.n	8012a32 <_strtol_l.constprop.0+0x46>
 8012ae6:	230a      	movs	r3, #10
 8012ae8:	e7ab      	b.n	8012a42 <_strtol_l.constprop.0+0x56>
 8012aea:	bf00      	nop
 8012aec:	080141f9 	.word	0x080141f9

08012af0 <_strtol_r>:
 8012af0:	f7ff bf7c 	b.w	80129ec <_strtol_l.constprop.0>

08012af4 <__ssputs_r>:
 8012af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012af8:	688e      	ldr	r6, [r1, #8]
 8012afa:	461f      	mov	r7, r3
 8012afc:	42be      	cmp	r6, r7
 8012afe:	680b      	ldr	r3, [r1, #0]
 8012b00:	4682      	mov	sl, r0
 8012b02:	460c      	mov	r4, r1
 8012b04:	4690      	mov	r8, r2
 8012b06:	d82c      	bhi.n	8012b62 <__ssputs_r+0x6e>
 8012b08:	898a      	ldrh	r2, [r1, #12]
 8012b0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b0e:	d026      	beq.n	8012b5e <__ssputs_r+0x6a>
 8012b10:	6965      	ldr	r5, [r4, #20]
 8012b12:	6909      	ldr	r1, [r1, #16]
 8012b14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b18:	eba3 0901 	sub.w	r9, r3, r1
 8012b1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b20:	1c7b      	adds	r3, r7, #1
 8012b22:	444b      	add	r3, r9
 8012b24:	106d      	asrs	r5, r5, #1
 8012b26:	429d      	cmp	r5, r3
 8012b28:	bf38      	it	cc
 8012b2a:	461d      	movcc	r5, r3
 8012b2c:	0553      	lsls	r3, r2, #21
 8012b2e:	d527      	bpl.n	8012b80 <__ssputs_r+0x8c>
 8012b30:	4629      	mov	r1, r5
 8012b32:	f7fe fc0f 	bl	8011354 <_malloc_r>
 8012b36:	4606      	mov	r6, r0
 8012b38:	b360      	cbz	r0, 8012b94 <__ssputs_r+0xa0>
 8012b3a:	6921      	ldr	r1, [r4, #16]
 8012b3c:	464a      	mov	r2, r9
 8012b3e:	f7fd fce7 	bl	8010510 <memcpy>
 8012b42:	89a3      	ldrh	r3, [r4, #12]
 8012b44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b4c:	81a3      	strh	r3, [r4, #12]
 8012b4e:	6126      	str	r6, [r4, #16]
 8012b50:	6165      	str	r5, [r4, #20]
 8012b52:	444e      	add	r6, r9
 8012b54:	eba5 0509 	sub.w	r5, r5, r9
 8012b58:	6026      	str	r6, [r4, #0]
 8012b5a:	60a5      	str	r5, [r4, #8]
 8012b5c:	463e      	mov	r6, r7
 8012b5e:	42be      	cmp	r6, r7
 8012b60:	d900      	bls.n	8012b64 <__ssputs_r+0x70>
 8012b62:	463e      	mov	r6, r7
 8012b64:	6820      	ldr	r0, [r4, #0]
 8012b66:	4632      	mov	r2, r6
 8012b68:	4641      	mov	r1, r8
 8012b6a:	f000 fbb5 	bl	80132d8 <memmove>
 8012b6e:	68a3      	ldr	r3, [r4, #8]
 8012b70:	1b9b      	subs	r3, r3, r6
 8012b72:	60a3      	str	r3, [r4, #8]
 8012b74:	6823      	ldr	r3, [r4, #0]
 8012b76:	4433      	add	r3, r6
 8012b78:	6023      	str	r3, [r4, #0]
 8012b7a:	2000      	movs	r0, #0
 8012b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b80:	462a      	mov	r2, r5
 8012b82:	f000 ff72 	bl	8013a6a <_realloc_r>
 8012b86:	4606      	mov	r6, r0
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	d1e0      	bne.n	8012b4e <__ssputs_r+0x5a>
 8012b8c:	6921      	ldr	r1, [r4, #16]
 8012b8e:	4650      	mov	r0, sl
 8012b90:	f7fe fb6c 	bl	801126c <_free_r>
 8012b94:	230c      	movs	r3, #12
 8012b96:	f8ca 3000 	str.w	r3, [sl]
 8012b9a:	89a3      	ldrh	r3, [r4, #12]
 8012b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ba0:	81a3      	strh	r3, [r4, #12]
 8012ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ba6:	e7e9      	b.n	8012b7c <__ssputs_r+0x88>

08012ba8 <_svfiprintf_r>:
 8012ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bac:	4698      	mov	r8, r3
 8012bae:	898b      	ldrh	r3, [r1, #12]
 8012bb0:	061b      	lsls	r3, r3, #24
 8012bb2:	b09d      	sub	sp, #116	; 0x74
 8012bb4:	4607      	mov	r7, r0
 8012bb6:	460d      	mov	r5, r1
 8012bb8:	4614      	mov	r4, r2
 8012bba:	d50e      	bpl.n	8012bda <_svfiprintf_r+0x32>
 8012bbc:	690b      	ldr	r3, [r1, #16]
 8012bbe:	b963      	cbnz	r3, 8012bda <_svfiprintf_r+0x32>
 8012bc0:	2140      	movs	r1, #64	; 0x40
 8012bc2:	f7fe fbc7 	bl	8011354 <_malloc_r>
 8012bc6:	6028      	str	r0, [r5, #0]
 8012bc8:	6128      	str	r0, [r5, #16]
 8012bca:	b920      	cbnz	r0, 8012bd6 <_svfiprintf_r+0x2e>
 8012bcc:	230c      	movs	r3, #12
 8012bce:	603b      	str	r3, [r7, #0]
 8012bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd4:	e0d0      	b.n	8012d78 <_svfiprintf_r+0x1d0>
 8012bd6:	2340      	movs	r3, #64	; 0x40
 8012bd8:	616b      	str	r3, [r5, #20]
 8012bda:	2300      	movs	r3, #0
 8012bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8012bde:	2320      	movs	r3, #32
 8012be0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012be4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012be8:	2330      	movs	r3, #48	; 0x30
 8012bea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012d90 <_svfiprintf_r+0x1e8>
 8012bee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bf2:	f04f 0901 	mov.w	r9, #1
 8012bf6:	4623      	mov	r3, r4
 8012bf8:	469a      	mov	sl, r3
 8012bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bfe:	b10a      	cbz	r2, 8012c04 <_svfiprintf_r+0x5c>
 8012c00:	2a25      	cmp	r2, #37	; 0x25
 8012c02:	d1f9      	bne.n	8012bf8 <_svfiprintf_r+0x50>
 8012c04:	ebba 0b04 	subs.w	fp, sl, r4
 8012c08:	d00b      	beq.n	8012c22 <_svfiprintf_r+0x7a>
 8012c0a:	465b      	mov	r3, fp
 8012c0c:	4622      	mov	r2, r4
 8012c0e:	4629      	mov	r1, r5
 8012c10:	4638      	mov	r0, r7
 8012c12:	f7ff ff6f 	bl	8012af4 <__ssputs_r>
 8012c16:	3001      	adds	r0, #1
 8012c18:	f000 80a9 	beq.w	8012d6e <_svfiprintf_r+0x1c6>
 8012c1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c1e:	445a      	add	r2, fp
 8012c20:	9209      	str	r2, [sp, #36]	; 0x24
 8012c22:	f89a 3000 	ldrb.w	r3, [sl]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	f000 80a1 	beq.w	8012d6e <_svfiprintf_r+0x1c6>
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c36:	f10a 0a01 	add.w	sl, sl, #1
 8012c3a:	9304      	str	r3, [sp, #16]
 8012c3c:	9307      	str	r3, [sp, #28]
 8012c3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c42:	931a      	str	r3, [sp, #104]	; 0x68
 8012c44:	4654      	mov	r4, sl
 8012c46:	2205      	movs	r2, #5
 8012c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c4c:	4850      	ldr	r0, [pc, #320]	; (8012d90 <_svfiprintf_r+0x1e8>)
 8012c4e:	f7ed faf7 	bl	8000240 <memchr>
 8012c52:	9a04      	ldr	r2, [sp, #16]
 8012c54:	b9d8      	cbnz	r0, 8012c8e <_svfiprintf_r+0xe6>
 8012c56:	06d0      	lsls	r0, r2, #27
 8012c58:	bf44      	itt	mi
 8012c5a:	2320      	movmi	r3, #32
 8012c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c60:	0711      	lsls	r1, r2, #28
 8012c62:	bf44      	itt	mi
 8012c64:	232b      	movmi	r3, #43	; 0x2b
 8012c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8012c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8012c70:	d015      	beq.n	8012c9e <_svfiprintf_r+0xf6>
 8012c72:	9a07      	ldr	r2, [sp, #28]
 8012c74:	4654      	mov	r4, sl
 8012c76:	2000      	movs	r0, #0
 8012c78:	f04f 0c0a 	mov.w	ip, #10
 8012c7c:	4621      	mov	r1, r4
 8012c7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c82:	3b30      	subs	r3, #48	; 0x30
 8012c84:	2b09      	cmp	r3, #9
 8012c86:	d94d      	bls.n	8012d24 <_svfiprintf_r+0x17c>
 8012c88:	b1b0      	cbz	r0, 8012cb8 <_svfiprintf_r+0x110>
 8012c8a:	9207      	str	r2, [sp, #28]
 8012c8c:	e014      	b.n	8012cb8 <_svfiprintf_r+0x110>
 8012c8e:	eba0 0308 	sub.w	r3, r0, r8
 8012c92:	fa09 f303 	lsl.w	r3, r9, r3
 8012c96:	4313      	orrs	r3, r2
 8012c98:	9304      	str	r3, [sp, #16]
 8012c9a:	46a2      	mov	sl, r4
 8012c9c:	e7d2      	b.n	8012c44 <_svfiprintf_r+0x9c>
 8012c9e:	9b03      	ldr	r3, [sp, #12]
 8012ca0:	1d19      	adds	r1, r3, #4
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	9103      	str	r1, [sp, #12]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	bfbb      	ittet	lt
 8012caa:	425b      	neglt	r3, r3
 8012cac:	f042 0202 	orrlt.w	r2, r2, #2
 8012cb0:	9307      	strge	r3, [sp, #28]
 8012cb2:	9307      	strlt	r3, [sp, #28]
 8012cb4:	bfb8      	it	lt
 8012cb6:	9204      	strlt	r2, [sp, #16]
 8012cb8:	7823      	ldrb	r3, [r4, #0]
 8012cba:	2b2e      	cmp	r3, #46	; 0x2e
 8012cbc:	d10c      	bne.n	8012cd8 <_svfiprintf_r+0x130>
 8012cbe:	7863      	ldrb	r3, [r4, #1]
 8012cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8012cc2:	d134      	bne.n	8012d2e <_svfiprintf_r+0x186>
 8012cc4:	9b03      	ldr	r3, [sp, #12]
 8012cc6:	1d1a      	adds	r2, r3, #4
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	9203      	str	r2, [sp, #12]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	bfb8      	it	lt
 8012cd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8012cd4:	3402      	adds	r4, #2
 8012cd6:	9305      	str	r3, [sp, #20]
 8012cd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012da0 <_svfiprintf_r+0x1f8>
 8012cdc:	7821      	ldrb	r1, [r4, #0]
 8012cde:	2203      	movs	r2, #3
 8012ce0:	4650      	mov	r0, sl
 8012ce2:	f7ed faad 	bl	8000240 <memchr>
 8012ce6:	b138      	cbz	r0, 8012cf8 <_svfiprintf_r+0x150>
 8012ce8:	9b04      	ldr	r3, [sp, #16]
 8012cea:	eba0 000a 	sub.w	r0, r0, sl
 8012cee:	2240      	movs	r2, #64	; 0x40
 8012cf0:	4082      	lsls	r2, r0
 8012cf2:	4313      	orrs	r3, r2
 8012cf4:	3401      	adds	r4, #1
 8012cf6:	9304      	str	r3, [sp, #16]
 8012cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cfc:	4825      	ldr	r0, [pc, #148]	; (8012d94 <_svfiprintf_r+0x1ec>)
 8012cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d02:	2206      	movs	r2, #6
 8012d04:	f7ed fa9c 	bl	8000240 <memchr>
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	d038      	beq.n	8012d7e <_svfiprintf_r+0x1d6>
 8012d0c:	4b22      	ldr	r3, [pc, #136]	; (8012d98 <_svfiprintf_r+0x1f0>)
 8012d0e:	bb1b      	cbnz	r3, 8012d58 <_svfiprintf_r+0x1b0>
 8012d10:	9b03      	ldr	r3, [sp, #12]
 8012d12:	3307      	adds	r3, #7
 8012d14:	f023 0307 	bic.w	r3, r3, #7
 8012d18:	3308      	adds	r3, #8
 8012d1a:	9303      	str	r3, [sp, #12]
 8012d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d1e:	4433      	add	r3, r6
 8012d20:	9309      	str	r3, [sp, #36]	; 0x24
 8012d22:	e768      	b.n	8012bf6 <_svfiprintf_r+0x4e>
 8012d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d28:	460c      	mov	r4, r1
 8012d2a:	2001      	movs	r0, #1
 8012d2c:	e7a6      	b.n	8012c7c <_svfiprintf_r+0xd4>
 8012d2e:	2300      	movs	r3, #0
 8012d30:	3401      	adds	r4, #1
 8012d32:	9305      	str	r3, [sp, #20]
 8012d34:	4619      	mov	r1, r3
 8012d36:	f04f 0c0a 	mov.w	ip, #10
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d40:	3a30      	subs	r2, #48	; 0x30
 8012d42:	2a09      	cmp	r2, #9
 8012d44:	d903      	bls.n	8012d4e <_svfiprintf_r+0x1a6>
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d0c6      	beq.n	8012cd8 <_svfiprintf_r+0x130>
 8012d4a:	9105      	str	r1, [sp, #20]
 8012d4c:	e7c4      	b.n	8012cd8 <_svfiprintf_r+0x130>
 8012d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d52:	4604      	mov	r4, r0
 8012d54:	2301      	movs	r3, #1
 8012d56:	e7f0      	b.n	8012d3a <_svfiprintf_r+0x192>
 8012d58:	ab03      	add	r3, sp, #12
 8012d5a:	9300      	str	r3, [sp, #0]
 8012d5c:	462a      	mov	r2, r5
 8012d5e:	4b0f      	ldr	r3, [pc, #60]	; (8012d9c <_svfiprintf_r+0x1f4>)
 8012d60:	a904      	add	r1, sp, #16
 8012d62:	4638      	mov	r0, r7
 8012d64:	f7fc fbba 	bl	800f4dc <_printf_float>
 8012d68:	1c42      	adds	r2, r0, #1
 8012d6a:	4606      	mov	r6, r0
 8012d6c:	d1d6      	bne.n	8012d1c <_svfiprintf_r+0x174>
 8012d6e:	89ab      	ldrh	r3, [r5, #12]
 8012d70:	065b      	lsls	r3, r3, #25
 8012d72:	f53f af2d 	bmi.w	8012bd0 <_svfiprintf_r+0x28>
 8012d76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d78:	b01d      	add	sp, #116	; 0x74
 8012d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7e:	ab03      	add	r3, sp, #12
 8012d80:	9300      	str	r3, [sp, #0]
 8012d82:	462a      	mov	r2, r5
 8012d84:	4b05      	ldr	r3, [pc, #20]	; (8012d9c <_svfiprintf_r+0x1f4>)
 8012d86:	a904      	add	r1, sp, #16
 8012d88:	4638      	mov	r0, r7
 8012d8a:	f7fc fe4b 	bl	800fa24 <_printf_i>
 8012d8e:	e7eb      	b.n	8012d68 <_svfiprintf_r+0x1c0>
 8012d90:	080142f9 	.word	0x080142f9
 8012d94:	08014303 	.word	0x08014303
 8012d98:	0800f4dd 	.word	0x0800f4dd
 8012d9c:	08012af5 	.word	0x08012af5
 8012da0:	080142ff 	.word	0x080142ff

08012da4 <__sfputc_r>:
 8012da4:	6893      	ldr	r3, [r2, #8]
 8012da6:	3b01      	subs	r3, #1
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	b410      	push	{r4}
 8012dac:	6093      	str	r3, [r2, #8]
 8012dae:	da08      	bge.n	8012dc2 <__sfputc_r+0x1e>
 8012db0:	6994      	ldr	r4, [r2, #24]
 8012db2:	42a3      	cmp	r3, r4
 8012db4:	db01      	blt.n	8012dba <__sfputc_r+0x16>
 8012db6:	290a      	cmp	r1, #10
 8012db8:	d103      	bne.n	8012dc2 <__sfputc_r+0x1e>
 8012dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dbe:	f000 b9f5 	b.w	80131ac <__swbuf_r>
 8012dc2:	6813      	ldr	r3, [r2, #0]
 8012dc4:	1c58      	adds	r0, r3, #1
 8012dc6:	6010      	str	r0, [r2, #0]
 8012dc8:	7019      	strb	r1, [r3, #0]
 8012dca:	4608      	mov	r0, r1
 8012dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dd0:	4770      	bx	lr

08012dd2 <__sfputs_r>:
 8012dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dd4:	4606      	mov	r6, r0
 8012dd6:	460f      	mov	r7, r1
 8012dd8:	4614      	mov	r4, r2
 8012dda:	18d5      	adds	r5, r2, r3
 8012ddc:	42ac      	cmp	r4, r5
 8012dde:	d101      	bne.n	8012de4 <__sfputs_r+0x12>
 8012de0:	2000      	movs	r0, #0
 8012de2:	e007      	b.n	8012df4 <__sfputs_r+0x22>
 8012de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012de8:	463a      	mov	r2, r7
 8012dea:	4630      	mov	r0, r6
 8012dec:	f7ff ffda 	bl	8012da4 <__sfputc_r>
 8012df0:	1c43      	adds	r3, r0, #1
 8012df2:	d1f3      	bne.n	8012ddc <__sfputs_r+0xa>
 8012df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012df8 <_vfiprintf_r>:
 8012df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dfc:	460d      	mov	r5, r1
 8012dfe:	b09d      	sub	sp, #116	; 0x74
 8012e00:	4614      	mov	r4, r2
 8012e02:	4698      	mov	r8, r3
 8012e04:	4606      	mov	r6, r0
 8012e06:	b118      	cbz	r0, 8012e10 <_vfiprintf_r+0x18>
 8012e08:	6a03      	ldr	r3, [r0, #32]
 8012e0a:	b90b      	cbnz	r3, 8012e10 <_vfiprintf_r+0x18>
 8012e0c:	f7fd f9b6 	bl	801017c <__sinit>
 8012e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e12:	07d9      	lsls	r1, r3, #31
 8012e14:	d405      	bmi.n	8012e22 <_vfiprintf_r+0x2a>
 8012e16:	89ab      	ldrh	r3, [r5, #12]
 8012e18:	059a      	lsls	r2, r3, #22
 8012e1a:	d402      	bmi.n	8012e22 <_vfiprintf_r+0x2a>
 8012e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e1e:	f7fd fb6d 	bl	80104fc <__retarget_lock_acquire_recursive>
 8012e22:	89ab      	ldrh	r3, [r5, #12]
 8012e24:	071b      	lsls	r3, r3, #28
 8012e26:	d501      	bpl.n	8012e2c <_vfiprintf_r+0x34>
 8012e28:	692b      	ldr	r3, [r5, #16]
 8012e2a:	b99b      	cbnz	r3, 8012e54 <_vfiprintf_r+0x5c>
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	4630      	mov	r0, r6
 8012e30:	f000 f9fa 	bl	8013228 <__swsetup_r>
 8012e34:	b170      	cbz	r0, 8012e54 <_vfiprintf_r+0x5c>
 8012e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e38:	07dc      	lsls	r4, r3, #31
 8012e3a:	d504      	bpl.n	8012e46 <_vfiprintf_r+0x4e>
 8012e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e40:	b01d      	add	sp, #116	; 0x74
 8012e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e46:	89ab      	ldrh	r3, [r5, #12]
 8012e48:	0598      	lsls	r0, r3, #22
 8012e4a:	d4f7      	bmi.n	8012e3c <_vfiprintf_r+0x44>
 8012e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e4e:	f7fd fb56 	bl	80104fe <__retarget_lock_release_recursive>
 8012e52:	e7f3      	b.n	8012e3c <_vfiprintf_r+0x44>
 8012e54:	2300      	movs	r3, #0
 8012e56:	9309      	str	r3, [sp, #36]	; 0x24
 8012e58:	2320      	movs	r3, #32
 8012e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e62:	2330      	movs	r3, #48	; 0x30
 8012e64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013018 <_vfiprintf_r+0x220>
 8012e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e6c:	f04f 0901 	mov.w	r9, #1
 8012e70:	4623      	mov	r3, r4
 8012e72:	469a      	mov	sl, r3
 8012e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e78:	b10a      	cbz	r2, 8012e7e <_vfiprintf_r+0x86>
 8012e7a:	2a25      	cmp	r2, #37	; 0x25
 8012e7c:	d1f9      	bne.n	8012e72 <_vfiprintf_r+0x7a>
 8012e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8012e82:	d00b      	beq.n	8012e9c <_vfiprintf_r+0xa4>
 8012e84:	465b      	mov	r3, fp
 8012e86:	4622      	mov	r2, r4
 8012e88:	4629      	mov	r1, r5
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	f7ff ffa1 	bl	8012dd2 <__sfputs_r>
 8012e90:	3001      	adds	r0, #1
 8012e92:	f000 80a9 	beq.w	8012fe8 <_vfiprintf_r+0x1f0>
 8012e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e98:	445a      	add	r2, fp
 8012e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8012e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f000 80a1 	beq.w	8012fe8 <_vfiprintf_r+0x1f0>
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8012eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012eb0:	f10a 0a01 	add.w	sl, sl, #1
 8012eb4:	9304      	str	r3, [sp, #16]
 8012eb6:	9307      	str	r3, [sp, #28]
 8012eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8012ebe:	4654      	mov	r4, sl
 8012ec0:	2205      	movs	r2, #5
 8012ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ec6:	4854      	ldr	r0, [pc, #336]	; (8013018 <_vfiprintf_r+0x220>)
 8012ec8:	f7ed f9ba 	bl	8000240 <memchr>
 8012ecc:	9a04      	ldr	r2, [sp, #16]
 8012ece:	b9d8      	cbnz	r0, 8012f08 <_vfiprintf_r+0x110>
 8012ed0:	06d1      	lsls	r1, r2, #27
 8012ed2:	bf44      	itt	mi
 8012ed4:	2320      	movmi	r3, #32
 8012ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012eda:	0713      	lsls	r3, r2, #28
 8012edc:	bf44      	itt	mi
 8012ede:	232b      	movmi	r3, #43	; 0x2b
 8012ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8012eea:	d015      	beq.n	8012f18 <_vfiprintf_r+0x120>
 8012eec:	9a07      	ldr	r2, [sp, #28]
 8012eee:	4654      	mov	r4, sl
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	f04f 0c0a 	mov.w	ip, #10
 8012ef6:	4621      	mov	r1, r4
 8012ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012efc:	3b30      	subs	r3, #48	; 0x30
 8012efe:	2b09      	cmp	r3, #9
 8012f00:	d94d      	bls.n	8012f9e <_vfiprintf_r+0x1a6>
 8012f02:	b1b0      	cbz	r0, 8012f32 <_vfiprintf_r+0x13a>
 8012f04:	9207      	str	r2, [sp, #28]
 8012f06:	e014      	b.n	8012f32 <_vfiprintf_r+0x13a>
 8012f08:	eba0 0308 	sub.w	r3, r0, r8
 8012f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8012f10:	4313      	orrs	r3, r2
 8012f12:	9304      	str	r3, [sp, #16]
 8012f14:	46a2      	mov	sl, r4
 8012f16:	e7d2      	b.n	8012ebe <_vfiprintf_r+0xc6>
 8012f18:	9b03      	ldr	r3, [sp, #12]
 8012f1a:	1d19      	adds	r1, r3, #4
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	9103      	str	r1, [sp, #12]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	bfbb      	ittet	lt
 8012f24:	425b      	neglt	r3, r3
 8012f26:	f042 0202 	orrlt.w	r2, r2, #2
 8012f2a:	9307      	strge	r3, [sp, #28]
 8012f2c:	9307      	strlt	r3, [sp, #28]
 8012f2e:	bfb8      	it	lt
 8012f30:	9204      	strlt	r2, [sp, #16]
 8012f32:	7823      	ldrb	r3, [r4, #0]
 8012f34:	2b2e      	cmp	r3, #46	; 0x2e
 8012f36:	d10c      	bne.n	8012f52 <_vfiprintf_r+0x15a>
 8012f38:	7863      	ldrb	r3, [r4, #1]
 8012f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8012f3c:	d134      	bne.n	8012fa8 <_vfiprintf_r+0x1b0>
 8012f3e:	9b03      	ldr	r3, [sp, #12]
 8012f40:	1d1a      	adds	r2, r3, #4
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	9203      	str	r2, [sp, #12]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	bfb8      	it	lt
 8012f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8012f4e:	3402      	adds	r4, #2
 8012f50:	9305      	str	r3, [sp, #20]
 8012f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013028 <_vfiprintf_r+0x230>
 8012f56:	7821      	ldrb	r1, [r4, #0]
 8012f58:	2203      	movs	r2, #3
 8012f5a:	4650      	mov	r0, sl
 8012f5c:	f7ed f970 	bl	8000240 <memchr>
 8012f60:	b138      	cbz	r0, 8012f72 <_vfiprintf_r+0x17a>
 8012f62:	9b04      	ldr	r3, [sp, #16]
 8012f64:	eba0 000a 	sub.w	r0, r0, sl
 8012f68:	2240      	movs	r2, #64	; 0x40
 8012f6a:	4082      	lsls	r2, r0
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	3401      	adds	r4, #1
 8012f70:	9304      	str	r3, [sp, #16]
 8012f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f76:	4829      	ldr	r0, [pc, #164]	; (801301c <_vfiprintf_r+0x224>)
 8012f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f7c:	2206      	movs	r2, #6
 8012f7e:	f7ed f95f 	bl	8000240 <memchr>
 8012f82:	2800      	cmp	r0, #0
 8012f84:	d03f      	beq.n	8013006 <_vfiprintf_r+0x20e>
 8012f86:	4b26      	ldr	r3, [pc, #152]	; (8013020 <_vfiprintf_r+0x228>)
 8012f88:	bb1b      	cbnz	r3, 8012fd2 <_vfiprintf_r+0x1da>
 8012f8a:	9b03      	ldr	r3, [sp, #12]
 8012f8c:	3307      	adds	r3, #7
 8012f8e:	f023 0307 	bic.w	r3, r3, #7
 8012f92:	3308      	adds	r3, #8
 8012f94:	9303      	str	r3, [sp, #12]
 8012f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f98:	443b      	add	r3, r7
 8012f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8012f9c:	e768      	b.n	8012e70 <_vfiprintf_r+0x78>
 8012f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fa2:	460c      	mov	r4, r1
 8012fa4:	2001      	movs	r0, #1
 8012fa6:	e7a6      	b.n	8012ef6 <_vfiprintf_r+0xfe>
 8012fa8:	2300      	movs	r3, #0
 8012faa:	3401      	adds	r4, #1
 8012fac:	9305      	str	r3, [sp, #20]
 8012fae:	4619      	mov	r1, r3
 8012fb0:	f04f 0c0a 	mov.w	ip, #10
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fba:	3a30      	subs	r2, #48	; 0x30
 8012fbc:	2a09      	cmp	r2, #9
 8012fbe:	d903      	bls.n	8012fc8 <_vfiprintf_r+0x1d0>
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d0c6      	beq.n	8012f52 <_vfiprintf_r+0x15a>
 8012fc4:	9105      	str	r1, [sp, #20]
 8012fc6:	e7c4      	b.n	8012f52 <_vfiprintf_r+0x15a>
 8012fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fcc:	4604      	mov	r4, r0
 8012fce:	2301      	movs	r3, #1
 8012fd0:	e7f0      	b.n	8012fb4 <_vfiprintf_r+0x1bc>
 8012fd2:	ab03      	add	r3, sp, #12
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	462a      	mov	r2, r5
 8012fd8:	4b12      	ldr	r3, [pc, #72]	; (8013024 <_vfiprintf_r+0x22c>)
 8012fda:	a904      	add	r1, sp, #16
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f7fc fa7d 	bl	800f4dc <_printf_float>
 8012fe2:	4607      	mov	r7, r0
 8012fe4:	1c78      	adds	r0, r7, #1
 8012fe6:	d1d6      	bne.n	8012f96 <_vfiprintf_r+0x19e>
 8012fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012fea:	07d9      	lsls	r1, r3, #31
 8012fec:	d405      	bmi.n	8012ffa <_vfiprintf_r+0x202>
 8012fee:	89ab      	ldrh	r3, [r5, #12]
 8012ff0:	059a      	lsls	r2, r3, #22
 8012ff2:	d402      	bmi.n	8012ffa <_vfiprintf_r+0x202>
 8012ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ff6:	f7fd fa82 	bl	80104fe <__retarget_lock_release_recursive>
 8012ffa:	89ab      	ldrh	r3, [r5, #12]
 8012ffc:	065b      	lsls	r3, r3, #25
 8012ffe:	f53f af1d 	bmi.w	8012e3c <_vfiprintf_r+0x44>
 8013002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013004:	e71c      	b.n	8012e40 <_vfiprintf_r+0x48>
 8013006:	ab03      	add	r3, sp, #12
 8013008:	9300      	str	r3, [sp, #0]
 801300a:	462a      	mov	r2, r5
 801300c:	4b05      	ldr	r3, [pc, #20]	; (8013024 <_vfiprintf_r+0x22c>)
 801300e:	a904      	add	r1, sp, #16
 8013010:	4630      	mov	r0, r6
 8013012:	f7fc fd07 	bl	800fa24 <_printf_i>
 8013016:	e7e4      	b.n	8012fe2 <_vfiprintf_r+0x1ea>
 8013018:	080142f9 	.word	0x080142f9
 801301c:	08014303 	.word	0x08014303
 8013020:	0800f4dd 	.word	0x0800f4dd
 8013024:	08012dd3 	.word	0x08012dd3
 8013028:	080142ff 	.word	0x080142ff

0801302c <__sflush_r>:
 801302c:	898a      	ldrh	r2, [r1, #12]
 801302e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013032:	4605      	mov	r5, r0
 8013034:	0710      	lsls	r0, r2, #28
 8013036:	460c      	mov	r4, r1
 8013038:	d458      	bmi.n	80130ec <__sflush_r+0xc0>
 801303a:	684b      	ldr	r3, [r1, #4]
 801303c:	2b00      	cmp	r3, #0
 801303e:	dc05      	bgt.n	801304c <__sflush_r+0x20>
 8013040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013042:	2b00      	cmp	r3, #0
 8013044:	dc02      	bgt.n	801304c <__sflush_r+0x20>
 8013046:	2000      	movs	r0, #0
 8013048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801304c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801304e:	2e00      	cmp	r6, #0
 8013050:	d0f9      	beq.n	8013046 <__sflush_r+0x1a>
 8013052:	2300      	movs	r3, #0
 8013054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013058:	682f      	ldr	r7, [r5, #0]
 801305a:	6a21      	ldr	r1, [r4, #32]
 801305c:	602b      	str	r3, [r5, #0]
 801305e:	d032      	beq.n	80130c6 <__sflush_r+0x9a>
 8013060:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013062:	89a3      	ldrh	r3, [r4, #12]
 8013064:	075a      	lsls	r2, r3, #29
 8013066:	d505      	bpl.n	8013074 <__sflush_r+0x48>
 8013068:	6863      	ldr	r3, [r4, #4]
 801306a:	1ac0      	subs	r0, r0, r3
 801306c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801306e:	b10b      	cbz	r3, 8013074 <__sflush_r+0x48>
 8013070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013072:	1ac0      	subs	r0, r0, r3
 8013074:	2300      	movs	r3, #0
 8013076:	4602      	mov	r2, r0
 8013078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801307a:	6a21      	ldr	r1, [r4, #32]
 801307c:	4628      	mov	r0, r5
 801307e:	47b0      	blx	r6
 8013080:	1c43      	adds	r3, r0, #1
 8013082:	89a3      	ldrh	r3, [r4, #12]
 8013084:	d106      	bne.n	8013094 <__sflush_r+0x68>
 8013086:	6829      	ldr	r1, [r5, #0]
 8013088:	291d      	cmp	r1, #29
 801308a:	d82b      	bhi.n	80130e4 <__sflush_r+0xb8>
 801308c:	4a29      	ldr	r2, [pc, #164]	; (8013134 <__sflush_r+0x108>)
 801308e:	410a      	asrs	r2, r1
 8013090:	07d6      	lsls	r6, r2, #31
 8013092:	d427      	bmi.n	80130e4 <__sflush_r+0xb8>
 8013094:	2200      	movs	r2, #0
 8013096:	6062      	str	r2, [r4, #4]
 8013098:	04d9      	lsls	r1, r3, #19
 801309a:	6922      	ldr	r2, [r4, #16]
 801309c:	6022      	str	r2, [r4, #0]
 801309e:	d504      	bpl.n	80130aa <__sflush_r+0x7e>
 80130a0:	1c42      	adds	r2, r0, #1
 80130a2:	d101      	bne.n	80130a8 <__sflush_r+0x7c>
 80130a4:	682b      	ldr	r3, [r5, #0]
 80130a6:	b903      	cbnz	r3, 80130aa <__sflush_r+0x7e>
 80130a8:	6560      	str	r0, [r4, #84]	; 0x54
 80130aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130ac:	602f      	str	r7, [r5, #0]
 80130ae:	2900      	cmp	r1, #0
 80130b0:	d0c9      	beq.n	8013046 <__sflush_r+0x1a>
 80130b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130b6:	4299      	cmp	r1, r3
 80130b8:	d002      	beq.n	80130c0 <__sflush_r+0x94>
 80130ba:	4628      	mov	r0, r5
 80130bc:	f7fe f8d6 	bl	801126c <_free_r>
 80130c0:	2000      	movs	r0, #0
 80130c2:	6360      	str	r0, [r4, #52]	; 0x34
 80130c4:	e7c0      	b.n	8013048 <__sflush_r+0x1c>
 80130c6:	2301      	movs	r3, #1
 80130c8:	4628      	mov	r0, r5
 80130ca:	47b0      	blx	r6
 80130cc:	1c41      	adds	r1, r0, #1
 80130ce:	d1c8      	bne.n	8013062 <__sflush_r+0x36>
 80130d0:	682b      	ldr	r3, [r5, #0]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d0c5      	beq.n	8013062 <__sflush_r+0x36>
 80130d6:	2b1d      	cmp	r3, #29
 80130d8:	d001      	beq.n	80130de <__sflush_r+0xb2>
 80130da:	2b16      	cmp	r3, #22
 80130dc:	d101      	bne.n	80130e2 <__sflush_r+0xb6>
 80130de:	602f      	str	r7, [r5, #0]
 80130e0:	e7b1      	b.n	8013046 <__sflush_r+0x1a>
 80130e2:	89a3      	ldrh	r3, [r4, #12]
 80130e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130e8:	81a3      	strh	r3, [r4, #12]
 80130ea:	e7ad      	b.n	8013048 <__sflush_r+0x1c>
 80130ec:	690f      	ldr	r7, [r1, #16]
 80130ee:	2f00      	cmp	r7, #0
 80130f0:	d0a9      	beq.n	8013046 <__sflush_r+0x1a>
 80130f2:	0793      	lsls	r3, r2, #30
 80130f4:	680e      	ldr	r6, [r1, #0]
 80130f6:	bf08      	it	eq
 80130f8:	694b      	ldreq	r3, [r1, #20]
 80130fa:	600f      	str	r7, [r1, #0]
 80130fc:	bf18      	it	ne
 80130fe:	2300      	movne	r3, #0
 8013100:	eba6 0807 	sub.w	r8, r6, r7
 8013104:	608b      	str	r3, [r1, #8]
 8013106:	f1b8 0f00 	cmp.w	r8, #0
 801310a:	dd9c      	ble.n	8013046 <__sflush_r+0x1a>
 801310c:	6a21      	ldr	r1, [r4, #32]
 801310e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013110:	4643      	mov	r3, r8
 8013112:	463a      	mov	r2, r7
 8013114:	4628      	mov	r0, r5
 8013116:	47b0      	blx	r6
 8013118:	2800      	cmp	r0, #0
 801311a:	dc06      	bgt.n	801312a <__sflush_r+0xfe>
 801311c:	89a3      	ldrh	r3, [r4, #12]
 801311e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013122:	81a3      	strh	r3, [r4, #12]
 8013124:	f04f 30ff 	mov.w	r0, #4294967295
 8013128:	e78e      	b.n	8013048 <__sflush_r+0x1c>
 801312a:	4407      	add	r7, r0
 801312c:	eba8 0800 	sub.w	r8, r8, r0
 8013130:	e7e9      	b.n	8013106 <__sflush_r+0xda>
 8013132:	bf00      	nop
 8013134:	dfbffffe 	.word	0xdfbffffe

08013138 <_fflush_r>:
 8013138:	b538      	push	{r3, r4, r5, lr}
 801313a:	690b      	ldr	r3, [r1, #16]
 801313c:	4605      	mov	r5, r0
 801313e:	460c      	mov	r4, r1
 8013140:	b913      	cbnz	r3, 8013148 <_fflush_r+0x10>
 8013142:	2500      	movs	r5, #0
 8013144:	4628      	mov	r0, r5
 8013146:	bd38      	pop	{r3, r4, r5, pc}
 8013148:	b118      	cbz	r0, 8013152 <_fflush_r+0x1a>
 801314a:	6a03      	ldr	r3, [r0, #32]
 801314c:	b90b      	cbnz	r3, 8013152 <_fflush_r+0x1a>
 801314e:	f7fd f815 	bl	801017c <__sinit>
 8013152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d0f3      	beq.n	8013142 <_fflush_r+0xa>
 801315a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801315c:	07d0      	lsls	r0, r2, #31
 801315e:	d404      	bmi.n	801316a <_fflush_r+0x32>
 8013160:	0599      	lsls	r1, r3, #22
 8013162:	d402      	bmi.n	801316a <_fflush_r+0x32>
 8013164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013166:	f7fd f9c9 	bl	80104fc <__retarget_lock_acquire_recursive>
 801316a:	4628      	mov	r0, r5
 801316c:	4621      	mov	r1, r4
 801316e:	f7ff ff5d 	bl	801302c <__sflush_r>
 8013172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013174:	07da      	lsls	r2, r3, #31
 8013176:	4605      	mov	r5, r0
 8013178:	d4e4      	bmi.n	8013144 <_fflush_r+0xc>
 801317a:	89a3      	ldrh	r3, [r4, #12]
 801317c:	059b      	lsls	r3, r3, #22
 801317e:	d4e1      	bmi.n	8013144 <_fflush_r+0xc>
 8013180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013182:	f7fd f9bc 	bl	80104fe <__retarget_lock_release_recursive>
 8013186:	e7dd      	b.n	8013144 <_fflush_r+0xc>

08013188 <fiprintf>:
 8013188:	b40e      	push	{r1, r2, r3}
 801318a:	b503      	push	{r0, r1, lr}
 801318c:	4601      	mov	r1, r0
 801318e:	ab03      	add	r3, sp, #12
 8013190:	4805      	ldr	r0, [pc, #20]	; (80131a8 <fiprintf+0x20>)
 8013192:	f853 2b04 	ldr.w	r2, [r3], #4
 8013196:	6800      	ldr	r0, [r0, #0]
 8013198:	9301      	str	r3, [sp, #4]
 801319a:	f7ff fe2d 	bl	8012df8 <_vfiprintf_r>
 801319e:	b002      	add	sp, #8
 80131a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80131a4:	b003      	add	sp, #12
 80131a6:	4770      	bx	lr
 80131a8:	20000288 	.word	0x20000288

080131ac <__swbuf_r>:
 80131ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ae:	460e      	mov	r6, r1
 80131b0:	4614      	mov	r4, r2
 80131b2:	4605      	mov	r5, r0
 80131b4:	b118      	cbz	r0, 80131be <__swbuf_r+0x12>
 80131b6:	6a03      	ldr	r3, [r0, #32]
 80131b8:	b90b      	cbnz	r3, 80131be <__swbuf_r+0x12>
 80131ba:	f7fc ffdf 	bl	801017c <__sinit>
 80131be:	69a3      	ldr	r3, [r4, #24]
 80131c0:	60a3      	str	r3, [r4, #8]
 80131c2:	89a3      	ldrh	r3, [r4, #12]
 80131c4:	071a      	lsls	r2, r3, #28
 80131c6:	d525      	bpl.n	8013214 <__swbuf_r+0x68>
 80131c8:	6923      	ldr	r3, [r4, #16]
 80131ca:	b31b      	cbz	r3, 8013214 <__swbuf_r+0x68>
 80131cc:	6823      	ldr	r3, [r4, #0]
 80131ce:	6922      	ldr	r2, [r4, #16]
 80131d0:	1a98      	subs	r0, r3, r2
 80131d2:	6963      	ldr	r3, [r4, #20]
 80131d4:	b2f6      	uxtb	r6, r6
 80131d6:	4283      	cmp	r3, r0
 80131d8:	4637      	mov	r7, r6
 80131da:	dc04      	bgt.n	80131e6 <__swbuf_r+0x3a>
 80131dc:	4621      	mov	r1, r4
 80131de:	4628      	mov	r0, r5
 80131e0:	f7ff ffaa 	bl	8013138 <_fflush_r>
 80131e4:	b9e0      	cbnz	r0, 8013220 <__swbuf_r+0x74>
 80131e6:	68a3      	ldr	r3, [r4, #8]
 80131e8:	3b01      	subs	r3, #1
 80131ea:	60a3      	str	r3, [r4, #8]
 80131ec:	6823      	ldr	r3, [r4, #0]
 80131ee:	1c5a      	adds	r2, r3, #1
 80131f0:	6022      	str	r2, [r4, #0]
 80131f2:	701e      	strb	r6, [r3, #0]
 80131f4:	6962      	ldr	r2, [r4, #20]
 80131f6:	1c43      	adds	r3, r0, #1
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d004      	beq.n	8013206 <__swbuf_r+0x5a>
 80131fc:	89a3      	ldrh	r3, [r4, #12]
 80131fe:	07db      	lsls	r3, r3, #31
 8013200:	d506      	bpl.n	8013210 <__swbuf_r+0x64>
 8013202:	2e0a      	cmp	r6, #10
 8013204:	d104      	bne.n	8013210 <__swbuf_r+0x64>
 8013206:	4621      	mov	r1, r4
 8013208:	4628      	mov	r0, r5
 801320a:	f7ff ff95 	bl	8013138 <_fflush_r>
 801320e:	b938      	cbnz	r0, 8013220 <__swbuf_r+0x74>
 8013210:	4638      	mov	r0, r7
 8013212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013214:	4621      	mov	r1, r4
 8013216:	4628      	mov	r0, r5
 8013218:	f000 f806 	bl	8013228 <__swsetup_r>
 801321c:	2800      	cmp	r0, #0
 801321e:	d0d5      	beq.n	80131cc <__swbuf_r+0x20>
 8013220:	f04f 37ff 	mov.w	r7, #4294967295
 8013224:	e7f4      	b.n	8013210 <__swbuf_r+0x64>
	...

08013228 <__swsetup_r>:
 8013228:	b538      	push	{r3, r4, r5, lr}
 801322a:	4b2a      	ldr	r3, [pc, #168]	; (80132d4 <__swsetup_r+0xac>)
 801322c:	4605      	mov	r5, r0
 801322e:	6818      	ldr	r0, [r3, #0]
 8013230:	460c      	mov	r4, r1
 8013232:	b118      	cbz	r0, 801323c <__swsetup_r+0x14>
 8013234:	6a03      	ldr	r3, [r0, #32]
 8013236:	b90b      	cbnz	r3, 801323c <__swsetup_r+0x14>
 8013238:	f7fc ffa0 	bl	801017c <__sinit>
 801323c:	89a3      	ldrh	r3, [r4, #12]
 801323e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013242:	0718      	lsls	r0, r3, #28
 8013244:	d422      	bmi.n	801328c <__swsetup_r+0x64>
 8013246:	06d9      	lsls	r1, r3, #27
 8013248:	d407      	bmi.n	801325a <__swsetup_r+0x32>
 801324a:	2309      	movs	r3, #9
 801324c:	602b      	str	r3, [r5, #0]
 801324e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013252:	81a3      	strh	r3, [r4, #12]
 8013254:	f04f 30ff 	mov.w	r0, #4294967295
 8013258:	e034      	b.n	80132c4 <__swsetup_r+0x9c>
 801325a:	0758      	lsls	r0, r3, #29
 801325c:	d512      	bpl.n	8013284 <__swsetup_r+0x5c>
 801325e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013260:	b141      	cbz	r1, 8013274 <__swsetup_r+0x4c>
 8013262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013266:	4299      	cmp	r1, r3
 8013268:	d002      	beq.n	8013270 <__swsetup_r+0x48>
 801326a:	4628      	mov	r0, r5
 801326c:	f7fd fffe 	bl	801126c <_free_r>
 8013270:	2300      	movs	r3, #0
 8013272:	6363      	str	r3, [r4, #52]	; 0x34
 8013274:	89a3      	ldrh	r3, [r4, #12]
 8013276:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801327a:	81a3      	strh	r3, [r4, #12]
 801327c:	2300      	movs	r3, #0
 801327e:	6063      	str	r3, [r4, #4]
 8013280:	6923      	ldr	r3, [r4, #16]
 8013282:	6023      	str	r3, [r4, #0]
 8013284:	89a3      	ldrh	r3, [r4, #12]
 8013286:	f043 0308 	orr.w	r3, r3, #8
 801328a:	81a3      	strh	r3, [r4, #12]
 801328c:	6923      	ldr	r3, [r4, #16]
 801328e:	b94b      	cbnz	r3, 80132a4 <__swsetup_r+0x7c>
 8013290:	89a3      	ldrh	r3, [r4, #12]
 8013292:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801329a:	d003      	beq.n	80132a4 <__swsetup_r+0x7c>
 801329c:	4621      	mov	r1, r4
 801329e:	4628      	mov	r0, r5
 80132a0:	f000 fc45 	bl	8013b2e <__smakebuf_r>
 80132a4:	89a0      	ldrh	r0, [r4, #12]
 80132a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132aa:	f010 0301 	ands.w	r3, r0, #1
 80132ae:	d00a      	beq.n	80132c6 <__swsetup_r+0x9e>
 80132b0:	2300      	movs	r3, #0
 80132b2:	60a3      	str	r3, [r4, #8]
 80132b4:	6963      	ldr	r3, [r4, #20]
 80132b6:	425b      	negs	r3, r3
 80132b8:	61a3      	str	r3, [r4, #24]
 80132ba:	6923      	ldr	r3, [r4, #16]
 80132bc:	b943      	cbnz	r3, 80132d0 <__swsetup_r+0xa8>
 80132be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132c2:	d1c4      	bne.n	801324e <__swsetup_r+0x26>
 80132c4:	bd38      	pop	{r3, r4, r5, pc}
 80132c6:	0781      	lsls	r1, r0, #30
 80132c8:	bf58      	it	pl
 80132ca:	6963      	ldrpl	r3, [r4, #20]
 80132cc:	60a3      	str	r3, [r4, #8]
 80132ce:	e7f4      	b.n	80132ba <__swsetup_r+0x92>
 80132d0:	2000      	movs	r0, #0
 80132d2:	e7f7      	b.n	80132c4 <__swsetup_r+0x9c>
 80132d4:	20000288 	.word	0x20000288

080132d8 <memmove>:
 80132d8:	4288      	cmp	r0, r1
 80132da:	b510      	push	{r4, lr}
 80132dc:	eb01 0402 	add.w	r4, r1, r2
 80132e0:	d902      	bls.n	80132e8 <memmove+0x10>
 80132e2:	4284      	cmp	r4, r0
 80132e4:	4623      	mov	r3, r4
 80132e6:	d807      	bhi.n	80132f8 <memmove+0x20>
 80132e8:	1e43      	subs	r3, r0, #1
 80132ea:	42a1      	cmp	r1, r4
 80132ec:	d008      	beq.n	8013300 <memmove+0x28>
 80132ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132f6:	e7f8      	b.n	80132ea <memmove+0x12>
 80132f8:	4402      	add	r2, r0
 80132fa:	4601      	mov	r1, r0
 80132fc:	428a      	cmp	r2, r1
 80132fe:	d100      	bne.n	8013302 <memmove+0x2a>
 8013300:	bd10      	pop	{r4, pc}
 8013302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801330a:	e7f7      	b.n	80132fc <memmove+0x24>

0801330c <strncmp>:
 801330c:	b510      	push	{r4, lr}
 801330e:	b16a      	cbz	r2, 801332c <strncmp+0x20>
 8013310:	3901      	subs	r1, #1
 8013312:	1884      	adds	r4, r0, r2
 8013314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013318:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801331c:	429a      	cmp	r2, r3
 801331e:	d103      	bne.n	8013328 <strncmp+0x1c>
 8013320:	42a0      	cmp	r0, r4
 8013322:	d001      	beq.n	8013328 <strncmp+0x1c>
 8013324:	2a00      	cmp	r2, #0
 8013326:	d1f5      	bne.n	8013314 <strncmp+0x8>
 8013328:	1ad0      	subs	r0, r2, r3
 801332a:	bd10      	pop	{r4, pc}
 801332c:	4610      	mov	r0, r2
 801332e:	e7fc      	b.n	801332a <strncmp+0x1e>

08013330 <_sbrk_r>:
 8013330:	b538      	push	{r3, r4, r5, lr}
 8013332:	4d06      	ldr	r5, [pc, #24]	; (801334c <_sbrk_r+0x1c>)
 8013334:	2300      	movs	r3, #0
 8013336:	4604      	mov	r4, r0
 8013338:	4608      	mov	r0, r1
 801333a:	602b      	str	r3, [r5, #0]
 801333c:	f7ee f9c8 	bl	80016d0 <_sbrk>
 8013340:	1c43      	adds	r3, r0, #1
 8013342:	d102      	bne.n	801334a <_sbrk_r+0x1a>
 8013344:	682b      	ldr	r3, [r5, #0]
 8013346:	b103      	cbz	r3, 801334a <_sbrk_r+0x1a>
 8013348:	6023      	str	r3, [r4, #0]
 801334a:	bd38      	pop	{r3, r4, r5, pc}
 801334c:	20002388 	.word	0x20002388

08013350 <nan>:
 8013350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013358 <nan+0x8>
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop
 8013358:	00000000 	.word	0x00000000
 801335c:	7ff80000 	.word	0x7ff80000

08013360 <abort>:
 8013360:	b508      	push	{r3, lr}
 8013362:	2006      	movs	r0, #6
 8013364:	f000 fc48 	bl	8013bf8 <raise>
 8013368:	2001      	movs	r0, #1
 801336a:	f7ee f939 	bl	80015e0 <_exit>

0801336e <_calloc_r>:
 801336e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013370:	fba1 2402 	umull	r2, r4, r1, r2
 8013374:	b94c      	cbnz	r4, 801338a <_calloc_r+0x1c>
 8013376:	4611      	mov	r1, r2
 8013378:	9201      	str	r2, [sp, #4]
 801337a:	f7fd ffeb 	bl	8011354 <_malloc_r>
 801337e:	9a01      	ldr	r2, [sp, #4]
 8013380:	4605      	mov	r5, r0
 8013382:	b930      	cbnz	r0, 8013392 <_calloc_r+0x24>
 8013384:	4628      	mov	r0, r5
 8013386:	b003      	add	sp, #12
 8013388:	bd30      	pop	{r4, r5, pc}
 801338a:	220c      	movs	r2, #12
 801338c:	6002      	str	r2, [r0, #0]
 801338e:	2500      	movs	r5, #0
 8013390:	e7f8      	b.n	8013384 <_calloc_r+0x16>
 8013392:	4621      	mov	r1, r4
 8013394:	f7fc ffc4 	bl	8010320 <memset>
 8013398:	e7f4      	b.n	8013384 <_calloc_r+0x16>

0801339a <rshift>:
 801339a:	6903      	ldr	r3, [r0, #16]
 801339c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80133a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133a4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80133a8:	f100 0414 	add.w	r4, r0, #20
 80133ac:	dd45      	ble.n	801343a <rshift+0xa0>
 80133ae:	f011 011f 	ands.w	r1, r1, #31
 80133b2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80133b6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80133ba:	d10c      	bne.n	80133d6 <rshift+0x3c>
 80133bc:	f100 0710 	add.w	r7, r0, #16
 80133c0:	4629      	mov	r1, r5
 80133c2:	42b1      	cmp	r1, r6
 80133c4:	d334      	bcc.n	8013430 <rshift+0x96>
 80133c6:	1a9b      	subs	r3, r3, r2
 80133c8:	009b      	lsls	r3, r3, #2
 80133ca:	1eea      	subs	r2, r5, #3
 80133cc:	4296      	cmp	r6, r2
 80133ce:	bf38      	it	cc
 80133d0:	2300      	movcc	r3, #0
 80133d2:	4423      	add	r3, r4
 80133d4:	e015      	b.n	8013402 <rshift+0x68>
 80133d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80133da:	f1c1 0820 	rsb	r8, r1, #32
 80133de:	40cf      	lsrs	r7, r1
 80133e0:	f105 0e04 	add.w	lr, r5, #4
 80133e4:	46a1      	mov	r9, r4
 80133e6:	4576      	cmp	r6, lr
 80133e8:	46f4      	mov	ip, lr
 80133ea:	d815      	bhi.n	8013418 <rshift+0x7e>
 80133ec:	1a9a      	subs	r2, r3, r2
 80133ee:	0092      	lsls	r2, r2, #2
 80133f0:	3a04      	subs	r2, #4
 80133f2:	3501      	adds	r5, #1
 80133f4:	42ae      	cmp	r6, r5
 80133f6:	bf38      	it	cc
 80133f8:	2200      	movcc	r2, #0
 80133fa:	18a3      	adds	r3, r4, r2
 80133fc:	50a7      	str	r7, [r4, r2]
 80133fe:	b107      	cbz	r7, 8013402 <rshift+0x68>
 8013400:	3304      	adds	r3, #4
 8013402:	1b1a      	subs	r2, r3, r4
 8013404:	42a3      	cmp	r3, r4
 8013406:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801340a:	bf08      	it	eq
 801340c:	2300      	moveq	r3, #0
 801340e:	6102      	str	r2, [r0, #16]
 8013410:	bf08      	it	eq
 8013412:	6143      	streq	r3, [r0, #20]
 8013414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013418:	f8dc c000 	ldr.w	ip, [ip]
 801341c:	fa0c fc08 	lsl.w	ip, ip, r8
 8013420:	ea4c 0707 	orr.w	r7, ip, r7
 8013424:	f849 7b04 	str.w	r7, [r9], #4
 8013428:	f85e 7b04 	ldr.w	r7, [lr], #4
 801342c:	40cf      	lsrs	r7, r1
 801342e:	e7da      	b.n	80133e6 <rshift+0x4c>
 8013430:	f851 cb04 	ldr.w	ip, [r1], #4
 8013434:	f847 cf04 	str.w	ip, [r7, #4]!
 8013438:	e7c3      	b.n	80133c2 <rshift+0x28>
 801343a:	4623      	mov	r3, r4
 801343c:	e7e1      	b.n	8013402 <rshift+0x68>

0801343e <__hexdig_fun>:
 801343e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013442:	2b09      	cmp	r3, #9
 8013444:	d802      	bhi.n	801344c <__hexdig_fun+0xe>
 8013446:	3820      	subs	r0, #32
 8013448:	b2c0      	uxtb	r0, r0
 801344a:	4770      	bx	lr
 801344c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013450:	2b05      	cmp	r3, #5
 8013452:	d801      	bhi.n	8013458 <__hexdig_fun+0x1a>
 8013454:	3847      	subs	r0, #71	; 0x47
 8013456:	e7f7      	b.n	8013448 <__hexdig_fun+0xa>
 8013458:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801345c:	2b05      	cmp	r3, #5
 801345e:	d801      	bhi.n	8013464 <__hexdig_fun+0x26>
 8013460:	3827      	subs	r0, #39	; 0x27
 8013462:	e7f1      	b.n	8013448 <__hexdig_fun+0xa>
 8013464:	2000      	movs	r0, #0
 8013466:	4770      	bx	lr

08013468 <__gethex>:
 8013468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801346c:	4617      	mov	r7, r2
 801346e:	680a      	ldr	r2, [r1, #0]
 8013470:	b085      	sub	sp, #20
 8013472:	f102 0b02 	add.w	fp, r2, #2
 8013476:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801347a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801347e:	4681      	mov	r9, r0
 8013480:	468a      	mov	sl, r1
 8013482:	9302      	str	r3, [sp, #8]
 8013484:	32fe      	adds	r2, #254	; 0xfe
 8013486:	eb02 030b 	add.w	r3, r2, fp
 801348a:	46d8      	mov	r8, fp
 801348c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013490:	9301      	str	r3, [sp, #4]
 8013492:	2830      	cmp	r0, #48	; 0x30
 8013494:	d0f7      	beq.n	8013486 <__gethex+0x1e>
 8013496:	f7ff ffd2 	bl	801343e <__hexdig_fun>
 801349a:	4604      	mov	r4, r0
 801349c:	2800      	cmp	r0, #0
 801349e:	d138      	bne.n	8013512 <__gethex+0xaa>
 80134a0:	49a7      	ldr	r1, [pc, #668]	; (8013740 <__gethex+0x2d8>)
 80134a2:	2201      	movs	r2, #1
 80134a4:	4640      	mov	r0, r8
 80134a6:	f7ff ff31 	bl	801330c <strncmp>
 80134aa:	4606      	mov	r6, r0
 80134ac:	2800      	cmp	r0, #0
 80134ae:	d169      	bne.n	8013584 <__gethex+0x11c>
 80134b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80134b4:	465d      	mov	r5, fp
 80134b6:	f7ff ffc2 	bl	801343e <__hexdig_fun>
 80134ba:	2800      	cmp	r0, #0
 80134bc:	d064      	beq.n	8013588 <__gethex+0x120>
 80134be:	465a      	mov	r2, fp
 80134c0:	7810      	ldrb	r0, [r2, #0]
 80134c2:	2830      	cmp	r0, #48	; 0x30
 80134c4:	4690      	mov	r8, r2
 80134c6:	f102 0201 	add.w	r2, r2, #1
 80134ca:	d0f9      	beq.n	80134c0 <__gethex+0x58>
 80134cc:	f7ff ffb7 	bl	801343e <__hexdig_fun>
 80134d0:	2301      	movs	r3, #1
 80134d2:	fab0 f480 	clz	r4, r0
 80134d6:	0964      	lsrs	r4, r4, #5
 80134d8:	465e      	mov	r6, fp
 80134da:	9301      	str	r3, [sp, #4]
 80134dc:	4642      	mov	r2, r8
 80134de:	4615      	mov	r5, r2
 80134e0:	3201      	adds	r2, #1
 80134e2:	7828      	ldrb	r0, [r5, #0]
 80134e4:	f7ff ffab 	bl	801343e <__hexdig_fun>
 80134e8:	2800      	cmp	r0, #0
 80134ea:	d1f8      	bne.n	80134de <__gethex+0x76>
 80134ec:	4994      	ldr	r1, [pc, #592]	; (8013740 <__gethex+0x2d8>)
 80134ee:	2201      	movs	r2, #1
 80134f0:	4628      	mov	r0, r5
 80134f2:	f7ff ff0b 	bl	801330c <strncmp>
 80134f6:	b978      	cbnz	r0, 8013518 <__gethex+0xb0>
 80134f8:	b946      	cbnz	r6, 801350c <__gethex+0xa4>
 80134fa:	1c6e      	adds	r6, r5, #1
 80134fc:	4632      	mov	r2, r6
 80134fe:	4615      	mov	r5, r2
 8013500:	3201      	adds	r2, #1
 8013502:	7828      	ldrb	r0, [r5, #0]
 8013504:	f7ff ff9b 	bl	801343e <__hexdig_fun>
 8013508:	2800      	cmp	r0, #0
 801350a:	d1f8      	bne.n	80134fe <__gethex+0x96>
 801350c:	1b73      	subs	r3, r6, r5
 801350e:	009e      	lsls	r6, r3, #2
 8013510:	e004      	b.n	801351c <__gethex+0xb4>
 8013512:	2400      	movs	r4, #0
 8013514:	4626      	mov	r6, r4
 8013516:	e7e1      	b.n	80134dc <__gethex+0x74>
 8013518:	2e00      	cmp	r6, #0
 801351a:	d1f7      	bne.n	801350c <__gethex+0xa4>
 801351c:	782b      	ldrb	r3, [r5, #0]
 801351e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013522:	2b50      	cmp	r3, #80	; 0x50
 8013524:	d13d      	bne.n	80135a2 <__gethex+0x13a>
 8013526:	786b      	ldrb	r3, [r5, #1]
 8013528:	2b2b      	cmp	r3, #43	; 0x2b
 801352a:	d02f      	beq.n	801358c <__gethex+0x124>
 801352c:	2b2d      	cmp	r3, #45	; 0x2d
 801352e:	d031      	beq.n	8013594 <__gethex+0x12c>
 8013530:	1c69      	adds	r1, r5, #1
 8013532:	f04f 0b00 	mov.w	fp, #0
 8013536:	7808      	ldrb	r0, [r1, #0]
 8013538:	f7ff ff81 	bl	801343e <__hexdig_fun>
 801353c:	1e42      	subs	r2, r0, #1
 801353e:	b2d2      	uxtb	r2, r2
 8013540:	2a18      	cmp	r2, #24
 8013542:	d82e      	bhi.n	80135a2 <__gethex+0x13a>
 8013544:	f1a0 0210 	sub.w	r2, r0, #16
 8013548:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801354c:	f7ff ff77 	bl	801343e <__hexdig_fun>
 8013550:	f100 3cff 	add.w	ip, r0, #4294967295
 8013554:	fa5f fc8c 	uxtb.w	ip, ip
 8013558:	f1bc 0f18 	cmp.w	ip, #24
 801355c:	d91d      	bls.n	801359a <__gethex+0x132>
 801355e:	f1bb 0f00 	cmp.w	fp, #0
 8013562:	d000      	beq.n	8013566 <__gethex+0xfe>
 8013564:	4252      	negs	r2, r2
 8013566:	4416      	add	r6, r2
 8013568:	f8ca 1000 	str.w	r1, [sl]
 801356c:	b1dc      	cbz	r4, 80135a6 <__gethex+0x13e>
 801356e:	9b01      	ldr	r3, [sp, #4]
 8013570:	2b00      	cmp	r3, #0
 8013572:	bf14      	ite	ne
 8013574:	f04f 0800 	movne.w	r8, #0
 8013578:	f04f 0806 	moveq.w	r8, #6
 801357c:	4640      	mov	r0, r8
 801357e:	b005      	add	sp, #20
 8013580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013584:	4645      	mov	r5, r8
 8013586:	4626      	mov	r6, r4
 8013588:	2401      	movs	r4, #1
 801358a:	e7c7      	b.n	801351c <__gethex+0xb4>
 801358c:	f04f 0b00 	mov.w	fp, #0
 8013590:	1ca9      	adds	r1, r5, #2
 8013592:	e7d0      	b.n	8013536 <__gethex+0xce>
 8013594:	f04f 0b01 	mov.w	fp, #1
 8013598:	e7fa      	b.n	8013590 <__gethex+0x128>
 801359a:	230a      	movs	r3, #10
 801359c:	fb03 0002 	mla	r0, r3, r2, r0
 80135a0:	e7d0      	b.n	8013544 <__gethex+0xdc>
 80135a2:	4629      	mov	r1, r5
 80135a4:	e7e0      	b.n	8013568 <__gethex+0x100>
 80135a6:	eba5 0308 	sub.w	r3, r5, r8
 80135aa:	3b01      	subs	r3, #1
 80135ac:	4621      	mov	r1, r4
 80135ae:	2b07      	cmp	r3, #7
 80135b0:	dc0a      	bgt.n	80135c8 <__gethex+0x160>
 80135b2:	4648      	mov	r0, r9
 80135b4:	f7fd ff5a 	bl	801146c <_Balloc>
 80135b8:	4604      	mov	r4, r0
 80135ba:	b940      	cbnz	r0, 80135ce <__gethex+0x166>
 80135bc:	4b61      	ldr	r3, [pc, #388]	; (8013744 <__gethex+0x2dc>)
 80135be:	4602      	mov	r2, r0
 80135c0:	21e4      	movs	r1, #228	; 0xe4
 80135c2:	4861      	ldr	r0, [pc, #388]	; (8013748 <__gethex+0x2e0>)
 80135c4:	f7fc ffb8 	bl	8010538 <__assert_func>
 80135c8:	3101      	adds	r1, #1
 80135ca:	105b      	asrs	r3, r3, #1
 80135cc:	e7ef      	b.n	80135ae <__gethex+0x146>
 80135ce:	f100 0a14 	add.w	sl, r0, #20
 80135d2:	2300      	movs	r3, #0
 80135d4:	495a      	ldr	r1, [pc, #360]	; (8013740 <__gethex+0x2d8>)
 80135d6:	f8cd a004 	str.w	sl, [sp, #4]
 80135da:	469b      	mov	fp, r3
 80135dc:	45a8      	cmp	r8, r5
 80135de:	d342      	bcc.n	8013666 <__gethex+0x1fe>
 80135e0:	9801      	ldr	r0, [sp, #4]
 80135e2:	f840 bb04 	str.w	fp, [r0], #4
 80135e6:	eba0 000a 	sub.w	r0, r0, sl
 80135ea:	1080      	asrs	r0, r0, #2
 80135ec:	6120      	str	r0, [r4, #16]
 80135ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80135f2:	4658      	mov	r0, fp
 80135f4:	f7fe f82c 	bl	8011650 <__hi0bits>
 80135f8:	683d      	ldr	r5, [r7, #0]
 80135fa:	eba8 0000 	sub.w	r0, r8, r0
 80135fe:	42a8      	cmp	r0, r5
 8013600:	dd59      	ble.n	80136b6 <__gethex+0x24e>
 8013602:	eba0 0805 	sub.w	r8, r0, r5
 8013606:	4641      	mov	r1, r8
 8013608:	4620      	mov	r0, r4
 801360a:	f7fe fbbb 	bl	8011d84 <__any_on>
 801360e:	4683      	mov	fp, r0
 8013610:	b1b8      	cbz	r0, 8013642 <__gethex+0x1da>
 8013612:	f108 33ff 	add.w	r3, r8, #4294967295
 8013616:	1159      	asrs	r1, r3, #5
 8013618:	f003 021f 	and.w	r2, r3, #31
 801361c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013620:	f04f 0b01 	mov.w	fp, #1
 8013624:	fa0b f202 	lsl.w	r2, fp, r2
 8013628:	420a      	tst	r2, r1
 801362a:	d00a      	beq.n	8013642 <__gethex+0x1da>
 801362c:	455b      	cmp	r3, fp
 801362e:	dd06      	ble.n	801363e <__gethex+0x1d6>
 8013630:	f1a8 0102 	sub.w	r1, r8, #2
 8013634:	4620      	mov	r0, r4
 8013636:	f7fe fba5 	bl	8011d84 <__any_on>
 801363a:	2800      	cmp	r0, #0
 801363c:	d138      	bne.n	80136b0 <__gethex+0x248>
 801363e:	f04f 0b02 	mov.w	fp, #2
 8013642:	4641      	mov	r1, r8
 8013644:	4620      	mov	r0, r4
 8013646:	f7ff fea8 	bl	801339a <rshift>
 801364a:	4446      	add	r6, r8
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	42b3      	cmp	r3, r6
 8013650:	da41      	bge.n	80136d6 <__gethex+0x26e>
 8013652:	4621      	mov	r1, r4
 8013654:	4648      	mov	r0, r9
 8013656:	f7fd ff49 	bl	80114ec <_Bfree>
 801365a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801365c:	2300      	movs	r3, #0
 801365e:	6013      	str	r3, [r2, #0]
 8013660:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013664:	e78a      	b.n	801357c <__gethex+0x114>
 8013666:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801366a:	2a2e      	cmp	r2, #46	; 0x2e
 801366c:	d014      	beq.n	8013698 <__gethex+0x230>
 801366e:	2b20      	cmp	r3, #32
 8013670:	d106      	bne.n	8013680 <__gethex+0x218>
 8013672:	9b01      	ldr	r3, [sp, #4]
 8013674:	f843 bb04 	str.w	fp, [r3], #4
 8013678:	f04f 0b00 	mov.w	fp, #0
 801367c:	9301      	str	r3, [sp, #4]
 801367e:	465b      	mov	r3, fp
 8013680:	7828      	ldrb	r0, [r5, #0]
 8013682:	9303      	str	r3, [sp, #12]
 8013684:	f7ff fedb 	bl	801343e <__hexdig_fun>
 8013688:	9b03      	ldr	r3, [sp, #12]
 801368a:	f000 000f 	and.w	r0, r0, #15
 801368e:	4098      	lsls	r0, r3
 8013690:	ea4b 0b00 	orr.w	fp, fp, r0
 8013694:	3304      	adds	r3, #4
 8013696:	e7a1      	b.n	80135dc <__gethex+0x174>
 8013698:	45a8      	cmp	r8, r5
 801369a:	d8e8      	bhi.n	801366e <__gethex+0x206>
 801369c:	2201      	movs	r2, #1
 801369e:	4628      	mov	r0, r5
 80136a0:	9303      	str	r3, [sp, #12]
 80136a2:	f7ff fe33 	bl	801330c <strncmp>
 80136a6:	4926      	ldr	r1, [pc, #152]	; (8013740 <__gethex+0x2d8>)
 80136a8:	9b03      	ldr	r3, [sp, #12]
 80136aa:	2800      	cmp	r0, #0
 80136ac:	d1df      	bne.n	801366e <__gethex+0x206>
 80136ae:	e795      	b.n	80135dc <__gethex+0x174>
 80136b0:	f04f 0b03 	mov.w	fp, #3
 80136b4:	e7c5      	b.n	8013642 <__gethex+0x1da>
 80136b6:	da0b      	bge.n	80136d0 <__gethex+0x268>
 80136b8:	eba5 0800 	sub.w	r8, r5, r0
 80136bc:	4621      	mov	r1, r4
 80136be:	4642      	mov	r2, r8
 80136c0:	4648      	mov	r0, r9
 80136c2:	f7fe f92d 	bl	8011920 <__lshift>
 80136c6:	eba6 0608 	sub.w	r6, r6, r8
 80136ca:	4604      	mov	r4, r0
 80136cc:	f100 0a14 	add.w	sl, r0, #20
 80136d0:	f04f 0b00 	mov.w	fp, #0
 80136d4:	e7ba      	b.n	801364c <__gethex+0x1e4>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	42b3      	cmp	r3, r6
 80136da:	dd73      	ble.n	80137c4 <__gethex+0x35c>
 80136dc:	1b9e      	subs	r6, r3, r6
 80136de:	42b5      	cmp	r5, r6
 80136e0:	dc34      	bgt.n	801374c <__gethex+0x2e4>
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	2b02      	cmp	r3, #2
 80136e6:	d023      	beq.n	8013730 <__gethex+0x2c8>
 80136e8:	2b03      	cmp	r3, #3
 80136ea:	d025      	beq.n	8013738 <__gethex+0x2d0>
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d115      	bne.n	801371c <__gethex+0x2b4>
 80136f0:	42b5      	cmp	r5, r6
 80136f2:	d113      	bne.n	801371c <__gethex+0x2b4>
 80136f4:	2d01      	cmp	r5, #1
 80136f6:	d10b      	bne.n	8013710 <__gethex+0x2a8>
 80136f8:	9a02      	ldr	r2, [sp, #8]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6013      	str	r3, [r2, #0]
 80136fe:	2301      	movs	r3, #1
 8013700:	6123      	str	r3, [r4, #16]
 8013702:	f8ca 3000 	str.w	r3, [sl]
 8013706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013708:	f04f 0862 	mov.w	r8, #98	; 0x62
 801370c:	601c      	str	r4, [r3, #0]
 801370e:	e735      	b.n	801357c <__gethex+0x114>
 8013710:	1e69      	subs	r1, r5, #1
 8013712:	4620      	mov	r0, r4
 8013714:	f7fe fb36 	bl	8011d84 <__any_on>
 8013718:	2800      	cmp	r0, #0
 801371a:	d1ed      	bne.n	80136f8 <__gethex+0x290>
 801371c:	4621      	mov	r1, r4
 801371e:	4648      	mov	r0, r9
 8013720:	f7fd fee4 	bl	80114ec <_Bfree>
 8013724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013726:	2300      	movs	r3, #0
 8013728:	6013      	str	r3, [r2, #0]
 801372a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801372e:	e725      	b.n	801357c <__gethex+0x114>
 8013730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013732:	2b00      	cmp	r3, #0
 8013734:	d1f2      	bne.n	801371c <__gethex+0x2b4>
 8013736:	e7df      	b.n	80136f8 <__gethex+0x290>
 8013738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801373a:	2b00      	cmp	r3, #0
 801373c:	d1dc      	bne.n	80136f8 <__gethex+0x290>
 801373e:	e7ed      	b.n	801371c <__gethex+0x2b4>
 8013740:	080141a4 	.word	0x080141a4
 8013744:	0801403b 	.word	0x0801403b
 8013748:	08014312 	.word	0x08014312
 801374c:	f106 38ff 	add.w	r8, r6, #4294967295
 8013750:	f1bb 0f00 	cmp.w	fp, #0
 8013754:	d133      	bne.n	80137be <__gethex+0x356>
 8013756:	f1b8 0f00 	cmp.w	r8, #0
 801375a:	d004      	beq.n	8013766 <__gethex+0x2fe>
 801375c:	4641      	mov	r1, r8
 801375e:	4620      	mov	r0, r4
 8013760:	f7fe fb10 	bl	8011d84 <__any_on>
 8013764:	4683      	mov	fp, r0
 8013766:	ea4f 1268 	mov.w	r2, r8, asr #5
 801376a:	2301      	movs	r3, #1
 801376c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013770:	f008 081f 	and.w	r8, r8, #31
 8013774:	fa03 f308 	lsl.w	r3, r3, r8
 8013778:	4213      	tst	r3, r2
 801377a:	4631      	mov	r1, r6
 801377c:	4620      	mov	r0, r4
 801377e:	bf18      	it	ne
 8013780:	f04b 0b02 	orrne.w	fp, fp, #2
 8013784:	1bad      	subs	r5, r5, r6
 8013786:	f7ff fe08 	bl	801339a <rshift>
 801378a:	687e      	ldr	r6, [r7, #4]
 801378c:	f04f 0802 	mov.w	r8, #2
 8013790:	f1bb 0f00 	cmp.w	fp, #0
 8013794:	d04a      	beq.n	801382c <__gethex+0x3c4>
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	2b02      	cmp	r3, #2
 801379a:	d016      	beq.n	80137ca <__gethex+0x362>
 801379c:	2b03      	cmp	r3, #3
 801379e:	d018      	beq.n	80137d2 <__gethex+0x36a>
 80137a0:	2b01      	cmp	r3, #1
 80137a2:	d109      	bne.n	80137b8 <__gethex+0x350>
 80137a4:	f01b 0f02 	tst.w	fp, #2
 80137a8:	d006      	beq.n	80137b8 <__gethex+0x350>
 80137aa:	f8da 3000 	ldr.w	r3, [sl]
 80137ae:	ea4b 0b03 	orr.w	fp, fp, r3
 80137b2:	f01b 0f01 	tst.w	fp, #1
 80137b6:	d10f      	bne.n	80137d8 <__gethex+0x370>
 80137b8:	f048 0810 	orr.w	r8, r8, #16
 80137bc:	e036      	b.n	801382c <__gethex+0x3c4>
 80137be:	f04f 0b01 	mov.w	fp, #1
 80137c2:	e7d0      	b.n	8013766 <__gethex+0x2fe>
 80137c4:	f04f 0801 	mov.w	r8, #1
 80137c8:	e7e2      	b.n	8013790 <__gethex+0x328>
 80137ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137cc:	f1c3 0301 	rsb	r3, r3, #1
 80137d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80137d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d0ef      	beq.n	80137b8 <__gethex+0x350>
 80137d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80137dc:	f104 0214 	add.w	r2, r4, #20
 80137e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80137e4:	9301      	str	r3, [sp, #4]
 80137e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80137ea:	2300      	movs	r3, #0
 80137ec:	4694      	mov	ip, r2
 80137ee:	f852 1b04 	ldr.w	r1, [r2], #4
 80137f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80137f6:	d01e      	beq.n	8013836 <__gethex+0x3ce>
 80137f8:	3101      	adds	r1, #1
 80137fa:	f8cc 1000 	str.w	r1, [ip]
 80137fe:	f1b8 0f02 	cmp.w	r8, #2
 8013802:	f104 0214 	add.w	r2, r4, #20
 8013806:	d13d      	bne.n	8013884 <__gethex+0x41c>
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	3b01      	subs	r3, #1
 801380c:	42ab      	cmp	r3, r5
 801380e:	d10b      	bne.n	8013828 <__gethex+0x3c0>
 8013810:	1169      	asrs	r1, r5, #5
 8013812:	2301      	movs	r3, #1
 8013814:	f005 051f 	and.w	r5, r5, #31
 8013818:	fa03 f505 	lsl.w	r5, r3, r5
 801381c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013820:	421d      	tst	r5, r3
 8013822:	bf18      	it	ne
 8013824:	f04f 0801 	movne.w	r8, #1
 8013828:	f048 0820 	orr.w	r8, r8, #32
 801382c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801382e:	601c      	str	r4, [r3, #0]
 8013830:	9b02      	ldr	r3, [sp, #8]
 8013832:	601e      	str	r6, [r3, #0]
 8013834:	e6a2      	b.n	801357c <__gethex+0x114>
 8013836:	4290      	cmp	r0, r2
 8013838:	f842 3c04 	str.w	r3, [r2, #-4]
 801383c:	d8d6      	bhi.n	80137ec <__gethex+0x384>
 801383e:	68a2      	ldr	r2, [r4, #8]
 8013840:	4593      	cmp	fp, r2
 8013842:	db17      	blt.n	8013874 <__gethex+0x40c>
 8013844:	6861      	ldr	r1, [r4, #4]
 8013846:	4648      	mov	r0, r9
 8013848:	3101      	adds	r1, #1
 801384a:	f7fd fe0f 	bl	801146c <_Balloc>
 801384e:	4682      	mov	sl, r0
 8013850:	b918      	cbnz	r0, 801385a <__gethex+0x3f2>
 8013852:	4b1b      	ldr	r3, [pc, #108]	; (80138c0 <__gethex+0x458>)
 8013854:	4602      	mov	r2, r0
 8013856:	2184      	movs	r1, #132	; 0x84
 8013858:	e6b3      	b.n	80135c2 <__gethex+0x15a>
 801385a:	6922      	ldr	r2, [r4, #16]
 801385c:	3202      	adds	r2, #2
 801385e:	f104 010c 	add.w	r1, r4, #12
 8013862:	0092      	lsls	r2, r2, #2
 8013864:	300c      	adds	r0, #12
 8013866:	f7fc fe53 	bl	8010510 <memcpy>
 801386a:	4621      	mov	r1, r4
 801386c:	4648      	mov	r0, r9
 801386e:	f7fd fe3d 	bl	80114ec <_Bfree>
 8013872:	4654      	mov	r4, sl
 8013874:	6922      	ldr	r2, [r4, #16]
 8013876:	1c51      	adds	r1, r2, #1
 8013878:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801387c:	6121      	str	r1, [r4, #16]
 801387e:	2101      	movs	r1, #1
 8013880:	6151      	str	r1, [r2, #20]
 8013882:	e7bc      	b.n	80137fe <__gethex+0x396>
 8013884:	6921      	ldr	r1, [r4, #16]
 8013886:	4559      	cmp	r1, fp
 8013888:	dd0b      	ble.n	80138a2 <__gethex+0x43a>
 801388a:	2101      	movs	r1, #1
 801388c:	4620      	mov	r0, r4
 801388e:	f7ff fd84 	bl	801339a <rshift>
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	3601      	adds	r6, #1
 8013896:	42b3      	cmp	r3, r6
 8013898:	f6ff aedb 	blt.w	8013652 <__gethex+0x1ea>
 801389c:	f04f 0801 	mov.w	r8, #1
 80138a0:	e7c2      	b.n	8013828 <__gethex+0x3c0>
 80138a2:	f015 051f 	ands.w	r5, r5, #31
 80138a6:	d0f9      	beq.n	801389c <__gethex+0x434>
 80138a8:	9b01      	ldr	r3, [sp, #4]
 80138aa:	441a      	add	r2, r3
 80138ac:	f1c5 0520 	rsb	r5, r5, #32
 80138b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80138b4:	f7fd fecc 	bl	8011650 <__hi0bits>
 80138b8:	42a8      	cmp	r0, r5
 80138ba:	dbe6      	blt.n	801388a <__gethex+0x422>
 80138bc:	e7ee      	b.n	801389c <__gethex+0x434>
 80138be:	bf00      	nop
 80138c0:	0801403b 	.word	0x0801403b

080138c4 <L_shift>:
 80138c4:	f1c2 0208 	rsb	r2, r2, #8
 80138c8:	0092      	lsls	r2, r2, #2
 80138ca:	b570      	push	{r4, r5, r6, lr}
 80138cc:	f1c2 0620 	rsb	r6, r2, #32
 80138d0:	6843      	ldr	r3, [r0, #4]
 80138d2:	6804      	ldr	r4, [r0, #0]
 80138d4:	fa03 f506 	lsl.w	r5, r3, r6
 80138d8:	432c      	orrs	r4, r5
 80138da:	40d3      	lsrs	r3, r2
 80138dc:	6004      	str	r4, [r0, #0]
 80138de:	f840 3f04 	str.w	r3, [r0, #4]!
 80138e2:	4288      	cmp	r0, r1
 80138e4:	d3f4      	bcc.n	80138d0 <L_shift+0xc>
 80138e6:	bd70      	pop	{r4, r5, r6, pc}

080138e8 <__match>:
 80138e8:	b530      	push	{r4, r5, lr}
 80138ea:	6803      	ldr	r3, [r0, #0]
 80138ec:	3301      	adds	r3, #1
 80138ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138f2:	b914      	cbnz	r4, 80138fa <__match+0x12>
 80138f4:	6003      	str	r3, [r0, #0]
 80138f6:	2001      	movs	r0, #1
 80138f8:	bd30      	pop	{r4, r5, pc}
 80138fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013902:	2d19      	cmp	r5, #25
 8013904:	bf98      	it	ls
 8013906:	3220      	addls	r2, #32
 8013908:	42a2      	cmp	r2, r4
 801390a:	d0f0      	beq.n	80138ee <__match+0x6>
 801390c:	2000      	movs	r0, #0
 801390e:	e7f3      	b.n	80138f8 <__match+0x10>

08013910 <__hexnan>:
 8013910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013914:	680b      	ldr	r3, [r1, #0]
 8013916:	6801      	ldr	r1, [r0, #0]
 8013918:	115e      	asrs	r6, r3, #5
 801391a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801391e:	f013 031f 	ands.w	r3, r3, #31
 8013922:	b087      	sub	sp, #28
 8013924:	bf18      	it	ne
 8013926:	3604      	addne	r6, #4
 8013928:	2500      	movs	r5, #0
 801392a:	1f37      	subs	r7, r6, #4
 801392c:	4682      	mov	sl, r0
 801392e:	4690      	mov	r8, r2
 8013930:	9301      	str	r3, [sp, #4]
 8013932:	f846 5c04 	str.w	r5, [r6, #-4]
 8013936:	46b9      	mov	r9, r7
 8013938:	463c      	mov	r4, r7
 801393a:	9502      	str	r5, [sp, #8]
 801393c:	46ab      	mov	fp, r5
 801393e:	784a      	ldrb	r2, [r1, #1]
 8013940:	1c4b      	adds	r3, r1, #1
 8013942:	9303      	str	r3, [sp, #12]
 8013944:	b342      	cbz	r2, 8013998 <__hexnan+0x88>
 8013946:	4610      	mov	r0, r2
 8013948:	9105      	str	r1, [sp, #20]
 801394a:	9204      	str	r2, [sp, #16]
 801394c:	f7ff fd77 	bl	801343e <__hexdig_fun>
 8013950:	2800      	cmp	r0, #0
 8013952:	d14f      	bne.n	80139f4 <__hexnan+0xe4>
 8013954:	9a04      	ldr	r2, [sp, #16]
 8013956:	9905      	ldr	r1, [sp, #20]
 8013958:	2a20      	cmp	r2, #32
 801395a:	d818      	bhi.n	801398e <__hexnan+0x7e>
 801395c:	9b02      	ldr	r3, [sp, #8]
 801395e:	459b      	cmp	fp, r3
 8013960:	dd13      	ble.n	801398a <__hexnan+0x7a>
 8013962:	454c      	cmp	r4, r9
 8013964:	d206      	bcs.n	8013974 <__hexnan+0x64>
 8013966:	2d07      	cmp	r5, #7
 8013968:	dc04      	bgt.n	8013974 <__hexnan+0x64>
 801396a:	462a      	mov	r2, r5
 801396c:	4649      	mov	r1, r9
 801396e:	4620      	mov	r0, r4
 8013970:	f7ff ffa8 	bl	80138c4 <L_shift>
 8013974:	4544      	cmp	r4, r8
 8013976:	d950      	bls.n	8013a1a <__hexnan+0x10a>
 8013978:	2300      	movs	r3, #0
 801397a:	f1a4 0904 	sub.w	r9, r4, #4
 801397e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013982:	f8cd b008 	str.w	fp, [sp, #8]
 8013986:	464c      	mov	r4, r9
 8013988:	461d      	mov	r5, r3
 801398a:	9903      	ldr	r1, [sp, #12]
 801398c:	e7d7      	b.n	801393e <__hexnan+0x2e>
 801398e:	2a29      	cmp	r2, #41	; 0x29
 8013990:	d155      	bne.n	8013a3e <__hexnan+0x12e>
 8013992:	3102      	adds	r1, #2
 8013994:	f8ca 1000 	str.w	r1, [sl]
 8013998:	f1bb 0f00 	cmp.w	fp, #0
 801399c:	d04f      	beq.n	8013a3e <__hexnan+0x12e>
 801399e:	454c      	cmp	r4, r9
 80139a0:	d206      	bcs.n	80139b0 <__hexnan+0xa0>
 80139a2:	2d07      	cmp	r5, #7
 80139a4:	dc04      	bgt.n	80139b0 <__hexnan+0xa0>
 80139a6:	462a      	mov	r2, r5
 80139a8:	4649      	mov	r1, r9
 80139aa:	4620      	mov	r0, r4
 80139ac:	f7ff ff8a 	bl	80138c4 <L_shift>
 80139b0:	4544      	cmp	r4, r8
 80139b2:	d934      	bls.n	8013a1e <__hexnan+0x10e>
 80139b4:	f1a8 0204 	sub.w	r2, r8, #4
 80139b8:	4623      	mov	r3, r4
 80139ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80139be:	f842 1f04 	str.w	r1, [r2, #4]!
 80139c2:	429f      	cmp	r7, r3
 80139c4:	d2f9      	bcs.n	80139ba <__hexnan+0xaa>
 80139c6:	1b3b      	subs	r3, r7, r4
 80139c8:	f023 0303 	bic.w	r3, r3, #3
 80139cc:	3304      	adds	r3, #4
 80139ce:	3e03      	subs	r6, #3
 80139d0:	3401      	adds	r4, #1
 80139d2:	42a6      	cmp	r6, r4
 80139d4:	bf38      	it	cc
 80139d6:	2304      	movcc	r3, #4
 80139d8:	4443      	add	r3, r8
 80139da:	2200      	movs	r2, #0
 80139dc:	f843 2b04 	str.w	r2, [r3], #4
 80139e0:	429f      	cmp	r7, r3
 80139e2:	d2fb      	bcs.n	80139dc <__hexnan+0xcc>
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	b91b      	cbnz	r3, 80139f0 <__hexnan+0xe0>
 80139e8:	4547      	cmp	r7, r8
 80139ea:	d126      	bne.n	8013a3a <__hexnan+0x12a>
 80139ec:	2301      	movs	r3, #1
 80139ee:	603b      	str	r3, [r7, #0]
 80139f0:	2005      	movs	r0, #5
 80139f2:	e025      	b.n	8013a40 <__hexnan+0x130>
 80139f4:	3501      	adds	r5, #1
 80139f6:	2d08      	cmp	r5, #8
 80139f8:	f10b 0b01 	add.w	fp, fp, #1
 80139fc:	dd06      	ble.n	8013a0c <__hexnan+0xfc>
 80139fe:	4544      	cmp	r4, r8
 8013a00:	d9c3      	bls.n	801398a <__hexnan+0x7a>
 8013a02:	2300      	movs	r3, #0
 8013a04:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a08:	2501      	movs	r5, #1
 8013a0a:	3c04      	subs	r4, #4
 8013a0c:	6822      	ldr	r2, [r4, #0]
 8013a0e:	f000 000f 	and.w	r0, r0, #15
 8013a12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013a16:	6020      	str	r0, [r4, #0]
 8013a18:	e7b7      	b.n	801398a <__hexnan+0x7a>
 8013a1a:	2508      	movs	r5, #8
 8013a1c:	e7b5      	b.n	801398a <__hexnan+0x7a>
 8013a1e:	9b01      	ldr	r3, [sp, #4]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d0df      	beq.n	80139e4 <__hexnan+0xd4>
 8013a24:	f1c3 0320 	rsb	r3, r3, #32
 8013a28:	f04f 32ff 	mov.w	r2, #4294967295
 8013a2c:	40da      	lsrs	r2, r3
 8013a2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013a32:	4013      	ands	r3, r2
 8013a34:	f846 3c04 	str.w	r3, [r6, #-4]
 8013a38:	e7d4      	b.n	80139e4 <__hexnan+0xd4>
 8013a3a:	3f04      	subs	r7, #4
 8013a3c:	e7d2      	b.n	80139e4 <__hexnan+0xd4>
 8013a3e:	2004      	movs	r0, #4
 8013a40:	b007      	add	sp, #28
 8013a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a46 <__ascii_mbtowc>:
 8013a46:	b082      	sub	sp, #8
 8013a48:	b901      	cbnz	r1, 8013a4c <__ascii_mbtowc+0x6>
 8013a4a:	a901      	add	r1, sp, #4
 8013a4c:	b142      	cbz	r2, 8013a60 <__ascii_mbtowc+0x1a>
 8013a4e:	b14b      	cbz	r3, 8013a64 <__ascii_mbtowc+0x1e>
 8013a50:	7813      	ldrb	r3, [r2, #0]
 8013a52:	600b      	str	r3, [r1, #0]
 8013a54:	7812      	ldrb	r2, [r2, #0]
 8013a56:	1e10      	subs	r0, r2, #0
 8013a58:	bf18      	it	ne
 8013a5a:	2001      	movne	r0, #1
 8013a5c:	b002      	add	sp, #8
 8013a5e:	4770      	bx	lr
 8013a60:	4610      	mov	r0, r2
 8013a62:	e7fb      	b.n	8013a5c <__ascii_mbtowc+0x16>
 8013a64:	f06f 0001 	mvn.w	r0, #1
 8013a68:	e7f8      	b.n	8013a5c <__ascii_mbtowc+0x16>

08013a6a <_realloc_r>:
 8013a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a6e:	4680      	mov	r8, r0
 8013a70:	4614      	mov	r4, r2
 8013a72:	460e      	mov	r6, r1
 8013a74:	b921      	cbnz	r1, 8013a80 <_realloc_r+0x16>
 8013a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a7a:	4611      	mov	r1, r2
 8013a7c:	f7fd bc6a 	b.w	8011354 <_malloc_r>
 8013a80:	b92a      	cbnz	r2, 8013a8e <_realloc_r+0x24>
 8013a82:	f7fd fbf3 	bl	801126c <_free_r>
 8013a86:	4625      	mov	r5, r4
 8013a88:	4628      	mov	r0, r5
 8013a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a8e:	f000 f8f1 	bl	8013c74 <_malloc_usable_size_r>
 8013a92:	4284      	cmp	r4, r0
 8013a94:	4607      	mov	r7, r0
 8013a96:	d802      	bhi.n	8013a9e <_realloc_r+0x34>
 8013a98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013a9c:	d812      	bhi.n	8013ac4 <_realloc_r+0x5a>
 8013a9e:	4621      	mov	r1, r4
 8013aa0:	4640      	mov	r0, r8
 8013aa2:	f7fd fc57 	bl	8011354 <_malloc_r>
 8013aa6:	4605      	mov	r5, r0
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	d0ed      	beq.n	8013a88 <_realloc_r+0x1e>
 8013aac:	42bc      	cmp	r4, r7
 8013aae:	4622      	mov	r2, r4
 8013ab0:	4631      	mov	r1, r6
 8013ab2:	bf28      	it	cs
 8013ab4:	463a      	movcs	r2, r7
 8013ab6:	f7fc fd2b 	bl	8010510 <memcpy>
 8013aba:	4631      	mov	r1, r6
 8013abc:	4640      	mov	r0, r8
 8013abe:	f7fd fbd5 	bl	801126c <_free_r>
 8013ac2:	e7e1      	b.n	8013a88 <_realloc_r+0x1e>
 8013ac4:	4635      	mov	r5, r6
 8013ac6:	e7df      	b.n	8013a88 <_realloc_r+0x1e>

08013ac8 <__ascii_wctomb>:
 8013ac8:	b149      	cbz	r1, 8013ade <__ascii_wctomb+0x16>
 8013aca:	2aff      	cmp	r2, #255	; 0xff
 8013acc:	bf85      	ittet	hi
 8013ace:	238a      	movhi	r3, #138	; 0x8a
 8013ad0:	6003      	strhi	r3, [r0, #0]
 8013ad2:	700a      	strbls	r2, [r1, #0]
 8013ad4:	f04f 30ff 	movhi.w	r0, #4294967295
 8013ad8:	bf98      	it	ls
 8013ada:	2001      	movls	r0, #1
 8013adc:	4770      	bx	lr
 8013ade:	4608      	mov	r0, r1
 8013ae0:	4770      	bx	lr

08013ae2 <__swhatbuf_r>:
 8013ae2:	b570      	push	{r4, r5, r6, lr}
 8013ae4:	460c      	mov	r4, r1
 8013ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aea:	2900      	cmp	r1, #0
 8013aec:	b096      	sub	sp, #88	; 0x58
 8013aee:	4615      	mov	r5, r2
 8013af0:	461e      	mov	r6, r3
 8013af2:	da0d      	bge.n	8013b10 <__swhatbuf_r+0x2e>
 8013af4:	89a3      	ldrh	r3, [r4, #12]
 8013af6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013afa:	f04f 0100 	mov.w	r1, #0
 8013afe:	bf0c      	ite	eq
 8013b00:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013b04:	2340      	movne	r3, #64	; 0x40
 8013b06:	2000      	movs	r0, #0
 8013b08:	6031      	str	r1, [r6, #0]
 8013b0a:	602b      	str	r3, [r5, #0]
 8013b0c:	b016      	add	sp, #88	; 0x58
 8013b0e:	bd70      	pop	{r4, r5, r6, pc}
 8013b10:	466a      	mov	r2, sp
 8013b12:	f000 f879 	bl	8013c08 <_fstat_r>
 8013b16:	2800      	cmp	r0, #0
 8013b18:	dbec      	blt.n	8013af4 <__swhatbuf_r+0x12>
 8013b1a:	9901      	ldr	r1, [sp, #4]
 8013b1c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013b20:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013b24:	4259      	negs	r1, r3
 8013b26:	4159      	adcs	r1, r3
 8013b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b2c:	e7eb      	b.n	8013b06 <__swhatbuf_r+0x24>

08013b2e <__smakebuf_r>:
 8013b2e:	898b      	ldrh	r3, [r1, #12]
 8013b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b32:	079d      	lsls	r5, r3, #30
 8013b34:	4606      	mov	r6, r0
 8013b36:	460c      	mov	r4, r1
 8013b38:	d507      	bpl.n	8013b4a <__smakebuf_r+0x1c>
 8013b3a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b3e:	6023      	str	r3, [r4, #0]
 8013b40:	6123      	str	r3, [r4, #16]
 8013b42:	2301      	movs	r3, #1
 8013b44:	6163      	str	r3, [r4, #20]
 8013b46:	b002      	add	sp, #8
 8013b48:	bd70      	pop	{r4, r5, r6, pc}
 8013b4a:	ab01      	add	r3, sp, #4
 8013b4c:	466a      	mov	r2, sp
 8013b4e:	f7ff ffc8 	bl	8013ae2 <__swhatbuf_r>
 8013b52:	9900      	ldr	r1, [sp, #0]
 8013b54:	4605      	mov	r5, r0
 8013b56:	4630      	mov	r0, r6
 8013b58:	f7fd fbfc 	bl	8011354 <_malloc_r>
 8013b5c:	b948      	cbnz	r0, 8013b72 <__smakebuf_r+0x44>
 8013b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b62:	059a      	lsls	r2, r3, #22
 8013b64:	d4ef      	bmi.n	8013b46 <__smakebuf_r+0x18>
 8013b66:	f023 0303 	bic.w	r3, r3, #3
 8013b6a:	f043 0302 	orr.w	r3, r3, #2
 8013b6e:	81a3      	strh	r3, [r4, #12]
 8013b70:	e7e3      	b.n	8013b3a <__smakebuf_r+0xc>
 8013b72:	89a3      	ldrh	r3, [r4, #12]
 8013b74:	6020      	str	r0, [r4, #0]
 8013b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b7a:	81a3      	strh	r3, [r4, #12]
 8013b7c:	9b00      	ldr	r3, [sp, #0]
 8013b7e:	6163      	str	r3, [r4, #20]
 8013b80:	9b01      	ldr	r3, [sp, #4]
 8013b82:	6120      	str	r0, [r4, #16]
 8013b84:	b15b      	cbz	r3, 8013b9e <__smakebuf_r+0x70>
 8013b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b8a:	4630      	mov	r0, r6
 8013b8c:	f000 f84e 	bl	8013c2c <_isatty_r>
 8013b90:	b128      	cbz	r0, 8013b9e <__smakebuf_r+0x70>
 8013b92:	89a3      	ldrh	r3, [r4, #12]
 8013b94:	f023 0303 	bic.w	r3, r3, #3
 8013b98:	f043 0301 	orr.w	r3, r3, #1
 8013b9c:	81a3      	strh	r3, [r4, #12]
 8013b9e:	89a3      	ldrh	r3, [r4, #12]
 8013ba0:	431d      	orrs	r5, r3
 8013ba2:	81a5      	strh	r5, [r4, #12]
 8013ba4:	e7cf      	b.n	8013b46 <__smakebuf_r+0x18>

08013ba6 <_raise_r>:
 8013ba6:	291f      	cmp	r1, #31
 8013ba8:	b538      	push	{r3, r4, r5, lr}
 8013baa:	4604      	mov	r4, r0
 8013bac:	460d      	mov	r5, r1
 8013bae:	d904      	bls.n	8013bba <_raise_r+0x14>
 8013bb0:	2316      	movs	r3, #22
 8013bb2:	6003      	str	r3, [r0, #0]
 8013bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb8:	bd38      	pop	{r3, r4, r5, pc}
 8013bba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013bbc:	b112      	cbz	r2, 8013bc4 <_raise_r+0x1e>
 8013bbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013bc2:	b94b      	cbnz	r3, 8013bd8 <_raise_r+0x32>
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	f000 f853 	bl	8013c70 <_getpid_r>
 8013bca:	462a      	mov	r2, r5
 8013bcc:	4601      	mov	r1, r0
 8013bce:	4620      	mov	r0, r4
 8013bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bd4:	f000 b83a 	b.w	8013c4c <_kill_r>
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d00a      	beq.n	8013bf2 <_raise_r+0x4c>
 8013bdc:	1c59      	adds	r1, r3, #1
 8013bde:	d103      	bne.n	8013be8 <_raise_r+0x42>
 8013be0:	2316      	movs	r3, #22
 8013be2:	6003      	str	r3, [r0, #0]
 8013be4:	2001      	movs	r0, #1
 8013be6:	e7e7      	b.n	8013bb8 <_raise_r+0x12>
 8013be8:	2400      	movs	r4, #0
 8013bea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013bee:	4628      	mov	r0, r5
 8013bf0:	4798      	blx	r3
 8013bf2:	2000      	movs	r0, #0
 8013bf4:	e7e0      	b.n	8013bb8 <_raise_r+0x12>
	...

08013bf8 <raise>:
 8013bf8:	4b02      	ldr	r3, [pc, #8]	; (8013c04 <raise+0xc>)
 8013bfa:	4601      	mov	r1, r0
 8013bfc:	6818      	ldr	r0, [r3, #0]
 8013bfe:	f7ff bfd2 	b.w	8013ba6 <_raise_r>
 8013c02:	bf00      	nop
 8013c04:	20000288 	.word	0x20000288

08013c08 <_fstat_r>:
 8013c08:	b538      	push	{r3, r4, r5, lr}
 8013c0a:	4d07      	ldr	r5, [pc, #28]	; (8013c28 <_fstat_r+0x20>)
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	4604      	mov	r4, r0
 8013c10:	4608      	mov	r0, r1
 8013c12:	4611      	mov	r1, r2
 8013c14:	602b      	str	r3, [r5, #0]
 8013c16:	f7ed fd32 	bl	800167e <_fstat>
 8013c1a:	1c43      	adds	r3, r0, #1
 8013c1c:	d102      	bne.n	8013c24 <_fstat_r+0x1c>
 8013c1e:	682b      	ldr	r3, [r5, #0]
 8013c20:	b103      	cbz	r3, 8013c24 <_fstat_r+0x1c>
 8013c22:	6023      	str	r3, [r4, #0]
 8013c24:	bd38      	pop	{r3, r4, r5, pc}
 8013c26:	bf00      	nop
 8013c28:	20002388 	.word	0x20002388

08013c2c <_isatty_r>:
 8013c2c:	b538      	push	{r3, r4, r5, lr}
 8013c2e:	4d06      	ldr	r5, [pc, #24]	; (8013c48 <_isatty_r+0x1c>)
 8013c30:	2300      	movs	r3, #0
 8013c32:	4604      	mov	r4, r0
 8013c34:	4608      	mov	r0, r1
 8013c36:	602b      	str	r3, [r5, #0]
 8013c38:	f7ed fd31 	bl	800169e <_isatty>
 8013c3c:	1c43      	adds	r3, r0, #1
 8013c3e:	d102      	bne.n	8013c46 <_isatty_r+0x1a>
 8013c40:	682b      	ldr	r3, [r5, #0]
 8013c42:	b103      	cbz	r3, 8013c46 <_isatty_r+0x1a>
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	bd38      	pop	{r3, r4, r5, pc}
 8013c48:	20002388 	.word	0x20002388

08013c4c <_kill_r>:
 8013c4c:	b538      	push	{r3, r4, r5, lr}
 8013c4e:	4d07      	ldr	r5, [pc, #28]	; (8013c6c <_kill_r+0x20>)
 8013c50:	2300      	movs	r3, #0
 8013c52:	4604      	mov	r4, r0
 8013c54:	4608      	mov	r0, r1
 8013c56:	4611      	mov	r1, r2
 8013c58:	602b      	str	r3, [r5, #0]
 8013c5a:	f7ed fcb1 	bl	80015c0 <_kill>
 8013c5e:	1c43      	adds	r3, r0, #1
 8013c60:	d102      	bne.n	8013c68 <_kill_r+0x1c>
 8013c62:	682b      	ldr	r3, [r5, #0]
 8013c64:	b103      	cbz	r3, 8013c68 <_kill_r+0x1c>
 8013c66:	6023      	str	r3, [r4, #0]
 8013c68:	bd38      	pop	{r3, r4, r5, pc}
 8013c6a:	bf00      	nop
 8013c6c:	20002388 	.word	0x20002388

08013c70 <_getpid_r>:
 8013c70:	f7ed bc9e 	b.w	80015b0 <_getpid>

08013c74 <_malloc_usable_size_r>:
 8013c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c78:	1f18      	subs	r0, r3, #4
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	bfbc      	itt	lt
 8013c7e:	580b      	ldrlt	r3, [r1, r0]
 8013c80:	18c0      	addlt	r0, r0, r3
 8013c82:	4770      	bx	lr

08013c84 <_init>:
 8013c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c86:	bf00      	nop
 8013c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c8a:	bc08      	pop	{r3}
 8013c8c:	469e      	mov	lr, r3
 8013c8e:	4770      	bx	lr

08013c90 <_fini>:
 8013c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c92:	bf00      	nop
 8013c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c96:	bc08      	pop	{r3}
 8013c98:	469e      	mov	lr, r3
 8013c9a:	4770      	bx	lr
